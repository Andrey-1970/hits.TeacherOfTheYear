@page "/assessment/application/{Id}"
@using ServerApp.Data.Models.ReviewModel

@inject IDataService data
@inject NavigationManager nav

<PageTitle>Оценка заявки</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Оценка заявки
        </div>
    </div>
    @if (model is not null)
    {
        <div class="block-content">
            @if (model.SelectedTrackId != Guid.Empty && model.MarkBlocks is not null && model.MarkBlocks.Any() && model.SelectedMarkBlockId != Guid.Empty)
            {
                <div class="form-text">Выбранный трек: @model.SelectedTrackId</div>
                <div class="block-content-text">
                    <TabsForMarkBlocks MarkBlocks="model.MarkBlocks" SelectedMarkBlockId="model.SelectedMarkBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForMarkBlocks>
                </div>
                @if (model.MarkBlocks.SingleOrDefault(e => e.Id == model.SelectedMarkBlockId)?.Id != ResultBlock.Id)
                {
                    @if (model.Fields is not null && model.Fields.Any())
                    {
                        @foreach (var fld in model.Fields)
                        {
                            @if (!string.IsNullOrEmpty(fld.EditGroup))
                            {
                                <div class="block-subtitle-text">@fld.EditGroup</div>
                            }
                            <div class="row block-content-text border border-primary rounded m-0 mb-2">
                                <div class="col border-end border-primary p-2">@fld.Name</div>
                                <div class="col p-2">@fld.Value</div>
                            </div>
                        }
                    }
                    @if (model.Tables is not null && model.Tables.Any())
                    {
                        @foreach (var table in model.Tables)
                        {
                            <div class="table-container mb-2">
                                <div class="block-subtitle-text">@table.Name</div>
                                @if (table.Rows is not null && table.Rows.Any())
                                {
                                    <table class="table-stand">
                                        <thead>
                                            <tr>
                                                @foreach (var column in table.Columns)
                                                {
                                                    <th>@column.Name</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>

                                        @foreach (var row in table.Rows)
                                            {
                                                <tr>
                                                    @foreach (var cell in row.Cells)
                                                    {
                                                        <td>@cell.Value</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center w-100">
                                        <div class="text-danger">Информация отсутствует</div>
                                    </div>
                                }
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="table-container mb-2">
                        <div class="block-subtitle-text">Итоги оценки</div>
                        <table class="table-stand">
                            <thead>
                                <tr>
                                    <th>Блок</th>
                                    <th>Сумма баллов</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var block in model.MarkBlocks)
                                {
                                    if (block.Id != ResultBlock.Id)
                                    {
                                        <tr>
                                            <td>@block.Name</td>
                                            <td></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center">
                        <Button Type="ButtonType.Button"
                                Color="ButtonColor.Success"
                                @onclick="async () =>  await Assessment()">
                            Оценить
                        </Button>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    ReviewMarkModel? model;
    MarkBlockModel ResultBlock = new MarkBlockModel() { Id = Guid.NewGuid(), Name = "Итог" };

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || !Guid.TryParse(Id, out Guid userId))
        {
            return;
        }
        model = await data.GetUserMarkModelAsync(userId);
        if (model?.SelectedTrackId != null)
        {
            model.MarkBlocks = await data.GetMarkBlockModelsAsync(model.SelectedTrackId);
            var newMarkBlocks = model.MarkBlocks.ToList();
            newMarkBlocks.Add(ResultBlock);
            model.MarkBlocks = newMarkBlocks.ToArray();
            await OnBlockIdChanged(model.MarkBlocks.FirstOrDefault()?.Id);
        }
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null || !blockId.HasValue || blockId.Value == Guid.Empty) return;

        model.SelectedMarkBlockId = blockId.Value;
        
        if (blockId == ResultBlock.Id) return;
        model.Fields = await data.GetFieldModelsForMarkBlockAsync(blockId, model.ApplicationId);
        model.Tables = await data.GetTableModelsForMarkBlockAsync(blockId, model.ApplicationId);
    }

    async Task Assessment()
    {
        await Task.Delay(500);
        nav.NavigateTo("/assessment#");
    }
}