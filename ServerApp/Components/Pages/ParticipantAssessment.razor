@page "/assessment/application/{Id}"
@using ServerApp.Data.Models.ReviewModel

@inject IDataService data
@inject ToastService toastService

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Оценка заявки
        </div>
    </div>
    @if (model is not null)
    {
        <div class="block-content-text">
            <TabsForMarkBlocks MarkBlocks="model.MarkBlocks" SelectedMarkBlockId="model.SelectedMarkBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForMarkBlocks>
        </div>
        <div class="block-content">
            @if (model.Fields is not null && model.Fields.Any())
            {
                @foreach (var fld in model.Fields)
                {
                    @if (!string.IsNullOrEmpty(fld.EditGroup))
                    {
                        <div class="block-subtitle-text">@fld.EditGroup</div>
                    }
                    <div class="form-text"><strong>@fld.Name:</strong> <span style="opacity: 0.7;">@fld.Value</span></div>
                }
            }
        </div>
        @if (model.Tables is not null && model.Tables.Any())
        {
            @foreach (var table in model.Tables)
            {
                <div class="block-content">
                    <div class="block-subtitle-text">@table.Name</div>
                    @if (table.Rows is not null && table.Rows.Any())
                    {
                        <div class="table-container">
                            <table class="table-stand">
                                <thead>
                                    <tr>
                                        @foreach (var column in table.Columns)
                                        {
                                            <th>@column.Name</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var row in table.Rows)
                                    {
                                        <tr>
                                            @foreach (var cell in row.Cells)
                                            {
                                                <td>@cell.Value</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-danger">Информация отсутствует</div>
                    }
                </div>
            }
        }
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    MarkModel? model;
    bool BlockStatus;
    string? Comment;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || !Guid.TryParse(Id, out Guid userId))
        {
            return;
        }
        model = await data.GetUserMarkModelAsync(userId);
        if (model?.SelectedTrackId != null)
        {
            model.MarkBlocks = await data.GetMarkBlockModelsAsync(model.SelectedTrackId);
            await OnBlockIdChanged(model.MarkBlocks.FirstOrDefault()?.Id);
            BlockStatus = model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)?.ReviewStatus ?? false;
            Comment = model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)?.Commentary ?? string.Empty;
        }
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null || !blockId.HasValue || blockId.Value == Guid.Empty) return;

        model.SelectedMarkBlockId = blockId.Value;
        model.Fields = await data.GetFieldModelsForEditBlockAsync(blockId);
        model.Tables = await data.GetTableModelsForEditBlockAsync(blockId);
    }
}
