@inject IJSRuntime JSRuntime

<div class="modal" tabindex="-1" style="display:@(IsVisible ? "block" : "none")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактор фотографии</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <div id="photo-editor-container" style="position: relative; overflow-x:auto; height: 500px;">
                    <img id="uploaded-image" src="@imageDataUrl" alt="Загруженное изображение" style="display: none; object-position: center;" />
                    <div id="crop-overlay"></div>
                    <div id="crop-rectangle"></div>
                    <div id="loading-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255,255,255,0.8); display: none; justify-content: center; align-items: center;">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Загрузка...</span>
                        </div>
                    </div>
                </div>
                <InputFile OnChange="OnInputFileChange" class="form-control mb-3"/>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
                <button class="btn btn-primary" @onclick="SaveCropCoordinates">Сохранить</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<(string, CropCoordinates)> OnSave { get; set; }
    [Parameter] public string? imageDataUrl { get; set; }
    [Parameter] public CropCoordinates? SavedCoordinates { get; set; }

    bool IsNewPhoto = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initPhotoEditor");
        }
        
        if (!string.IsNullOrEmpty(imageDataUrl) && !IsNewPhoto)
        {
            await JSRuntime.InvokeVoidAsync("loadImage", imageDataUrl, SavedCoordinates);
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        IsNewPhoto = true;
        var file = e.File;
        if (file != null)
        {
            const int maxAllowedSize = 104857600; // 100 MB

            if (file.Size > maxAllowedSize)
            {
                Console.WriteLine("File size exceeds the maximum allowed size.");
                return;
            }

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(memoryStream);

            var buffer = memoryStream.ToArray();
            
            if (buffer.Length == file.Size)
            {
                imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("loadImage", imageDataUrl, null);
            }
            else
            {
                Console.WriteLine("The buffer length does not match the expected file size. The file might not have been fully read.");
            }
        }
    }

    private async Task SaveCropCoordinates()
    {
        var coordinates = await JSRuntime.InvokeAsync<CropCoordinates>("getCropCoordinates");
        Console.WriteLine($"X: {coordinates.X}, Y: {coordinates.Y}, Width: {coordinates.Width}, Height: {coordinates.Height}");
        await OnSave.InvokeAsync((imageDataUrl, coordinates)!);
        IsNewPhoto = false;
        await CloseModal();
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    public class CropCoordinates
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}