@page "/statuses/{StatusId}/applications/{ApplicationId}"

@attribute [Authorize(Roles = "Admin, Organiser")]

@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Просмотр анкеты</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="title-direction">
            <div class="block-title-text">
                Просмотр анкеты
            </div>
            <div class="text-direction">
                <Icon Name="IconName.ArrowLeft" Size="IconSize.x2" @onclick="async () => await Back()" type="button" />
            </div>
        </div>
    </div>
    @if (model is not null)
    {
        <div class="block-content">
            @if (model.TrackId != Guid.Empty && model.MarkBlocks is not null && model.MarkBlocks.Any() && model.SelectedMarkBlockId != Guid.Empty)
            {
                <div class="row w-100">
                    <div class="col-auto">
                        <div style="height: 320px; width: 240px; background-color: darkgrey; border-radius: 10px; border: 2px solid darkslategrey; overflow: hidden">
                            @if (cropPhoto is not null)
                            {
                                <img src="@cropPhoto" style="height: 100%; width: 100%;" />
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center" style="height: 100%; width: 100%;">
                                    <Icon Name="IconName.CameraFill" Color="IconColor.Secondary" Size="IconSize.x1"></Icon>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="d-flex flex-column block-content-text col gap-2">
                        <div class="form-text">Выбранный трек: @trackName</div>
                    </div>
                </div>
                <div class="block-content-text">
                    <TabsForMarkBlocks MarkBlocks="model.MarkBlocks" SelectedMarkBlockId="model.SelectedMarkBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForMarkBlocks>
                </div>
                @if (model.Fields is not null && model.Fields.Any())
                {
                    @foreach (var fld in model.Fields)
                    {
                        @if (!string.IsNullOrEmpty(fld.EditGroup))
                        {
                            <div class="block-subtitle-text">@fld.EditGroup</div>
                        }
                        <div class="row block-content-text border border-primary rounded m-0 mb-2">
                            <div class="col border-end border-primary p-2">@fld.Name</div>
                            @if (fld.Value is not null)
                            {
                                <div class="col p-2">@fld.Value</div>
                            }
                            else
                            {
                                <div class="col p-2 text-danger">Информация отсутствует</div>
                            }
                        </div>
                    }
                }
                @if (model.Tables is not null && model.Tables.Any())
                {
                    @foreach (var table in model.Tables)
                    {
                        <div class="table-container mb-2">
                            <div class="block-subtitle-text">@table.Name</div>
                            @if (table.Rows is not null && table.Rows.Any())
                            {
                                <table class="table-stand">
                                    <thead>
                                        <tr>
                                            @foreach (var column in table.Columns)
                                            {
                                                <th>@column.Name</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var row in table.Rows)
                                        {
                                            <tr>
                                                @foreach (var cell in row.Cells)
                                                {
                                                    <td>@cell.Value</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center w-100">
                                    <div class="text-danger">Информация отсутствует</div>
                                </div>
                            }
                        </div>
                    }
                }
            }
            else
            {
                <div class="row w-100">
                    <div class="col-auto">
                        <div style="height: 320px; width: 240px; background-color: darkgrey; border-radius: 10px; border: 2px solid darkslategrey; overflow: hidden">
                            @if (cropPhoto is not null)
                            {
                                <img src="@cropPhoto" style="height: 100%; width: 100%;" />
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center" style="height: 100%; width: 100%;">
                                    <Icon Name="IconName.CameraFill" Color="IconColor.Secondary" Size="IconSize.x1"></Icon>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center w-100">
                    <div class="text-danger">Информация отсутствует</div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    [Parameter] public string? StatusId { get; set; }
    [Parameter] public string? ApplicationId { get; set; }

    ApplicationFormInspectionModel? model;
    string? trackName;
    string? cropPhoto;

    protected override async Task OnInitializedAsync()
    {
        if (ApplicationId == null || !Guid.TryParse(ApplicationId, out Guid appId))
        {
            return;
        }

        model = await data.GetApplicationFormInspectionModel(appId, null);

        if (model is not null && model.TrackId != null)
        {
            try
            {
                cropPhoto = await data.GetCropPhotoAsync(model.Id);
            }
            catch (Exception e)
            {
                cropPhoto = null;
            }

            var track = await data.GetTrackAsync(model.TrackId);
            trackName = track.Name;
        }
        else if (model is not null)
        {
            cropPhoto = await data.GetCropPhotoUserAsync(appId);
        }
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (ApplicationId == null || !Guid.TryParse(ApplicationId, out Guid appId))
        {
            return;
        }

        model = await data.GetApplicationFormInspectionModel(appId, (Guid)blockId);
    }

    async Task Back()
    {
        await Task.Run(() => navigate.NavigateTo($"/statuses/{StatusId}/applications#"));
    }
}