@page "/application-form"

@attribute [Authorize]

@inject IDataService data
@inject IJSRuntime jsRuntime
@inject NavigationManager navigate
@inject ToastService toastService

<PageTitle>Заполнение заявки</PageTitle>

@if (model is not null)
{
    @if (model.ApplicationStatus == null || model.ApplicationStatus == "В ожидании заполнения" || model.ApplicationStatus == "Отклонена")
    {
        <div class="block">
            <div class="d-flex flex-row justify-content-between block-title">
                <div class="block-title-text">
                    Заполните заявку для участия
                </div>

                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Primary"
                        @onclick="async () => await photoEditor.modal.ShowAsync()">
                    Загрузить фото
                </Button>

                @if (photoData is not null)
                {
                    <PhotoEditorModal @ref="photoEditor"
                                      OnSave="async (value) => await HandlePhotoSaveAsync(value)"
                                      imageDataUrl="@photoData.ImageUrl"
                                      SavedCoordinates="@photoData.Coordinates" />
                }

                <Button Type="ButtonType.Button"
                        Color="ButtonColor.Success"
                        Disabled="model.EditBlocks.Any(e => e.Status == false) || model.SelectedTrackId == Guid.Empty || model.SelectedCategoryId == null || string.IsNullOrWhiteSpace(photoData.ImageUrl)"
                        @onclick="async () => await ShowConfirmationAsync()">
                    Отправить заявку
                </Button>
            </div>
            <div class="block-content">
                @if (model.ApplicationStatus == "Отклонена" && model.Comments.Any())
                {
                    <div class="alert alert-danger w-100 m-0" role="alert">
                        <p>
                            Комментарии от проверяющего эксперта:
                        </p>
                        <ul class="m-0">
                            @foreach (var comment in model.Comments)
                            {
                                <li>@comment</li>
                            }
                        </ul>
                    </div>
                }
                <InputSelect class="form-control" Value="model.SelectedTrackId" TValue="Guid?"
                             ValueExpression="() => model.SelectedTrackId"
                             ValueChanged="async (trackId) => await OnTrackIdChangedAsync(trackId)">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите направление деятельности</option>
                    @foreach (var track in model.Tracks)
                    {
                        <option value="@track!.Id">@track.Name</option>
                    }
                </InputSelect>
                <InputSelect class="form-control" Value="model.SelectedCategoryId" TValue="Guid?"
                             ValueExpression="() => model.SelectedCategoryId"
                             ValueChanged="(categoryId) => model.SelectedCategoryId = categoryId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите научное направление конкурса</option>
                    @foreach (var category in model.Categories)
                    {
                        <option value="@category!.Id">@category.Name</option>
                    }
                </InputSelect>
                @if (model.SelectedTrackId != Guid.Empty)
                {
                    <div class="block-content-text">
                        <TabsForEditBlocks EditBlocks="model.EditBlocks" SelectedEditBlockId="model.SelectedEditBlockId"
                                           OnBlockChanged="async (blockId) => await OnBlockIdChangedAsync(blockId)">
                        </TabsForEditBlocks>
                    </div>
                    @if ((model.Fields is not null && model.Fields.Any()) || (model.Tables is not null && model.Tables.Any()))
                    {
                        <EditForm EditContext="editContext" OnValidSubmit="async () => await Submit()" class="block-content-text">
                            @if (model.Fields is not null && model.Fields.Any())
                            {
                                @foreach (var fld in model.Fields)
                                {
                                    @if (!string.IsNullOrEmpty(fld.EditGroup))
                                    {
                                        <div class="block-subtitle-text">@fld.EditGroup</div>
                                    }

                                    <div class="form-text">
                                        @fld.Name <span class="text-danger">*</span>
                                    </div>
                                    <div class="form-input w-100 mb-2">
                                        <ValidationMessage For="() => fld.Value"/>
                                        @if (fld.SelectValues is not null && fld.SelectValues.Any())
                                        {
                                            <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;"
                                                         @bind-Value="fld.Value">
                                                <option value="@string.Empty" disabled selected hidden>@fld.Placeholder</option>
                                                @foreach (var value in fld.SelectValues)
                                                {
                                                    <option value="@value">@value</option>
                                                }
                                            </InputSelect>
                                        }
                                        else if (fld.ValueType == "TextArea")
                                        {
                                            <InputTextArea class="form-control" @bind-Value="fld.Value" Placeholder="@fld.Placeholder"/>
                                        }
                                        else
                                        {
                                            <InputText class="form-control" @bind-Value="fld.Value" Placeholder="@fld.Placeholder"/>
                                        }
                                    </div>
                                }
                            }
                            @if (model.Tables.Any())
                            {
                                @foreach (var table in model.Tables)
                                {
                                    <div class="table-container mb-2">
                                        <div class="block-subtitle-text">@table.Name</div>
                                        @if (table.Rows.Any())
                                        {
                                            <table class="table-stand">
                                                <thead>
                                                <tr>
                                                    @foreach (var column in table.Columns)
                                                    {
                                                        <th>@column.Name</th>
                                                    }
                                                    @if (!table.IsPrefilled)
                                                    {
                                                        <th></th>
                                                    }
                                                </tr>
                                                </thead>
                                                <tbody>
                                                @foreach (var row in table.Rows)
                                                {
                                                    <tr>
                                                        @foreach (var cell in row.Cells)
                                                        {
                                                            <td>
                                                                @if (cell is { Disable: true, Value: not null })
                                                                {
                                                                    @cell.Value
                                                                }
                                                                else if (cell.SelectValues.Any())
                                                                {
                                                                    <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;"
                                                                                 @bind-Value="cell.Value">
                                                                        <option value="@string.Empty" disabled selected hidden></option>
                                                                        @foreach (var value in cell.SelectValues)
                                                                        {
                                                                            <option value="@value">@value</option>
                                                                        }
                                                                    </InputSelect>
                                                                }
                                                                else if (cell.ValueType == "TextArea")
                                                                {
                                                                    <InputTextArea class="form-control" style="font-size: 14px; min-width: 800px"
                                                                                   @bind-Value="cell.Value"/>
                                                                }
                                                                else
                                                                {
                                                                    <InputText Disabled="@cell.Disable" class="form-control" @bind-Value="cell.Value"/>
                                                                }
                                                            </td>
                                                        }
                                                        @if (!table.IsPrefilled)
                                                        {
                                                            <td style="width: 50px;">
                                                                <Icon Color="IconColor.Danger" Name="IconName.XSquareFill" Style="transform: scale(1.5);"
                                                                      @onclick="async () => await DeleteRowAsync(table, row)" type="button"/>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        }
                                        @if (!table.IsPrefilled)
                                        {
                                            <Icon Class="d-flex justify-content-center w-100" Color="IconColor.Primary"
                                                  Name="IconName.PlusCircleFill" Size="IconSize.x2" @onclick="async () => await AddRowAsync(table)"
                                                  type="button"/>
                                        }
                                    </div>
                                }
                            }
                            <ValidationSummary/>
                            <div class="d-flex justify-content-center">
                                <Button Type="ButtonType.Submit"
                                        Color="ButtonColor.Primary">
                                    Сохранить
                                </Button>
                            </div>
                        </EditForm>
                    }
                }
            </div>
        </div>
    }
    else
    {
        <div>
            <div class="d-flex justify-content-center mt-5 mb-3 block-subtitle-text">Анкета недоступна для редактирования</div>
            <div class="d-flex justify-content-center">
                <Button Type="ButtonType.Link"
                        Color="ButtonColor.Primary"
                        To="/account/manage/participation-status#">
                    В личный кабинет
                </Button>
            </div>
        </div>
    }
}
else
{
    <div class="d-flex justify-content-center">
        <Spinner Color="SpinnerColor.Primary"/>
    </div>
}

<ConfirmDialog @ref="dialog"/>

@code {
    EditModel? model;
    EditContext? editContext;
    ValidationMessageStore? messageStore;

    PhotoEditorModal photoEditor = default!;

    private ConfirmDialog? dialog;
    private PhotoData? photoData;

    protected override async Task OnInitializedAsync()
    {
        model = await data.GetCurrentUserEditModelAsync();
        if (model != null)
        {
            model.Tracks = await data.GetTrackModelsAsync();
            model.Categories = await data.GetCategoryModelsAsync();
            await LoadPhotoDataAsync();
            await OnTrackIdChangedAsync(model.SelectedTrackId);
        }
    }

    private async Task LoadPhotoDataAsync()
    {
        photoData = await data.GetCurrentUserPhotoAsync() ?? new PhotoData();
    }

    private async Task HandlePhotoSaveAsync((string imageDataUrl, PhotoEditorModal.CropCoordinates coordinates) saveData)
    {
        await data.SavePhotoAsync(saveData.imageDataUrl, saveData.coordinates);
        await LoadPhotoDataAsync();
        toastService.Notify(new(ToastType.Success, "Фото успешно сохранено"));
    }

    async Task OnTrackIdChangedAsync(Guid? trackId)
    {
        if (model == null || trackId == Guid.Empty) return;

        model.SelectedTrackId = trackId;
        model.EditBlocks = await data.GetEditBlockModelsAsync(trackId);

        if (model.EditBlocks.Any())
        {
            await OnBlockIdChangedAsync(model.EditBlocks.First().Id);
        }
    }

    async Task OnBlockIdChangedAsync(Guid? blockId)
    {
        if (model == null || blockId == Guid.Empty) return;

        model.SelectedEditBlockId = blockId;
        model.Fields = await data.GetFieldModelsForEditBlockAsync(blockId);
        model.Tables = await data.GetTableModelsForEditBlockAsync(blockId);

        InitializeEditContext(model);
    }

    async Task AddRowAsync(TableModel table)
    {
        if (model == null || table == null) return;

        var row = await data.GetRowModelAsync(table.Id);
        var targetTable = model.Tables.FirstOrDefault(e => e == table);
        if (targetTable != null)
        {
            targetTable.Rows.Add(row);
            InitializeEditContext(model);
        }
    }

    async Task DeleteRowAsync(TableModel table, RowModel row)
    {
        if (model == null || table == null || row == null) return;

        var targetTable = model.Tables.FirstOrDefault(e => e == table);
        if (targetTable != null)
        {
            await data.DeleteRowAsync(row.Id);
            targetTable.Rows.Remove(row);
            InitializeEditContext(model);
        }
    }

    void InitializeEditContext(EditModel model)
    {
        editContext = new(model);
        editContext.OnFieldChanged += HandleFieldChanged;
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.Model is FieldModel fld)
        {
            messageStore?.Clear(() => fld.Value!);
            CheckField(fld);
        }
        else if (e.FieldIdentifier.Model is CellModel cell)
        {
            messageStore?.Clear(() => cell.Value!);
            CheckCell(cell);
        }

        editContext?.NotifyValidationStateChanged();
    }

    void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore?.Clear();
        if (model != null)
        {
            foreach (var fld in model.Fields)
            {
                CheckField(fld);
            }

            foreach (var table in model.Tables)
            {
                foreach (var row in table.Rows)
                {
                    foreach (var cell in row.Cells)
                    {
                        CheckCell(cell);
                    }
                }
            }
        }

        editContext?.NotifyValidationStateChanged();
    }

    void CheckField(FieldModel fld)
    {
        if (string.IsNullOrWhiteSpace(fld.Value))
        {
            if (fld.IsRequired)
            {
                messageStore?.Add(() => fld.Value!, $"Поле '{fld.Name}' обязательно для заполнения.");
            }
        }
        else if (fld.ValueType == "int" && !Int64.TryParse(fld.Value, out _))
        {
            messageStore?.Add(() => fld.Value, $"Поле '{fld.Name}' должно содержать число.");
        }
        else if (fld.Value.Length >= 255)
        {
            messageStore?.Add(() => fld.Value, $"Поле '{fld.Name}' превышает допустимое количество символов.");
        }
    }

    void CheckCell(CellModel cell)
    {
        if (cell.Disable)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(cell.Value))
        {
            if (cell.IsRequired)
            {
                messageStore?.Add(() => cell.Value!, $"Поле таблицы обязательно для заполнения.");
            }
        }
        else if (cell.ValueType == "int" && !Int64.TryParse(cell.Value, out _))
        {
            messageStore?.Add(() => cell.Value, $"Поле таблицы должно содержать число.");
        }
        else if (cell.Value.Length >= 8000)
        {
            messageStore?.Add(() => cell.Value, $"Поле таблицы превышает допустимое количество символов.");
        }
    }

    async Task Submit()
    {
        if (model != null)
        {
            await data.SaveApplicationFormFromEditModelAsync(model);
            var selectedBlock = model.EditBlocks.FirstOrDefault(e => e.Id == model.SelectedEditBlockId);
            if (selectedBlock != null)
            {
                selectedBlock.Status = true;
            }

            model.Tables = await data.GetTableModelsForEditBlockAsync(model.SelectedEditBlockId);
            await jsRuntime.InvokeVoidAsync("scrollToTop");
            toastService.Notify(new(ToastType.Success, "Сохранение прошло успешно"));
        }
    }

    async Task ShowConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
        {
            IsVerticallyCentered = true,
            NoButtonText = "Отмена",
            YesButtonText = "Продолжить",
        };
        var confirmation = await dialog!.ShowAsync(
            title: "Необходимо подтверждение",
            message1: "Подавая заявку на участие, Вы подтверждаете достоверность указанных в анкете данных.",
            message2: "Я ознакомлен и согласен с условиями участия в конкурсе.",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await ChangeStatusAsync();
        }
    }

    async Task ChangeStatusAsync()
    {
        var newModel = new EditModel()
        {
            ApplicationId = model!.ApplicationId,
            SelectedTrackId = model.SelectedTrackId,
            SelectedCategoryId = model.SelectedCategoryId
        };
        await data.SaveApplicationFormFromEditModelAsync(newModel);
        await data.SetCurrentUserNameAsync();
        await data.SetCurrentUserApplicationStatusWaitingForReviewedAsync();

        var userInfo = await data.GetCurrentUserInfoAsync();
        if (userInfo is not null) await data.SetDatetimeNowForApplicationAync(userInfo.Applications.First().Id);
        navigate.NavigateTo("/account/manage/participation-status");
    }

    public class PhotoData
    {
        public string? ImageUrl { get; set; }
        public PhotoEditorModal.CropCoordinates Coordinates { get; set; } = new PhotoEditorModal.CropCoordinates();
    }

}