@page "/application-form"
@using ServerApp.Data.Models.EditModel

@inject IDataService data
@inject IJSRuntime jsRuntime
@inject NavigationManager nav
@inject ToastService toastService

<div class="block">
    <div class="d-flex flex-row justify-content-between block-title">
        <div class="block-title-text">
            Заполните заявку для участия
        </div>
        @if (model is not null)
        {
            <Button Type="ButtonType.Button"
                    Color="ButtonColor.Success"
                    Disabled="model.EditBlocks.Any(e => e.Status == false) || model.SelectedTrackId == Guid.Empty"
                    @onclick="ChangeStatus">
                Отправить заявку
            </Button>
        }
    </div>
    @if (model is not null)
    {
        <div class="block-content">
            <InputSelect class="form-control" Value="model.SelectedTrackId" TValue="Guid?" ValueExpression="() => model.SelectedTrackId" ValueChanged="(trackId) => OnTrackIdChanged(trackId)">
                <option value="@Guid.Empty" disabled selected hidden>Выберите трек</option>
                @foreach (var track in model.Tracks)
                {
                    <option value="@track!.Id">@track.Name</option>
                }
            </InputSelect>
            @if (model.SelectedTrackId != Guid.Empty)
            {
                <div class="block-content-text">
                    <TabsForEditBlocks EditBlocks="model.EditBlocks" SelectedEditBlockId="model.SelectedEditBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForEditBlocks>
                </div>
                @if ((model.Fields is not null && model.Fields.Any()) || (model.Tables is not null && model.Tables.Any()))
                {
                    <EditForm EditContext="editContext" OnValidSubmit="Submit" class="block-content-text">
                        @if (model.Fields is not null && model.Fields.Any())
                        {
                            @foreach (var fld in model.Fields)
                            {
                                @if (!string.IsNullOrEmpty(fld.EditGroup))
                                {
                                    <div class="block-subtitle-text">@fld.EditGroup</div>
                                }
                                <div class="form-text">@fld.Name <span class="text-danger">*</span></div>
                                <div class="form-input w-100 mb-2">
                                    <ValidationMessage For="() => fld.Value" />
                                    @if (fld.SelectValues is not null && fld.SelectValues.Any())
                                    {
                                        <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;" @bind-Value="fld.Value">
                                            <option value="@string.Empty" disabled selected hidden>@fld.Placeholder</option>
                                            @foreach (var value in fld.SelectValues)
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        </InputSelect>
                                    }
                                    else
                                    {
                                        <InputText class="form-control" @bind-Value="fld.Value" Placeholder="@fld.Placeholder" />
                                    }
                                </div>
                            }
                        }
                        @if (model.Tables.Any())
                        {
                            @foreach (var table in model.Tables)
                            {
                                <div class="table-container mb-2">
                                    <div class="block-subtitle-text">@table.Name</div>
                                    @if (table.Rows.Any())
                                    {
                                        <table class="table-stand">
                                            <thead>
                                                <tr>
                                                    @foreach (var column in table.Columns)
                                                    {
                                                        <th>@column.Name</th>
                                                    }
                                                    @if (!table.IsPrefilled)
                                                    {
                                                        <th></th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var row in table.Rows)
                                                {
                                                    <tr>
                                                        @for (int i = 0; i < row.Cells.Count; i++)
                                                        {
                                                            var cell = row.Cells[i];

                                                            if (i < row.Cells.Count - 1)
                                                            {
                                                                var nextCell = row.Cells[i + 1];

                                                                if (cell is { Disable: true, Value: not null } && nextCell is { Disable: true, Value: null })
                                                                {
                                                                    <td colspan="2">
                                                                        @if (cell is { Disable: true, Value: not null })
                                                                        {
                                                                            @cell.Value
                                                                        }
                                                                        else if (cell.SelectValues.Any())
                                                                        {
                                                                            <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;" @bind-Value="cell.Value">
                                                                                <option value="@string.Empty" disabled selected hidden></option>
                                                                                @foreach (var value in cell.SelectValues)
                                                                                {
                                                                                    <option value="@value">@value</option>
                                                                                }
                                                                            </InputSelect>
                                                                        }
                                                                        else
                                                                        {
                                                                            <InputText Disabled="@cell.Disable" class="form-control" @bind-Value="cell.Value"/>
                                                                        }
                                                                    </td>

                                                                    i++;
                                                                }
                                                                else
                                                                {
                                                                    <td>
                                                                        @if (cell is { Disable: true, Value: not null })
                                                                        {
                                                                            @cell.Value
                                                                        }
                                                                        else if (cell.SelectValues.Any())
                                                                        {
                                                                            <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;" @bind-Value="cell.Value">
                                                                                <option value="@string.Empty" disabled selected hidden></option>
                                                                                @foreach (var value in cell.SelectValues)
                                                                                {
                                                                                    <option value="@value">@value</option>
                                                                                }
                                                                            </InputSelect>
                                                                        }
                                                                        else
                                                                        {
                                                                            <InputText Disabled="@cell.Disable" class="form-control" @bind-Value="cell.Value"/>
                                                                        }
                                                                    </td>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <td>
                                                                    @if (cell is { Disable: true, Value: not null })
                                                                    {
                                                                        @cell.Value
                                                                    }
                                                                    else if (cell.SelectValues.Any())
                                                                    {
                                                                        <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;" @bind-Value="cell.Value">
                                                                            <option value="@string.Empty" disabled selected hidden></option>
                                                                            @foreach (var value in cell.SelectValues)
                                                                            {
                                                                                <option value="@value">@value</option>
                                                                            }
                                                                        </InputSelect>
                                                                    }
                                                                    else
                                                                    {
                                                                        <InputText Disabled="@cell.Disable" class="form-control" @bind-Value="cell.Value"/>
                                                                    }
                                                                </td>
                                                            }
                                                        }
                                                        @if (!table.IsPrefilled)
                                                        {
                                                            <td style="width: 50px;">
                                                                <Icon Color="IconColor.Danger" Name="IconName.XSquareFill" Style="transform: scale(1.5);" @onclick="async () => await DeleteRow(table, row)" type="button" />
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                    @if (!table.IsPrefilled)
                                    {
                                        <Icon Class="d-flex justify-content-center w-100" Color="IconColor.Primary" Name="IconName.PlusCircleFill" Size="IconSize.x2" @onclick="async () => await AddRow(table)" type="button" />
                                    }
                                </div>
                            }
                        }
                        <ValidationSummary />
                        <div class="d-flex justify-content-center">
                            <Button Type="ButtonType.Submit"
                                    Color="ButtonColor.Primary">
                                Сохранить
                            </Button>
                        </div>
                    </EditForm>
                }
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    EditModel? model;
    EditContext? editContext;
    ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        model = await data.GetCurrentUserEditModelAsync();
        if (model != null)
        {
            model.Tracks = await data.GetTrackModelsAsync();
            await OnTrackIdChanged(model.SelectedTrackId);
        }
    }

    async Task OnTrackIdChanged(Guid? trackId)
    {
        if (model == null || trackId == Guid.Empty) return;

        model.SelectedTrackId = trackId;
        model.EditBlocks = await data.GetEditBlockModelsAsync(trackId);

        if (model.EditBlocks.Any())
        {
            await OnBlockIdChanged(model.EditBlocks.First().Id);
        }
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null || blockId == Guid.Empty) return;

        model.SelectedEditBlockId = blockId;
        model.Fields = await data.GetFieldModelsForEditBlockAsync(blockId);
        model.Tables = await data.GetTableModelsForEditBlockAsync(blockId);

        InitializeEditContext(model);
    }

    async Task AddRow(TableModel table)
    {
        if (model == null || table == null) return;

        var row = await data.GetRowModelAsync(table.Id);
        var targetTable = model.Tables.FirstOrDefault(e => e == table);
        if (targetTable != null)
        {
            targetTable.Rows.Add(row);
            InitializeEditContext(model);
        }
    }

    async Task DeleteRow(TableModel table, RowModel row)
    {
        if (model == null || table == null || row == null) return;

        var targetTable = model.Tables.FirstOrDefault(e => e == table);
        if (targetTable != null)
        {
            await data.DeleteRowAsync(row.Id);
            targetTable.Rows.Remove(row);
            InitializeEditContext(model);
        }
    }

    void InitializeEditContext(EditModel model)
    {
        editContext = new(model);
        editContext.OnFieldChanged += HandleFieldChanged;
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.Model is FieldModel fld)
        {
            messageStore?.Clear(() => fld.Value!);
            CheckField(fld);
        }
        else if (e.FieldIdentifier.Model is CellModel cell)
        {
            messageStore?.Clear(() => cell.Value!);
            CheckCell(cell);
        }
        editContext?.NotifyValidationStateChanged();
    }

    void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore?.Clear();
        if (model != null)
        {
            foreach (var fld in model.Fields)
            {
                CheckField(fld);
            }
            foreach (var table in model.Tables)
            {
                foreach (var row in table.Rows)
                {
                    foreach (var cell in row.Cells)
                    {
                        CheckCell(cell);
                    }
                }
            }
        }
        editContext?.NotifyValidationStateChanged();
    }

    void CheckField(FieldModel fld)
    {
        if (string.IsNullOrEmpty(fld.Value))
        {
            messageStore?.Add(() => fld.Value!, $"Поле '{fld.Name}' обязательно для заполнения.");
        }
        else if (fld.ValueType == "int" && !Int32.TryParse(fld.Value, out _))
        {
            messageStore?.Add(() => fld.Value, $"Поле '{fld.Name}' должно содержать число.");
        }
    }

    void CheckCell(CellModel cell)
    {
        if (cell.Disable)
        {
            return;
        }

        if (string.IsNullOrEmpty(cell.Value))
        {
            messageStore?.Add(() => cell.Value!, $"Поле таблицы обязательно для заполнения.");
        }
        else if (cell.ValueType == "int" && !Int32.TryParse(cell.Value, out _))
        {
            messageStore?.Add(() => cell.Value, $"Поле таблицы должно содержать число.");
        }
    }

    async Task Submit()
    {
        if (model != null)
        {
            await data.SaveApplicationFormFromEditModelAsync(model);
            var selectedBlock = model.EditBlocks.FirstOrDefault(e => e.Id == model.SelectedEditBlockId);
            if (selectedBlock != null)
            {
                selectedBlock.Status = true; //todo: костыль
            }
            await jsRuntime.InvokeVoidAsync("scrollToTop");
            toastService.Notify(new(ToastType.Success, "Сохранение прошло успешно"));
        }
    }

    async Task ChangeStatus()
    {
        await data.SetCurrentUserApplicationStatusWaitingForReviewedAsync();
        nav.NavigateTo("/account/manage/participation-status");
    }
}
