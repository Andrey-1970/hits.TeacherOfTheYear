@page "/application-form"
@using ServerApp.Data.Models.EditModel

@inject IDataService data
@inject ToastService toastService

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Заполните заявку для участия
        </div>
    </div>
    @if (model is not null)
    {
        <div class="block-content">
            <InputSelect class="form-control" Value="model.SelectedTrackId" TValue="Guid?" ValueExpression="() => model.SelectedTrackId" ValueChanged="(trackId) => OnTrackIdChanged(trackId)">
                <option value="@Guid.Empty" disabled selected hidden>Выберите трек</option>
                @foreach (var track in model.Tracks)
                {
                    <option value="@track!.Id">@track.Name</option>
                }
            </InputSelect>
            @if (model.SelectedTrackId != Guid.Empty)
            {
                <div class="block-content-text">
                    <TabsForEditBlocks EditBlocks="model.EditBlocks" SelectedEditBlockId="model.SelectedEditBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForEditBlocks>
                </div>
                @if ((model.Fields is not null && model.Fields.Any()) || (model.Tables is not null && model.Tables.Any()))
                {
                    <EditForm EditContext="editContext" OnValidSubmit="Submit" class="block-content-text">
                        @if (model.Fields is not null && model.Fields.Any())
                        {
                            @foreach (var fld in model.Fields)
                            {
                                @if (!string.IsNullOrEmpty(fld.EditGroup))
                                {
                                    <div class="block-subtitle-text">@fld.EditGroup</div>
                                }
                                <div class="form-text">@fld.Name <span class="text-danger">*</span></div>
                                <div class="form-input w-100 mb-3">
                                    <ValidationMessage For="() => fld.Value" />
                                    @if (fld.SelectValues is not null && fld.SelectValues.Any())
                                    {
                                        <InputSelect class="form-control" style="white-space: normal; word-wrap: break-word;" @bind-Value="fld.Value">
                                            <option value="@string.Empty" disabled selected hidden>@fld.Placeholder</option>
                                            @foreach (var value in fld.SelectValues)
                                            {
                                                <option value="@value">@value</option>
                                            }
                                        </InputSelect>
                                    }
                                    else
                                    {
                                        <InputText class="form-control" @bind-Value="fld.Value" Placeholder="@fld.Placeholder" />
                                    }
                                </div>
                            }
                        }
                        @if (model.Tables is not null && model.Tables.Any())
                        {
                            @foreach (var table in model.Tables)
                            {
                                <div class="block-content">
                                    <div class="table-container">
                                        <div class="block-subtitle-text">@table.Name</div>
                                        @if (table.Rows is not null && table.Rows.Any())
                                        {
                                            <table class="table-stand">
                                                <thead>
                                                    <tr>
                                                        @foreach (var column in table.Columns)
                                                        {
                                                            <th>@column.Name</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var row in table.Rows)
                                                    {
                                                        <tr>
                                                            @foreach (var cell in row.Cells)
                                                            {
                                                                <div class="form-input w-100 mb-3">
                                                                    <ValidationMessage For="() => cell.Value" />
                                                                    <InputText class="form-control" @bind-Value="cell.Value" />
                                                                </div>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                    </div>
                                    <Icon Color="IconColor.Primary" Name="IconName.PlusCircleFill" Size="IconSize.x2" @onclick="() => AddRow(table)" type="button" />
                                </div>
                            }

                        }
                        <ValidationSummary />
                        <div class="d-flex justify-content-center">
                            <Button Type="ButtonType.Submit"
                                    Color="ButtonColor.Primary">
                                Сохранить
                            </Button>
                        </div>
                    </EditForm>
                }
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    EditModel? model;
    EditContext? editContext;
    ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        model = await data.GetCurrentUserEditModelAsync();
        model.Tracks = await data.GetTrackModelsAsync();
        await OnTrackIdChanged(model.SelectedTrackId);
    }

    async Task OnTrackIdChanged(Guid? trackId)
    {
        if (model == null || trackId == Guid.Empty) return;

        model.SelectedTrackId = trackId;
        model.EditBlocks = await data.GetEditBlockModelsAsync(trackId);

        await OnBlockIdChanged(model.EditBlocks.First().Id);
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null || blockId == Guid.Empty) return;

        model.SelectedEditBlockId = blockId;
        model.Fields = await data.GetFieldModelsForEditBlockAsync(blockId);
        model.Tables = await data.GetTableModelsForEditBlockAsync(blockId);

        InitializeEditContext(model);
    }

    void InitializeEditContext(EditModel model)
    {
        editContext = new(model);
        editContext.OnFieldChanged += HandleFieldChanged;
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        var fld = ((FieldModel)e.FieldIdentifier.Model);
        messageStore!.Clear(() => fld.Value!);
        CheckField(fld);
        editContext!.NotifyValidationStateChanged();
    }

    void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore!.Clear();
        foreach (var fld in model!.Fields)
        {
            CheckField(fld);
        }
        editContext!.NotifyValidationStateChanged();
    }

    void CheckField(FieldModel fld)
    {
        if (string.IsNullOrEmpty(fld.Value))
        {
            messageStore!.Add(() => fld.Value!, $"Поле '{fld.Name}' обязательно для заполнения.");
        }
        else if (fld.ValueType == "int" && !Int32.TryParse(fld.Value, out _))
        {
            messageStore!.Add(() => fld.Value!, $"Поле '{fld.Name}' должно содержать число.");
        }
    }

    async Task Submit()
    {
        await data.SaveApplicationFormFromEditModelAsync(model!);
        toastService.Notify(new(ToastType.Success, "Сохранение прошло успешно"));
    }

    void AddRow(TableModel table)
    {
        
    }
}
