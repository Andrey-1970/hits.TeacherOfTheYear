@page "/application-form"

@inject IDataService data

@if (application != null)
{
    <InputSelect Value="application.TrackId" TValue="Guid" ValueExpression="() => application.TrackId" ValueChanged="async (value) => await OnTrackIdChanged(value)">
        @foreach (var track in tracks!)
        {
            <option value="@track.Id">@track.Name</option>
        }
    </InputSelect>
    @if (application.Track != null)
    {
        <Tabs @ref="tabs">
            @foreach (var editBlock in application.Track.EditBlocks.OrderBy(x => x.Number))
            {
                <Tab Title="@editBlock.Name">
                    <Content>
                        @foreach (var field in editBlock.Fields)
                        {
                            <div>@field.Name</div>
                            <input type="text" />
                        }
                        @foreach (var table in editBlock.Tables)
                        {
                            <div>@table.Name</div>
                            <table class="table-stand">
                                <thead>
                                    <tr>
                                        @foreach (var column in table.Columns)
                                        {
                                            <th>@column.Name</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var row in table.Rows)
                                    {
                                        <tr>
                                            @foreach (var cell in row.CellVals.OrderBy(x => x.Column))
                                            {
                                                <input type="text" />
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </Content>
                </Tab>
            }
        </Tabs>
    }
}

@code {
    private Tabs tabs = default!;
    private ApplicationForm? application;
    private IEnumerable<Track>? tracks;

    protected override async Task OnInitializedAsync()
    {
        application = await data.GetCurrentUserApplicationAsync();
        tracks = await data.GetTracksAsync();
    }

    private async Task OnTrackIdChanged(Guid trackId)
    {
        application!.TrackId = trackId;
        application.Track = await data.GetTrackByIdAsync(trackId);
        await data.SaveApplicationFormAsync(application); //todo: заменить на метод, сохраняющий трек и удаляющий данные, которые не относятся к выбранному треку
        await tabs.ShowFirstTabAsync();
    }
}