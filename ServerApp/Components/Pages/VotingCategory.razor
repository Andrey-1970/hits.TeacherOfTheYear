@page "/voting/category/{TrackId}/{CategoryId}"

@using ServerApp.Data.Models.EditModel
@using ServerApp.Data.Models.VoteModel

@inject IDataService data
@inject NavigationManager navigate

<PageTitle>Голосование</PageTitle>

<div class="block-group">
    <div class="block">
        <div class="block-title">
            <div class="title-direction">
                <div class="block-title-text">@track?.Name</div>
                <div class="text-direction">
                    <Icon Name="IconName.ArrowLeft" Size="IconSize.x2" @onclick="async () => await Back()" type="button" />
                </div>
            </div>
            <div class="block-subtitle-text">@category?.Name</div>
            <div class="form-text">
                Выберите кандидата для голосования
            </div>
        </div>

        <div class="d-flex flex-wrap justify-content-center g-1 mt-1 mb-1">
            @if (participants is not null)
            {
                @foreach (var participant in participants)
                {
                    <ParticipantCard Participant="participant" OnClick="async () => await ViewParticipant(participant.Id)" />
                }            
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <Spinner Color="SpinnerColor.Primary" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? TrackId { get; set; }

    [Parameter]
    public string? CategoryId { get; set; }

    TrackModel track = default!;
    CategoryModel category = default!;
    ListItemModel[]? participants;

    protected override async Task OnParametersSetAsync()
    {
        if (Guid.TryParse(TrackId, out var trackId) && Guid.TryParse(CategoryId, out var categoryId))
        {
            track = await data.GetTrackAsync(trackId);
            category = await data.GetCategoryAsync(categoryId);
            participants = await data.GetListForVotingPageAsync(trackId, categoryId);
        }
    }

    async Task Back()
    {
        await Task.Run(() => navigate.NavigateTo("/voting#"));
    }
    
    async Task ViewParticipant(Guid participantId)
    {
        await Task.Run(() => navigate.NavigateTo($"/voting/category/application/{participantId}#"));
    }
}