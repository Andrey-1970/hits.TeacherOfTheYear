@page "/demo"

@inject IDataService data

@if (model != null)
{
    <div class="block">
        <div class="block-title">
            <div class="block-title-text">
                Заполните заявку для участия
            </div>
        </div>
        <div class="block-content-text">
            <InputSelect class="form-control" Value="model.SelectedTrackId" TValue="Guid?" ValueExpression="() => model.SelectedTrackId" ValueChanged="(trackId) => OnTrackIdChanged(trackId)">
                <option value="@Guid.Empty" disabled selected hidden>Выберите трек</option>
                @foreach (var track in model.Tracks)
                {
                    <option value="@track!.Id">@track.Name</option>
                }
            </InputSelect>
        </div>
        <div class="block-content-text">
            @if (model.SelectedTrackId != Guid.Empty)
            {
                <TabsForBlocks EditBlocks="model.EditBlocks" SelectedEditBlockId="model.SelectedEditBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForBlocks>
                @if (model.Inputs != null && model.Inputs.Any())
                {
                    <div class="tab-content">
                        <EditForm EditContext="editContext" OnValidSubmit="Submit">
                            @foreach (var fld in model.Inputs)
                            {
                                <div class="form-text">@fld.Name <span class="text-danger">*</span></div>
                                <div class="form-input w-100 mb-3">
                                    <div class="text-danger"></div>
                                    <ValidationMessage For="() => fld.Value" />
                                    <InputText class="form-control" @bind-Value="fld.Value" Placeholder="@fld.Placeholder" />
                                </div>
                            }
                            <ValidationSummary/>
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Сохранить</Button>
                        </EditForm>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    DemoEditModel? model;
    EditContext? editContext;
    ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        model = await data.GetCurrentUserEditModelAsync();
    }

    async Task OnTrackIdChanged(Guid? trackId)
    {
        if (model == null) return;

        model.SelectedTrackId = trackId;
        model.EditBlocks = await data.GetEditBlocksModelByTrackId(trackId);

        await OnBlockIdChanged(model.EditBlocks.First().Id);
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null) return;

        model.SelectedEditBlockId = blockId;
        model.Inputs = await data.GetInputsModelByEditBlockId(model.SelectedEditBlockId);

        editContext = new(model);
        editContext.OnFieldChanged += HandleFieldChanged;
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

    }

    void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        var fld = ((InputModel)e.FieldIdentifier.Model);
        messageStore!.Clear(() => fld.Value!);
        CheckField(fld);
        editContext!.NotifyValidationStateChanged();
    }

    void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore!.Clear();
        foreach (var fld in model!.Inputs)
        {
            CheckField(fld);
        }
        editContext!.NotifyValidationStateChanged();
    }

    void CheckField(InputModel fld)
    {
        if (string.IsNullOrEmpty(fld.Value))
        {
            messageStore!.Add(() => fld.Value!, $"Поле '{fld.Name}' обязательно для заполнения.");
        }
        else if (fld.ValueType == "int" && !int.TryParse(fld.Value, out _))
        {
            messageStore!.Add(() => fld.Value!, $"Поле '{fld.Name}' должно содержать число.");
        }
    }

    async Task Submit()
    {
        await Task.Delay(100);
        Console.WriteLine("Submitting");
    }
}
