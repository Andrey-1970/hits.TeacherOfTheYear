@page "/demo"

@inject IDataService data

@if (Model != null)
{
    <div class="block">
        <div class="block-title">
            <div class="block-title-text">
                Заполните заявку для участия
            </div>
        </div>
        <div class="block-content-text">
            <InputSelect class="form-control" Value="Model.SelectedTrackId" TValue="Guid?" ValueExpression="() => Model.SelectedTrackId" ValueChanged="(trackId) => OnTrackIdChanged(trackId)">
                <option value="@Guid.Empty" disabled selected hidden>Выберите трек</option>
                @foreach (var track in Model.Tracks)
                {
                    <option value="@track!.Id">@track.Name</option>
                }
            </InputSelect>
        </div>
        <div class="block-content-text">
            @if (Model.SelectedTrackId != Guid.Empty)
            {
                <TabsForBlocks EditBlocks="Model.EditBlocks" SelectedEditBlockId="Model.SelectedEditBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForBlocks>
                @if (Model.Inputs != null && Model.Inputs.Any())
                {
                    <div class="tab-content">
                        <EditForm Model="Model" OnValidSubmit="Submit">
                            <CustomValidation @ref="customValidation" />
                            @foreach (var fld in Model.Inputs)
                            {
                                <div class="form-text">@fld.Name <span class="text-danger">*</span></div>
                                <div class="form-input w-100 mb-3">
                                    <div class="text-danger"></div>
                                    <ValidationMessage @ref="ValidationMessage" For="() => fld.Name"></ValidationMessage>
                                    <InputText class="form-control" @bind-Value="fld.Value"  Placeholder="@fld.Placeholder" />
                                </div>
                            }
                            <ValidationSummary />
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Сохранить</Button>
                        </EditForm>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    private CustomValidation? customValidation;

    private DemoEditModel? Model = new();
    private ValidationMessage<string> ValidationMessage ;

    protected override async Task OnInitializedAsync()
    {
        Model = await data.GetCurrentUserEditModelAsync();
    }

    private async Task OnTrackIdChanged(Guid? trackId)
    {
        if (Model == null) return;

        Model.SelectedTrackId = trackId;
        Model.EditBlocks = await data.GetEditBlocksModelByTrackId(trackId);
        Model.SelectedEditBlockId = Model.EditBlocks.First().Id;
        Model.Inputs = await data.GetInputsModelByEditBlockId(Model.SelectedEditBlockId, Model.ApplicationId);
    }

    private async Task OnBlockIdChanged(Guid? blockId)
    {
        if (Model == null) return;

        customValidation?.ClearErrors();

        Model.SelectedEditBlockId = blockId;
        Model.Inputs = await data.GetInputsModelByEditBlockId(Model.SelectedEditBlockId, Model.ApplicationId);
    }

    private void Submit()
    {
        customValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();
        foreach (var input in Model!.Inputs)
        {
            if (string.IsNullOrEmpty(input.Value))
            {
                errors.Add(input.Name!, new() {$"Поле '{input.Name}' необходимо заполнить." });
            }

            else if (input.ValueType == "int")
            {
                if (!Int32.TryParse(input.Value, out int outResult))
                {
                    errors.Add(nameof(input.Name), new() {$"Поле '{input.Name}' не число." });
                }
            }
        }

        if (errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            Console.WriteLine("Submit called: Processing the form");
        }
    }
}
