@page "/demo"

@inject IDataService data

@if (Model != null)
{
    <InputSelect Value="Model.SelectedTrackId" TValue="Guid?" ValueExpression="() => Model.SelectedTrackId" ValueChanged="(trackId) => OnTrackIdChanged(trackId)">
        <option value="@Guid.Empty" disabled selected hidden>Выберите трек</option>
        @foreach (var track in Model.Tracks)
        {
            <option value="@track.Id">@track.Name</option>
        }
    </InputSelect>
    if (Model.SelectedTrackId != Guid.Empty)
    {
        <TabsForBlocks EditBlocks="Model.EditBlocks" SelectedEditBlockId="Model.SelectedEditBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForBlocks>
        @if (Model.Inputs != null && Model.Inputs.Any())
        {
            <div class="tab-content">
                <EditForm Model="Model.Inputs" OnValidSubmit="SubmitForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @foreach (var fld in Model.Inputs)
                    {
                        <div>@fld.Name</div>
                        <div>
                            <InputText @bind-Value="fld.Value"></InputText>
                        </div>
                    }
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Сохранить</Button>
                </EditForm>
            </div>
        }
    }
}

@code {
    private DemoEditModel? Model = new();

    protected override async Task OnInitializedAsync()
    {
        Model = await data.GetCurrentUserEditModelAsync();
    }

    private async Task OnTrackIdChanged(Guid? trackId)
    {
        if (Model == null) return;

        Model.SelectedTrackId = trackId;
        Model.EditBlocks = await data.GetEditBlocksModelByTrackId(trackId);
        Model.SelectedEditBlockId = Model.EditBlocks.First().Id;
        Model.Inputs = await data.GetInputsModelByEditBlockId(Model.SelectedEditBlockId, Model.ApplicationId);
    }

    private async Task OnBlockIdChanged(Guid? blockId)
    {
        if (Model == null) return;

        Model.SelectedEditBlockId = blockId;
        Model.Inputs = await data.GetInputsModelByEditBlockId(Model.SelectedEditBlockId, Model.ApplicationId);
    }

    private void SubmitForm()
    {

    }
}
