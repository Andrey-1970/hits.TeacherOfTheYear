@page "/voting/category/{TrackId}/{CategoryId}/participant/{ParticipantId}"

@using ServerApp.Data.Models.VoteModel

@inject IDataService data
@inject NavigationManager navigate

<PageTitle>@participant.FullName</PageTitle>
@if (participant is not null)
{
    <div class="block">
        <div class="block-title">
            <div class="title-direction">
                <div class="block-title-text">@participant.FullName</div>
                <div class="text-direction">
                    <div class="brief-title">Количество голосов: @participant.TotalVotes</div>
                    <Icon Name="IconName.ArrowLeft" Size="IconSize.x2" @onclick="Back" type="button" />
                </div>
            </div>
        </div>
        <div class="block-content block-info">
            <div class="leftside">
                <div class="brief-info">
                    @for (int i = 0; i < participant.Fields.Count() / 2; i++)
                    {
                        <div class="row w-100 m-0">
                            @for (int j = i * 2; j < i * 2 + 2; j++)
                            {
                                <div class="col-6">
                                    <div class="brief-title">@participant.Fields[j].Name</div>
                                    <div class="brief-text">@participant.Fields[j].Value</div>
                                </div>
                            }
                        </div>
                    }
                </div>
                @foreach (var table in participant.Tables)
                {
                    <div class="table-container mb-2">
                        <div class="block-subtitle-text">@table.Name</div>
                        @if (table.Rows is not null && table.Rows.Any())
                        {
                            <table class="table-stand">
                                <thead>
                                    <tr>
                                        @foreach (var column in table.Columns)
                                        {
                                            <th>@column.Name</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var row in table.Rows)
                                    {
                                        <tr>
                                            @foreach (var cell in row.Cells)
                                            {
                                                <td>@cell.Value</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="d-flex justify-content-center w-100">
                                <div class="text-danger">Информация отсутствует</div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="rightside">
                <div class="photo"></div>
                <AuthorizeView>
                    <NotAuthorized>
                        <Button Color="ButtonColor.Primary"
                                Class="w-100"
                                @onclick="NavToLogin">
                            Проголосовать за участника
                        </Button>
                    </NotAuthorized>
                    <Authorized>
                        <Button Color="ButtonColor.Primary"
                                Class="w-100"
                                Disabled="participant.IsVoteOfThisApplication"
                                @onclick="Vote">
                            Проголосовать
                        </Button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
}

@code {
    [Parameter]
    public string? TrackId { get; set; }

    [Parameter]
    public string? CategoryId { get; set; }

    [Parameter]
    public string? ParticipantId { get; set; }

    VoteModel? participant;

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(ParticipantId, out var participantId))
        {
            participant = await data.GetVoteModelAsync(participantId);
            participant.Fields = await data.GetFieldModelsForVotePageAsync(participantId);
            participant.Tables = await data.GetTableModelsForVotePageAsync(participantId);
        }
    }

    async Task Back()
    {
        await Task.Run(() => navigate.NavigateTo($"/voting/category/{TrackId}/{CategoryId}#"));
    }

    async Task Vote()
    {
        await data.CastVoteAsync(participant!.Id);
        participant.IsVoteOfThisApplication = true;
        participant.TotalVotes += 1;
    }

    private void NavToLogin()
    {
        navigate.NavigateTo($"account/login?returnUrl={Uri.EscapeDataString(navigate.Uri)}", forceLoad: true);
    }
}
