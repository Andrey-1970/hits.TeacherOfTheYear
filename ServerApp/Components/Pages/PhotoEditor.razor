@page "/photo-editor"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Редактор фотографии</PageTitle>

<div class="container mt-4">
    <h1>Редактор фотографии</h1>
    <div class="row">
        <div class="col-md-8">
            <div id="photo-editor-container" style="position: relative; width: 100%; height: 500px;">
                <img id="uploaded-image" src="@imageDataUrl" alt="Загруженное изображение" style="display: none; object-fit: contain; object-position: center;" onload="imageLoaded();" onerror="imageLoadError();"/>
                <div id="crop-rectangle" style="position: absolute; border: 2px solid red; display: none;"></div>
            </div>
        </div>
        <div class="col-md-4">
            <InputFile OnChange="OnInputFileChange" class="form-control mb-3"/>
            <button class="btn btn-primary mb-3" @onclick="SaveCropCoordinates">Сохранить</button>
            <button class="btn btn-secondary" @onclick="GoBack">Назад</button>
        </div>
    </div>
</div>

@code {
    private string? imageDataUrl;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initPhotoEditor");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            const int maxAllowedSize = 104857600; // 100 MB

            if (file.Size > maxAllowedSize)
            {
                Console.WriteLine("File size exceeds the maximum allowed size.");
                return;
            }

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize).CopyToAsync(memoryStream);

            var buffer = memoryStream.ToArray();
            
            // Проверка размера буфера
            Console.WriteLine($"Buffer size: {buffer.Length}, Expected: {file.Size}");
            
            if (buffer.Length == file.Size)
            {
                imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
                // Вывод части строки для проверки
                Console.WriteLine($"Image data URL (first 100 chars): {imageDataUrl?.Substring(0, 100)}...");

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("loadImage", imageDataUrl);
            }
            else
            {
                Console.WriteLine("The buffer length does not match the expected file size. The file might not have been fully read.");
            }
        }
    }


    private async Task SaveCropCoordinates()
    {
        var coordinates = await JSRuntime.InvokeAsync<CropCoordinates>("getCropCoordinates");
        Console.WriteLine($"X: {coordinates.X}, Y: {coordinates.Y}, Width: {coordinates.Width}, Height: {coordinates.Height}");
// Здесь можно отправить координаты на сервер или выполнить другие действия
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/form");
    }

    public class CropCoordinates
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }

}