@page "/review/application/{Id}"

@attribute [Authorize(Roles = "Admin, Organiser")]

@inject IDataService data
@inject NavigationManager navigate
@using ServerApp.Services;
@inject IMailService MailService

<PageTitle>Проверка заявки</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Проверка заявки
        </div>
    </div>
    @if (model is not null)
    {
        <div class="block-content">
            @if (model.SelectedTrackId != Guid.Empty && model.MarkBlocks is not null && model.MarkBlocks.Any() && model.SelectedMarkBlockId != Guid.Empty)
            {
                <div class="row w-100">
                    <div class="col-auto">
                        <div style="height: 320px; width: 240px; background-color: darkgrey; border-radius: 10px; border: 2px solid darkslategrey; overflow: hidden">
                            @if (cropPhoto is not null)
                            {
                                <img src="@cropPhoto" style="height: 100%; width: 100%;" />
                            }
                        </div>
                    </div>
                    <div class="d-flex flex-column block-content-text col gap-2">
                        <div class="form-text">Выбранный трек: @trackName</div>
                    </div>
                </div>
                <div class="block-content-text">
                    <TabsForMarkBlocks MarkBlocks="model.MarkBlocks" SelectedMarkBlockId="model.SelectedMarkBlockId" OnBlockChanged="OnBlockIdChanged"></TabsForMarkBlocks>
                </div>
                @if (model.MarkBlocks.SingleOrDefault(e => e.Id == model.SelectedMarkBlockId)?.Name != ResultBlock.Name)
                {
                    @if (model.Fields is not null && model.Fields.Any())
                    {
                        @foreach (var fld in model.Fields)
                        {
                            @if (!string.IsNullOrEmpty(fld.EditGroup))
                            {
                                <div class="block-subtitle-text">@fld.EditGroup</div>
                            }
                            <div class="row block-content-text border border-primary rounded m-0 mb-2">
                                <div class="col border-end border-primary p-2">@fld.Name</div>
                                <div class="col p-2">@fld.Value</div>
                            </div>
                        }
                    }
                    @if (model.Tables is not null && model.Tables.Any())
                    {
                        @foreach (var table in model.Tables)
                        {
                            <div class="table-container mb-2">
                                <div class="block-subtitle-text">@table.Name</div>
                                @if (table.Rows is not null && table.Rows.Any())
                                {
                                    <table class="table-stand">
                                        <thead>
                                            <tr>
                                                @foreach (var column in table.Columns)
                                                {
                                                    <th>@column.Name</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var row in table.Rows)
                                            {
                                                <tr>
                                                    @foreach (var cell in row.Cells)
                                                    {
                                                        <td>@cell.Value</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center w-100">
                                        <div class="text-danger">Информация отсутствует</div>
                                    </div>
                                }
                            </div>
                        }
                    }
                    <div class="form-text bg-primary p-2 text-dark bg-opacity-25 rounded">
                        <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-between align-items-center">
                            Блок проверен?
                            <Switch Style="scale: 1.2; margin-right: 7px;" Value="model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Status" ValueExpression="() => model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Status" @onclick="async () => await ChangeBlockStatus()" />
                        </div>

                        <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-between align-items-center">
                            Комментарий для участника:
                            <div class="form-input w-75">
                                <InputTextArea class="form-control" Value="@Comment" ValueExpression="() => Comment" ValueChanged="async (value) => await ChangeBlockComment(value)" />
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-container mb-2">
                        <div class="block-subtitle-text">Итоги проверки</div>
                        <table class="table-stand">
                            <thead>
                                <tr>
                                    <th>Блок</th>
                                    <th>Статус</th>
                                    <th>Комментарий</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var block in model.MarkBlocks)
                                {
                                    if (block.Name != ResultBlock.Name)
                                    {
                                        <tr>
                                            <td>@block.Name</td>
                                            <td>
                                                @if ((model.ReviewedBlocks.FirstOrDefault(b => b.MarkBlockId == block.Id) ?? new BlockReviewModel()).Status)
                                                {
                                                    <div>Проверен</div>
                                                }
                                                else
                                                {
                                                    <div>Не проверен</div>
                                                }
                                            </td>
                                            <td>@model.ReviewedBlocks.FirstOrDefault(b => b.MarkBlockId == block.Id)?.Commentary</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center">
                        <Button Type="ButtonType.Button"
                                Color="ButtonColor.Danger"
                                @onclick="async () => await RejectApplication()"
                                Disabled="model.ReviewedBlocks.Any(e => e.Status == false) || model.ReviewedBlocks.All(e => string.IsNullOrWhiteSpace(e.Commentary))">
                            Отклонить
                        </Button>
                        <Button Type="ButtonType.Button"
                                Color="ButtonColor.Success"
                                @onclick="async () =>  await ApproveApplication()"
                                Disabled="model.ReviewedBlocks.Any(e => e.Status == false) || model.ReviewedBlocks.Any(e => !string.IsNullOrWhiteSpace(e.Commentary))">
                            Одобрить
                        </Button>
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <Spinner Color="SpinnerColor.Primary" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    ReviewMarkModel? model;
    MarkBlockModel ResultBlock = new MarkBlockModel() { Id = Guid.NewGuid(), Name = "Итог" };

    string? Comment;
    string? trackName;
    string? cropPhoto;
    string? Email;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || !Guid.TryParse(Id, out Guid userId))
        {
            return;
        }

        model = await data.GetUserMarkModelAsync(userId);

        if (model is not null && model.SelectedTrackId != null)
        {
            cropPhoto = await data.GetCropPhotoAsync(model.ApplicationId);

            var track = await data.GetTrackAsync(model.SelectedTrackId);
            trackName = track.Name;

            model.MarkBlocks = await data.GetMarkBlockModelsAsync(model.SelectedTrackId);

            var newMarkBlocks = model.MarkBlocks.ToList();
            newMarkBlocks.Add(ResultBlock);
            model.MarkBlocks = newMarkBlocks.ToArray();

            await OnBlockIdChanged(model.MarkBlocks.FirstOrDefault()?.Id);

            Guid targetUserId = Guid.Parse(Id);

            var listinfo = await data.GetUserInfosModelsAsync();
            var targetUser = listinfo.FirstOrDefault(u => u.Id == targetUserId);
            Email = targetUser.Email;
        }
    }

    async Task OnBlockIdChanged(Guid? blockId)
    {
        if (model == null || !blockId.HasValue || blockId.Value == Guid.Empty) return;

        model.SelectedMarkBlockId = blockId.Value;

        if (blockId == ResultBlock.Id) return;
        model.Fields = await data.GetFieldModelsForMarkBlockAsync(blockId, model.ApplicationId);
        model.Tables = await data.GetTableModelsForMarkBlockAsync(blockId, model.ApplicationId);
        Comment = model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Commentary;
    }

    async Task ApproveApplication()
    {
        await data.ApproveApplicationFormAsync(model!.ApplicationId);
        string htmlBody = $@"
                        <div style='font-family: Arial, Helvetica, sans-serif; padding: 10%; text-align: center;  line-height: 1.5'>
                            <h1>Ваша заявка одобрена!</h1>

                            <hr style='border: 1px solid blue; margin: 20px 0;'>

                            <p>Здравствуйте, уважаемый пользователь!</p>

                            <p>Ваша заявка одобрена на сайте
                            <a href='https://tofy.tyuiu.ru' style='color: blue; text-decoration: underline;'>tofy.tyuiu.ru</a>.
                            Чтобы узнать новый статус перейдите в личный кабинет</p>
                            <hr style='border: 1px solid blue; margin: 20px 0;'>

                            <p>На это письмо не нужно отвечать, так как оно создано автоматически и предназначено только для уведомления.</p>

                            <p>В случае, если Вы считаете, что письмо поступило ошибочно - проигнорируйте его.</p>
                        </div>";


        await MailService.SendEmailAsync(Email, "Ваша заявка одобрена!", htmlBody);
        navigate.NavigateTo("/review#");
    }

    async Task RejectApplication()
    {
        await data.RejectApplicationFormAsync(model!.ApplicationId);
        string htmlBody = $@"
                        <div style='font-family: Arial, Helvetica, sans-serif; padding: 10%; text-align: center;  line-height: 1.5'>
                            <h1>Ваша заявка отклонена!</h1>

                            <hr style='border: 1px solid blue; margin: 20px 0;'>

                            <p>Здравствуйте, уважаемый пользователь!</p>

                            <p>Ваша заявка отклонена на сайте
                            <a href='https://tofy.tyuiu.ru' style='color: blue; text-decoration: underline;'>tofy.tyuiu.ru</a>.
                            Чтобы уточнить статус и дополнить заявку перейдите на сайт</p>
                            <hr style='border: 1px solid blue; margin: 20px 0;'>

                            <p>На это письмо не нужно отвечать, так как оно создано автоматически и предназначено только для уведомления.</p>

                            <p>В случае, если Вы считаете, что письмо поступило ошибочно - проигнорируйте его.</p>
                        </div>";


        await MailService.SendEmailAsync(Email, "Ваша заявка отклонена!", htmlBody);
        navigate.NavigateTo("/review#");
    }

    async Task ChangeBlockStatus()
    {
        await data.ChangeBlockReviewStatusAsync(model!.SelectedMarkBlockId, model.ApplicationId);
        model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Status = !model.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Status;
    }

    async Task ChangeBlockComment(string? comment)
    {
        Comment = comment;
        model!.ReviewedBlocks.FirstOrDefault(e => e.MarkBlockId == model.SelectedMarkBlockId)!.Commentary = comment;
        await data.SaveCommentReviewBlockAsync(model!.SelectedMarkBlockId, model.ApplicationId, comment);
    }
}
