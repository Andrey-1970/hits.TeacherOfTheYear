@page "/account/forgot-password"
@using ServerApp.Services;
@inject IMailService MailService
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Восстановление пароля</PageTitle>

<EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post" class="form-layout">
    <p class="form-title">Введите почту для восстановления</p>

    <DataAnnotationsValidator />

    <div class="form-input">
        <ValidationMessage For="() => Input.Email" class="text-danger" />
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Электронная почта" />
    </div>
    <div class="form-buttons">
        <Button Type="ButtonType.Submit"
                Color="ButtonColor.Primary">
            Сбросить пароль
        </Button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("account/forgot-password-confirmation");
        }
        else if (! await UserManager.IsEmailConfirmedAsync(user))
        {
            NavigationManager.NavigateTo("/account/resend-email-confirmation");
        }
        DateTimeOffset lastSendDate = user.LastEmailSentDate;

        var timeSinceLastSend = DateTimeOffset.UtcNow - lastSendDate;
        Console.WriteLine(timeSinceLastSend);
        if (timeSinceLastSend >= TimeSpan.FromHours(3))
        {
            //save parametrs
            user.LastEmailSentDate = DateTimeOffset.UtcNow;
            await UserManager.UpdateAsync(user);
            var code = await UserManager.GeneratePasswordResetTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("account/reset-password").AbsoluteUri,
                new Dictionary<string, object?> { ["code"] = code });

            string htmlBody = $@"
                        <div style='font-family: Arial, Helvetica, sans-serif; padding: 20px; background-color: #D5EBF5; border-radius: 10px; text-align: center;  line-height: 1.5'>
                <img style='height: 60px' src='https://tofy.tyuiu.ru/img/white-min-logo.png'>
                
                <hr style='border: 1px solid blue; margin: 20px 0;'>
                
                <h1>Активация учетной записи</h1>
                
                <p>Здравствуйте, уважаемый пользователь!</p>

                <p>Вы зарегистрировались в личном кабинете на сайте
                <a href='https://tofy.tyuiu.ru' style='color: blue; text-decoration: underline;'>tofy.tyuiu.ru</a>.
                Ваша учетная запись создана, но нуждается в активации. Чтобы активировать Вашу учетную запись, нажмите на кнопку ниже.</p>
                
                <a href='{callbackUrl}' style='display: flex; justify-content: center; text-decoration: none'>
                    <button style='height: 50px; width: 200px; background-color: white; border-color: blue; border-radius: 5px'>
                        <div style='font-size: 16px; color: blue;'>
                            Подтвердить почту
                        </div>
                    </button>
                </a>

                <p>На это письмо не нужно отвечать, так как оно создано автоматически и предназначено только для уведомления.</p>
                
                <p>В случае, если Вы считаете, что письмо поступило ошибочно - проигнорируйте его.</p>
                
                <hr style='border: 1px solid blue; margin: 20px 0;'>
                
                <p>&#169 2024 Конкурс на соискание премий. Все права защищены</p>
            </div>";


            await MailService.SendEmailAsync(Input.Email, "Восстановление пароля на Педагог Года", htmlBody);

            RedirectManager.RedirectTo("account/forgot-password-confirmation");
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Необходимо указать адрес электронной почты")]
        [EmailAddress(ErrorMessage = "Указан некорректный адрес электронной почты")]
        public string Email { get; set; } = "";
    }
}
