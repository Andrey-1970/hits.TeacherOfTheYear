@page "/account/register-confirmation"
@using ServerApp.Services;
@inject IMailService MailService
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Подтверждение регистрации</PageTitle>

<div class="form-layout">
    <p class="form-title">Подтвердите регистрацию</p>

    <StatusMessage Message="@statusMessage" />

    <div class="text-center">Пожалуйста, проверьте свою электронную почту, чтобы подтвердить свою учетную запись.</div>
</div>

@code {
    string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Отсутствует пользователь с данным адресом электронной почты";
        }
        else if (await UserManager.IsEmailConfirmedAsync(user))
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            await SendRegistrationEmail(user.Email);
        }
    }

    private async Task SendRegistrationEmail(string email)
    {
        var user = await UserManager.FindByEmailAsync(email);
        if (user is null)
        {
            throw new Exception("Пользователь не найден");
        }

        DateTimeOffset lastSendDate = user.LastEmailSentDate;

        var timeSinceLastSend = DateTimeOffset.UtcNow - lastSendDate;
        Console.WriteLine(timeSinceLastSend);
        if (timeSinceLastSend >= TimeSpan.FromHours(24))
        {
            //save parametrs
            user.LastEmailSentDate = DateTimeOffset.UtcNow;
            await UserManager.UpdateAsync(user);
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("account/confirm-email").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            string htmlBody = $@"
                        <div style='font-family: Arial, Helvetica, sans-serif; padding: 10%; text-align: center;  line-height: 1.5'>
                            <h1>Активация учетной записи</h1>
                            
                            <hr style='border: 1px solid blue; margin: 20px 0;'>
                            
                            <p>Здравствуйте, уважаемый пользователь!</p>

                            <p>Вы зарегистрировались в личном кабинете на сайте
                            <a href='https://tofy.tyuiu.ru' style='color: blue; text-decoration: underline;'>tofy.tyuiu.ru</a>.
                            Ваша учетная запись создана, но нуждается в активации.</p>
                            
                            <p>Чтобы активировать Вашу учетную запись, перейдите по 
                            <a href='{emailConfirmationLink}' style='color: blue; text-decoration: underline;'>ссылке</a>.</p>
                            
                            <hr style='border: 1px solid blue; margin: 20px 0;'>
                            
                            <p>На это письмо не нужно отвечать, так как оно создано автоматически и предназначено только для уведомления.</p>
                            
                            <p>В случае, если Вы считаете, что письмо поступило ошибочно - проигнорируйте его.</p>
                        </div>";

            await MailService.SendEmailAsync(email, "Подтверждение регистрации на Педагог Года", htmlBody);

            
        }
        else
        {
            statusMessage = $"Последнее письмо было отправлено менее чем за 24 часа назад. Пожалуйста, попробуйте позже.";
        }
    }
}
