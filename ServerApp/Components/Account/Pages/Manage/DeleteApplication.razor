@page "/account/manage/delete-application"

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Удаление анкеты участника</PageTitle>

<h3>Удаление анкеты участника</h3>
<StatusMessage Message="@message" />

<div class="alert alert-warning" role="alert">
    <strong>Это действие приведет к потере данных, заполненных в анкете, и восстановить их будет невозможно.</strong>
</div>

<EditForm Model="Input" FormName="delete-application" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    @if (requirePassword)
    {
        <div class="form-input mb-3">
            <ValidationMessage For="() => Input.Password" class="text-danger" />
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Пароль" />
        </div>
    }
    <Button Type="ButtonType.Submit"
            Color="ButtonColor.Danger">
        Удалить
    </Button>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Ошибка: Неверный пароль.";
            return;
        }

        //логика удаления анкеты
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}