@page "/admin/editblocks/{Id:guid}"
@page "/admin/editblocks/new"

@inject IAdminService data
@inject NavigationManager navigation

<PageTitle>Настройка EditBlock</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Редактирование EditBlock
        </div>
    </div>
    <div class="block-content">
        <EditForm Class="w-100" Model="block" OnValidSubmit="OnValidSubmit">
            <div class="form-text">Номер блока</div>
            <div class="form-input w-100 mb-3">
                <InputNumber class="form-control mb-3" placeholder="Введите номер блока" @bind-Value="block.Number" />
            </div>
            <div class="form-text">Название блока</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите название блока" @bind-Value="block.Name" />
            </div>
            <div class="form-text">Треки</div>
            <div class="form-input w-100 mt-3 mb-3">
                @foreach (var track in tracks)
                {
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="@track.Name-@block.Id"
                               @bind="@trackSelections[block.Id][track.Name!]" />
                        <label class="form-check-label" for="@track.Name-@block.Id">
                            @track.Name
                        </label>
                    </div>
                }
            </div>

            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Сохранить</Button>
                <a type="button" class="btn btn-secondary" href="/admin/editblocks">Назад</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    EditBlock block = new();

    IEnumerable<Track> tracks = Enumerable.Empty<Track>();
    Dictionary<Guid, Dictionary<string, bool>> trackSelections = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            block = await data.GetEditBlockByIdAsync(Id);
        }

        tracks = await data.GetTracksAsync();
        if (!trackSelections.ContainsKey(block.Id))
        {
            trackSelections[block.Id] = tracks.ToDictionary(track => track.Name!, track => block.Tracks.Any(t => t.Name == track.Name));
        }
    }

    async Task OnValidSubmit()
    {
        if (trackSelections.TryGetValue(block.Id, out var trackSelection))
        {
            block.Tracks = tracks.Where(t => trackSelection.TryGetValue(t.Name!, out bool selected) && selected).ToList();
        }

        await data.SaveEditBlockAsync(block);
        navigation.NavigateTo("/admin/editblocks");
    }
}