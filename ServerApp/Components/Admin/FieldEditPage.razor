@page "/admin/fields/{Id:guid}"
@page "/admin/fields/new"

@inject IAdmin data
@inject NavigationManager navigation

<PageTitle>Настройка Field</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Редактирование Field
        </div>
    </div>
    <div class="block-content">
        <EditForm Class="w-100" Model="field" OnValidSubmit="OnValidSumbit">
            <div class="form-text">Номер Field</div>
            <div class="form-input w-100 mb-3">
                <InputNumber class="form-control" placeholder="Введите номер Field" @bind-Value="field.Number" disabled="@(field.Id != Guid.Empty)" />
            </div>
            <div class="form-text">Название Field</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите название Field" @bind-Value="field.Name" />
            </div>
            <div class="form-text">Placeholder</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите Placeholder для Field" @bind-Value="field.Placeholder" />
            </div>
            <div class="form-text">EditGroup</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите EditGroup для Field" @bind-Value="field.EditGroup" />
            </div>

            <div class="form-text">ValueType</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="field.ValueTypeId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите ValueType</option>
                    @foreach (var type in valueTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>
            
            <Card class="w-100">
                <CardHeader>SelectValues</CardHeader>
                <CardBody>
                    <div class="table-container">
                        <table class="table table-hover table-bordered table-striped">
                            <tbody>
                                @foreach (var selVal in selectValues)
                                {
                                    <tr>
                                        <td class="d-flex justify-content-between p-2">
                                            @selVal.Value
                                            <Icon Color="IconColor.Danger" Name="IconName.X" type="button" @onclick="() => RemoveSelectValue(selVal)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </CardBody>
            </Card>
            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <InputText class="form-control w-25" @bind-Value="newSelectValue" placeholder="Введите значение SelectValue" />
                <Button Color="ButtonColor.Primary" @onclick="CreateSelectValue">Добавить</Button>
            </div>

            <div class="form-text">EditBlock</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="field.EditBlockId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите EditBlock</option>
                    @foreach (var editBlock in editBlocks)
                    {
                        <option value="@editBlock.Id">@editBlock.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="table-container">
                <table class="table table-hover table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="p-2">MarkBlocks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var markBlock in markBlocks)
                        {
                            <tr>
                                <td class="p-2">
                                    <div class="d-flex justify-content-between">
                                        <label class="form-check-label" for="@markBlock.Id-@field.Id">
                                            @markBlock.Name
                                        </label>
                                        <div>
                                            <input class="form-check-input" type="checkbox" id="@markBlock.Id-@field.Id"
                                                   @bind="markBlockSelections[field.Id][markBlock.Id!]" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Сохранить</Button>
                <a type="button" class="btn btn-secondary" href="/admin/fields">Назад</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { set; get; }
    Field field = new();

    IEnumerable<MarkBlock> markBlocks = Enumerable.Empty<MarkBlock>();
    Dictionary<Guid, Dictionary<Guid, bool>> markBlockSelections = new();
    
    IEnumerable<EditBlock> editBlocks = Enumerable.Empty<EditBlock>();
    IEnumerable<ValuesType> valueTypes = Enumerable.Empty<ValuesType>();

    List<SelectValue> selectValues = new();
    private string newSelectValue = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Id != Guid.Empty)
        {
            field = await data.Field.GetByIdAsync(Id);
        }
        
        markBlocks = await data.MarkBlock.GetAllAsync();
        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Id!, block => field.MarkBlocks!.Any(b => b.Id == block.Id));
        }

        editBlocks = await data.EditBlock.GetAllAsync();
        valueTypes = await data.ValuesType.GetAllAsync();

        selectValues = field.SelectValues;
    }

    async Task CreateSelectValue()
    {
        if (newSelectValue != String.Empty)
        {
            
        }
    }

    async Task RemoveSelectValue(SelectValue selVal)
    {
        
    }

    async Task OnValidSumbit()
    {
        if (field.ValueTypeId != Guid.Empty)
        {
            field.ValueType = valueTypes.Single(t => t.Id == field.ValueTypeId);
        }

        if (field.EditBlockId != Guid.Empty)
        {
            field.EditBlock = editBlocks.Single(b => b.Id == field.EditBlockId);
        }

        if (markBlockSelections.TryGetValue(field.Id, out var blockSelection))
        {
            field.MarkBlocks = markBlocks.Where(b => blockSelection.TryGetValue(b.Id!, out bool selected) && selected).ToList();
        } 

        await data.Field.SaveAsync(field);

        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Id!, block => field.MarkBlocks!.Any(b => b.Id == block.Id));
        }

        navigation.NavigateTo("/admin/fields");
    }
}