@page "/admin/fields/{Id:guid}"
@page "/admin/fields/new"

@inject IAdmin data
@inject NavigationManager navigation

<PageTitle>Настройка поля</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Редактирование поля
        </div>
    </div>
    <div class="block-content">
        <EditForm Class="w-100" Model="field" OnValidSubmit="OnValidSumbit">
            <div class="form-text">Номер поля</div>
            <div class="form-input w-100 mb-3">
                <InputNumber class="form-control" placeholder="Введите номер поля" @bind-Value="field.Number" />
            </div>
            <div class="form-text">Название поля</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите название поля" @bind-Value="field.Name" />
            </div>
            <div class="form-text">Placeholder</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите Placeholder для поля" @bind-Value="field.Placeholder" />
            </div>

            <div class="table-container">
                <table class="table table-hover table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="p-2">MarkBlocks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var markBlock in markBlocks)

                        {
                            <tr>
                                <td class="p-2">
                                    <div class="d-flex justify-content-between">
                                        <label class="form-check-label" for="@markBlock.Name-@field.Id">
                                            @markBlock.Name
                                        </label>
                                        <div>
                                            <input class="form-check-input" type="checkbox" id="@markBlock.Name-@field.Id"
                                                   @bind="markBlockSelections[field.Id][markBlock.Name!]" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @* <div class="table-container">
                <table class="table table-hover table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="p-2">Оценки</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var mark in marks)

                        {
                            <tr>
                                <td class="p-2">
                                    <div class="d-flex justify-content-between">
                                        <label class="form-check-label" for="@mark.Name-@field.Id">
                                            @mark.Name
                                        </label>
                                        <div>
                                            <input class="form-check-input" type="checkbox" id="@mark.Name-@field.Id"
                                                   @bind="markSelections[field.Id][mark.Name!]" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div> *@
            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Сохранить</Button>
                <a type="button" class="btn btn-secondary" href="/admin/fields">Назад</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { set; get; }
    Field field = new();

    IEnumerable<MarkBlock> markBlocks = Enumerable.Empty<MarkBlock>();
    Dictionary<Guid, Dictionary<string, bool>> markBlockSelections = new();

    // IEnumerable<Mark> marks = Enumerable.Empty<Mark>();
    // Dictionary<Guid, Dictionary<string, bool>> markSelections = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Id != Guid.Empty)
        {
            field = await data.Field.GetByIdAsync(Id);
        }
        
        markBlocks = await data.MarkBlock.GetAllAsync();
        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Name!, block => field.MarkBlocks!.Any(b => b.Name == block.Name));
        }

        // marks = await data.Mark.GetAllAsync();
        // if (!markSelections.ContainsKey(field.Id))
        // {
        //     markSelections[field.Id] = marks.ToDictionary(mark => mark.Name!, mark => field.Marks!.Any(m => m.Name == mark.Name));
        // }
    }

    async Task OnValidSumbit()
    {
        if (markBlockSelections.TryGetValue(field.Id, out var blockSelection))
        {
            field.MarkBlocks = markBlocks.Where(b => blockSelection.TryGetValue(b.Name!, out bool selected) && selected).ToList();
        }
        // if (markSelections.TryGetValue(field.Id, out var markSelection))
        // {
        //     field.Marks = marks.Where(m => markSelection.TryGetValue(m.Name!, out bool selected) && selected).ToList();
        // }

        await data.Field.SaveAsync(field);

        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Name!, block => field.MarkBlocks!.Any(b => b.Name == block.Name));
        }
        // if (!markSelections.ContainsKey(field.Id))
        // {
        //     markSelections[field.Id] = marks.ToDictionary(mark => mark.Name!, mark => field.Marks!.Any(m => m.Name == mark.Name));
        // }

        navigation.NavigateTo("/admin/fields");
    }
}
