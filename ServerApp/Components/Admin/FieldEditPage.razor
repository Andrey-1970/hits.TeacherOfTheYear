@page "/admin/fields/{Id:guid}"
@page "/admin/fields/new"

@inject IAdmin data
@inject NavigationManager navigation

<PageTitle>Настройка Field</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Редактирование Field
        </div>
    </div>
    <div class="block-content">
        <EditForm Class="w-100" Model="field" OnValidSubmit="OnValidSumbit">
            <div class="form-text">Номер Field</div>
            <div class="form-input w-100 mb-3">
                <InputNumber class="form-control" placeholder="Введите номер Field" @bind-Value="field.Number" />
            </div>
            <div class="form-text">Название Field</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите название Field" @bind-Value="field.Name" />
            </div>
            <div class="form-text">Placeholder</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите Placeholder для Field" @bind-Value="field.Placeholder" />
            </div>
            <div class="form-text">EditGroup</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите EditGroup для Field" @bind-Value="field.EditGroup" />
            </div>

            <div class="form-text">ValueType</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="field.ValueTypeId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите ValueType</option>
                    @foreach (var type in valueTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-text">
                Список возможных ответов 
                <strong>(в этом случае Field становится выборочным и ввод вручную будет невозможен)</strong> <span class="text-danger">*</span>
            </div>
            <div class="table-container">
                <table class="table table-hover table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="p-2">SelectValues</th>
                        </tr>
                        <tr>
                            <th class="p-2">
                                <input type="text" class="form-control" placeholder="Поиск по значению SelectValue" @bind="searchQuery" @oninput="OnSearchInput" />
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredSelectValues.Any())
                        {
                            @foreach (var selectValue in filteredSelectValues)
                            {
                                <tr>
                                    <td class="p-2">
                                        <div class="d-flex justify-content-between">
                                            <label class="form-check-label" for="@selectValue.Id-@field.Id">
                                                @selectValue.Value
                                            </label>
                                            <div>
                                                <input class="form-check-input" type="checkbox" id="@selectValue.Id-@field.Id"
                                                       @bind="selectValueSelections[field.Id][selectValue.Id!]" />
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else

                        {
                            <tr>
                                <td colspan="2" class="text-center">Не найдено</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-text">EditBlock</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="field.EditBlockId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите EditBlock</option>
                    @foreach (var editBlock in editBlocks)
                    {
                        <option value="@editBlock.Id">@editBlock.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="table-container">
                <table class="table table-hover table-bordered table-striped">
                    <thead>
                        <tr>
                            <th class="p-2">MarkBlocks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var markBlock in markBlocks)
                        {
                            <tr>
                                <td class="p-2">
                                    <div class="d-flex justify-content-between">
                                        <label class="form-check-label" for="@markBlock.Id-@field.Id">
                                            @markBlock.Name
                                        </label>
                                        <div>
                                            <input class="form-check-input" type="checkbox" id="@markBlock.Id-@field.Id"
                                                   @bind="markBlockSelections[field.Id][markBlock.Id!]" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Сохранить</Button>
                <a type="button" class="btn btn-secondary" href="/admin/fields">Назад</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { set; get; }
    Field field = new();

    IEnumerable<MarkBlock> markBlocks = Enumerable.Empty<MarkBlock>();
    Dictionary<Guid, Dictionary<Guid, bool>> markBlockSelections = new();

    IEnumerable<SelectValue> selectValues = Enumerable.Empty<SelectValue>();
    Dictionary<Guid, Dictionary<Guid, bool>> selectValueSelections = new();
    
    IEnumerable<EditBlock> editBlocks = Enumerable.Empty<EditBlock>();
    IEnumerable<ValuesType> valueTypes = Enumerable.Empty<ValuesType>();

    IEnumerable<SelectValue> filteredSelectValues = new List<SelectValue>();
    string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Id != Guid.Empty)
        {
            field = await data.Field.GetByIdAsync(Id);
        }
        
        markBlocks = await data.MarkBlock.GetAllAsync();
        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Id!, block => field.MarkBlocks!.Any(b => b.Id == block.Id));
        }

        selectValues = await data.SelectValue.GetAllAsync();
        if (!selectValueSelections.ContainsKey(field.Id))
        {
            selectValueSelections[field.Id] = selectValues.ToDictionary(selVal => selVal.Id!, selVal => field.SelectValues!.Any(s => s.Id == selVal.Id));
        }

        editBlocks = await data.EditBlock.GetAllAsync();
        valueTypes = await data.ValuesType.GetAllAsync();

        filteredSelectValues = selectValues;
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterMarks();
    }

    private void FilterMarks()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            filteredSelectValues = selectValues;
        }
        else
        {
            filteredSelectValues = selectValues.Where(selVal => selVal.Value != null && selVal.Value.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    async Task OnValidSumbit()
    {
        if (markBlockSelections.TryGetValue(field.Id, out var blockSelection))
        {
            field.MarkBlocks = markBlocks.Where(b => blockSelection.TryGetValue(b.Id!, out bool selected) && selected).ToList();
        }

        if (selectValueSelections.TryGetValue(field.Id, out var selectValueSelection))
        {
            field.SelectValues = selectValues.Where(selVal => selectValueSelection.TryGetValue(selVal.Id!, out bool selected) && selected).ToList();
        }

        if (field.EditBlockId != Guid.Empty)
        {
            field.EditBlock = editBlocks.Single(b => b.Id == field.EditBlockId);
        }

        if (field.ValueTypeId != Guid.Empty)
        {
            field.ValueType = valueTypes.Single(t => t.Id == field.ValueTypeId);
        }

        await data.Field.SaveAsync(field);

        if (!markBlockSelections.ContainsKey(field.Id))
        {
            markBlockSelections[field.Id] = markBlocks.ToDictionary(block => block.Id!, block => field.MarkBlocks!.Any(b => b.Id == block.Id));
        }

        if (!selectValueSelections.ContainsKey(field.Id))
        {
            selectValueSelections[field.Id] = selectValues.ToDictionary(selVal => selVal.Id!, selVal => field.SelectValues!.Any(selVal => selVal.Id == selVal.Id));
        }

        navigation.NavigateTo("/admin/fields");
    }
}