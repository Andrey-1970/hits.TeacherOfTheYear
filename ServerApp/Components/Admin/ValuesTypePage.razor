@page "/admin/valuestype"

@inject IAdmin data

<PageTitle>Настройка ValueTypes</PageTitle>

<div class="block">
    <div class="block-content">
        <Card class="w-100">
            <CardHeader>ValueTypes</CardHeader>
            <CardBody>
                <div class="table-container">
                    <table class="table table-hover table-bordered table-striped">
                        <tbody>
                            @foreach (var type in valueTypes)
                            {
                                <tr>
                                    <td class="d-flex justify-content-between p-2">
                                        @type.Name
                                        <Icon Color="IconColor.Danger" Name="IconName.X" type="button" @onclick="() => RemoveType(type)" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </CardBody>
        </Card>
        <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
            <InputText class="form-control w-25" @bind-Value="newType.Name" placeholder="Введите имя ValueType" />
            <Button Color="ButtonColor.Primary" @onclick="CreateType">Создать ValueType</Button>
            <a type="button" class="btn btn-secondary" href="/admin">Назад</a>
        </div>
    </div>
</div>

@code {
    IEnumerable<ValuesType> valueTypes = Enumerable.Empty<ValuesType>();
    ValuesType newType = new() { Id = Guid.NewGuid(), Name = String.Empty };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        valueTypes = await data.ValuesType.GetAllAsync();
    }

    async Task CreateType()
    {
        if (newType.Name != String.Empty)
        {
            await data.ValuesType.SaveAsync(newType);

            newType = new() { Id = Guid.NewGuid(), Name = String.Empty };
            StateHasChanged();
        }
    }

    async Task RemoveType(ValuesType type)
    {
        await data.ValuesType.RemoveAsync(type);
    }
}
