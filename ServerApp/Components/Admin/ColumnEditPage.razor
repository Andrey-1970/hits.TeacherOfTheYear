@page "/admin/columns/{Id:guid}"
@page "/admin/columns/new"

@inject IAdmin data
@inject NavigationManager navigation

<PageTitle>Настройка Column</PageTitle>

<div class="block">
    <div class="block-title">
        <div class="block-title-text">
            Редактирование Column
        </div>
    </div>
    <div class="block-content">
        <EditForm Class="w-100" Model="column" OnValidSubmit="OnValidSumbit">
            <div class="form-text">Номер Column</div>
            <div class="form-input w-100 mb-3">
                <InputNumber class="form-control" placeholder="Введите номер Column" @bind-Value="column.Number" disabled="@(column.Id != Guid.Empty)" />
            </div>
            <div class="form-text">Название Column</div>
            <div class="form-input w-100 mb-3">
                <InputText class="form-control mb-3" placeholder="Введите название Column" @bind-Value="column.Name" />
            </div>

            <div class="form-text form-input mb-3 text-end">
                Column обязательно для заполнения:
                <InputCheckbox class="darker-border-checkbox form-check-input mt-0" @bind-Value="column.IsRequired" />
            </div>

            <div class="form-text">ValueType</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="column.ValueTypeId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите ValueType</option>
                    @foreach (var type in valueTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-text">Table</div>
            <div class="form-input w-100 mb-3">
                <InputSelect class="form-control" @bind-Value="column.TableId">
                    <option value="@Guid.Empty" disabled selected hidden>Выберите Table</option>
                    @foreach (var table in tables)
                    {
                        <option value="@table.Id">@(table.Name!.Length > 120 ? table.Name.Substring(0, 120) + "..." : table.Name)</option>
                    }
                </InputSelect>
            </div>

            @* @if (selectValues.Count != 0)
            {
                <div class="table-container">
                    <table class="table table-hover table-bordered opacity-50">
                        <thead>
                            <tr>
                                <th class="p-2">SelectValues, содержащиеся в этом Column</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var selVal in selectValues)
                            {
                                <tr @onclick="() => GoToSelVal(selVal.Id)" style="cursor: pointer;">
                                    <td class="p-2">
                                        @selVal.Value
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            } *@

            <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
                <Button Color="ButtonColor.Success" Type="ButtonType.Submit">Сохранить</Button>
                <a type="button" class="btn btn-secondary" href="/admin/columns">Назад</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { set; get; }
    Column column = new();

    IEnumerable<Table> tables = Enumerable.Empty<Table>();
    IEnumerable<ValuesType> valueTypes = Enumerable.Empty<ValuesType>();

    List<SelectValue> selectValues = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Id != Guid.Empty)
        {
            column = await data.Column.GetByIdAsync(Id);
        }

        tables = await data.Table.GetAllAsync();
        valueTypes = await data.ValuesType.GetAllAsync();

        selectValues = column.SelectValues;
    }

    void GoToSelVal(Guid id)
    {
        navigation.NavigateTo($"/admin/selectvalues/{id}");
    }

    async Task OnValidSumbit()
    {
        if (column.TableId != Guid.Empty)
        {
            column.Table = tables.Single(t => t.Id == column.TableId);
        }

        if (column.ValueTypeId != Guid.Empty)
        {
            column.ValueType = valueTypes.Single(t => t.Id == column.ValueTypeId);
        }

        await data.Column.SaveAsync(column);

        navigation.NavigateTo("/admin/columns");
    }
}
