@page "/admin/roles"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using ServerApp.Data

@inject RoleManager<IdentityRole> roleManager

<PageTitle>Настройка ролей</PageTitle>

<div class="block">
    <div class="block-content">
        <Card class="w-100">
            <CardHeader>Роли</CardHeader>
            <CardBody>
                <div class="table-container">
                    <table class="table table-hover table-bordered table-striped">
                        <tbody>
                            @foreach (var role in roleManager.Roles)
                            {
                                <tr>
                                    <td class="d-flex justify-content-between p-2">
                                        @role.Name
                                        <Icon Color="IconColor.Danger" Name="IconName.X" type="button" @onclick="() => ShowConfirmationAsync(role)" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </CardBody>
        </Card>
        <div class="d-flex flex-row gap-2 mt-2 mb-2 justify-content-center w-100">
            <InputText class="form-control w-25" @bind-Value="newRole" placeholder="Введите имя роли" />
            <Button Color="ButtonColor.Primary" @onclick="CreateRole">Создать роль</Button>
            <a type="button" class="btn btn-secondary" href="/admin">Назад</a>
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />

@code {
    IEnumerable<IdentityRole> roles = [];
    private string newRole = String.Empty;

    private ConfirmDialog? dialog;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        roles = roleManager.Roles;
    }

    async Task CreateRole()
    {
        if (newRole != String.Empty)
        {
            await roleManager.CreateAsync(new(newRole));
            newRole = String.Empty;

            toastService.Notify(new(ToastType.Success, "Запись успешно сохранена"));
        }
    }

    private async Task ShowConfirmationAsync(IdentityRole role)
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                NoButtonText = "Отменить",
                YesButtonText = "Удалить",
                YesButtonColor = ButtonColor.Danger,
            };
        var confirmation = await dialog!.ShowAsync(
            title: "Подтвердите действие",
            message1: "Это действие нельзя будет отменить.",
            message2: "Хотите удалить запись из базы данных?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await roleManager.DeleteAsync(role);

            toastService.Notify(new(ToastType.Warning, "Запись удалена"));
        }
    }
}