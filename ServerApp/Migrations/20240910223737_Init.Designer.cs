// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910223737_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("861052a6-5337-4bf9-954f-db4ad62b772a"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5ebdac06-5b71-4381-b454-7b7a3788ae3f"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            EditBlocksId = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            EditBlocksId = new Guid("861052a6-5337-4bf9-954f-db4ad62b772a"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5ebdac06-5b71-4381-b454-7b7a3788ae3f"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("620495ec-0893-41a9-ab1d-be9bf057a217"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("25e8b7a5-ac37-4ff0-b9d6-4d6546a2529f"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("59f0f6f2-4149-4319-99bf-1ba7cabd33c0"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("6ba69f7b-76c7-43ae-b652-f5277667e04d"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("9b7a7636-91d0-46eb-9903-6b2b59606585"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("9eda46cb-114e-4434-8557-10c8188b1ca9"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("e8ef04a1-d0e2-4825-8de3-9d887cb0e6bc"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("6fc5ef79-309f-4a5c-b895-7a4b21582379"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("d0471717-1256-4025-a501-b6e48d0f402a"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("80b17d6c-3ab5-4e87-9f7d-4391726b0eb2"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("766dae35-59de-487c-8990-29419ab55cd7"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("85760593-601f-4473-80cb-056bdd6782c9"),
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5")
                        },
                        new
                        {
                            FieldsId = new Guid("e39b89c2-a000-42ac-940b-35a763d23d1d"),
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c")
                        },
                        new
                        {
                            FieldsId = new Guid("02c4b9d3-dda3-4dad-9d1a-3888f4f8d61c"),
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c")
                        },
                        new
                        {
                            FieldsId = new Guid("60c7ba33-3853-49f3-a72e-36ae8c06c6aa"),
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c")
                        },
                        new
                        {
                            FieldsId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c")
                        },
                        new
                        {
                            FieldsId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04")
                        },
                        new
                        {
                            FieldsId = new Guid("b53a521c-0659-482b-bc85-861e1adb8a79"),
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04")
                        },
                        new
                        {
                            FieldsId = new Guid("b561f2d4-1bea-4cf6-b952-066bf6728c14"),
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            TablesId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            TablesId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            TablesId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            TablesId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            TablesId = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            TablesId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            TablesId = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            TablesId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            TablesId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            TablesId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            TablesId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            TablesId = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            TablesId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            TablesId = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            TablesId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            TracksId = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            TracksId = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("4c86da90-3919-4bd3-bf11-654026673a71")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("9605f4b0-2bef-4355-bf7b-8a39bfc940ea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("d9836303-8ae4-48fa-b605-c40b56df3bfe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("7535d861-3dff-4fca-964c-33c13d016be4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("8b55d628-662a-4d55-ba9c-c5566eeeacab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("8329f51a-ada7-4b62-b9b7-75d3fbd8bdac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            MarksId = new Guid("c96d5490-aa4e-42db-ad45-56f14b8783f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            MarksId = new Guid("1804a4aa-498a-4817-80c8-f456899cb5f5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            MarksId = new Guid("6ad828d7-6ff1-45bd-a93d-4d27105eefd3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            MarksId = new Guid("2c01a7b7-4b11-40d5-83ea-5f930e46beb1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            MarksId = new Guid("b2d6bda1-362c-4bc4-88ad-0b40153fd0ff")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            MarksId = new Guid("dfaa5950-7a03-45b0-8330-feb7404e8dfb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            MarksId = new Guid("e101aca8-b6b7-46e6-af3c-b3c84ee6036f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            MarksId = new Guid("28495b26-18a0-4870-9394-99a71c626ac3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            MarksId = new Guid("492ba19b-b61b-4404-b194-886644fc0ac1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("e101aca8-b6b7-46e6-af3c-b3c84ee6036f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("28495b26-18a0-4870-9394-99a71c626ac3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("a2cf4c71-73c6-46ed-94be-7cc574b61a30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("3e6d02b4-794d-492e-aa12-8e4686401183")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("134aed6c-d647-4b97-9675-199e0646a697")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("0e00c520-579c-487d-9325-0bb19e305260")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            MarksId = new Guid("fd906648-5b3d-4d45-a851-2350f1fd5b16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            MarksId = new Guid("492ba19b-b61b-4404-b194-886644fc0ac1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            MarksId = new Guid("a1ede88d-0cfb-47fb-8d2d-63833246523f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            MarksId = new Guid("c572b7a3-9d88-41c8-a4da-fe24586a6d1a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            MarksId = new Guid("849eb435-c83e-4841-bf9d-df326c9cfe8b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            MarksId = new Guid("6e6d7c27-8552-4911-972c-8207fcc105a6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d1ad3c60-960c-4b03-ae89-dd3604551419",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "c644d989-fcb9-4a62-b73b-c17e576bf34a",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "c3ed8a53-7377-4842-84b9-8c1384a7bc68",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "a07c9f1f-5c74-4070-8638-c6531e53b4f8",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "8b8ed1e7-49fe-4bc3-8920-489c3f9661c3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e3eaae0-a78b-4e72-91f6-cc8f4b2eea42"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("f417c058-87c0-49cd-82e3-6cd8fb1ed8e2"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("fb2279c0-1f41-4ab3-9eee-ca5671a352aa"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("eae99f94-cb1b-44fa-b7a9-577066e36601"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("9b365f24-784c-4c53-a2d9-d8facc149045"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("c15ee96d-ad76-4018-addc-a02c270dda3d"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41873c9c-51d7-4eb1-a364-722a174a11bc"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7de2869b-758d-4a34-9db5-49742b27b727"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e35fd8bf-4334-4be4-8cf3-b20925f49d06"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("dc533cef-82e7-404f-be4c-3a22ec75201a"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("67851244-4404-4efa-b0ae-1f23781055c9"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("dc533cef-82e7-404f-be4c-3a22ec75201a")
                        },
                        new
                        {
                            Id = new Guid("6a15d6b7-5638-4749-b7a1-f76d20d97243"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7616db1d-4268-4b07-83e7-3155dc1b9d79"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("2cfd4d73-bdc8-452a-b532-a1b61128b3d0"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7616db1d-4268-4b07-83e7-3155dc1b9d79")
                        },
                        new
                        {
                            Id = new Guid("a54f78cb-7698-4f8b-ad73-f4836dd12e7b"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("334aaa78-2c21-4ec9-935b-ea76d2c6d7c0"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("af716d68-7599-406d-9bbf-7b05bf7b1348"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("334aaa78-2c21-4ec9-935b-ea76d2c6d7c0")
                        },
                        new
                        {
                            Id = new Guid("6191b6b8-f3be-4e5f-b76c-9ac4dc7664e5"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c6773315-90d6-4cf7-9a4d-850ea99c38cd"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("3db3a590-93c5-4968-8e4a-c368b32f72d2"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c6773315-90d6-4cf7-9a4d-850ea99c38cd")
                        },
                        new
                        {
                            Id = new Guid("dde60a95-3a34-45d2-aeb0-b70780450164"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("849d879f-6554-4d3f-90bb-a7527a8c18fd"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("469da3e8-6e9e-48e6-acc1-6dc21d541500"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("849d879f-6554-4d3f-90bb-a7527a8c18fd")
                        },
                        new
                        {
                            Id = new Guid("e36122fa-f313-4abc-a524-2a48a603809e"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("25ec9144-19ac-4ee8-8f8c-e6b017fc5a36"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("e6c072d6-fd48-4828-b25d-76b63dffcd5d"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("25ec9144-19ac-4ee8-8f8c-e6b017fc5a36")
                        },
                        new
                        {
                            Id = new Guid("5b073160-3c31-40bb-af3f-fdabbb1ece5f"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("22a68852-f003-4e66-921f-d80e79b925bf"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("abd4c391-572c-4a24-a6ba-7f257ff365e2"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("22a68852-f003-4e66-921f-d80e79b925bf")
                        },
                        new
                        {
                            Id = new Guid("207b1da7-4400-4b1b-a5fb-a78577054140"),
                            ColumnId = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6c89219e-1264-40d3-bb5c-619c6fae7c68"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("82f0d05b-3004-4742-a444-599ff74b29bc"),
                            ColumnId = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6c89219e-1264-40d3-bb5c-619c6fae7c68")
                        },
                        new
                        {
                            Id = new Guid("0c86e6c0-0804-45b3-a431-57d697558fd1"),
                            ColumnId = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("88f41c09-2f6d-492e-8aa5-f72fb56a2262"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("3c481279-1ed7-4d67-991a-a9232f681fa0"),
                            ColumnId = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("88f41c09-2f6d-492e-8aa5-f72fb56a2262")
                        },
                        new
                        {
                            Id = new Guid("e2b8395f-b86b-4b7d-85ff-8d84f189102a"),
                            ColumnId = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("313df5ed-4551-4da9-89d3-03ee9761b5a8"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("b938c45e-2346-4ad0-8e75-7f9db8cacaec"),
                            ColumnId = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("313df5ed-4551-4da9-89d3-03ee9761b5a8")
                        },
                        new
                        {
                            Id = new Guid("fd3281bd-a3b2-4ea5-951f-6dec61189579"),
                            ColumnId = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0c85629a-cd76-41ee-b72d-7ca6f87f54b6"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("fe04b5be-4b50-43ac-8ff5-ca1b6c5aafe8"),
                            ColumnId = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0c85629a-cd76-41ee-b72d-7ca6f87f54b6")
                        },
                        new
                        {
                            Id = new Guid("a5ff77d9-b3eb-4299-8e9c-2f84e96d97f7"),
                            ColumnId = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6b614ea1-6d41-47c2-aa1a-5978cbe0944e"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("e45505bc-a6dc-465b-b2ae-7e2267e14f22"),
                            ColumnId = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6b614ea1-6d41-47c2-aa1a-5978cbe0944e")
                        },
                        new
                        {
                            Id = new Guid("b09f13a4-2e54-44f8-92cb-c7b52d752808"),
                            ColumnId = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("bfa96157-04e5-40c4-b02d-2499f440c294"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("94e838e2-104f-4675-a0c3-950c3efc4463"),
                            ColumnId = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("bfa96157-04e5-40c4-b02d-2499f440c294")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("baf990ee-0625-4771-89e3-e6facd009b2e"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("65a94aac-af08-49a7-8ea1-22cc4530f0d5"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd"),
                            ValueTypeId = new Guid("01c56e05-f8a0-43b3-b50b-7611893550a3")
                        },
                        new
                        {
                            Id = new Guid("9a4745bd-db53-4141-a170-366c57cc44a6"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("5fcdde34-08e4-4381-a1e3-40787974b352"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("b8793683-6293-4f59-86ef-73ecee31d211"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("990edf57-06b9-4748-b055-2d008c1d0729"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5f868d1e-2d66-4eab-95ac-218bb57770bc"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("36278a77-1042-4fe3-aaaf-a39cea09fdae"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("e20c2b25-242e-4db0-b67b-6f4f8d1bbc13"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("0afdc1e4-7760-4063-ab9f-61be0d8afb1a"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("3c6bfc99-a5ca-4e8f-945a-59c4de57f9c5"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("883e30d3-a379-4130-9779-a67977ef9beb"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("61f0f574-c763-475f-a1d5-b47b706cdaf6"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("8f818caa-7cce-41e7-a90c-07b679d103fe"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("79ac96ce-03c7-4eda-8dd1-48d3f2f10d84"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("d3882049-8cba-4e11-82f2-a5e18765b1a7"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("72bacc78-5ff1-4594-8b93-77295068abee"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("69a12ae9-631f-4b6d-84f1-b41e05d6c10d"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("55b4d041-c9e0-4127-b6a7-a908292c9b81"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("95994b69-035b-4a5b-a4f5-d4410aeda6d8"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("3161c727-7256-4857-8434-d64bd150ef43"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("4d01ae6f-31c7-41d9-b5fc-ba4917b9bbd4"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("8a93954e-a0a8-4625-99a4-a11db53c6a35"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5d97702e-9995-4419-bf4a-d0ee189913ad"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5c4a35c9-aaa5-46ab-a907-5a3671263f06"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("249d3172-b6b9-47e9-a017-7ac2234b3d76"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("89e021ab-9923-4052-8a0d-f995e10ce808")
                        },
                        new
                        {
                            Id = new Guid("93f4298e-f952-40ca-b4dd-c650145291d5"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("b76f82cf-fc22-4c74-8e65-003ca06980f6"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("6c1c6a60-10c2-476b-9568-4ba5989e869e"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("ceea77c3-28da-407e-adc1-7488e5859e7f"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("39f9f9f7-39a2-453b-a687-ead9490a0569"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("35ba012a-2a77-45b1-8f07-baa191e916c1"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5da7a0c5-2263-46f5-9026-d523123a6f9a"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("0e260441-0c57-411a-b35d-1a27fc611296"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("39fe9f23-c4b5-4426-bf5b-4ae69c4baf60"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5b14fcac-a9e5-4eb4-ace1-70fb0b58aa6b"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("06efda11-e819-4a3f-8f43-113a1c8a4d6a"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("d0592609-e34a-406d-8e72-7648f829383c"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("b8d3d760-cefd-4266-b3cc-15d1b3a30ad8"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("789b9309-3098-41fb-a388-9e023f55c937"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("0261a38e-ff0c-4715-9ed7-58467f413ac1"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("0c9886f7-85b0-4c08-94a2-49bd48dfc7d8"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("6e0ffae4-628a-49b3-96bd-ac1dd18073e4"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("f4dffd8f-0526-402e-b0a2-a61ebf919daa"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("4f7a10da-46ca-417c-bcdc-49b50344945c"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("c953ac22-39ed-4d97-9dc1-0f68284a4367"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("6c6afdb0-cdd5-4a7c-937e-060f33337710"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("1c3e35a5-ee3a-4f17-bedd-4621d7b76534"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("ee931aeb-0ee3-4074-988a-4d731d078f1a"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5e3f73ff-38ba-4421-86d9-34e27c311929"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("5be741a5-b107-464e-a24c-dbf0e3108857"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("8be25f74-35fc-4dbd-9f2a-bb82741c66e7"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212"),
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("861052a6-5337-4bf9-954f-db4ad62b772a"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("5ebdac06-5b71-4381-b454-7b7a3788ae3f"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("029b444e-8cac-48e6-80b4-80c6f74825f9"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("620495ec-0893-41a9-ab1d-be9bf057a217"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("25e8b7a5-ac37-4ff0-b9d6-4d6546a2529f"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("ff6196b5-31c8-4769-8b47-2909067654ca")
                        },
                        new
                        {
                            Id = new Guid("59f0f6f2-4149-4319-99bf-1ba7cabd33c0"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("6ba69f7b-76c7-43ae-b652-f5277667e04d"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("9b7a7636-91d0-46eb-9903-6b2b59606585"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("9eda46cb-114e-4434-8557-10c8188b1ca9"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("e8ef04a1-d0e2-4825-8de3-9d887cb0e6bc"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("6fc5ef79-309f-4a5c-b895-7a4b21582379"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("d0471717-1256-4025-a501-b6e48d0f402a"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("80b17d6c-3ab5-4e87-9f7d-4391726b0eb2"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            EditBlockId = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("766dae35-59de-487c-8990-29419ab55cd7"),
                            EditBlockId = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("85760593-601f-4473-80cb-056bdd6782c9"),
                            EditBlockId = new Guid("01dfccd0-f1c4-4217-8eb2-170520b1dd71"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7")
                        },
                        new
                        {
                            Id = new Guid("e39b89c2-a000-42ac-940b-35a763d23d1d"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("02c4b9d3-dda3-4dad-9d1a-3888f4f8d61c"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("60c7ba33-3853-49f3-a72e-36ae8c06c6aa"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("b53a521c-0659-482b-bc85-861e1adb8a79"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        },
                        new
                        {
                            Id = new Guid("b561f2d4-1bea-4cf6-b952-066bf6728c14"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("628789dc-37f3-472c-a867-9be35f4056cf")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c86da90-3919-4bd3-bf11-654026673a71"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493")
                        },
                        new
                        {
                            Id = new Guid("9605f4b0-2bef-4355-bf7b-8a39bfc940ea"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493")
                        },
                        new
                        {
                            Id = new Guid("d9836303-8ae4-48fa-b605-c40b56df3bfe"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("60c7ba33-3853-49f3-a72e-36ae8c06c6aa"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7535d861-3dff-4fca-964c-33c13d016be4"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("e39b89c2-a000-42ac-940b-35a763d23d1d"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("8b55d628-662a-4d55-ba9c-c5566eeeacab"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("02c4b9d3-dda3-4dad-9d1a-3888f4f8d61c"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8329f51a-ada7-4b62-b9b7-75d3fbd8bdac"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46")
                        },
                        new
                        {
                            Id = new Guid("c96d5490-aa4e-42db-ad45-56f14b8783f6"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155")
                        },
                        new
                        {
                            Id = new Guid("1804a4aa-498a-4817-80c8-f456899cb5f5"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2")
                        },
                        new
                        {
                            Id = new Guid("6ad828d7-6ff1-45bd-a93d-4d27105eefd3"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2")
                        },
                        new
                        {
                            Id = new Guid("2c01a7b7-4b11-40d5-83ea-5f930e46beb1"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2")
                        },
                        new
                        {
                            Id = new Guid("b2d6bda1-362c-4bc4-88ad-0b40153fd0ff"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2")
                        },
                        new
                        {
                            Id = new Guid("dfaa5950-7a03-45b0-8330-feb7404e8dfb"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e")
                        },
                        new
                        {
                            Id = new Guid("e101aca8-b6b7-46e6-af3c-b3c84ee6036f"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("28495b26-18a0-4870-9394-99a71c626ac3"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7")
                        },
                        new
                        {
                            Id = new Guid("492ba19b-b61b-4404-b194-886644fc0ac1"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6")
                        },
                        new
                        {
                            Id = new Guid("a2cf4c71-73c6-46ed-94be-7cc574b61a30"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137")
                        },
                        new
                        {
                            Id = new Guid("3e6d02b4-794d-492e-aa12-8e4686401183"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("b53a521c-0659-482b-bc85-861e1adb8a79"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("134aed6c-d647-4b97-9675-199e0646a697"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("b561f2d4-1bea-4cf6-b952-066bf6728c14"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("0e00c520-579c-487d-9325-0bb19e305260"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4")
                        },
                        new
                        {
                            Id = new Guid("fd906648-5b3d-4d45-a851-2350f1fd5b16"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4")
                        },
                        new
                        {
                            Id = new Guid("a1ede88d-0cfb-47fb-8d2d-63833246523f"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("ac75539b-2057-40c1-87bc-c38eced39817")
                        },
                        new
                        {
                            Id = new Guid("c572b7a3-9d88-41c8-a4da-fe24586a6d1a"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212")
                        },
                        new
                        {
                            Id = new Guid("849eb435-c83e-4841-bf9d-df326c9cfe8b"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("6e6d7c27-8552-4911-972c-8207fcc105a6"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6da3328-bc8f-42ca-a00f-311e0af857f5"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("112a967a-c67a-4dd2-b239-76c1b882df2c"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d019ce39-0fcd-4680-bc49-30af5a92e76e"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("cea79a16-4b44-4807-aca7-46a956599e7c"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("53907503-f2a7-4c9b-b133-1f69aa3d8e04"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d5bef8b3-e97c-43c9-a8ed-c537427531cd"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("a4f90a18-38b0-4dcb-a68e-043d40191032"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc533cef-82e7-404f-be4c-3a22ec75201a"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("7616db1d-4268-4b07-83e7-3155dc1b9d79"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("334aaa78-2c21-4ec9-935b-ea76d2c6d7c0"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("c6773315-90d6-4cf7-9a4d-850ea99c38cd"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("849d879f-6554-4d3f-90bb-a7527a8c18fd"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("25ec9144-19ac-4ee8-8f8c-e6b017fc5a36"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("22a68852-f003-4e66-921f-d80e79b925bf"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("6c89219e-1264-40d3-bb5c-619c6fae7c68"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("6f738175-4729-46ff-972b-2b1014d803dd")
                        },
                        new
                        {
                            Id = new Guid("88f41c09-2f6d-492e-8aa5-f72fb56a2262"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        },
                        new
                        {
                            Id = new Guid("313df5ed-4551-4da9-89d3-03ee9761b5a8"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        },
                        new
                        {
                            Id = new Guid("0c85629a-cd76-41ee-b72d-7ca6f87f54b6"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        },
                        new
                        {
                            Id = new Guid("6b614ea1-6d41-47c2-aa1a-5978cbe0944e"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        },
                        new
                        {
                            Id = new Guid("bfa96157-04e5-40c4-b02d-2499f440c294"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b719bf7-545e-464d-b0b5-c8c9ed19e25b"),
                            FieldId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("661ded91-06da-4723-8936-06343e4c8e01"),
                            FieldId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("f75abb0f-9480-467b-8186-75162cde45ad"),
                            FieldId = new Guid("c797f109-31dd-4559-8a16-7e74ff1654c7"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("1bd775c0-4494-47f4-aab6-b49b473a5815"),
                            FieldId = new Guid("766dae35-59de-487c-8990-29419ab55cd7"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("6ea557d5-64a0-4e54-a9f1-303aa5418983"),
                            FieldId = new Guid("766dae35-59de-487c-8990-29419ab55cd7"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("52f59426-e392-423b-a906-003108fcd15d"),
                            ColumnId = new Guid("b8793683-6293-4f59-86ef-73ecee31d211"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("0cdc65e5-8680-4971-9e33-b7895b29a311"),
                            ColumnId = new Guid("b8793683-6293-4f59-86ef-73ecee31d211"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("3493a2da-e798-4471-93f0-a2fa035a61f3"),
                            ColumnId = new Guid("b8793683-6293-4f59-86ef-73ecee31d211"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("9bea95e5-ea87-4bde-9347-00c1105fe9a3"),
                            ColumnId = new Guid("4d01ae6f-31c7-41d9-b5fc-ba4917b9bbd4"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("0988fca9-7cd0-42a0-bc68-34ff1a684dba"),
                            ColumnId = new Guid("4d01ae6f-31c7-41d9-b5fc-ba4917b9bbd4"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("1c21fbcc-e17e-4731-a480-f386e8a741a1"),
                            ColumnId = new Guid("4d01ae6f-31c7-41d9-b5fc-ba4917b9bbd4"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("e8ef5259-75e7-4669-8f1b-419e1b69378c"),
                            ColumnId = new Guid("39f9f9f7-39a2-453b-a687-ead9490a0569"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("59f73ecf-5d29-4392-ba81-675a7609d1eb"),
                            ColumnId = new Guid("39f9f9f7-39a2-453b-a687-ead9490a0569"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("20cc4e39-8d36-4ffd-9052-2252c6d65035"),
                            ColumnId = new Guid("f4dffd8f-0526-402e-b0a2-a61ebf919daa"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("ae919aec-5e1d-4c8a-a5e0-680997129b77"),
                            ColumnId = new Guid("f4dffd8f-0526-402e-b0a2-a61ebf919daa"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("259405d6-71a2-4bdb-9c04-dfff0680f79d"),
                            ColumnId = new Guid("c953ac22-39ed-4d97-9dc1-0f68284a4367"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("774a455c-cafd-4d51-98e1-27de01b811f9"),
                            ColumnId = new Guid("c953ac22-39ed-4d97-9dc1-0f68284a4367"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("b9a6e4db-3269-4434-a468-0b6e7e8c9092"),
                            ColumnId = new Guid("c953ac22-39ed-4d97-9dc1-0f68284a4367"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("42857858-2a48-499f-845e-ebc6516c3230"),
                            ColumnId = new Guid("c953ac22-39ed-4d97-9dc1-0f68284a4367"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("7f74223a-85ac-4499-b0ea-de2d6bea0af3"),
                            ColumnId = new Guid("5e3f73ff-38ba-4421-86d9-34e27c311929"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("708c37e1-d6b0-4c19-b5fa-289c79b185b2"),
                            ColumnId = new Guid("5e3f73ff-38ba-4421-86d9-34e27c311929"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("df9fe084-ed7d-4348-986d-18cb0da3337a"),
                            ColumnId = new Guid("5e3f73ff-38ba-4421-86d9-34e27c311929"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("03f60212-9445-4bbc-8d85-a1219d7b0c9f"),
                            ColumnId = new Guid("5e3f73ff-38ba-4421-86d9-34e27c311929"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("1673b004-c91f-4cd8-bb4a-87b19bb946ea"),
                            ColumnId = new Guid("5d97702e-9995-4419-bf4a-d0ee189913ad"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("636349a0-f65d-4109-81a7-ff54d35c9033"),
                            ColumnId = new Guid("5d97702e-9995-4419-bf4a-d0ee189913ad"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("71956c1d-5863-46c9-99ba-675564f7b186"),
                            ColumnId = new Guid("b76f82cf-fc22-4c74-8e65-003ca06980f6"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("01ee2a5e-9890-495a-aa21-71e9639f2c8f"),
                            ColumnId = new Guid("b76f82cf-fc22-4c74-8e65-003ca06980f6"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("ef738917-71d3-4982-a367-0539da984a3f"),
                            ColumnId = new Guid("d0592609-e34a-406d-8e72-7648f829383c"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("825b37db-cd9e-45af-9f60-0d008650fe40"),
                            ColumnId = new Guid("d0592609-e34a-406d-8e72-7648f829383c"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("90eace24-61ba-4773-aa3d-da7fc3853c82"),
                            ColumnId = new Guid("b8d3d760-cefd-4266-b3cc-15d1b3a30ad8"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("9be1538b-c135-4efa-8a63-561bf911f5a8"),
                            ColumnId = new Guid("b8d3d760-cefd-4266-b3cc-15d1b3a30ad8"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("77f51b89-e539-4329-9785-8076c5aff8c6"),
                            ColumnId = new Guid("b8d3d760-cefd-4266-b3cc-15d1b3a30ad8"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("4472984c-12e0-4561-b09f-269c1fe4564d"),
                            ColumnId = new Guid("b8d3d760-cefd-4266-b3cc-15d1b3a30ad8"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("8f31b829-9f60-45a9-b93f-d905eaae53d6"),
                            ColumnId = new Guid("61f0f574-c763-475f-a1d5-b47b706cdaf6"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("4ca90b17-2fa4-4557-8d0a-253017b7060c"),
                            ColumnId = new Guid("61f0f574-c763-475f-a1d5-b47b706cdaf6"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("4ee7f22b-7da2-4371-89b5-3fc6d3f23244"),
                            ColumnId = new Guid("61f0f574-c763-475f-a1d5-b47b706cdaf6"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("3750739d-91a7-4d97-826d-b58419b0bbc2"),
                            ColumnId = new Guid("249d3172-b6b9-47e9-a017-7ac2234b3d76"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("4773048d-5fe9-4a81-a3c9-199122dff11b"),
                            ColumnId = new Guid("249d3172-b6b9-47e9-a017-7ac2234b3d76"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("1e2467f1-5845-4984-820a-e8892e9c96d0"),
                            ColumnId = new Guid("0e260441-0c57-411a-b35d-1a27fc611296"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("24cb4a2e-88b7-4e56-858b-40d013fec952"),
                            ColumnId = new Guid("0e260441-0c57-411a-b35d-1a27fc611296"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f738175-4729-46ff-972b-2b1014d803dd"),
                            EditBlockId = new Guid("861052a6-5337-4bf9-954f-db4ad62b772a"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3dccf1f0-797f-4869-9b0f-79f3629b30a7"),
                            EditBlockId = new Guid("5ebdac06-5b71-4381-b454-7b7a3788ae3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2cc7f1b1-880d-494a-a4ed-68802b92ebd6"),
                            EditBlockId = new Guid("5ebdac06-5b71-4381-b454-7b7a3788ae3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("268e0e84-69cd-47bc-a463-803f9d83b464"),
                            EditBlockId = new Guid("fdf8ef1c-649c-479c-b004-43176254d491"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("2a452c9f-90db-4269-ac51-8e70d5f02493"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("e8fa2ebc-f799-4603-a627-af0c02aabc46"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("67a35d39-ec5f-44ac-bbb1-800661c487e2"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("48dad204-76c9-4df1-bd68-0f57cc15055e"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("3bec7f8c-ebc0-40b6-b4b7-e019ad547155"),
                            EditBlockId = new Guid("feddabe7-9ccd-4709-8a45-c841808014f9"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("1c341020-6ca4-4ed6-9f37-5fac0d8c8137"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("0f481f13-244f-41fe-9f6c-d70ee659a2a4"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("ac75539b-2057-40c1-87bc-c38eced39817"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("a9f02ab0-ec64-49cd-962e-ed632d859212"),
                            EditBlockId = new Guid("b87d8c0d-b547-41cc-8d4a-bd754c1934f5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2924675-9bf8-4c7d-bdd6-9ca60795177d"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("93ee93a3-cc5c-4182-a7ea-594cb73aa3f2"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("628789dc-37f3-472c-a867-9be35f4056cf"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("3b2a06c7-c23e-4b06-a46b-323902a497a7"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("89e021ab-9923-4052-8a0d-f995e10ce808"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("ff6196b5-31c8-4769-8b47-2909067654ca"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("01c56e05-f8a0-43b3-b50b-7611893550a3"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
