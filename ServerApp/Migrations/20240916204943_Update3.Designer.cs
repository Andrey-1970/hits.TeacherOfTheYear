// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916204943_Update3")]
    partial class Update3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FullPhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CropPhotoId")
                        .IsUnique();

                    b.HasIndex("FullPhotoId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            EditBlocksId = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f6d9383d-495d-4af5-b7c5-0ba9936841a5"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            EditBlocksId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            EditBlocksId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f6d9383d-495d-4af5-b7c5-0ba9936841a5"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("1e35e8ed-7984-4286-9ba4-183af1ae62cb"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("b020a3c6-99cd-4c29-b039-c8701db8f798"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("d9e5dc4a-886c-46b2-bb27-2e249e4cae3b"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("8f7d38b6-a6cf-4c5d-8e03-b78cbb2aa81b"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("f0ed3dd3-d357-41b1-8f5e-803b01a319b4"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("da50a6f1-9db2-466c-b165-726ac3bbaa7b"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("1f40f0b0-aafa-48cf-81ad-3d9743f7c8a2"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("81777154-a657-45c6-8ef4-f9cff5a0c100"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("9c24e3af-6a30-494a-8827-e2c815c3f8f3"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("3397d22f-5dd0-434b-8d8e-68b72cf81ba2"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("b517350a-b6f1-4bf8-8348-a2727c7f1eed"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("07612b69-c3e4-4123-89bb-1b33e65b5254"),
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8")
                        },
                        new
                        {
                            FieldsId = new Guid("f6901305-74f8-4a5a-8ec1-095f9c53b7b9"),
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4")
                        },
                        new
                        {
                            FieldsId = new Guid("85a611bd-fdb6-4e58-bd14-d1247b3400ad"),
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4")
                        },
                        new
                        {
                            FieldsId = new Guid("9237f975-ef99-44aa-8cc9-5fac68559582"),
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4")
                        },
                        new
                        {
                            FieldsId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d")
                        },
                        new
                        {
                            FieldsId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b")
                        },
                        new
                        {
                            FieldsId = new Guid("ebfea5aa-f6df-4e8b-aa04-0efe9489afe9"),
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b")
                        },
                        new
                        {
                            FieldsId = new Guid("635777ad-cb0d-4909-ab4f-eff0376fce2c"),
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            TablesId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            TablesId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            TablesId = new Guid("156d0440-7d96-4034-9362-467618fe4117")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            TablesId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            TablesId = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            TablesId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            TablesId = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            TablesId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            TablesId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            TablesId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8"),
                            TablesId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            TablesId = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            TablesId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            TablesId = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            TablesId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            TracksId = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            TracksId = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("bf22f156-46fd-446e-84ff-10a8b9635275")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("66b84870-7dd2-4055-858a-29ad778165c8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("864ec7d2-bd8c-474d-bc78-80d42b1f219a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("44a31f4f-4f7d-4991-8a9f-7a735a52f41a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("675c79d0-a2f0-4d68-9bf9-5b383c326ad3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("bf3da495-3916-4eb9-ab4c-a11ca5d66b52")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            MarksId = new Guid("da288433-e821-41b8-9e6e-90d4d00e0923")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            MarksId = new Guid("49811271-b92c-411b-b45d-a569ab8d86c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            MarksId = new Guid("c6e86fc3-32a2-44ae-8455-e58dff8cde8b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            MarksId = new Guid("c34daf77-dcde-446b-90ef-02bf4a8c0244")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            MarksId = new Guid("b65b3465-29e6-4c5f-b1d9-8660e22f3f25")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            MarksId = new Guid("96eb5c6d-41f1-4bd9-88f8-05bf2c894b65")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            MarksId = new Guid("ac8fa087-8793-4dee-915c-1c2eb1f3b56b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            MarksId = new Guid("7e9d8eb3-5a0e-4245-ad29-1dd4f0a5c6ff")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            MarksId = new Guid("277c2d2b-5519-438d-aa7a-98378a52a586")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("ac8fa087-8793-4dee-915c-1c2eb1f3b56b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("7e9d8eb3-5a0e-4245-ad29-1dd4f0a5c6ff")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("eb80ed87-4db6-48a2-acc1-af68f769a186")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("e0ca1761-78bd-4516-8efd-c4c3d029a5ca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("502ecdfd-71ea-4ed7-a0b2-0fce971271c5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("692eb0fe-834c-47e4-91c6-98a1ad44f345")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            MarksId = new Guid("03f8845e-041f-4205-9faf-2e7e617a6c01")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            MarksId = new Guid("277c2d2b-5519-438d-aa7a-98378a52a586")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            MarksId = new Guid("66727a22-584b-4530-a6f6-0e8733bf3d25")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            MarksId = new Guid("5a84a546-4d2d-4bb8-b850-0df69d4db191")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            MarksId = new Guid("eb23c5b3-8729-41cf-a3e0-49bbc9481e1a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            MarksId = new Guid("14e504d2-383d-4e31-9d66-be95617c035b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e5ec9139-b3af-4115-b585-3c375898e67d",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "2faa169d-a63f-43e2-ae18-3f1245189a3d",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "84f6a664-6b5e-40b1-8e04-f64be9b4d307",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "80fe7082-65c0-4a6b-af89-acd9fc265729",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "899dc015-87cf-4557-8af5-79ed06de84ba",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4762b5b3-fa8f-4b93-8605-5285ff8f8f44"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("8005a686-3ea3-4c9a-8288-785ee5c2fa3f"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("f02cf7e0-c8e5-48cb-9a6a-86d89c91f457"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("43b25816-f53e-4008-9fde-2f28f7964805"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("87c18ce2-30f8-426d-abf5-624511d9d421"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("0e8394fc-c8d0-4313-994a-ff9c178a3682"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8617b191-af29-4ecb-a417-ffefd779cc1b"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("118a0f8d-9439-40ff-bc51-349a6e527b9e"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae7ba25b-0f17-4228-b5a0-6b52f5b9f302"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f86ceda9-d679-49c1-b454-5cc1429c0de0"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("3c00f730-ff9a-4d9d-8337-7126bf75f335"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f86ceda9-d679-49c1-b454-5cc1429c0de0")
                        },
                        new
                        {
                            Id = new Guid("c573e7ed-fc23-44b1-83d7-1d302a3c0cd8"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("99af3d55-d531-4457-b48f-3a61f0e5029a"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("5aae0e44-c386-4424-b10c-1287c63a70e3"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("99af3d55-d531-4457-b48f-3a61f0e5029a")
                        },
                        new
                        {
                            Id = new Guid("48701d44-e840-403e-b656-2b67f27e1d65"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d0f5f666-6149-4a37-900e-9f3a6e0fac2b"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("e7e844b9-5e93-4d2e-9ef9-b688d52d1ebe"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d0f5f666-6149-4a37-900e-9f3a6e0fac2b")
                        },
                        new
                        {
                            Id = new Guid("280717fa-3715-4592-91b6-03b395e5d7df"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6e4f6320-3880-4024-8a08-86104d869d50"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("07ef818a-9feb-4d39-bf05-a027c688c03b"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6e4f6320-3880-4024-8a08-86104d869d50")
                        },
                        new
                        {
                            Id = new Guid("b36ab3a3-060c-4eb9-86a1-7f3baa439082"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5f4f3636-3280-4603-a39a-670cb7d3422b"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("9ba1feb6-bd54-45da-ba94-ed49cecb71ec"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5f4f3636-3280-4603-a39a-670cb7d3422b")
                        },
                        new
                        {
                            Id = new Guid("2e39eb33-7426-4f74-a919-0671b2af72ca"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("57feb7ed-98b6-4f37-a0bb-b1c4026bd200"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("dc09f0a6-9bf2-4163-861d-3dedb3a5e784"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("57feb7ed-98b6-4f37-a0bb-b1c4026bd200")
                        },
                        new
                        {
                            Id = new Guid("daa50a52-bf89-4390-aa49-b3f48a85fbf0"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("713cb0c8-0b70-4d8e-92f4-d390ab557b0a"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("18e78d01-a09e-4952-a91e-8ca75ca58e66"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("713cb0c8-0b70-4d8e-92f4-d390ab557b0a")
                        },
                        new
                        {
                            Id = new Guid("e8f23608-ffc5-4ef0-8b5f-8c9f5b61e11f"),
                            ColumnId = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8229d870-8db2-4cdf-b6bd-0428e2681c81"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("0fd862f7-9e6a-4899-8501-d17b15a93f66"),
                            ColumnId = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8229d870-8db2-4cdf-b6bd-0428e2681c81")
                        },
                        new
                        {
                            Id = new Guid("b329a76e-3b62-4cd4-a9bd-f37d95d5f606"),
                            ColumnId = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("06781231-8acf-4e5f-add4-559b4a521951"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("0f0511de-f0a9-4484-ba53-5f8e30f921ee"),
                            ColumnId = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06781231-8acf-4e5f-add4-559b4a521951")
                        },
                        new
                        {
                            Id = new Guid("a5beacf2-2b93-4af9-84bb-85b7c9aac017"),
                            ColumnId = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("152da749-fa45-4888-a20b-7c721c0c2fdb"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("1057e35f-436b-4910-985e-24a26c0d7fb7"),
                            ColumnId = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("152da749-fa45-4888-a20b-7c721c0c2fdb")
                        },
                        new
                        {
                            Id = new Guid("f8d483da-bdf0-4a1c-a01d-67020feafd5f"),
                            ColumnId = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3dd436b3-eb8a-4ad7-8924-02bf457f2999"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("32e498d8-b57b-468e-b85d-8a968b5794e5"),
                            ColumnId = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3dd436b3-eb8a-4ad7-8924-02bf457f2999")
                        },
                        new
                        {
                            Id = new Guid("4f612b9e-1054-430e-bc77-d14eae457ebd"),
                            ColumnId = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ccc85dbe-b258-4d72-958f-10b26b2facb4"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("42bbe453-9dda-454b-ac81-196125b6f2e3"),
                            ColumnId = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ccc85dbe-b258-4d72-958f-10b26b2facb4")
                        },
                        new
                        {
                            Id = new Guid("01dd20b5-a610-412c-bf1f-3309e0a4b529"),
                            ColumnId = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("47791747-f23d-43bc-a753-80eac93e138c"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("18f1cd8e-634f-40f8-9c8d-a0604ebda7ff"),
                            ColumnId = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("47791747-f23d-43bc-a753-80eac93e138c")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b19f8163-1190-4991-a46a-0273132f35be"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("87ea0625-b066-48e2-b134-89055825dfdf"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8"),
                            ValueTypeId = new Guid("d4be5078-efbb-4351-be89-324d543a5cc9")
                        },
                        new
                        {
                            Id = new Guid("8e0fe263-7e5a-452e-8cc1-59d649f0b6c0"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("b15ccf80-a42a-424a-a38a-378be76c7fed"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("4e0c8317-5743-4801-bbda-e2942a53d373"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("9fe2c85b-c24f-48af-9cc8-80e97420009a"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("11f67a00-10a1-41b4-bb54-dcad556ed56a"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("bccb102e-2157-48bc-a73f-461422aaab8e"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("edd6f599-0956-49f4-8975-c98b273271c8"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("1aa002fc-490f-4a15-aa9f-1b39b054e37c"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("d91d23a2-fa9a-4140-b8ed-693b62fa6d8c"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("1435ab8c-e799-49b2-83ea-3e00e725134c"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("373ca755-7be2-40d1-8355-c47340507294"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("107b1b40-0bcb-4060-ae2e-aa28648287a0"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("ff1137c3-2303-4e9c-9e4c-bc8c14b93513"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("31cae352-46e7-433d-b0c1-56c9c3f07980"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("9080704f-b3ba-4dee-87f1-42f0dc083a11"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("6173f0ed-b2ac-4f8d-9c99-ba32b3c36198"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("9a7661e3-d22d-4075-80b9-586bdfa88d5b"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("d570fdef-b055-4c69-8f8b-6bd3ead967b9"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("e67b00db-3668-4d5b-8f75-b4a309fb3a7a"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b2a25513-bd1b-48fc-8313-188d4f44db1f"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("ac6a6bbe-b084-462a-8c3d-39db2fa52bea"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("29172de1-16a0-4ee8-be15-dba03a2dcecc"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("0cd82ce3-fc88-4172-b0d6-d53800d00cc1"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("fcaa5618-805e-4e63-90c1-0c430f1c2a56"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("59523d30-8aa9-47e2-9510-6214e86f771a")
                        },
                        new
                        {
                            Id = new Guid("b704c0de-ec3e-4444-898a-e3f4ee1ce5b9"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b8be5a76-fb82-45a2-92f3-9c46ea6f8af1"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("34f5e02a-b939-4e6c-95cd-d4a650c0860f"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("d6faee8f-e216-4a09-95b7-9bc81148c6ae"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("fb2e69e7-18b6-427a-8352-2e2897dc2f54"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("359f255d-459b-406c-af5e-5a71278de1ad"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b5f46577-a20e-4e4d-a99f-f4368311ae69"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("156d0440-7d96-4034-9362-467618fe4117"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("2974068e-ec58-4a31-a834-ac27edf03165"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("156d0440-7d96-4034-9362-467618fe4117"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("17b5b24c-3c89-465e-b293-cef4b33bd876"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("156d0440-7d96-4034-9362-467618fe4117"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("fe600a8f-0539-4442-997c-136d2905b4fc"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("156d0440-7d96-4034-9362-467618fe4117"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("d440cc2d-8700-40d8-bde4-95db7be8451e"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("3d97f70d-e969-4ded-9172-dfdf1c4a2fd6"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("3108c5f0-5108-4c61-a9af-f7f2e8ad9b06"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("6197d128-ec4c-4490-b3df-44625a31880a"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("49455b7d-6706-4954-9c58-90f8c00650bd"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("229b29de-f54a-4d23-bdab-4732f3db339d"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("74eaa7b8-e44c-4c4e-a97c-f767c511d53a"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("70c001e0-0159-45b0-a95b-5149ffa52643"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("3b3be36b-a037-46cc-b633-bee655eb7bae"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("9aa1bb3b-ecdc-4b22-a4d5-4cf8abafecea"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("adb0e996-0c5e-4f42-a7f1-e29fa9fc86b8"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("86437198-7be7-45a4-b289-7239c16f7f10"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("5156e5db-d6d3-4a11-b11f-43f0e3052848"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("46385f21-7c4e-41fe-805f-19ea74eb6506"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b879510e-234f-46ac-870a-621ce979c785"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("5e70b16b-7121-4d15-bb3e-380afa440701"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553"),
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("f6d9383d-495d-4af5-b7c5-0ba9936841a5"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e35e8ed-7984-4286-9ba4-183af1ae62cb"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b020a3c6-99cd-4c29-b039-c8701db8f798"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("018645a1-f2e2-47ab-a3cc-73d73095633d")
                        },
                        new
                        {
                            Id = new Guid("d9e5dc4a-886c-46b2-bb27-2e249e4cae3b"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("8f7d38b6-a6cf-4c5d-8e03-b78cbb2aa81b"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("f0ed3dd3-d357-41b1-8f5e-803b01a319b4"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("da50a6f1-9db2-466c-b165-726ac3bbaa7b"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("1f40f0b0-aafa-48cf-81ad-3d9743f7c8a2"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("81777154-a657-45c6-8ef4-f9cff5a0c100"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("9c24e3af-6a30-494a-8827-e2c815c3f8f3"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("3397d22f-5dd0-434b-8d8e-68b72cf81ba2"),
                            EditBlockId = new Guid("add005bb-c09e-4d36-b517-75731bf3a4b6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            EditBlockId = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("b517350a-b6f1-4bf8-8348-a2727c7f1eed"),
                            EditBlockId = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("07612b69-c3e4-4123-89bb-1b33e65b5254"),
                            EditBlockId = new Guid("cc26592a-d57f-4e01-802c-0e9ab92c1498"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97")
                        },
                        new
                        {
                            Id = new Guid("f6901305-74f8-4a5a-8ec1-095f9c53b7b9"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("85a611bd-fdb6-4e58-bd14-d1247b3400ad"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("9237f975-ef99-44aa-8cc9-5fac68559582"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("ebfea5aa-f6df-4e8b-aa04-0efe9489afe9"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        },
                        new
                        {
                            Id = new Guid("635777ad-cb0d-4909-ab4f-eff0376fce2c"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf22f156-46fd-446e-84ff-10a8b9635275"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58")
                        },
                        new
                        {
                            Id = new Guid("66b84870-7dd2-4055-858a-29ad778165c8"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58")
                        },
                        new
                        {
                            Id = new Guid("864ec7d2-bd8c-474d-bc78-80d42b1f219a"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("9237f975-ef99-44aa-8cc9-5fac68559582"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("44a31f4f-4f7d-4991-8a9f-7a735a52f41a"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("f6901305-74f8-4a5a-8ec1-095f9c53b7b9"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("675c79d0-a2f0-4d68-9bf9-5b383c326ad3"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("85a611bd-fdb6-4e58-bd14-d1247b3400ad"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("bf3da495-3916-4eb9-ab4c-a11ca5d66b52"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670")
                        },
                        new
                        {
                            Id = new Guid("da288433-e821-41b8-9e6e-90d4d00e0923"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("156d0440-7d96-4034-9362-467618fe4117")
                        },
                        new
                        {
                            Id = new Guid("49811271-b92c-411b-b45d-a569ab8d86c2"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f")
                        },
                        new
                        {
                            Id = new Guid("c6e86fc3-32a2-44ae-8455-e58dff8cde8b"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f")
                        },
                        new
                        {
                            Id = new Guid("c34daf77-dcde-446b-90ef-02bf4a8c0244"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f")
                        },
                        new
                        {
                            Id = new Guid("b65b3465-29e6-4c5f-b1d9-8660e22f3f25"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f")
                        },
                        new
                        {
                            Id = new Guid("96eb5c6d-41f1-4bd9-88f8-05bf2c894b65"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2")
                        },
                        new
                        {
                            Id = new Guid("ac8fa087-8793-4dee-915c-1c2eb1f3b56b"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("7e9d8eb3-5a0e-4245-ad29-1dd4f0a5c6ff"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c")
                        },
                        new
                        {
                            Id = new Guid("277c2d2b-5519-438d-aa7a-98378a52a586"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77")
                        },
                        new
                        {
                            Id = new Guid("eb80ed87-4db6-48a2-acc1-af68f769a186"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7")
                        },
                        new
                        {
                            Id = new Guid("e0ca1761-78bd-4516-8efd-c4c3d029a5ca"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("ebfea5aa-f6df-4e8b-aa04-0efe9489afe9"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("502ecdfd-71ea-4ed7-a0b2-0fce971271c5"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("635777ad-cb0d-4909-ab4f-eff0376fce2c"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("692eb0fe-834c-47e4-91c6-98a1ad44f345"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39")
                        },
                        new
                        {
                            Id = new Guid("03f8845e-041f-4205-9faf-2e7e617a6c01"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39")
                        },
                        new
                        {
                            Id = new Guid("66727a22-584b-4530-a6f6-0e8733bf3d25"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70")
                        },
                        new
                        {
                            Id = new Guid("5a84a546-4d2d-4bb8-b850-0df69d4db191"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553")
                        },
                        new
                        {
                            Id = new Guid("eb23c5b3-8729-41cf-a3e0-49bbc9481e1a"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("14e504d2-383d-4e31-9d66-be95617c035b"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f4c4c54-9f20-4a76-97c5-3b9caf45f2d8"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("950ece3b-165f-4e79-acbd-2d7aa8f917f4"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("6dc7f7d5-f5f0-4102-80db-e387ccd89bac"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("404fe079-eff7-43cf-8180-08e9470a544d"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("215b5631-b702-4fd5-8a6c-ec880892114b"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("dff243f3-3333-4cb2-98d3-62d65b80afce"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("be0683a1-aff4-4cfa-8103-9b30e140037c"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f86ceda9-d679-49c1-b454-5cc1429c0de0"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("99af3d55-d531-4457-b48f-3a61f0e5029a"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("d0f5f666-6149-4a37-900e-9f3a6e0fac2b"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("6e4f6320-3880-4024-8a08-86104d869d50"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("5f4f3636-3280-4603-a39a-670cb7d3422b"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("57feb7ed-98b6-4f37-a0bb-b1c4026bd200"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("713cb0c8-0b70-4d8e-92f4-d390ab557b0a"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("8229d870-8db2-4cdf-b6bd-0428e2681c81"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8")
                        },
                        new
                        {
                            Id = new Guid("06781231-8acf-4e5f-add4-559b4a521951"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        },
                        new
                        {
                            Id = new Guid("152da749-fa45-4888-a20b-7c721c0c2fdb"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        },
                        new
                        {
                            Id = new Guid("3dd436b3-eb8a-4ad7-8924-02bf457f2999"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        },
                        new
                        {
                            Id = new Guid("ccc85dbe-b258-4d72-958f-10b26b2facb4"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        },
                        new
                        {
                            Id = new Guid("47791747-f23d-43bc-a753-80eac93e138c"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("124ed4bb-412e-4402-a01f-e197502967b6"),
                            FieldId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("57250608-59e3-4b3a-8704-aebfa2b12e79"),
                            FieldId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("c5bd3f0f-134f-4027-924e-8b90f7e17d09"),
                            FieldId = new Guid("03cfef95-8250-44c7-a3fd-a7ae47ae2ce8"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("3ccde546-06ef-4821-b451-9a00e5cce30e"),
                            FieldId = new Guid("b517350a-b6f1-4bf8-8348-a2727c7f1eed"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("fd9094e0-8a31-478f-bcae-04b1a15a6584"),
                            FieldId = new Guid("b517350a-b6f1-4bf8-8348-a2727c7f1eed"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("46d23948-862c-4cda-8544-9aebca5091f1"),
                            ColumnId = new Guid("4e0c8317-5743-4801-bbda-e2942a53d373"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("d5052de9-7298-47e2-a0bf-896bd475dc4f"),
                            ColumnId = new Guid("4e0c8317-5743-4801-bbda-e2942a53d373"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("921d50bd-3bf5-49b3-bed2-b42f8d020358"),
                            ColumnId = new Guid("4e0c8317-5743-4801-bbda-e2942a53d373"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("343cd908-fbf2-4402-9c02-2f034fff42f0"),
                            ColumnId = new Guid("b2a25513-bd1b-48fc-8313-188d4f44db1f"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("2a8ed0a2-150a-4f10-8edc-6800e61f890d"),
                            ColumnId = new Guid("b2a25513-bd1b-48fc-8313-188d4f44db1f"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("cf2bdfa2-fb3a-427e-8449-77f504125985"),
                            ColumnId = new Guid("b2a25513-bd1b-48fc-8313-188d4f44db1f"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("1db4b221-6084-4553-8f56-51ea06b27266"),
                            ColumnId = new Guid("fb2e69e7-18b6-427a-8352-2e2897dc2f54"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("9194c67c-f90e-46d6-ae9b-193d1444668d"),
                            ColumnId = new Guid("fb2e69e7-18b6-427a-8352-2e2897dc2f54"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("347018e9-f279-408c-bf81-ade526ac71cb"),
                            ColumnId = new Guid("70c001e0-0159-45b0-a95b-5149ffa52643"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("9fa06e99-f29c-4175-9683-f804d022b042"),
                            ColumnId = new Guid("70c001e0-0159-45b0-a95b-5149ffa52643"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("84ba0d9b-5e83-4d23-b594-3c0f968b0b23"),
                            ColumnId = new Guid("9aa1bb3b-ecdc-4b22-a4d5-4cf8abafecea"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("aa33c2a8-d3ca-4686-865b-9163b8c5eeea"),
                            ColumnId = new Guid("9aa1bb3b-ecdc-4b22-a4d5-4cf8abafecea"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("d106e90f-bc6e-4ef1-a14e-13dd1769a473"),
                            ColumnId = new Guid("9aa1bb3b-ecdc-4b22-a4d5-4cf8abafecea"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("6eeaaeb7-5e40-473d-8f37-1da88447d750"),
                            ColumnId = new Guid("9aa1bb3b-ecdc-4b22-a4d5-4cf8abafecea"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("e1afd457-6281-40f1-a5b5-9bf8f815f495"),
                            ColumnId = new Guid("46385f21-7c4e-41fe-805f-19ea74eb6506"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("767a5a62-4c69-46c7-9f14-14797b2f1eeb"),
                            ColumnId = new Guid("46385f21-7c4e-41fe-805f-19ea74eb6506"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("4d16d748-82ee-4e19-a2c2-4a64420fcd9c"),
                            ColumnId = new Guid("46385f21-7c4e-41fe-805f-19ea74eb6506"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("769390f2-457e-46b6-92fc-18f25ba7924a"),
                            ColumnId = new Guid("46385f21-7c4e-41fe-805f-19ea74eb6506"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("9af3fc0e-0516-4af8-b73a-64cfaf53bf1a"),
                            ColumnId = new Guid("29172de1-16a0-4ee8-be15-dba03a2dcecc"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("cecec929-4908-46d5-9f52-b243e53c1679"),
                            ColumnId = new Guid("29172de1-16a0-4ee8-be15-dba03a2dcecc"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("2a9eee34-b3fd-4f0f-942a-c5a471db35fa"),
                            ColumnId = new Guid("b8be5a76-fb82-45a2-92f3-9c46ea6f8af1"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("04998dbe-a12b-44c3-b432-23651e8bb8c4"),
                            ColumnId = new Guid("b8be5a76-fb82-45a2-92f3-9c46ea6f8af1"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("1d265ab5-bf94-4d00-97e4-62199843f11a"),
                            ColumnId = new Guid("3d97f70d-e969-4ded-9172-dfdf1c4a2fd6"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("db4f11f8-ca36-4c92-8600-10354ff8d508"),
                            ColumnId = new Guid("3d97f70d-e969-4ded-9172-dfdf1c4a2fd6"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("c2eef0df-88bd-4f9b-b167-e43eeef5b27d"),
                            ColumnId = new Guid("3108c5f0-5108-4c61-a9af-f7f2e8ad9b06"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("f147fdbe-58e9-4aa9-9f85-ad35a64cf6d4"),
                            ColumnId = new Guid("3108c5f0-5108-4c61-a9af-f7f2e8ad9b06"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("acf88de0-0fa0-42d6-8d9f-cae3db88c958"),
                            ColumnId = new Guid("3108c5f0-5108-4c61-a9af-f7f2e8ad9b06"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("d809fb13-ec63-4d7e-89c6-6141bd30e8db"),
                            ColumnId = new Guid("3108c5f0-5108-4c61-a9af-f7f2e8ad9b06"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("52bfa1ff-b6a8-412e-bb5f-932522e911fd"),
                            ColumnId = new Guid("373ca755-7be2-40d1-8355-c47340507294"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("606b3153-81e2-463c-be5b-a10caa4ef80a"),
                            ColumnId = new Guid("373ca755-7be2-40d1-8355-c47340507294"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("0bc203c1-244e-4857-aace-92960f55d63d"),
                            ColumnId = new Guid("373ca755-7be2-40d1-8355-c47340507294"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("99621d44-a6eb-439e-ab5f-1b8a19c58c5a"),
                            ColumnId = new Guid("fcaa5618-805e-4e63-90c1-0c430f1c2a56"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("640c28c0-fb63-4acd-9fd3-2732d21bdf6b"),
                            ColumnId = new Guid("fcaa5618-805e-4e63-90c1-0c430f1c2a56"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("6acdb566-8d10-45b4-bfa5-32dd0f232f38"),
                            ColumnId = new Guid("2974068e-ec58-4a31-a834-ac27edf03165"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("b15448cc-59a9-401a-b71f-00daf8c836f2"),
                            ColumnId = new Guid("2974068e-ec58-4a31-a834-ac27edf03165"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c84da322-b588-4cef-bf78-937ab11c54e8"),
                            EditBlockId = new Guid("f6d9383d-495d-4af5-b7c5-0ba9936841a5"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7175339e-ff5f-4a32-b8e1-b4776e99b78c"),
                            EditBlockId = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("6e463686-4018-4b46-9c5a-00a44aff6e77"),
                            EditBlockId = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d64a2008-a1b3-4eca-bfd3-1c039b74affb"),
                            EditBlockId = new Guid("c632289c-502e-41b3-a89d-16ac6f094746"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("719e2dd1-a32c-49c6-9671-dc3ede841e58"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f3b2e492-8970-4e02-86d9-ad912cdfb670"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("ef8c3ef0-39e9-4911-8744-4eb0fcbf1c5f"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("57602c01-c785-478d-9551-9f4ff23f7ce2"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("156d0440-7d96-4034-9362-467618fe4117"),
                            EditBlockId = new Guid("59fee98a-e4ff-4de6-abe3-64e3502ff433"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("8e8f8289-2433-4254-8c81-ac5b290576b7"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("43709cbd-e47e-48f7-9de0-6bba70d0bf39"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("d8b5152e-91fe-4cd3-9c49-56c9c8f9ab70"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("7f295636-cbb1-49b9-a543-55f3d9706553"),
                            EditBlockId = new Guid("b80c9c2b-ed65-4544-80d2-6fa5491b7070"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87b9416e-c313-4c08-8a28-74d31d2ee8d9"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("99fd548f-b45e-4ecc-8bb9-ca2647973dae"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03e18f15-7d08-4d30-be31-0aa02d64b387"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("9a0eaf4e-5a48-4624-b657-fd4d77a8fe97"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("59523d30-8aa9-47e2-9510-6214e86f771a"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("018645a1-f2e2-47ab-a3cc-73d73095633d"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("d4be5078-efbb-4351-be89-324d543a5cc9"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertCategoryId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.Photo", "CropPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "CropPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServerApp.Data.Entities.Photo", "FullPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "FullPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId");

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("CropPhoto");

                    b.Navigation("FullPhoto");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Photos")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Category", "ExpertCategory")
                        .WithMany("Experts")
                        .HasForeignKey("ExpertCategoryId");

                    b.Navigation("ExpertCategory");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Photos");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
