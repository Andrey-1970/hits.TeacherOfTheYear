// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910230654_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a64f3e23-e949-482b-9aff-ae583a47e248"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a64f3e23-e949-482b-9aff-ae583a47e248"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("a28c4190-b0ad-445b-b967-05b943d9d536"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("7fa13c92-a4ee-4c68-9702-f439e380a050"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("d6a9f624-8610-4668-8ace-8eb455bdc924"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("e7b09488-1a82-4f45-a4fc-a1d96ac736af"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("1cab6d78-2a80-41e0-8ea3-2e1db7ee6e48"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("84b047dd-251c-4652-9044-f5cb64bd1de9"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("c38b35b5-1e66-42d1-bd84-9a589d79a407"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("4faf17ee-3feb-454e-ad6b-d7ff4369ddc3"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("87c9a3d2-ee5d-4374-bb80-67b31e9afdae"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("ed5e778e-1c26-43fb-be9c-595cc97d5ea6"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("c4d26f9e-117b-4bb8-ae87-f6bec5f1a591"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("c34361b9-88b6-418a-ac1f-63d94e63d647"),
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5")
                        },
                        new
                        {
                            FieldsId = new Guid("9e1e83cf-18a1-40eb-adac-49799e913d92"),
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0")
                        },
                        new
                        {
                            FieldsId = new Guid("9841de6b-7ed4-40a3-97f1-c82ac5466455"),
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0")
                        },
                        new
                        {
                            FieldsId = new Guid("4610a55e-968f-40b1-85e5-01448b968819"),
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0")
                        },
                        new
                        {
                            FieldsId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f")
                        },
                        new
                        {
                            FieldsId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283")
                        },
                        new
                        {
                            FieldsId = new Guid("b3be7eef-3aba-4b0c-8bdd-f6974999c02c"),
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283")
                        },
                        new
                        {
                            FieldsId = new Guid("3b97e544-cba5-450b-957f-a80ff4a72365"),
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            TablesId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            TablesId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            TablesId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            TablesId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            TablesId = new Guid("b1beb533-0148-4fb4-8583-7404245bf510")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            TablesId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            TablesId = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            TablesId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            TablesId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            TablesId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5"),
                            TablesId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            TablesId = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            TablesId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            TablesId = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            TablesId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            TracksId = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            TracksId = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("119bc69d-6943-4f3a-82aa-dad403bd1cfe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("31805c88-e5d5-4206-95e9-77e3323ce315")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("eb7353cc-da32-4af4-8300-f6e03380296e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("b697fae5-e4b9-491a-97ec-c952dff212c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("d340ce13-534b-491a-ae2b-bc70acf5bd8d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("54591336-9dd6-4cd2-8ae8-d5aa61bfa0fb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            MarksId = new Guid("c18bac77-3759-40f8-84e6-148d172a4a78")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            MarksId = new Guid("cc23f918-3108-4b54-8f6a-e57565899a10")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            MarksId = new Guid("ad730fe6-d0ae-4dfb-a73f-d448aa062c37")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            MarksId = new Guid("cef4c968-643e-45d5-a29d-77601f00a506")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            MarksId = new Guid("3a735671-f0b5-454c-a686-bbcc1bf90caf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            MarksId = new Guid("a2d4a97f-ee90-4167-9162-ef8aff3f34ac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            MarksId = new Guid("5c9159e7-8856-45b9-9831-295ff470140f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            MarksId = new Guid("879d05e5-0be1-4631-a9b0-04a84ae1dc54")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            MarksId = new Guid("0c1d163a-c4f3-4f3a-b332-b31a7d450c56")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("5c9159e7-8856-45b9-9831-295ff470140f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("879d05e5-0be1-4631-a9b0-04a84ae1dc54")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("c334e415-32d3-4d8a-9890-2109aacedb9a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("547916f4-a0eb-478a-8d11-997adb500129")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("8077572e-3e83-4e14-84ab-0082f43e308e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("484a0ea6-1c6e-4ce6-9394-d31cee4be3c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            MarksId = new Guid("a3095d58-bc65-4b73-98f0-f938f990557e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            MarksId = new Guid("0c1d163a-c4f3-4f3a-b332-b31a7d450c56")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            MarksId = new Guid("66a8770c-7c68-4e96-b821-da55102598e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            MarksId = new Guid("5c2f0af9-4062-4a20-8c08-78694d421f4d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            MarksId = new Guid("c11c58a4-9919-4fb5-aad6-4e997e21b5e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            MarksId = new Guid("18c164c9-4a97-49e6-bf43-c1c4dde7c5e4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9f46b418-8d2f-4900-86b8-d0d39315a96f",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "b8929977-9b78-4c00-bee0-50fb55819d62",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "38bb985b-dec4-421a-b1f1-c04ae4741935",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "a2864396-d079-4ea5-979e-9e6064520825",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "53b2d16b-1b99-4d9e-9e58-277bb3ab8b90",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7036d9e1-98e3-47ae-8ede-a1b4ad297fa6"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("90aa7566-91c3-43ee-9b4f-9adf5798a3b8"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("a17750a1-c3e9-4524-8e20-d741348580a1"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("31b7f136-b6e9-4358-b3bd-1e8cd359acee"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("69278ad8-3fca-47f9-9a96-e84751a662a3"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("b302bffc-a0f9-4492-9ab6-681052f48063"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f43eda36-1d98-4b6b-80c9-fd5b42d040f6"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4830978d-ceed-4a1e-a0f0-e96c5080ea98"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85cc5213-6ddb-4142-a2ed-7557728e35e9"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2e6fccfa-4f1a-4caa-9c33-6245363ce29e"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("07216cd6-685d-4448-8dc4-bcb35eb4c57c"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2e6fccfa-4f1a-4caa-9c33-6245363ce29e")
                        },
                        new
                        {
                            Id = new Guid("8be7aba7-5bbc-4230-a7e2-bb191751bf57"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b05f4e34-ee05-4330-9e4a-eba522945135"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("bca1a84a-836b-4f53-be6a-241f63dcef14"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b05f4e34-ee05-4330-9e4a-eba522945135")
                        },
                        new
                        {
                            Id = new Guid("32af5b34-9576-49cb-bf3d-8c552e04d7cf"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6a8951a2-7160-43ad-8799-7b50a861731e"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("253e3ba0-b2ed-4927-8059-336414947acb"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6a8951a2-7160-43ad-8799-7b50a861731e")
                        },
                        new
                        {
                            Id = new Guid("19801b4e-ab6b-4324-9588-2b3663f0e560"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("91ae8af9-3497-4328-b7fa-b79764ecd7b9"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("93edd7cd-1aca-4163-8830-5689d0231d23"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("91ae8af9-3497-4328-b7fa-b79764ecd7b9")
                        },
                        new
                        {
                            Id = new Guid("0176aeb5-4d1c-42a2-bfb7-197d7514ad36"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b407f75b-1ce1-4faa-9aac-477f4be49a3b"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("0dd08024-cbeb-4147-b800-1d042386da4a"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b407f75b-1ce1-4faa-9aac-477f4be49a3b")
                        },
                        new
                        {
                            Id = new Guid("cb9a999d-d604-49ee-8661-8fb0ecddb96d"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("10a4402f-d8c7-40f7-a144-a771f110ac29"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("d4189538-8f1a-4718-8a80-3492a42d55e7"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("10a4402f-d8c7-40f7-a144-a771f110ac29")
                        },
                        new
                        {
                            Id = new Guid("66e53646-d39d-484c-a2ef-72dbf86df729"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7ef0269d-4a15-49a7-b9ae-2d4518844493"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("55001ba0-3bcf-4736-8986-72df37163487"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7ef0269d-4a15-49a7-b9ae-2d4518844493")
                        },
                        new
                        {
                            Id = new Guid("64e1fbe0-a821-42b1-b5dd-72e1762e8f4d"),
                            ColumnId = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4c16cbe2-e625-4d6b-8c13-8201325a050a"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("b93e16c2-1aef-466b-ade2-49a834f84cdb"),
                            ColumnId = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4c16cbe2-e625-4d6b-8c13-8201325a050a")
                        },
                        new
                        {
                            Id = new Guid("0e2e0f54-a00e-46ba-a05d-470d38670d8a"),
                            ColumnId = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ddb077e2-34e8-4bdc-a6e8-643c30e913a4"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("7f60b3a3-ff50-4b60-8b71-906e12ead667"),
                            ColumnId = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ddb077e2-34e8-4bdc-a6e8-643c30e913a4")
                        },
                        new
                        {
                            Id = new Guid("cdadec0b-ea18-4a0b-91f3-c79fc36011e5"),
                            ColumnId = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b97ba8b2-64ee-4c90-8572-e15aad8972f2"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("de72d846-01d1-4608-ade5-a9110b76a99b"),
                            ColumnId = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b97ba8b2-64ee-4c90-8572-e15aad8972f2")
                        },
                        new
                        {
                            Id = new Guid("bead9c52-6dfa-4e0a-aeb6-0c2b67bed25e"),
                            ColumnId = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("62509994-6766-4407-a138-0b40a66fb27f"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("8748b7c5-c781-49ae-b4fc-35937e90bcc2"),
                            ColumnId = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("62509994-6766-4407-a138-0b40a66fb27f")
                        },
                        new
                        {
                            Id = new Guid("ef82e49f-8ab5-4e38-856c-f8f7d99b1c09"),
                            ColumnId = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5ecec201-29f5-4bd6-a393-e9cdd95772a0"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("ed10c5a5-ee9c-4d4f-9861-43b0f29acb92"),
                            ColumnId = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5ecec201-29f5-4bd6-a393-e9cdd95772a0")
                        },
                        new
                        {
                            Id = new Guid("3adc02a3-dfec-4282-842a-94dbb4cd6b09"),
                            ColumnId = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6349177a-7fb6-4dbf-97f0-7313f27c6589"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("2478c504-8204-4494-a47e-794ce0bdf742"),
                            ColumnId = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6349177a-7fb6-4dbf-97f0-7313f27c6589")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("246d20f9-8a3e-40b9-ba7a-784eda5755c3"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("181ce287-eb4f-4fe1-87ce-38103f25df26"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d"),
                            ValueTypeId = new Guid("72ce5a0a-e60a-4bcf-b092-cb54124c8c75")
                        },
                        new
                        {
                            Id = new Guid("a0108ea0-41ca-4d06-b69e-0d42e6df1543"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("3771cf04-09f3-4b58-abd2-f006512d234d"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("ec6c6816-24f3-4ff7-ad8f-22ce736c0caf"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("78241748-438d-4f86-a5a1-774d3922a3a5"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("6cf36b5a-7e73-4b38-87e9-48879651a120"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("83c9a1f6-af24-47f6-83ce-4dc2af45600a"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("b30f3b2b-7eef-47b4-9812-826aac2ef167"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("35420fd4-a385-42a1-9beb-40f97c2f122b"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("9667f004-f7c7-4080-b1ad-83cc98d7d31f"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("cc15dcb4-5577-4377-b9fd-57134f0cc2c1"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("d7df1ff7-2428-49cc-8c22-6267f451f1cc"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("0e3c6a41-d9be-465e-8f1c-db0103f86295"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("03aa1578-1f5c-46f2-9dc8-1e54a0c36828"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("494d86fb-bada-45ab-9a1f-ae5013d01961"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("b6c32f6e-79d6-4cf9-a8b6-7ea3d61455b1"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("9fe89c8c-5250-4a53-93c3-f8c793dfbb60"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("b12cae10-eabe-4685-92ca-9aa0ff464bdd"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("430b55f5-cd48-460e-bf02-d2ad1e37205f"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("eba0c1fa-d397-495d-82f8-4f004e33b4ab"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("7a06ca6e-240e-49fc-887f-f1102224fc6e"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("3dad72e7-3926-4364-b78f-505ed37b9245"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("991c0655-0666-494b-9845-110b902a263f"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("a12cdc8d-783e-43f5-a845-3793342fe4f1"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("02a3c59e-ba61-4e30-b209-944ccbf285d5"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("0bc34fa1-c605-4c83-b091-fa54ba8794c5")
                        },
                        new
                        {
                            Id = new Guid("a33f9c70-a883-4ab7-ae28-3256a581954b"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("edfc1a70-c91f-4cab-bc29-26c0f4dd6c8e"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("2f48f06f-2c40-42cc-b82b-f2e8cf92393f"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("445ec93c-8e61-42c9-b7a0-8f18e76b00c1"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("b1beb533-0148-4fb4-8583-7404245bf510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("33b64d67-f389-4a5b-9a56-315140599cc7"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("b1beb533-0148-4fb4-8583-7404245bf510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("039c9e1d-0966-4b3d-ae0d-0effc327c9d1"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("b1beb533-0148-4fb4-8583-7404245bf510"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("4c5cabc9-0c61-46e8-9724-583437de8bfc"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("de74d92d-666d-4b5d-80a8-bf29df326bcc"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("686f349f-1c78-4f96-9339-788998b4f476"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("44633c93-f4ea-4bf8-9e83-3782545d0553"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("96473636-564b-4eb8-89aa-73ae2bb19da1"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("06c278de-4473-4c93-9f70-df520bc830a7"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("2233e705-760b-4d9b-b524-c787175f8759"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("2db5422d-aa7d-4384-a3c7-89c71191ba70"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("c7b39b02-e13a-4833-8618-7556f7957f03"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("9e4a9a78-27ca-4f6f-a69d-868c35513c84"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("aa6deed9-1744-46ae-ae6c-75150c98b331"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("0c2bc25c-cdbc-4335-965e-f388d1598472"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("b649879d-b81b-464b-9940-5aa5bcf0b268"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("3e66e51c-9807-4936-b045-22ee478015ad"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("4466f7ad-6b86-4958-a3db-23618fe55530"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("9e90dc00-6ab6-48c1-a973-eaa812a17771"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("f7cc557f-1d7a-42ec-8857-4b7539e8458b"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("c298d248-3c2b-4f9e-b5bd-aa229720b375"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("5e357a82-4986-407f-a18a-8cf61361932f"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("512fde20-307e-469e-b265-4f95375c0c1f"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af"),
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a64f3e23-e949-482b-9aff-ae583a47e248"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b1ff588-19c1-4b91-ba4b-63fbf593d5c6"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a28c4190-b0ad-445b-b967-05b943d9d536"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("7fa13c92-a4ee-4c68-9702-f439e380a050"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("92c94a40-8fb7-4a6a-939c-034dcab0c559")
                        },
                        new
                        {
                            Id = new Guid("d6a9f624-8610-4668-8ace-8eb455bdc924"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("e7b09488-1a82-4f45-a4fc-a1d96ac736af"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("1cab6d78-2a80-41e0-8ea3-2e1db7ee6e48"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("84b047dd-251c-4652-9044-f5cb64bd1de9"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("c38b35b5-1e66-42d1-bd84-9a589d79a407"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("4faf17ee-3feb-454e-ad6b-d7ff4369ddc3"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("87c9a3d2-ee5d-4374-bb80-67b31e9afdae"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("ed5e778e-1c26-43fb-be9c-595cc97d5ea6"),
                            EditBlockId = new Guid("a99fe1ce-f7c1-48b7-9e8b-3255c7453936"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            EditBlockId = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("c4d26f9e-117b-4bb8-ae87-f6bec5f1a591"),
                            EditBlockId = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("c34361b9-88b6-418a-ac1f-63d94e63d647"),
                            EditBlockId = new Guid("68a9bf61-462a-4bc4-8a5e-98a6090ecaba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516")
                        },
                        new
                        {
                            Id = new Guid("9e1e83cf-18a1-40eb-adac-49799e913d92"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("9841de6b-7ed4-40a3-97f1-c82ac5466455"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("4610a55e-968f-40b1-85e5-01448b968819"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("b3be7eef-3aba-4b0c-8bdd-f6974999c02c"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        },
                        new
                        {
                            Id = new Guid("3b97e544-cba5-450b-957f-a80ff4a72365"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("119bc69d-6943-4f3a-82aa-dad403bd1cfe"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9")
                        },
                        new
                        {
                            Id = new Guid("31805c88-e5d5-4206-95e9-77e3323ce315"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9")
                        },
                        new
                        {
                            Id = new Guid("eb7353cc-da32-4af4-8300-f6e03380296e"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("4610a55e-968f-40b1-85e5-01448b968819"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b697fae5-e4b9-491a-97ec-c952dff212c0"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("9e1e83cf-18a1-40eb-adac-49799e913d92"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("d340ce13-534b-491a-ae2b-bc70acf5bd8d"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("9841de6b-7ed4-40a3-97f1-c82ac5466455"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("54591336-9dd6-4cd2-8ae8-d5aa61bfa0fb"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510")
                        },
                        new
                        {
                            Id = new Guid("c18bac77-3759-40f8-84e6-148d172a4a78"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a")
                        },
                        new
                        {
                            Id = new Guid("cc23f918-3108-4b54-8f6a-e57565899a10"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b")
                        },
                        new
                        {
                            Id = new Guid("ad730fe6-d0ae-4dfb-a73f-d448aa062c37"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b")
                        },
                        new
                        {
                            Id = new Guid("cef4c968-643e-45d5-a29d-77601f00a506"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b")
                        },
                        new
                        {
                            Id = new Guid("3a735671-f0b5-454c-a686-bbcc1bf90caf"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b")
                        },
                        new
                        {
                            Id = new Guid("a2d4a97f-ee90-4167-9162-ef8aff3f34ac"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("b1beb533-0148-4fb4-8583-7404245bf510")
                        },
                        new
                        {
                            Id = new Guid("5c9159e7-8856-45b9-9831-295ff470140f"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("879d05e5-0be1-4631-a9b0-04a84ae1dc54"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4")
                        },
                        new
                        {
                            Id = new Guid("0c1d163a-c4f3-4f3a-b332-b31a7d450c56"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540")
                        },
                        new
                        {
                            Id = new Guid("c334e415-32d3-4d8a-9890-2109aacedb9a"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac")
                        },
                        new
                        {
                            Id = new Guid("547916f4-a0eb-478a-8d11-997adb500129"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("b3be7eef-3aba-4b0c-8bdd-f6974999c02c"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("8077572e-3e83-4e14-84ab-0082f43e308e"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("3b97e544-cba5-450b-957f-a80ff4a72365"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("484a0ea6-1c6e-4ce6-9394-d31cee4be3c0"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054")
                        },
                        new
                        {
                            Id = new Guid("a3095d58-bc65-4b73-98f0-f938f990557e"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054")
                        },
                        new
                        {
                            Id = new Guid("66a8770c-7c68-4e96-b821-da55102598e9"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6")
                        },
                        new
                        {
                            Id = new Guid("5c2f0af9-4062-4a20-8c08-78694d421f4d"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af")
                        },
                        new
                        {
                            Id = new Guid("c11c58a4-9919-4fb5-aad6-4e997e21b5e0"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("18c164c9-4a97-49e6-bf43-c1c4dde7c5e4"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("818e2f06-fb7e-409a-9c00-720baa993fa5"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("067de697-280e-42cd-a2fc-ae05a4d7d2e0"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("319cccfc-e6b9-4c4c-8729-75cdb1557360"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("26d698d1-645e-44fa-9446-21ded9d40b9f"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ea2eed56-a68a-4078-8bfd-39f151e17283"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f89f2d0a-f8fc-48ac-a2eb-1b1bcd6a7c0f"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("2a64e128-61fc-4cc5-a3eb-89abc7062e9f"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e6fccfa-4f1a-4caa-9c33-6245363ce29e"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("b05f4e34-ee05-4330-9e4a-eba522945135"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("6a8951a2-7160-43ad-8799-7b50a861731e"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("91ae8af9-3497-4328-b7fa-b79764ecd7b9"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("b407f75b-1ce1-4faa-9aac-477f4be49a3b"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("10a4402f-d8c7-40f7-a144-a771f110ac29"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("7ef0269d-4a15-49a7-b9ae-2d4518844493"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("4c16cbe2-e625-4d6b-8c13-8201325a050a"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d")
                        },
                        new
                        {
                            Id = new Guid("ddb077e2-34e8-4bdc-a6e8-643c30e913a4"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        },
                        new
                        {
                            Id = new Guid("b97ba8b2-64ee-4c90-8572-e15aad8972f2"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        },
                        new
                        {
                            Id = new Guid("62509994-6766-4407-a138-0b40a66fb27f"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        },
                        new
                        {
                            Id = new Guid("5ecec201-29f5-4bd6-a393-e9cdd95772a0"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        },
                        new
                        {
                            Id = new Guid("6349177a-7fb6-4dbf-97f0-7313f27c6589"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb5c72ff-054b-4fef-92e2-942c24772963"),
                            FieldId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("430886ca-10c4-477c-92fb-d57c1cc56e90"),
                            FieldId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("59517b42-a706-4b75-89ff-4806a49da2c3"),
                            FieldId = new Guid("c5852f2f-bff6-41d5-8c37-e9d8f7d185c6"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("0891316c-66ae-414b-b4e1-f3a487c3dfa1"),
                            FieldId = new Guid("c4d26f9e-117b-4bb8-ae87-f6bec5f1a591"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("332c747d-f942-4370-808b-7c050696a9db"),
                            FieldId = new Guid("c4d26f9e-117b-4bb8-ae87-f6bec5f1a591"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("73f52e65-44bb-4c94-bc99-3aec8416c382"),
                            ColumnId = new Guid("ec6c6816-24f3-4ff7-ad8f-22ce736c0caf"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("3555b073-eb5a-41d9-be24-bf67cc04e86a"),
                            ColumnId = new Guid("ec6c6816-24f3-4ff7-ad8f-22ce736c0caf"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("ddb2e30f-73fe-49d3-b417-4fbdfa817dee"),
                            ColumnId = new Guid("ec6c6816-24f3-4ff7-ad8f-22ce736c0caf"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("daf8c602-f0cd-4b8e-b2b3-42771a743d96"),
                            ColumnId = new Guid("7a06ca6e-240e-49fc-887f-f1102224fc6e"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("2def3639-84d1-4c25-ac38-207c734a4762"),
                            ColumnId = new Guid("7a06ca6e-240e-49fc-887f-f1102224fc6e"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("f8a026bf-a239-4ba3-ade2-2bb64b681fda"),
                            ColumnId = new Guid("7a06ca6e-240e-49fc-887f-f1102224fc6e"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("832a2501-853f-474a-af2a-199d2feef15d"),
                            ColumnId = new Guid("33b64d67-f389-4a5b-9a56-315140599cc7"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("6d8c95ba-bd68-48ae-927f-3336b9418f98"),
                            ColumnId = new Guid("33b64d67-f389-4a5b-9a56-315140599cc7"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("43f297fb-d46e-4478-aa6d-5aae190765b8"),
                            ColumnId = new Guid("0c2bc25c-cdbc-4335-965e-f388d1598472"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("0996444a-1835-40e2-9c25-2cd6544c2054"),
                            ColumnId = new Guid("0c2bc25c-cdbc-4335-965e-f388d1598472"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("28fdbb34-cd1f-4ac8-a04e-ee2e66c787b0"),
                            ColumnId = new Guid("3e66e51c-9807-4936-b045-22ee478015ad"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("437af78f-5d2e-4dfe-9d4e-831154fe9587"),
                            ColumnId = new Guid("3e66e51c-9807-4936-b045-22ee478015ad"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("92818018-653b-4d10-be50-d07cc73d350b"),
                            ColumnId = new Guid("3e66e51c-9807-4936-b045-22ee478015ad"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("14d115ec-cf3c-4ace-98e9-82547abd950f"),
                            ColumnId = new Guid("3e66e51c-9807-4936-b045-22ee478015ad"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("b06a8d46-4d50-428d-a21c-d5b6a46579bf"),
                            ColumnId = new Guid("c298d248-3c2b-4f9e-b5bd-aa229720b375"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("af88f202-d981-4877-8fa5-61d8e3c37226"),
                            ColumnId = new Guid("c298d248-3c2b-4f9e-b5bd-aa229720b375"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("d8ce7f74-1481-4d63-97a1-08a697dfa986"),
                            ColumnId = new Guid("c298d248-3c2b-4f9e-b5bd-aa229720b375"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("cb0b7a46-b570-453e-bd99-58b662f7754c"),
                            ColumnId = new Guid("c298d248-3c2b-4f9e-b5bd-aa229720b375"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("6c34cccc-f313-4670-9118-b6fbbbc62ac7"),
                            ColumnId = new Guid("991c0655-0666-494b-9845-110b902a263f"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("9905e288-6700-421b-a9e7-211cb2385a58"),
                            ColumnId = new Guid("991c0655-0666-494b-9845-110b902a263f"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("11916bb7-d803-4f9e-8129-c7d37b1e1169"),
                            ColumnId = new Guid("edfc1a70-c91f-4cab-bc29-26c0f4dd6c8e"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6365520b-034c-45b6-bfbd-669a892c64e6"),
                            ColumnId = new Guid("edfc1a70-c91f-4cab-bc29-26c0f4dd6c8e"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("ee463f6e-14a2-4d41-accb-4b9d09bb32c6"),
                            ColumnId = new Guid("06c278de-4473-4c93-9f70-df520bc830a7"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e101723b-83f3-4bb5-b4f7-db39af6c206d"),
                            ColumnId = new Guid("06c278de-4473-4c93-9f70-df520bc830a7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("a6561831-8075-40b6-b35a-b74782f9e47c"),
                            ColumnId = new Guid("2233e705-760b-4d9b-b524-c787175f8759"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("db02d5d4-9e93-4c5b-ba74-cabb7063e1a1"),
                            ColumnId = new Guid("2233e705-760b-4d9b-b524-c787175f8759"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("75aa2163-a82d-4c99-8036-a4903c547021"),
                            ColumnId = new Guid("2233e705-760b-4d9b-b524-c787175f8759"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("3bbd75c1-516d-43c1-ad3b-34843d044d42"),
                            ColumnId = new Guid("2233e705-760b-4d9b-b524-c787175f8759"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("eb541076-5000-4850-af0a-1ca3e4405179"),
                            ColumnId = new Guid("d7df1ff7-2428-49cc-8c22-6267f451f1cc"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("1f27b159-f20a-4958-a1c4-021d2d5b8d62"),
                            ColumnId = new Guid("d7df1ff7-2428-49cc-8c22-6267f451f1cc"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("740c0e7f-c176-43fd-8b71-85e7535fe287"),
                            ColumnId = new Guid("d7df1ff7-2428-49cc-8c22-6267f451f1cc"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("2d346421-c6f9-4641-b197-af718a046d6c"),
                            ColumnId = new Guid("02a3c59e-ba61-4e30-b209-944ccbf285d5"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("0e0168f4-2073-45c5-bbb1-e45236ed9ea6"),
                            ColumnId = new Guid("02a3c59e-ba61-4e30-b209-944ccbf285d5"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("64ca4b1b-94b4-487b-b196-6048c31efec9"),
                            ColumnId = new Guid("de74d92d-666d-4b5d-80a8-bf29df326bcc"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("08266c95-0a6f-4bcc-a8d4-2fd6305d1e04"),
                            ColumnId = new Guid("de74d92d-666d-4b5d-80a8-bf29df326bcc"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16f8ee35-c178-494a-b82a-8f3f9fa9025d"),
                            EditBlockId = new Guid("a64f3e23-e949-482b-9aff-ae583a47e248"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("fa83a3d2-3800-48ff-8c05-d1a569e320f4"),
                            EditBlockId = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("cf76f83b-a796-47f5-84a0-b8b7e8c21540"),
                            EditBlockId = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("db3ce028-13b3-405c-a7ff-a3f9b7e01e5e"),
                            EditBlockId = new Guid("a42fe6c2-839c-4cae-9510-ed27779194c0"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1e4e4f93-93b6-4e25-b4da-344df5b078c9"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8dffba7c-04a0-4107-ba1f-732a107b7510"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("5b946941-2de7-41d0-80c0-956c98109d5b"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b1beb533-0148-4fb4-8583-7404245bf510"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("826478d2-6f91-4665-b8ea-7d3355ba4a0a"),
                            EditBlockId = new Guid("41373ff4-c015-4291-b2cf-8159db79a202"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("7456f2ac-5acc-46df-86dc-376b1c626cac"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("11eb8b28-57a0-4de4-8fc0-ff7177d11054"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("92c849cc-df6a-4bcd-950b-ef3d1b6c67e6"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("03578da2-2afc-45ff-88c8-e2e8b2a467af"),
                            EditBlockId = new Guid("0ffb4600-b7d1-4d1b-ab22-23196617e437"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfba9136-c2f7-42e8-b1b7-8fe50e44438e"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("db5cb70e-6825-460e-9ca6-9cf2ce83d13e"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("294122c9-6bca-4985-9ffe-f11eb77b8026"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("547d8991-7e8d-4494-ae11-a52e16c49516"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("0bc34fa1-c605-4c83-b091-fa54ba8794c5"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("92c94a40-8fb7-4a6a-939c-034dcab0c559"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("72ce5a0a-e60a-4bcf-b092-cb54124c8c75"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
