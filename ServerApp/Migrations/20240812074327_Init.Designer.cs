// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240812074327_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c8f2b243-db59-4a20-bb7e-4aeb11e94c04"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            EditBlocksId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c8f2b243-db59-4a20-bb7e-4aeb11e94c04"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5a681c5f-5ada-4122-94f5-c5a492eaa330"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("162c8a59-6597-4ac9-b844-a140bf128511"),
                            TracksId = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5a681c5f-5ada-4122-94f5-c5a492eaa330"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("162c8a59-6597-4ac9-b844-a140bf128511"),
                            TracksId = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98771aa9-40d3-4292-bb74-cfce515f52bb"),
                            Name = "Год",
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("1db16741-71a6-4904-bb71-55f77736f047"),
                            Name = "Название конкурса",
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("5b421188-39a1-4a1f-aa39-dc76b0b46366"),
                            Name = "Статус конкурса",
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("10204e78-7293-4170-8575-fb162d247a90"),
                            Name = "Награда",
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("88441840-3bfb-489b-8c11-cf57bd567dfc"),
                            Name = "Ссылка",
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("0505b291-281a-4b89-b630-79dbf50e9f3e"),
                            Name = "Название документа, реквизиты",
                            TableId = new Guid("d825c252-10ee-45fa-9f22-6c7b8bb36e6a")
                        },
                        new
                        {
                            Id = new Guid("6139a69b-fac5-4a8a-94d5-f835fbecfc45"),
                            Name = "Год получения документа",
                            TableId = new Guid("d825c252-10ee-45fa-9f22-6c7b8bb36e6a")
                        },
                        new
                        {
                            Id = new Guid("8ef8f63c-1aa1-4225-9bc6-7d6beb7a5f04"),
                            Name = "Наименование курса",
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("634e4fb9-82b7-4d43-8e93-7deafa5b90ab"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("cb64dfc9-4f03-47eb-87e4-06f93f653eee"),
                            Name = "Лекции (час.)",
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("52a3c213-3417-4bcd-99a3-e2280e913f7f"),
                            Name = "Практические занятия (час.)",
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("1d38a6c9-aa40-4391-aef7-e98a4c188de5"),
                            Name = "Итого (час.)",
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("8785d145-40c2-4005-b6c1-21f71276ac5d"),
                            Name = "ФИО",
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("6240b5f0-4dcb-4944-b3a1-9d747d6c78f6"),
                            Name = "Название конкурса/премии",
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("7da80b1f-c0b9-483a-b689-480e0f11918b"),
                            Name = "Год",
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("8569adb5-95dc-40be-a412-7acd6ad7b84e"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("55152a27-035f-4b35-84cd-5c5636948dc1"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("ef641628-3c51-4681-adde-59ff6f171ea4"),
                            Name = "Название организации/должность/ставка",
                            TableId = new Guid("b70fe207-dd4c-4352-8177-b3739ea0ef90")
                        },
                        new
                        {
                            Id = new Guid("0d3bbb3f-bed8-4a15-a10c-b686d17b92d3"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            TableId = new Guid("b70fe207-dd4c-4352-8177-b3739ea0ef90")
                        },
                        new
                        {
                            Id = new Guid("a1032897-21d3-4c0d-b9be-ab7affe37056"),
                            Name = "Вид деятельности (преподавательская)",
                            TableId = new Guid("b70fe207-dd4c-4352-8177-b3739ea0ef90")
                        },
                        new
                        {
                            Id = new Guid("852db7b2-a022-48b4-8e95-9c8ea83ffe50"),
                            Name = "Количество часов",
                            TableId = new Guid("b70fe207-dd4c-4352-8177-b3739ea0ef90")
                        },
                        new
                        {
                            Id = new Guid("bff7030e-663a-4deb-84ff-e4db04d40e54"),
                            Name = "Вид публикации",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("754779cd-6099-4489-a774-e9d808ed8d45"),
                            Name = "Название",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("7f836060-61b4-4221-a7bd-fbff96956f1f"),
                            Name = "Соавторы",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("0a3bc47c-2d60-4faa-9572-f92911f35e46"),
                            Name = "Количество печатных листов",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("b23161db-bc46-4fda-85cb-82e1fd0818dd"),
                            Name = "Наличие грифа",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("99de1fb3-e136-468c-a229-4027406f1c4c"),
                            Name = "Издательство, год",
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("7c000344-b5b3-445f-8d88-d515d9662933"),
                            Name = "Название дисциплины",
                            TableId = new Guid("7a935b34-8cc8-4e74-ada1-6b1b7f7f5e26")
                        },
                        new
                        {
                            Id = new Guid("c6c7243b-b1a7-438d-9f94-716eb228c18f"),
                            Name = "Вид (лекции, лабораторные)",
                            TableId = new Guid("7a935b34-8cc8-4e74-ada1-6b1b7f7f5e26")
                        },
                        new
                        {
                            Id = new Guid("41a1b54b-cd86-4229-b08e-571bbf4ae848"),
                            Name = "Название курса",
                            TableId = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4")
                        },
                        new
                        {
                            Id = new Guid("c159c6f9-98ea-46d8-b8fd-717515fc8c6b"),
                            Name = "Соавторы",
                            TableId = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4")
                        },
                        new
                        {
                            Id = new Guid("925653f5-3259-4e62-90b0-40b71606b001"),
                            Name = "Ссылка на платформу",
                            TableId = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4")
                        },
                        new
                        {
                            Id = new Guid("ff4d650f-675c-48d0-9735-2915e2db6032"),
                            Name = "Год",
                            TableId = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4")
                        },
                        new
                        {
                            Id = new Guid("f46bfb70-12cc-469b-a350-9528a9d240f6"),
                            Name = "Название статьи",
                            TableId = new Guid("572f689b-f5f5-4971-8303-4f7119161687")
                        },
                        new
                        {
                            Id = new Guid("d769de10-b66f-4587-b62d-dd11792927a6"),
                            Name = "Соавторы",
                            TableId = new Guid("572f689b-f5f5-4971-8303-4f7119161687")
                        },
                        new
                        {
                            Id = new Guid("da3d7be1-3383-4058-92f1-4c926dcb1348"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            TableId = new Guid("572f689b-f5f5-4971-8303-4f7119161687")
                        },
                        new
                        {
                            Id = new Guid("d3809ebe-d03e-4a3c-bc28-fae698129713"),
                            Name = "Издание, год",
                            TableId = new Guid("572f689b-f5f5-4971-8303-4f7119161687")
                        },
                        new
                        {
                            Id = new Guid("f3b28fc2-bc1e-4a19-9f13-9b22a8efe82c"),
                            Name = "Тип идентификатора",
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("475068dc-8eec-48af-9383-ff10c6fd3d85"),
                            Name = "Идентификатор",
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("31e7d836-2454-4838-aab0-2eec9906d30c"),
                            Name = "Количество публикаций в БАЗЕ",
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("537fff4a-5221-4382-ac66-c047aaea255e"),
                            Name = "Количество цитирований",
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("58ab6ff7-695f-42b6-9a20-0878f8a16f1a"),
                            Name = "Индекс Хирша (за все время)",
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("dc94b7ec-748c-4fdd-bdfa-9a771f43d1ff"),
                            Name = "Название НИР/НИОКР",
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("6da5e54d-bbd9-48e8-9be8-f4f0c15db1dc"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("d575a176-4bf8-46b9-a040-b171ed6ed00a"),
                            Name = "Период выполнения",
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("6df6b4c2-293a-4eda-bf7c-a0d8752a609c"),
                            Name = "Статус (руководитель/исполнитель)",
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("33a0cb5d-3fa1-49da-a39b-e3b28b7e106a"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("f63db8d9-b3d9-4b2d-9c2d-ea6cc1684636"),
                            Name = "Вид",
                            TableId = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb")
                        },
                        new
                        {
                            Id = new Guid("448ad829-ef09-4379-bfa3-11bcbbcc81c2"),
                            Name = "Название",
                            TableId = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb")
                        },
                        new
                        {
                            Id = new Guid("21634506-51fc-4279-b4aa-dc800b8e675c"),
                            Name = "ФИО соавторов",
                            TableId = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb")
                        },
                        new
                        {
                            Id = new Guid("e5ed5650-6049-438c-807c-2f35708439f4"),
                            Name = "Номер РИД",
                            TableId = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb")
                        },
                        new
                        {
                            Id = new Guid("ec0462fa-0bf1-43b8-8f90-002f89105bf4"),
                            Name = "Вид",
                            TableId = new Guid("34aa30e4-93a9-403a-a97a-d8fc3638d20a")
                        },
                        new
                        {
                            Id = new Guid("83115527-bdc3-41fa-9754-1dba9e208538"),
                            Name = "Название разработки",
                            TableId = new Guid("34aa30e4-93a9-403a-a97a-d8fc3638d20a")
                        },
                        new
                        {
                            Id = new Guid("a527117f-7a21-456f-ab6c-511eb846a24d"),
                            Name = "Название организации в которую внедрена разработка",
                            TableId = new Guid("34aa30e4-93a9-403a-a97a-d8fc3638d20a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("Number", "Name")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("c8f2b243-db59-4a20-bb7e-4aeb11e94c04"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.HasIndex("MarkBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c16065fe-2912-468b-a687-d856b31c0e3d"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Трек конкурса"
                        },
                        new
                        {
                            Id = new Guid("3cfd2d79-a53d-44bd-876e-b4fa15dfba1c"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "ФИО"
                        },
                        new
                        {
                            Id = new Guid("38ae2f0a-b39c-48b0-a9a6-d1db83d1af71"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Дата рождения"
                        },
                        new
                        {
                            Id = new Guid("243c430e-2b1f-4e8b-a5eb-c8bf3f716f1e"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Домашний адрес"
                        },
                        new
                        {
                            Id = new Guid("672b95bd-af64-4fb8-9e89-3ae216865cd8"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Контактный телефон"
                        },
                        new
                        {
                            Id = new Guid("2b323515-82e2-4cfb-a09b-7769cacd3da0"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Электронная почта"
                        },
                        new
                        {
                            Id = new Guid("ebbed87a-cb76-4d1d-94d5-1c0a1e542f21"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Место работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("6388741e-5dfb-4cb6-af6a-7e0dd6253b63"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Адрес работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("678d58f4-3787-4438-9c48-57900d637680"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Институт, факультет, кафедра, лаборатория"
                        },
                        new
                        {
                            Id = new Guid("b7f99c06-57a1-4fa3-80f9-32bed7e1240f"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Должность"
                        },
                        new
                        {
                            Id = new Guid("8f1d3fed-f7de-49aa-8a76-c1690809a7b9"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке"
                        },
                        new
                        {
                            Id = new Guid("c392f6f8-af53-47bd-a53c-f47411127bc9"),
                            EditBlockId = new Guid("23cc70f3-5da6-47a6-ae3a-10c5dcd7a0f7"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Дополнительная информация"
                        },
                        new
                        {
                            Id = new Guid("20470e70-e6c9-4e28-84cd-162dbc06dd21"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Направление конкурса"
                        },
                        new
                        {
                            Id = new Guid("3ec062f7-800a-443a-8b0d-1edf58697b1e"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Категория участника конкурса"
                        },
                        new
                        {
                            Id = new Guid("94e33eb7-9766-472f-975b-43c4e0667e21"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Название конкрусной работы"
                        },
                        new
                        {
                            Id = new Guid("a27d0655-42f6-4741-b007-cedb77befc79"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Ученое звание"
                        },
                        new
                        {
                            Id = new Guid("76b3c147-c38f-4f0a-9392-b948434579ed"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Ученая степень"
                        },
                        new
                        {
                            Id = new Guid("712e17d9-6f7c-4b8e-a420-aafabd4c36cc"),
                            EditBlockId = new Guid("2cc07a88-fd52-4227-a93e-77676af3ce87"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Научная специальность (по классификации ВАК)"
                        },
                        new
                        {
                            Id = new Guid("c983eb4a-6c7b-46b2-b1d3-58e9511bbc08"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Защитившиеся кадидаты наук"
                        },
                        new
                        {
                            Id = new Guid("378c38a6-a79f-4550-a182-5848b8151b8a"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Защитившиеся доктора наук"
                        },
                        new
                        {
                            Id = new Guid("02008624-0f88-47db-8f1c-f15ac45af385"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Защитившиеся бакалавры"
                        },
                        new
                        {
                            Id = new Guid("364c0636-753e-425f-89a2-31b63058c27e"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Защитившиеся специалисты"
                        },
                        new
                        {
                            Id = new Guid("d58656cf-5a6c-420f-9781-907555f35d82"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Защитившиеся магистры"
                        },
                        new
                        {
                            Id = new Guid("00a89bf5-7551-4525-b1a3-5d95c275d311"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Защитившиеся кандидаты наук"
                        },
                        new
                        {
                            Id = new Guid("d524b9b8-70cd-4fb2-a59e-a0e0efcb69f3"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Защитившиеся доктора наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.HasIndex("MarkBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f70ae10-bc98-4a35-b95f-a206a07e805a"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("0a813591-35f4-47cb-b2b0-4a9c4f1b741c"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c")
                        },
                        new
                        {
                            Id = new Guid("aad83f6a-83e0-49d7-8b0c-05aec3341941"),
                            FieldId = new Guid("d58656cf-5a6c-420f-9781-907555f35d82"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("4b2d20a0-35a7-4f26-8372-77978a99d2bd"),
                            FieldId = new Guid("c983eb4a-6c7b-46b2-b1d3-58e9511bbc08"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("b9fdbb9b-1062-441c-8a91-e0c7ed62bec8"),
                            FieldId = new Guid("378c38a6-a79f-4550-a182-5848b8151b8a"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d0ee1520-8a79-4ddc-a0d7-3be5283563ae"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee")
                        },
                        new
                        {
                            Id = new Guid("86e7de18-6ebd-44ba-8171-ccb59cabd05c"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4")
                        },
                        new
                        {
                            Id = new Guid("852184f3-181b-4a31-a166-2ad84af2115a"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("fdbc6081-be50-4278-82b6-3f3a0fdbc833"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("edc91066-4e93-4103-a7fa-583024771720"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("b1892257-183e-49ce-923f-b774eb97e007"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6")
                        },
                        new
                        {
                            Id = new Guid("f5db7d1f-fac4-4f2b-9348-3a6df636660f"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("7a935b34-8cc8-4e74-ada1-6b1b7f7f5e26")
                        },
                        new
                        {
                            Id = new Guid("86a4c888-fe13-459b-9feb-1e37977ff868"),
                            FieldId = new Guid("a27d0655-42f6-4741-b007-cedb77befc79"),
                            MarkBlockId = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("c75b285d-ee33-4079-a453-9021a4fc9e9e"),
                            MarkBlockId = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea")
                        },
                        new
                        {
                            Id = new Guid("d6f1d1a0-7791-464f-a4f8-801e2126f76a"),
                            MarkBlockId = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("d825c252-10ee-45fa-9f22-6c7b8bb36e6a")
                        },
                        new
                        {
                            Id = new Guid("ef67da7e-4420-4e2d-847f-3c70a5f86042"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("572f689b-f5f5-4971-8303-4f7119161687")
                        },
                        new
                        {
                            Id = new Guid("580a29ed-d43f-4830-8f80-a7eb8a800581"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("fa4536ba-f2e2-4f28-a692-57f38184abea"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374")
                        },
                        new
                        {
                            Id = new Guid("76418445-8256-4ef1-b096-664e6b249b5a"),
                            FieldId = new Guid("00a89bf5-7551-4525-b1a3-5d95c275d311"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("36e5c72c-1f31-4ac4-855e-42ec79f4eb98"),
                            FieldId = new Guid("d524b9b8-70cd-4fb2-a59e-a0e0efcb69f3"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("6768a2e4-3534-4e80-9c26-f379560418d8"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("e1de257d-1025-4579-83c7-5b0a2b6acadb"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd")
                        },
                        new
                        {
                            Id = new Guid("447eb529-37fd-4ecc-8c29-b979dc0019d8"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb")
                        },
                        new
                        {
                            Id = new Guid("479583ea-3427-4643-8dc6-34dcbe0cf422"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("34aa30e4-93a9-403a-a97a-d8fc3638d20a")
                        },
                        new
                        {
                            Id = new Guid("72921ab5-1705-4acd-aaac-90c1e3e3915e"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("37e5e162-d639-41a8-9cfb-a6a4558be120"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c531885a-0887-488d-9b8c-eb01f84f2b0a"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("5a681c5f-5ada-4122-94f5-c5a492eaa330"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("162c8a59-6597-4ac9-b844-a140bf128511"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId");

                    b.HasIndex("MarkBlockId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa8e146f-dfc9-4a8d-940a-62ba6e27d9ea"),
                            EditBlockId = new Guid("c8f2b243-db59-4a20-bb7e-4aeb11e94c04"),
                            MarkBlockId = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности"
                        },
                        new
                        {
                            Id = new Guid("d825c252-10ee-45fa-9f22-6c7b8bb36e6a"),
                            EditBlockId = new Guid("c8f2b243-db59-4a20-bb7e-4aeb11e94c04"),
                            MarkBlockId = new Guid("2e0e37a8-5be9-4660-bc2a-f58721e14462"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)"
                        },
                        new
                        {
                            Id = new Guid("df29df8e-ef21-4a6b-b25c-d125bc41e37c"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)"
                        },
                        new
                        {
                            Id = new Guid("2b2a704c-5e9a-440a-bda1-71c2e5ec94ee"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание"
                        },
                        new
                        {
                            Id = new Guid("b70fe207-dd4c-4352-8177-b3739ea0ef90"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год"
                        },
                        new
                        {
                            Id = new Guid("6835546c-c9f3-4ffa-be6d-df2f18f2c2d6"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("7a935b34-8cc8-4e74-ada1-6b1b7f7f5e26"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("899dd24d-ace6-4345-85aa-79247ed4f1b9"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("da665c50-d8f5-4bbf-9794-5ba015df64a4"),
                            EditBlockId = new Guid("9e6d7aea-7a73-4df9-959d-3f3ee8affb62"),
                            MarkBlockId = new Guid("0445c0f1-5d4b-4943-a35c-38000a74a6e1"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("572f689b-f5f5-4971-8303-4f7119161687"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Список научных публикаций за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("5f774819-f6c9-453e-810d-ee768d8b0374"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Персональные идентификаторы и показатели"
                        },
                        new
                        {
                            Id = new Guid("6e118ee8-f67f-4710-be6c-d870bc9a4abd"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("2f33d0f3-f989-4fe6-99a9-cbc4bc8bc502"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("d7028b90-0ea6-4bcc-b88b-bace9f6efdeb"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)"
                        },
                        new
                        {
                            Id = new Guid("34aa30e4-93a9-403a-a97a-d8fc3638d20a"),
                            EditBlockId = new Guid("b405d09b-3510-43b1-a896-d57a92d42d7f"),
                            MarkBlockId = new Guid("54f9e0e4-e87a-44d2-ad03-6d0c8fd7337d"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ae40e52-b063-43a8-bae3-16f0a69d277d"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4ca97ddb-3e20-4167-b063-d250ca0f4308"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("Fields")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("Marks")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("MarkBlock");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("Tables")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Marks");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
