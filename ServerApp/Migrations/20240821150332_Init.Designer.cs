// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821150332_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            EditBlocksId = new Guid("31169eaa-7cde-4f69-9de7-9d34fa854605"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            EditBlocksId = new Guid("31169eaa-7cde-4f69-9de7-9d34fa854605"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            EditBlocksId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("ca889531-fa07-490e-8cc2-2bd6d4cd97f8"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("42d804c8-1774-46a3-a6c9-393594e55e08"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("efe6b69f-d675-49ba-9eed-d5483076e887"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("d43f7d97-9b43-4902-801f-2c8e11d5b738"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("f4621a47-6444-4f96-9bff-b7247a64a901"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("49dfa1e1-4a3a-4f43-b799-b6c80662c8a1"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("dc7684ff-bd9d-4360-b7ff-f42ab359fce7"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("683a7c80-d26b-45ec-a5cf-d94b16139caa"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("ce1deef0-7563-43ab-a3df-7ab742832fdb"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("adb5a93a-ad25-4c22-9e70-efa86dd2bdd5"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("8c9cdba6-c1c5-4840-97f5-8042cc14cf2c"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("572a11a5-a7d2-45cc-8f48-ca7f912fd4fe"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("c8b88934-23cc-46d6-be3c-3f0a53a6bf1a"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("94bd25d8-d12a-4f6e-910b-5336833d8c76"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("ee57c7df-ec3e-4847-83fa-8827688efbe7"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("4dee9c1a-7243-4643-8ae8-96f4c7d736a3"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("362ab3e8-227b-4a2a-81ea-b9cff26d7fa5"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("c7f7a655-e90f-4810-a0b0-4c73aa94dad0"),
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b")
                        },
                        new
                        {
                            FieldsId = new Guid("c5a6a54b-1cb7-42fe-9d24-fe2f8dacc8c9"),
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773")
                        },
                        new
                        {
                            FieldsId = new Guid("17580ff7-a1b0-4e99-afad-ff315cc30978"),
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773")
                        },
                        new
                        {
                            FieldsId = new Guid("65ce6d39-a0a8-431a-9540-e7b52a907d7f"),
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773")
                        },
                        new
                        {
                            FieldsId = new Guid("871a7b30-c027-4c0c-a51e-96a3d878b980"),
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773")
                        },
                        new
                        {
                            FieldsId = new Guid("fd725233-ad5c-4e1f-ae67-dcc0da16173a"),
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773")
                        },
                        new
                        {
                            FieldsId = new Guid("4dee9c1a-7243-4643-8ae8-96f4c7d736a3"),
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d")
                        },
                        new
                        {
                            FieldsId = new Guid("4dee9c1a-7243-4643-8ae8-96f4c7d736a3"),
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24")
                        },
                        new
                        {
                            FieldsId = new Guid("a63cf466-751d-4da5-bd07-e953996b6ce3"),
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24")
                        },
                        new
                        {
                            FieldsId = new Guid("97adae5c-dff2-43b7-8ec5-b91fb33e2e82"),
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            TablesId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            TablesId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            TablesId = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            TablesId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            TablesId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            TablesId = new Guid("51c81764-8043-4471-8720-ac28f0123f82")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            TablesId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            TablesId = new Guid("5609f554-a020-47af-8d31-538bdf931432")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            TablesId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            TablesId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            TablesId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            TablesId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            TablesId = new Guid("5609f554-a020-47af-8d31-538bdf931432")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            TablesId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            TablesId = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("18a81a99-7af4-4aa0-b826-538d84345d24"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c25f5aa9-21a8-49cd-966a-d98165c732ef"),
                            TracksId = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("18a81a99-7af4-4aa0-b826-538d84345d24"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c25f5aa9-21a8-49cd-966a-d98165c732ef"),
                            TracksId = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("0f7ca2d5-bd72-4664-8e30-9d65f56c6b04")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("8d3ccb83-6de5-4f37-91bd-919b04f31961")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("bd23ea12-6465-4f27-bb70-744a1f2e8424")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("4ef66e0f-9435-4928-9898-08382587843b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("f489ef30-cd59-422f-b82d-d6dbe30c063e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("4931815f-e698-4bb6-8cc5-60b4706368b3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            MarksId = new Guid("60822c86-306e-4e24-954a-ad488a393635")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            MarksId = new Guid("0fa6a535-377b-46c6-ba04-eeecb036fae1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            MarksId = new Guid("c639e574-21cd-4f29-9062-f67a572c6b9c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            MarksId = new Guid("eea59e0e-b341-4657-8125-b2e54ce26961")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            MarksId = new Guid("83ebdfca-6a0b-4c95-8cf1-3e62482219aa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            MarksId = new Guid("d8bf5466-6302-4e6e-916a-93c395baefd7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            MarksId = new Guid("738ccea7-95e7-432d-8c62-cb3d06247eec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            MarksId = new Guid("50495d2a-7621-487e-a42f-a558c615d587")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            MarksId = new Guid("b98cda92-80c4-489f-a48f-9394cf8c87a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("738ccea7-95e7-432d-8c62-cb3d06247eec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("50495d2a-7621-487e-a42f-a558c615d587")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("b74d1cf4-3ff4-4b7e-980a-d8ebd5d91726")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("e55a2495-3a0d-462f-a4fd-521ea0d33cd7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("5991cc39-91c9-43a4-8fab-e70557796bf4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("55a770c1-ffbd-49be-abe2-036f89685c6f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("71b9f20d-eccc-4944-bc52-b22e7c5961e3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("5dbad1b8-0e89-4987-9680-c60db1e08f59")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            MarksId = new Guid("bdd6da5a-b061-4e3e-9456-e9bcf148f27c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            MarksId = new Guid("b98cda92-80c4-489f-a48f-9394cf8c87a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            MarksId = new Guid("e691de53-2d1b-4397-b4b4-9b73b9a05806")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            MarksId = new Guid("bd189f97-b73e-444a-8587-a715bdc15f00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            MarksId = new Guid("ea2e3730-6b28-4c17-9630-0a10c0f15565")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            MarksId = new Guid("a003da79-fe55-417a-9225-658dbe25b9f7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6c039b2-1199-4928-a73c-d70568dff3a1"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("a0711f49-cbfc-4310-ac13-9e0842fb1592"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("7480cd93-ee40-4095-8d5b-9c73ed9746a1"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("751323ce-ad1f-4fd2-8ea4-45e482dfd0e6"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("beeaf71a-bb17-4013-a81b-eb62710df058"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("cbb790a8-b856-4d4e-b66d-3bfdb960c17e"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("5609f554-a020-47af-8d31-538bdf931432")
                        },
                        new
                        {
                            Id = new Guid("99bce237-7d3d-499c-8095-0771a539b051"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("5609f554-a020-47af-8d31-538bdf931432")
                        },
                        new
                        {
                            Id = new Guid("c8772a8b-6a24-462a-a5dc-d064e008b8f3"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("be79b397-7b1b-48b6-a606-e451b76a97f4"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("26086dde-84c8-45cd-bfad-03191a19ff58"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("5364f91f-963f-4638-8c4e-c5007a3a5805"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("93f24f5f-93c8-4899-b514-dbd83aea1196"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("5c202379-0086-42c1-ae04-776a6bfbeb72"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("a7d118fa-72cc-4bbd-8d92-d4ccdcc542ee"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("84c674bb-6432-44c2-ac77-3bdaafa7c056"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("925fbcf5-5350-4252-8be2-99edb221004b"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("b99f382c-224d-4eb1-ab75-1f808a0bfe41"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("7fe1c467-54e5-481b-ae0f-88985cc56932"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843")
                        },
                        new
                        {
                            Id = new Guid("d81a4f20-72db-4506-bbac-76bbc5592cef"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843")
                        },
                        new
                        {
                            Id = new Guid("0f2ab8e7-4306-49ea-af0b-bdbcc709b3a6"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843")
                        },
                        new
                        {
                            Id = new Guid("98f17ba2-e86c-41e3-847e-e3df251a9c58"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843")
                        },
                        new
                        {
                            Id = new Guid("8e010354-fe1f-43ce-959d-15021d046a1e"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("6f4052ef-47a6-4abe-b882-6a1e4b0760bf"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("8855ff90-1908-42f7-b87c-53d78c949096"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("167c920e-6f58-49ab-bdb5-cf4465a4a68e"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("8cb056a6-35e0-4b9e-b21a-64805d5f7e7c"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("fe738f30-4009-4579-9b41-6d7cc7415bc7"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("6debb536-dd7f-4bd5-9034-6ec6201afca3"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("51c81764-8043-4471-8720-ac28f0123f82")
                        },
                        new
                        {
                            Id = new Guid("c23d6ff4-7343-434a-9880-172f43df9369"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("51c81764-8043-4471-8720-ac28f0123f82")
                        },
                        new
                        {
                            Id = new Guid("dfcab5db-7640-4a1a-827e-340b2d1aa17f"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            Id = new Guid("1fa6d57c-94df-4fb0-9972-792cf4644c8e"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            Id = new Guid("00a3350a-a8fb-4292-995d-a7e7b236b994"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            Id = new Guid("ce315791-0123-49b9-b638-f983eaa9a67a"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            Id = new Guid("57f259cc-a63c-432b-bea3-b9bd567ce5c2"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            Id = new Guid("074c9174-c839-473f-80c2-82b49c74dd61"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            Id = new Guid("edddf8be-abcf-4edd-b173-7cb087265e66"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            Id = new Guid("5d767f73-55ac-40b6-993e-b0482c05d265"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            Id = new Guid("fdbd9ec1-f20a-4ea9-ba15-3b3b446b26c3"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("7acbb316-c9a2-4a1d-9523-fd12d17eee15"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("600f5a79-3162-4aec-a755-1aba5af786ba"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("203ef34d-a7d4-4519-b45b-492a83dbbc91"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("363c09ab-d799-4a4c-8678-82489b3053c0"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("609b83b0-b4ee-49aa-adc9-a6051b5d89d2"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("2a9e6655-5efa-48bb-bdde-461f5217bf14"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("2316f31f-0aaa-4dd5-88d7-65368924a0f6"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("8213e160-1164-4afb-acdb-3116ad2811ba"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("58d7b85b-b431-443e-9a8b-93c94eefaa9f"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("9d639eb9-f91b-486a-a974-52cfced3d54c"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            Id = new Guid("61d24ca6-ddf8-49f3-8534-e4715b8a0718"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            Id = new Guid("09d61457-53c5-4f8b-9bb0-11b9d0652886"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            Id = new Guid("771d0210-dd5d-465a-bcab-7c52ea66c348"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            Id = new Guid("381c0c59-1056-4bed-9026-78401c963e29"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d")
                        },
                        new
                        {
                            Id = new Guid("99820d46-f494-4cd6-a110-55498cc3e930"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d")
                        },
                        new
                        {
                            Id = new Guid("df3a0e23-1ce5-438c-a247-3f084bc3449f"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("31169eaa-7cde-4f69-9de7-9d34fa854605"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca889531-fa07-490e-8cc2-2bd6d4cd97f8"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Трек конкурса",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("42d804c8-1774-46a3-a6c9-393594e55e08"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "ФИО",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("efe6b69f-d675-49ba-9eed-d5483076e887"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Дата рождения",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d43f7d97-9b43-4902-801f-2c8e11d5b738"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Домашний адрес",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f4621a47-6444-4f96-9bff-b7247a64a901"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Контактный телефон",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("49dfa1e1-4a3a-4f43-b799-b6c80662c8a1"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Электронная почта",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("dc7684ff-bd9d-4360-b7ff-f42ab359fce7"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Место работы/учебы",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("683a7c80-d26b-45ec-a5cf-d94b16139caa"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Адрес работы/учебы",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("ce1deef0-7563-43ab-a3df-7ab742832fdb"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("adb5a93a-ad25-4c22-9e70-efa86dd2bdd5"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Должность",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("8c9cdba6-c1c5-4840-97f5-8042cc14cf2c"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("572a11a5-a7d2-45cc-8f48-ca7f912fd4fe"),
                            EditBlockId = new Guid("a9caecec-3b3e-4a97-908f-f00f0331de4d"),
                            Name = "Дополнительная информация",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("c8b88934-23cc-46d6-be3c-3f0a53a6bf1a"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Направление конкурса",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("94bd25d8-d12a-4f6e-910b-5336833d8c76"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Категория участника конкурса",
                            Number = 14
                        },
                        new
                        {
                            Id = new Guid("ee57c7df-ec3e-4847-83fa-8827688efbe7"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Название конкрусной работы",
                            Number = 15
                        },
                        new
                        {
                            Id = new Guid("4dee9c1a-7243-4643-8ae8-96f4c7d736a3"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Ученое звание",
                            Number = 16
                        },
                        new
                        {
                            Id = new Guid("362ab3e8-227b-4a2a-81ea-b9cff26d7fa5"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Ученая степень",
                            Number = 17
                        },
                        new
                        {
                            Id = new Guid("c7f7a655-e90f-4810-a0b0-4c73aa94dad0"),
                            EditBlockId = new Guid("e9ac9588-27e7-47ec-ae3d-d6f889386f17"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18
                        },
                        new
                        {
                            Id = new Guid("c5a6a54b-1cb7-42fe-9d24-fe2f8dacc8c9"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("17580ff7-a1b0-4e99-afad-ff315cc30978"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Защитившиеся доктора наук",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("65ce6d39-a0a8-431a-9540-e7b52a907d7f"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Защитившиеся бакалавры",
                            Number = 21
                        },
                        new
                        {
                            Id = new Guid("871a7b30-c027-4c0c-a51e-96a3d878b980"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Защитившиеся специалисты",
                            Number = 22
                        },
                        new
                        {
                            Id = new Guid("fd725233-ad5c-4e1f-ae67-dcc0da16173a"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Защитившиеся магистры",
                            Number = 23
                        },
                        new
                        {
                            Id = new Guid("a63cf466-751d-4da5-bd07-e953996b6ce3"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24
                        },
                        new
                        {
                            Id = new Guid("97adae5c-dff2-43b7-8ec5-b91fb33e2e82"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Защитившиеся доктора наук",
                            Number = 25
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f7ca2d5-bd72-4664-8e30-9d65f56c6b04"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("8d3ccb83-6de5-4f37-91bd-919b04f31961"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e")
                        },
                        new
                        {
                            Id = new Guid("bd23ea12-6465-4f27-bb70-744a1f2e8424"),
                            FieldId = new Guid("fd725233-ad5c-4e1f-ae67-dcc0da16173a"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("4ef66e0f-9435-4928-9898-08382587843b"),
                            FieldId = new Guid("c5a6a54b-1cb7-42fe-9d24-fe2f8dacc8c9"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f489ef30-cd59-422f-b82d-d6dbe30c063e"),
                            FieldId = new Guid("17580ff7-a1b0-4e99-afad-ff315cc30978"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4931815f-e698-4bb6-8cc5-60b4706368b3"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9")
                        },
                        new
                        {
                            Id = new Guid("60822c86-306e-4e24-954a-ad488a393635"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba")
                        },
                        new
                        {
                            Id = new Guid("0fa6a535-377b-46c6-ba04-eeecb036fae1"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("c639e574-21cd-4f29-9062-f67a572c6b9c"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("eea59e0e-b341-4657-8125-b2e54ce26961"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("83ebdfca-6a0b-4c95-8cf1-3e62482219aa"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b")
                        },
                        new
                        {
                            Id = new Guid("d8bf5466-6302-4e6e-916a-93c395baefd7"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("51c81764-8043-4471-8720-ac28f0123f82")
                        },
                        new
                        {
                            Id = new Guid("738ccea7-95e7-432d-8c62-cb3d06247eec"),
                            FieldId = new Guid("4dee9c1a-7243-4643-8ae8-96f4c7d736a3"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("50495d2a-7621-487e-a42f-a558c615d587"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f")
                        },
                        new
                        {
                            Id = new Guid("b98cda92-80c4-489f-a48f-9394cf8c87a0"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("5609f554-a020-47af-8d31-538bdf931432")
                        },
                        new
                        {
                            Id = new Guid("b74d1cf4-3ff4-4b7e-980a-d8ebd5d91726"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e")
                        },
                        new
                        {
                            Id = new Guid("e55a2495-3a0d-462f-a4fd-521ea0d33cd7"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("5991cc39-91c9-43a4-8fab-e70557796bf4"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc")
                        },
                        new
                        {
                            Id = new Guid("55a770c1-ffbd-49be-abe2-036f89685c6f"),
                            FieldId = new Guid("a63cf466-751d-4da5-bd07-e953996b6ce3"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("71b9f20d-eccc-4944-bc52-b22e7c5961e3"),
                            FieldId = new Guid("97adae5c-dff2-43b7-8ec5-b91fb33e2e82"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("5dbad1b8-0e89-4987-9680-c60db1e08f59"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("bdd6da5a-b061-4e3e-9456-e9bcf148f27c"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("3448642b-93b4-4925-bff3-927ccec9508f")
                        },
                        new
                        {
                            Id = new Guid("e691de53-2d1b-4397-b4b4-9b73b9a05806"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82")
                        },
                        new
                        {
                            Id = new Guid("bd189f97-b73e-444a-8587-a715bdc15f00"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d")
                        },
                        new
                        {
                            Id = new Guid("ea2e3730-6b28-4c17-9630-0a10c0f15565"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("a003da79-fe55-417a-9225-658dbe25b9f7"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9bdd2cd-0ff7-4b01-b095-e5b405f96d6b"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("583822d3-4a09-4f64-8601-1b6f67a35773"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("55cbefe1-dc80-4860-af74-8a9048e7135f"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("35705dc7-cb36-4a8e-9d44-ebccd8bc7b8d"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("93adc53b-979f-45c0-bd00-539787bf3f24"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("690509e0-a77c-4c54-a7f5-16782c06623e"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("18a81a99-7af4-4aa0-b826-538d84345d24"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("c25f5aa9-21a8-49cd-966a-d98165c732ef"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f19f9973-189e-4d22-aba8-d37afd86f58f"),
                            EditBlockId = new Guid("31169eaa-7cde-4f69-9de7-9d34fa854605"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5609f554-a020-47af-8d31-538bdf931432"),
                            EditBlockId = new Guid("31169eaa-7cde-4f69-9de7-9d34fa854605"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("cbd6bbe5-1408-4a60-b65b-362fc9a38b9e"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("170884c4-b6ef-430e-8abf-7647295dfcd9"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5704b5a8-c77d-41a3-bf9f-de4509cf4843"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ec20dcca-cd30-4025-9975-9075ad7dc69b"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("51c81764-8043-4471-8720-ac28f0123f82"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("178b1558-72dd-46bd-a6d1-3d224d3374ba"),
                            EditBlockId = new Guid("c6859102-0639-43df-ae20-df18d690245f"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("3a05bb8e-ef11-4372-9cff-f449058e3f1e"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("f3a864cd-4912-47c1-8f11-d836924ac1fc"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("3448642b-93b4-4925-bff3-927ccec9508f"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("b45f7783-db8c-4474-8eeb-6d786c98ec82"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("c5a43f11-dfcc-4eb0-af99-bce732ef9f8d"),
                            EditBlockId = new Guid("513ccb1c-1875-480d-8f9f-ec880ec95e72"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b908de0e-a6e1-4699-bfc4-54853f552739"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7e8aeabf-ba29-49f4-b097-0c93db346ea5"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("233c9bd6-ed40-4ae0-93dc-03ed5cb27aa3"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("fe11f5ea-1d27-4b78-8deb-59014c32d267"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
