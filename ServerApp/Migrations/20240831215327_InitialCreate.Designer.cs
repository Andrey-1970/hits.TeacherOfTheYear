// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240831215327_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("20697110-73bc-40a8-8768-642e8f7f288d"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            EditBlocksId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            EditBlocksId = new Guid("20697110-73bc-40a8-8768-642e8f7f288d"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("67bfb3ad-93e5-4d77-8d76-0d56707318bb"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("3e1d4387-d577-466c-b649-1218f4d59896"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("e08ba74a-6d71-498f-b65d-a2eaba26c3c5"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("e6c1cfc1-72b3-4ccf-a47d-078aaa472586"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("b7d851ab-e515-4437-bb64-fbeb7eb832f1"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("344de230-10b3-4f42-bc34-13616247ffdd"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("3e707679-f8a5-4583-b21e-7d27c5e3f52b"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("b5f6df84-5105-4d7e-a382-ebd610d4c6cf"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("f5a3768f-805b-4135-927e-af8f6e84e96f"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("512d7df1-7328-4df3-8c2a-5313a29cad7b"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("3d6eafa6-2198-4114-aabb-2631078cb92f"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("31ed5a3d-7357-4df5-8d66-327e4315a2fb"),
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e")
                        },
                        new
                        {
                            FieldsId = new Guid("cf16529d-b5c7-41db-b4b1-8373f88772ed"),
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e")
                        },
                        new
                        {
                            FieldsId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("822364f8-ec98-4397-9978-b9d31edac8ec"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("cc29a10f-0493-450e-b6f3-d9b15e600b46"),
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb")
                        },
                        new
                        {
                            FieldsId = new Guid("0930879f-c6a4-4d8f-9a8e-6d1f5c5aa585"),
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b")
                        },
                        new
                        {
                            FieldsId = new Guid("71232eb2-01ed-4567-8eef-ecb3d7b145e2"),
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b")
                        },
                        new
                        {
                            FieldsId = new Guid("d9a1bfd6-7fef-4be4-870c-ba9a023aad7a"),
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b")
                        },
                        new
                        {
                            FieldsId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a")
                        },
                        new
                        {
                            FieldsId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8")
                        },
                        new
                        {
                            FieldsId = new Guid("7be357ec-5f72-45d0-bc3c-a645047dbbda"),
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8")
                        },
                        new
                        {
                            FieldsId = new Guid("80ae696a-c065-476a-85d1-6c4fb2abd0dc"),
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            TablesId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            TablesId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            TablesId = new Guid("09e62d13-5869-410d-8053-df430ef151b4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            TablesId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            TablesId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            TablesId = new Guid("031ae2d7-3ff8-4705-8a2f-772a70130942")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            TablesId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            TablesId = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            TablesId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            TablesId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            TablesId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            TablesId = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            TablesId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            TablesId = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e"),
                            TracksId = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e"),
                            TracksId = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("cb5d1fe8-2b39-4dea-8d24-c8edae1ba250")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("b247d9d6-6c22-426c-83c2-d55ee7396f9c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("2c39b7a9-adcd-4671-844c-a085f5971448")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("7da8168c-608a-46f3-a0c9-dc81e437af42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("462c5b50-0d6a-4a0c-9039-7b622537cdcc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("4ed5d451-893f-4336-be86-364933a52059")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            MarksId = new Guid("9f9a3735-e000-4299-9d96-0fa7ff973da8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            MarksId = new Guid("e3a70a76-747f-41af-b5ea-086b3c007305")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            MarksId = new Guid("f1c7e45e-17b5-415b-8b52-039f62e13850")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            MarksId = new Guid("b32feaa2-402f-4ba1-a562-e69d68db8e7d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            MarksId = new Guid("9b0a2a7e-9ac1-4d91-afa8-bc3f0afef999")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            MarksId = new Guid("e3c05874-2632-4e65-a8c0-bcff096663f7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            MarksId = new Guid("17f4733d-7424-4768-b4a3-2f5dd5bde6d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            MarksId = new Guid("5a8d8dd8-6701-4def-8154-ea6a7d7e6758")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            MarksId = new Guid("1c23c127-f898-4831-a126-e7fed9b8ac20")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("17f4733d-7424-4768-b4a3-2f5dd5bde6d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("5a8d8dd8-6701-4def-8154-ea6a7d7e6758")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("12162f13-260e-4006-b157-56f9353e962c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("962e9e56-d536-421d-baa3-93b7d99735a3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("06aede52-9ad4-4f38-958a-2d6e254a848e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("9441dfbe-7aa5-49d0-9d17-df3bc3cd4e24")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            MarksId = new Guid("f55775dd-fb88-4c51-9423-c96f0d986762")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            MarksId = new Guid("1c23c127-f898-4831-a126-e7fed9b8ac20")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            MarksId = new Guid("f23871ef-7548-427b-9216-bc2f559449ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            MarksId = new Guid("a957355d-a915-4846-a8c6-b2804b1d83f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e"),
                            MarksId = new Guid("833c371a-5a42-4d51-8cb4-4c95256182e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e"),
                            MarksId = new Guid("48b20d66-e694-4665-a82e-87fcaa6a4ed3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d99bd0bc-e5c1-4b52-bd74-33e5a80fe12b"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("b10d1289-07bd-44c0-944e-ac79bdb72d27"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("992245af-d8bc-40a0-99a0-b29644173822"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("3f8974e9-e23a-4722-9d04-73eb03e858e9"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("162b07df-4fad-4e03-9821-d49c1077754a"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("0d66b948-da4d-48c3-86a8-173e3f79f0d5"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d168936-4f47-464d-980c-dbaed18235c9"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("728a098d-5795-41da-908f-0166b33f6e42"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69aae9c9-a692-41c7-89d4-c1a2c1a5a480"),
                            ColumnId = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f44bba94-5fe1-4424-9fae-35689813a047"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("dbb38aca-9fc4-4cb2-badd-7c934ae621d5"),
                            ColumnId = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f44bba94-5fe1-4424-9fae-35689813a047")
                        },
                        new
                        {
                            Id = new Guid("9a88b016-14db-4799-9219-20efe078d438"),
                            ColumnId = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4dcc7326-4043-42ab-8346-2cd563a3aeba"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("73838233-3c04-43f4-beca-19cbd835f7b4"),
                            ColumnId = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4dcc7326-4043-42ab-8346-2cd563a3aeba")
                        },
                        new
                        {
                            Id = new Guid("b07ece37-aa77-4fd7-8a30-e0f2b6c2256f"),
                            ColumnId = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3a7eb3e6-ee36-4de5-9a07-dea8870b2335"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("56906bef-6534-46c3-aabc-22f64d701d3c"),
                            ColumnId = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3a7eb3e6-ee36-4de5-9a07-dea8870b2335")
                        },
                        new
                        {
                            Id = new Guid("b8f103d4-017a-4258-9e97-5e3d909dd02d"),
                            ColumnId = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("22c88ef3-347b-4a71-83f6-64ffc6498647"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("d0657eea-930d-43fe-9fad-19797fb6ed94"),
                            ColumnId = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("22c88ef3-347b-4a71-83f6-64ffc6498647")
                        },
                        new
                        {
                            Id = new Guid("e4feaa26-4ce9-46b2-bb0a-2ff9d5fdc02a"),
                            ColumnId = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("aaf6af61-4dd4-478d-a8c7-960f17926713"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("235b3e6b-f99e-46fe-a1b5-9b9f682d5ce4"),
                            ColumnId = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("aaf6af61-4dd4-478d-a8c7-960f17926713")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b153dc5-e601-4348-883f-49ed80012cde"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("7e85f3b1-785b-49d1-a66f-a0d564db00a5"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("50c66689-3a2e-429c-bc5f-b599f6cf5033"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("91cba198-e3c8-43c3-ac83-34d24002c85e"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("078dd60d-b50e-402d-a54e-09b109449b6b"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("5df6e5c7-e5de-4427-b167-2ceedcf8f4c3"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("8cced159-2a5d-470f-9574-348f49116a71"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("aa2de89c-3f8f-472d-bce2-861f8cc4b4e2"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("eb13dce8-ccdf-424a-a11d-a64809605f0c"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("3f5593b0-39d0-4631-a8f0-9dfd59799637"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("23eff023-4e19-4dfc-ac4a-e1d6f143bff6"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("a23c2d3a-144c-449b-9677-625fb5a52dd9"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("c9c9bef2-e62e-4095-938c-50582fb3d0bf"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("5e45de4f-856d-4485-8410-94d76c11471e"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("1b68afb5-4f6a-4bdd-8871-7a8cc1329569"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("568736c3-76ee-447c-9a4d-d78abab843a7"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("726dfe8b-4a6b-4545-9a89-4c2ac069051c"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("d6495849-c324-4d35-b816-eae2ef497338"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("09e62d13-5869-410d-8053-df430ef151b4"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("82ad74c5-cd0c-4a96-b68a-57cc7f580e32"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("09e62d13-5869-410d-8053-df430ef151b4"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("0a070659-69ba-4673-9f78-bde39510f99b"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("09e62d13-5869-410d-8053-df430ef151b4"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("857710fa-1661-401f-90a1-235fd8878bad"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("09e62d13-5869-410d-8053-df430ef151b4"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("bd123b1b-6637-4003-b2b4-75058aeff3bc"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("abc711fc-18f5-454d-917e-f177a558eaa1"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("dcf73805-38e1-4898-a02b-6e22f04dcea2"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("2ef15d31-411f-4a0d-a69e-58c03a565302"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("73ebb769-6127-47c4-ac55-7aecbbdd20f1"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("39dce0e4-9558-4de6-b661-e0cc65ab8d1e")
                        },
                        new
                        {
                            Id = new Guid("5a3c4726-df8c-41ca-900e-dc14406f6292"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("2461b946-2e5d-4d7c-b9e6-fccd5d434cf3"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("94137b82-875f-4c45-95fc-f389be83a01b"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("60141197-1d62-41af-b844-931298e624e0"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("031ae2d7-3ff8-4705-8a2f-772a70130942"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("8558addf-02f4-4715-bc5e-e79c60047df6"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("031ae2d7-3ff8-4705-8a2f-772a70130942"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("6b6891cb-35b3-47a8-8476-efcfb941f8fd"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("c88059b0-02d7-4576-a156-ec43debc6c67"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("eff043b2-73ea-4e74-a9b8-f4ce25a3c1e8"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("f008ee14-ce77-44e1-9ca1-57783302a056"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("93fe25d3-685b-433f-9319-dc757496e547"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("44670ea6-ae3e-4de0-9e11-f997cfadab02"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("c3b2bcdd-243a-4ba0-a6d7-c7c9f2caf714"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("1f14cde6-5b7a-4341-af60-f0b65e580924"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("97374b5a-6719-405f-84f3-3a6eaaea3e8c"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("7f5decf0-c5a8-4143-a3df-45b1006c4148"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("a6d0ab6f-686d-4784-a436-ee0867bf8ce8"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("42e481bc-c357-4c22-a034-d523726a41f6"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("94d02a0f-6649-43dd-87f6-74796a751bdb"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("b8ae2184-3762-49b7-93ff-87085a5aa0b0"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("d382d829-7582-4182-95ff-4f58dab4d5b1"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("3b89eb54-981f-4eda-9e8d-ea2568fb5dfa"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("6ba6c3a0-583a-4984-93a3-1a68eff7a8d4"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("94d802ee-6c90-427d-9e0c-7d6c668061ea"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("8951ff3a-0af8-4e67-a141-83d71727c12b"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("1f984af0-8221-4875-915f-a91a3018d0a2"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("4fcd2426-7570-44eb-ba59-cebae27830c9"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("30541e51-9438-48fb-8e60-101cd132a859"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b"),
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("20697110-73bc-40a8-8768-642e8f7f288d"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67bfb3ad-93e5-4d77-8d76-0d56707318bb"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("3e1d4387-d577-466c-b649-1218f4d59896"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("970c4e64-40a3-4eab-a28f-a41dd5fb3d26")
                        },
                        new
                        {
                            Id = new Guid("e08ba74a-6d71-498f-b65d-a2eaba26c3c5"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("e6c1cfc1-72b3-4ccf-a47d-078aaa472586"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("b7d851ab-e515-4437-bb64-fbeb7eb832f1"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("344de230-10b3-4f42-bc34-13616247ffdd"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("3e707679-f8a5-4583-b21e-7d27c5e3f52b"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("b5f6df84-5105-4d7e-a382-ebd610d4c6cf"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("f5a3768f-805b-4135-927e-af8f6e84e96f"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("512d7df1-7328-4df3-8c2a-5313a29cad7b"),
                            EditBlockId = new Guid("dde29e50-070f-4ae9-87cd-9d456004c3e3"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("3d6eafa6-2198-4114-aabb-2631078cb92f"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("31ed5a3d-7357-4df5-8d66-327e4315a2fb"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Название конкурсной работы",
                            Number = 12,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("cf16529d-b5c7-41db-b4b1-8373f88772ed"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Ссылка на конкурсную работу",
                            Number = 13,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("822364f8-ec98-4397-9978-b9d31edac8ec"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("cc29a10f-0493-450e-b6f3-d9b15e600b46"),
                            EditBlockId = new Guid("aaba6089-2ca0-4f7a-bb92-a178814c4184"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45")
                        },
                        new
                        {
                            Id = new Guid("0930879f-c6a4-4d8f-9a8e-6d1f5c5aa585"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("71232eb2-01ed-4567-8eef-ecb3d7b145e2"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("d9a1bfd6-7fef-4be4-870c-ba9a023aad7a"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("7be357ec-5f72-45d0-bc3c-a645047dbbda"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        },
                        new
                        {
                            Id = new Guid("80ae696a-c065-476a-85d1-6c4fb2abd0dc"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb5d1fe8-2b39-4dea-8d24-c8edae1ba250"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749")
                        },
                        new
                        {
                            Id = new Guid("b247d9d6-6c22-426c-83c2-d55ee7396f9c"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("f260b792-5580-49a5-8e72-cfec2d740749")
                        },
                        new
                        {
                            Id = new Guid("2c39b7a9-adcd-4671-844c-a085f5971448"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("d9a1bfd6-7fef-4be4-870c-ba9a023aad7a"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7da8168c-608a-46f3-a0c9-dc81e437af42"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("0930879f-c6a4-4d8f-9a8e-6d1f5c5aa585"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("462c5b50-0d6a-4a0c-9039-7b622537cdcc"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("71232eb2-01ed-4567-8eef-ecb3d7b145e2"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4ed5d451-893f-4336-be86-364933a52059"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("bd988279-dcd5-47de-b823-eaf97201f365")
                        },
                        new
                        {
                            Id = new Guid("9f9a3735-e000-4299-9d96-0fa7ff973da8"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c")
                        },
                        new
                        {
                            Id = new Guid("e3a70a76-747f-41af-b5ea-086b3c007305"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270")
                        },
                        new
                        {
                            Id = new Guid("f1c7e45e-17b5-415b-8b52-039f62e13850"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270")
                        },
                        new
                        {
                            Id = new Guid("b32feaa2-402f-4ba1-a562-e69d68db8e7d"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270")
                        },
                        new
                        {
                            Id = new Guid("9b0a2a7e-9ac1-4d91-afa8-bc3f0afef999"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270")
                        },
                        new
                        {
                            Id = new Guid("e3c05874-2632-4e65-a8c0-bcff096663f7"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("031ae2d7-3ff8-4705-8a2f-772a70130942")
                        },
                        new
                        {
                            Id = new Guid("17f4733d-7424-4768-b4a3-2f5dd5bde6d4"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("5a8d8dd8-6701-4def-8154-ea6a7d7e6758"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8")
                        },
                        new
                        {
                            Id = new Guid("1c23c127-f898-4831-a126-e7fed9b8ac20"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350")
                        },
                        new
                        {
                            Id = new Guid("12162f13-260e-4006-b157-56f9353e962c"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae")
                        },
                        new
                        {
                            Id = new Guid("962e9e56-d536-421d-baa3-93b7d99735a3"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("7be357ec-5f72-45d0-bc3c-a645047dbbda"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("06aede52-9ad4-4f38-958a-2d6e254a848e"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("80ae696a-c065-476a-85d1-6c4fb2abd0dc"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("9441dfbe-7aa5-49d0-9d17-df3bc3cd4e24"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36")
                        },
                        new
                        {
                            Id = new Guid("f55775dd-fb88-4c51-9423-c96f0d986762"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36")
                        },
                        new
                        {
                            Id = new Guid("f23871ef-7548-427b-9216-bc2f559449ae"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879")
                        },
                        new
                        {
                            Id = new Guid("a957355d-a915-4846-a8c6-b2804b1d83f6"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b")
                        },
                        new
                        {
                            Id = new Guid("833c371a-5a42-4d51-8cb4-4c95256182e4"),
                            FieldId = new Guid("cf16529d-b5c7-41db-b4b1-8373f88772ed"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("48b20d66-e694-4665-a82e-87fcaa6a4ed3"),
                            FieldId = new Guid("cf16529d-b5c7-41db-b4b1-8373f88772ed"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c486fecb-b1f9-42eb-b58f-baa5d39254cb"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("085f6d30-1fdc-4eed-8457-bc1324b4ce9b"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("ce2388b3-90f3-4eb6-99f0-99b7f5c48718"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2f434a82-59ae-46f0-98b1-23dcb468927a"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("267e7677-ab52-47ad-87f2-22d85f2ccaa8"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("3ba3aa02-e931-4e9e-a4f6-17d924dae332"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("987d59a6-22a0-48fa-b5b4-702c6f98831e"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f44bba94-5fe1-4424-9fae-35689813a047"),
                            IsPrefilled = true,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a")
                        },
                        new
                        {
                            Id = new Guid("4dcc7326-4043-42ab-8346-2cd563a3aeba"),
                            IsPrefilled = true,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a")
                        },
                        new
                        {
                            Id = new Guid("3a7eb3e6-ee36-4de5-9a07-dea8870b2335"),
                            IsPrefilled = true,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a")
                        },
                        new
                        {
                            Id = new Guid("22c88ef3-347b-4a71-83f6-64ffc6498647"),
                            IsPrefilled = true,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a")
                        },
                        new
                        {
                            Id = new Guid("aaf6af61-4dd4-478d-a8c7-960f17926713"),
                            IsPrefilled = true,
                            TableId = new Guid("13c37ffc-107b-4163-b870-2de246d2008a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e947298-19cb-40c9-8ed6-b4a3c95e93cb"),
                            FieldId = new Guid("3d6eafa6-2198-4114-aabb-2631078cb92f"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("2f209209-be5a-49ea-be8d-619459f451ff"),
                            FieldId = new Guid("3d6eafa6-2198-4114-aabb-2631078cb92f"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("5dfd95f5-e0fb-43d3-a160-59d2400a3932"),
                            FieldId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("322489ef-ebea-4767-8d0c-14d85c5e1454"),
                            FieldId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("aabe9056-7958-4047-9cc6-71cbffc185df"),
                            FieldId = new Guid("053ddb4f-69c7-4e6b-a65f-f1f78bcb84d1"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("efa2a4e6-0dd6-411e-bac9-93f4e719ecd4"),
                            ColumnId = new Guid("50c66689-3a2e-429c-bc5f-b599f6cf5033"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("63944467-68f9-430c-a25b-b1ab6a97c6e9"),
                            ColumnId = new Guid("50c66689-3a2e-429c-bc5f-b599f6cf5033"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("64fccd35-f614-4471-b219-acc5331371fa"),
                            ColumnId = new Guid("50c66689-3a2e-429c-bc5f-b599f6cf5033"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("75839b1e-d91a-41cc-9004-eaf55f9b9bb8"),
                            ColumnId = new Guid("bd123b1b-6637-4003-b2b4-75058aeff3bc"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("6a52362f-50fb-42e6-a418-adf55a5c8acc"),
                            ColumnId = new Guid("bd123b1b-6637-4003-b2b4-75058aeff3bc"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("f8e505a6-320b-40e7-91a9-236e79f3f87c"),
                            ColumnId = new Guid("bd123b1b-6637-4003-b2b4-75058aeff3bc"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("35198a69-2767-4ca0-9fd2-535159621d33"),
                            ColumnId = new Guid("8558addf-02f4-4715-bc5e-e79c60047df6"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("9e3e7a18-5ede-47a5-bc25-da5a73e3d775"),
                            ColumnId = new Guid("8558addf-02f4-4715-bc5e-e79c60047df6"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("dbd738dc-0df5-4e2c-9ca7-c0fa85d36d04"),
                            ColumnId = new Guid("b8ae2184-3762-49b7-93ff-87085a5aa0b0"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("2953ab88-0e26-4a89-b63b-7b40464c8d5a"),
                            ColumnId = new Guid("b8ae2184-3762-49b7-93ff-87085a5aa0b0"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("831c1b74-4555-406a-941e-4f96ba46f9c2"),
                            ColumnId = new Guid("3b89eb54-981f-4eda-9e8d-ea2568fb5dfa"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("21d62862-5d3a-4a05-8939-ec8a11b79b64"),
                            ColumnId = new Guid("3b89eb54-981f-4eda-9e8d-ea2568fb5dfa"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("e89f60d8-7987-4fef-ab16-f2811ea58c15"),
                            ColumnId = new Guid("3b89eb54-981f-4eda-9e8d-ea2568fb5dfa"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("4a12a7c5-f903-46b0-9900-88231ccd2103"),
                            ColumnId = new Guid("1f984af0-8221-4875-915f-a91a3018d0a2"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("04820df9-a9d1-4d71-9474-d8003f9aab31"),
                            ColumnId = new Guid("1f984af0-8221-4875-915f-a91a3018d0a2"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("26702748-307e-4858-b3b9-4638dd41af79"),
                            ColumnId = new Guid("1f984af0-8221-4875-915f-a91a3018d0a2"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("0b886e8c-743d-4427-b3ca-e9943263c936"),
                            ColumnId = new Guid("dcf73805-38e1-4898-a02b-6e22f04dcea2"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("3949b9a6-ceec-49bd-b240-765fd5dd4f61"),
                            ColumnId = new Guid("dcf73805-38e1-4898-a02b-6e22f04dcea2"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ffe3c3bb-1182-4204-ac76-f27eb9678b20"),
                            ColumnId = new Guid("2461b946-2e5d-4d7c-b9e6-fccd5d434cf3"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("354030ce-4dbf-46ff-89b2-40851e4fd5d8"),
                            ColumnId = new Guid("2461b946-2e5d-4d7c-b9e6-fccd5d434cf3"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c9fce72-3d6e-4899-9898-f707515d3ca8"),
                            EditBlockId = new Guid("20697110-73bc-40a8-8768-642e8f7f288d"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3adfd1fd-a110-4ed8-b858-9dc347d8e350"),
                            EditBlockId = new Guid("20697110-73bc-40a8-8768-642e8f7f288d"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("f260b792-5580-49a5-8e72-cfec2d740749"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("bd988279-dcd5-47de-b823-eaf97201f365"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("09e62d13-5869-410d-8053-df430ef151b4"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("7a61b130-805a-4e6c-848e-407f31ccb270"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("031ae2d7-3ff8-4705-8a2f-772a70130942"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("6e40fa53-6109-4152-b2af-57b2229dfe5c"),
                            EditBlockId = new Guid("6f47a218-90ac-4b2a-a631-0525c6aa8faf"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("31533b88-e48f-48d7-ba6c-cae9a2ffd5ae"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("13c37ffc-107b-4163-b870-2de246d2008a"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("319038d8-3e2b-4e01-8c53-3690d49f6b36"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("5d55396a-b3ac-4d6d-8805-ae627ab81879"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("b10d06fa-ca95-47c6-96c1-19714fa22a2b"),
                            EditBlockId = new Guid("5f6ab265-54f5-4997-895c-df43c221ad30"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("696ca9a4-2800-49cc-8e49-a422670666cb"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("883ea679-d41c-484a-ae74-d40d4aadb936"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0184e7fc-9688-4f1f-9013-debe79f1b6db"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("706d3b18-bb99-45ca-aac8-0cdf232f18ae"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64591d85-9a25-4651-8044-3a4fcd7bffd8"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("1342696c-f7ce-4be9-a3d3-2cad14e1fd45"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("39dce0e4-9558-4de6-b661-e0cc65ab8d1e"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("970c4e64-40a3-4eab-a28f-a41dd5fb3d26"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
