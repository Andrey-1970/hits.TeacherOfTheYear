// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240812161914_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            EditBlocksId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            EditBlocksId = new Guid("34477e0b-6dd3-495b-a1ba-b7e34cfe87de"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            EditBlocksId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            EditBlocksId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("34477e0b-6dd3-495b-a1ba-b7e34cfe87de"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("f98e1731-97c7-4654-9374-84bf22a85775"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("a6593314-2484-4bc3-91ec-f35e48b8c053"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("cfec285a-b0da-4193-9ba9-80b8994bab5e"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("d3877fb5-3a66-449d-8cf4-9c112a5bc441"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("c1edc6c1-6e81-4cd6-8e11-b1ab1456038b"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("a1475b85-bce2-4d4e-bf6e-a55d73142af3"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("72cc4aa7-9ba7-4514-b2e9-1e6164e00fff"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("c13b4ee9-a5e8-49ca-850a-7d4c96531f13"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("7d7f1df9-2b61-40bb-9462-05d85fc2b723"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("e12bb6e2-2780-4658-965e-2a014516fcff"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("5f7c37d8-1bc8-4d0d-bf60-9b2175695ace"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("80574462-e904-41b1-af58-3e8a02cba2d4"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("e8469c5c-8eae-4a60-8f09-0a89ead12a91"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("d04d5fda-2526-4d63-b07f-c767f6b51e49"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("23348e04-0687-45b5-8f18-0a89fa519e48"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("90e53935-15ca-4433-a770-87622da25149"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("980d7a62-fb79-4a46-af71-263f219d8b04"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("81c29122-9272-4718-b454-a6a589c2a2ba"),
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73")
                        },
                        new
                        {
                            FieldsId = new Guid("aa3fabf0-f20d-482d-bfea-212f91ff8a07"),
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81")
                        },
                        new
                        {
                            FieldsId = new Guid("83441c44-796e-4dbb-aead-056159c2dce1"),
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81")
                        },
                        new
                        {
                            FieldsId = new Guid("93677443-a142-4d85-83a5-49a3f079a469"),
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81")
                        },
                        new
                        {
                            FieldsId = new Guid("42b1767d-3925-448d-b380-6c5efc5c7583"),
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81")
                        },
                        new
                        {
                            FieldsId = new Guid("eb800ad6-bb42-4678-a248-b851b0f8c5be"),
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81")
                        },
                        new
                        {
                            FieldsId = new Guid("90e53935-15ca-4433-a770-87622da25149"),
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78")
                        },
                        new
                        {
                            FieldsId = new Guid("90e53935-15ca-4433-a770-87622da25149"),
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f")
                        },
                        new
                        {
                            FieldsId = new Guid("d103df4a-f97d-4598-a531-3b23514bb98b"),
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f")
                        },
                        new
                        {
                            FieldsId = new Guid("822ba81c-22c6-49f0-9899-7db98eb77a5a"),
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            TablesId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            TablesId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            TablesId = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            TablesId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            TablesId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            TablesId = new Guid("f631c791-de01-4ca4-888a-e3f4d1f9f78f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            TablesId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            TablesId = new Guid("f9784464-9672-447a-9b2c-799f2ed87539")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            TablesId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            TablesId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            TablesId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            TablesId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            TablesId = new Guid("f9784464-9672-447a-9b2c-799f2ed87539")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            TablesId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            TablesId = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("47d8b318-512b-41e6-901e-8501f69c3192"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("18f9a4e2-9b21-4038-ad2b-db1622c16a68"),
                            TracksId = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("47d8b318-512b-41e6-901e-8501f69c3192"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("18f9a4e2-9b21-4038-ad2b-db1622c16a68"),
                            TracksId = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("7c1fcde7-2097-4ec0-bdcf-8f99ec2a34b6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("ccd04047-9098-4307-8552-bfbaa59b8d4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("7e5dc082-5465-4abd-8a34-0a795fe0df92")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("68f7eddd-3eb4-42df-a145-edbfdef698db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("381e8a50-58df-45db-afa5-774779a651eb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("4d7184a8-e42c-4bcd-a684-005def2257c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            MarksId = new Guid("e408f3aa-e319-4db4-9055-b001f5b14124")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            MarksId = new Guid("9f71b183-bb78-4463-a407-32d33c4b4a62")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            MarksId = new Guid("11e75a53-35a9-4621-8340-89ffe110842a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            MarksId = new Guid("b47fcc53-d007-438f-938b-4e7b26d816ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            MarksId = new Guid("4040e7c8-e77d-4de9-baa0-152971cc0e12")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            MarksId = new Guid("43b81216-0a90-4a1e-a086-99a40554f861")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            MarksId = new Guid("038ad527-92ae-4093-ba74-82f1f831f1de")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            MarksId = new Guid("6fd814f2-f710-4060-b362-6a9c042eeb57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            MarksId = new Guid("c0b9b880-2818-4fa7-beb7-8cc5aa21bf25")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("038ad527-92ae-4093-ba74-82f1f831f1de")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("6fd814f2-f710-4060-b362-6a9c042eeb57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("578f49ae-4253-4dc5-ba03-2d0b41c2bacc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("1d8767a7-fa10-42f5-9e3c-63168f2229e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("905ec597-0cda-40ef-99c1-5da6f98db254")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("f1e76658-8db1-4a46-bf3f-124e3b323262")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("deb8665f-09dc-4629-9f3e-33e416f21fde")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("31e67ac8-504a-4421-bd53-adbeb1e76c85")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            MarksId = new Guid("d95cc0e6-1d4a-4e75-94e5-025484f4afef")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            MarksId = new Guid("c0b9b880-2818-4fa7-beb7-8cc5aa21bf25")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            MarksId = new Guid("da4716fb-5100-4754-98ea-3d15d8ac9fe9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            MarksId = new Guid("ed31daa8-dd1c-46c5-b51b-032f5db80abc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            MarksId = new Guid("69749738-0dc1-47c3-be26-5801ac555546")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            MarksId = new Guid("7d154ba3-fd84-4ef8-8322-06cdbed67f99")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6912d81f-5e4c-41b4-9011-d8d324e8c7ac"),
                            Name = "Год",
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("266ea8bf-ab71-40a8-b867-7c8e416af7b2"),
                            Name = "Название конкурса",
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("98091ea9-afc5-4764-bc4d-35ca257234d2"),
                            Name = "Статус конкурса",
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("3a692d43-f99f-4a73-9eff-d05f97817edf"),
                            Name = "Награда",
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("3e1652ec-1f28-4b9a-a9c4-9cf4baa15e97"),
                            Name = "Ссылка",
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("41b31f74-1d36-432c-8196-3743d1e34d8c"),
                            Name = "Название документа, реквизиты",
                            TableId = new Guid("f9784464-9672-447a-9b2c-799f2ed87539")
                        },
                        new
                        {
                            Id = new Guid("041748cd-c484-4152-b278-a4a2d8fad644"),
                            Name = "Год получения документа",
                            TableId = new Guid("f9784464-9672-447a-9b2c-799f2ed87539")
                        },
                        new
                        {
                            Id = new Guid("e057e647-f324-4748-8a5b-8a7adebc04f6"),
                            Name = "Наименование курса",
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("94ed90d2-5167-4f1a-9720-4c1d7b0cae41"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("530881fc-be01-410f-b350-e9585f945ff1"),
                            Name = "Лекции (час.)",
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("666d586b-d749-4043-a93c-479696dc0eeb"),
                            Name = "Практические занятия (час.)",
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("bead8b0c-c03f-4da4-86ef-9eb254d4610f"),
                            Name = "Итого (час.)",
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("2e777e4f-bcfe-4cb3-a9cf-8c63f021cfec"),
                            Name = "ФИО",
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("7e41c8ac-28d4-47d7-9439-ac0562c076e6"),
                            Name = "Название конкурса/премии",
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("38fe442e-5399-4acd-9444-3c81c7521f4f"),
                            Name = "Год",
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("7e4410ed-042c-47fb-826a-6410db010244"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("e805cc60-4ec6-47f9-9c1b-5734b93c74f8"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("be010434-8e3a-4444-bdcf-9b41eac3a772"),
                            Name = "Название организации/должность/ставка",
                            TableId = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3")
                        },
                        new
                        {
                            Id = new Guid("47164431-34ba-40d1-a5a7-1fd0c826f9eb"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            TableId = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3")
                        },
                        new
                        {
                            Id = new Guid("9f33c074-b208-4cdc-bfef-21f50ed32c43"),
                            Name = "Вид деятельности (преподавательская)",
                            TableId = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3")
                        },
                        new
                        {
                            Id = new Guid("799edb64-c533-4f6f-98fd-fe93d9baecc2"),
                            Name = "Количество часов",
                            TableId = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3")
                        },
                        new
                        {
                            Id = new Guid("899baa66-c4df-44bd-a025-de7fc125858b"),
                            Name = "Вид публикации",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("546be5e5-89d8-482a-a037-4d3b1338d11e"),
                            Name = "Название",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("81aeb59e-9a9a-44e9-beea-c8752f455745"),
                            Name = "Соавторы",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("4ffca42f-f66e-49a7-8064-645f82581f81"),
                            Name = "Количество печатных листов",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("7c956812-22ed-43da-8b3c-3cb5190f2049"),
                            Name = "Наличие грифа",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("aee91b9a-add7-4a3f-b063-f8ea4c621b9a"),
                            Name = "Издательство, год",
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("e09f8c18-73f2-4ea3-a4fc-e5f096e1daeb"),
                            Name = "Название дисциплины",
                            TableId = new Guid("f631c791-de01-4ca4-888a-e3f4d1f9f78f")
                        },
                        new
                        {
                            Id = new Guid("ddb08533-f990-4039-a075-488669ba20d6"),
                            Name = "Вид (лекции, лабораторные)",
                            TableId = new Guid("f631c791-de01-4ca4-888a-e3f4d1f9f78f")
                        },
                        new
                        {
                            Id = new Guid("361833ca-bf89-4abe-9307-9325952073e7"),
                            Name = "Название курса",
                            TableId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            Id = new Guid("b2ddfa8a-cbdd-41fc-898b-78272f208e6a"),
                            Name = "Соавторы",
                            TableId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            Id = new Guid("14ac116f-5777-4ef2-a47f-ef7ff0510137"),
                            Name = "Ссылка на платформу",
                            TableId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            Id = new Guid("025250e3-53f1-475b-af19-6264c1299dde"),
                            Name = "Год",
                            TableId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            Id = new Guid("4fdf1309-c8e8-4018-a48a-0716338dd7f1"),
                            Name = "Название статьи",
                            TableId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            Id = new Guid("e40ceb70-40a1-4ad3-a043-fe85af3d702e"),
                            Name = "Соавторы",
                            TableId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            Id = new Guid("2dd70cd4-d1bd-46eb-9727-dbb53753acdf"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            TableId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            Id = new Guid("72cefb68-9d1b-4ca2-9141-acbc4eca7f13"),
                            Name = "Издание, год",
                            TableId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            Id = new Guid("a682d6b2-6c8c-4442-a1ac-29b8654775d7"),
                            Name = "Тип идентификатора",
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("a5e6a85f-8793-4f5c-a871-4da9be3b7781"),
                            Name = "Идентификатор",
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("0e5d9f98-92b9-4bb6-ab73-7f582baf6f32"),
                            Name = "Количество публикаций в БАЗЕ",
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("0c62c792-f677-4d60-84d3-704a136ba4fc"),
                            Name = "Количество цитирований",
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("f4e487d1-0881-4667-8015-0bb2487dffaa"),
                            Name = "Индекс Хирша (за все время)",
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("b1161c6f-aa72-433b-8c58-9c41b59115a3"),
                            Name = "Название НИР/НИОКР",
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("6f9063b2-48d2-4595-9bfc-46bd0fe787c7"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("349628de-057d-41ff-a557-ee5ac02b86c6"),
                            Name = "Период выполнения",
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("aaac91cc-85cc-44cf-9b8d-54584daf8741"),
                            Name = "Статус (руководитель/исполнитель)",
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("723bac0e-c4f3-4768-aee8-f2b172eb7ba0"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("b9a377a9-f79e-4c61-9079-6281b069cd00"),
                            Name = "Вид",
                            TableId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            Id = new Guid("2d7034dd-9eea-457d-bbbb-9e541857f393"),
                            Name = "Название",
                            TableId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            Id = new Guid("5f586430-9289-4095-bfea-3c6f77c3d9b7"),
                            Name = "ФИО соавторов",
                            TableId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            Id = new Guid("b1c4799f-bf6f-4ace-94a8-30773383c7ed"),
                            Name = "Номер РИД",
                            TableId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            Id = new Guid("2c89b7db-319e-4eed-a618-ce0a8cecc2ee"),
                            Name = "Вид",
                            TableId = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233")
                        },
                        new
                        {
                            Id = new Guid("e306dedf-25f6-4f0d-afed-aa92c2ca81ed"),
                            Name = "Название разработки",
                            TableId = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233")
                        },
                        new
                        {
                            Id = new Guid("a588df04-d08c-46b2-93ab-a9871700b73a"),
                            Name = "Название организации в которую внедрена разработка",
                            TableId = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("Number", "Name")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("34477e0b-6dd3-495b-a1ba-b7e34cfe87de"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f98e1731-97c7-4654-9374-84bf22a85775"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Трек конкурса"
                        },
                        new
                        {
                            Id = new Guid("a6593314-2484-4bc3-91ec-f35e48b8c053"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "ФИО"
                        },
                        new
                        {
                            Id = new Guid("cfec285a-b0da-4193-9ba9-80b8994bab5e"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Дата рождения"
                        },
                        new
                        {
                            Id = new Guid("d3877fb5-3a66-449d-8cf4-9c112a5bc441"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Домашний адрес"
                        },
                        new
                        {
                            Id = new Guid("c1edc6c1-6e81-4cd6-8e11-b1ab1456038b"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Контактный телефон"
                        },
                        new
                        {
                            Id = new Guid("a1475b85-bce2-4d4e-bf6e-a55d73142af3"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Электронная почта"
                        },
                        new
                        {
                            Id = new Guid("72cc4aa7-9ba7-4514-b2e9-1e6164e00fff"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Место работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("c13b4ee9-a5e8-49ca-850a-7d4c96531f13"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Адрес работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("7d7f1df9-2b61-40bb-9462-05d85fc2b723"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Институт, факультет, кафедра, лаборатория"
                        },
                        new
                        {
                            Id = new Guid("e12bb6e2-2780-4658-965e-2a014516fcff"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Должность"
                        },
                        new
                        {
                            Id = new Guid("5f7c37d8-1bc8-4d0d-bf60-9b2175695ace"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке"
                        },
                        new
                        {
                            Id = new Guid("80574462-e904-41b1-af58-3e8a02cba2d4"),
                            EditBlockId = new Guid("71b54aa4-819a-4d62-b91a-19546a653b44"),
                            Name = "Дополнительная информация"
                        },
                        new
                        {
                            Id = new Guid("e8469c5c-8eae-4a60-8f09-0a89ead12a91"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Направление конкурса"
                        },
                        new
                        {
                            Id = new Guid("d04d5fda-2526-4d63-b07f-c767f6b51e49"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Категория участника конкурса"
                        },
                        new
                        {
                            Id = new Guid("23348e04-0687-45b5-8f18-0a89fa519e48"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Название конкрусной работы"
                        },
                        new
                        {
                            Id = new Guid("90e53935-15ca-4433-a770-87622da25149"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Ученое звание"
                        },
                        new
                        {
                            Id = new Guid("980d7a62-fb79-4a46-af71-263f219d8b04"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Ученая степень"
                        },
                        new
                        {
                            Id = new Guid("81c29122-9272-4718-b454-a6a589c2a2ba"),
                            EditBlockId = new Guid("afc7db01-42b0-4d9c-8e63-8de2b27fbcca"),
                            Name = "Научная специальность (по классификации ВАК)"
                        },
                        new
                        {
                            Id = new Guid("aa3fabf0-f20d-482d-bfea-212f91ff8a07"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Защитившиеся кадидаты наук"
                        },
                        new
                        {
                            Id = new Guid("83441c44-796e-4dbb-aead-056159c2dce1"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Защитившиеся доктора наук"
                        },
                        new
                        {
                            Id = new Guid("93677443-a142-4d85-83a5-49a3f079a469"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Защитившиеся бакалавры"
                        },
                        new
                        {
                            Id = new Guid("42b1767d-3925-448d-b380-6c5efc5c7583"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Защитившиеся специалисты"
                        },
                        new
                        {
                            Id = new Guid("eb800ad6-bb42-4678-a248-b851b0f8c5be"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Защитившиеся магистры"
                        },
                        new
                        {
                            Id = new Guid("d103df4a-f97d-4598-a531-3b23514bb98b"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Защитившиеся кандидаты наук"
                        },
                        new
                        {
                            Id = new Guid("822ba81c-22c6-49f0-9899-7db98eb77a5a"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Защитившиеся доктора наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c1fcde7-2097-4ec0-bdcf-8f99ec2a34b6"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("ccd04047-9098-4307-8552-bfbaa59b8d4b"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3")
                        },
                        new
                        {
                            Id = new Guid("7e5dc082-5465-4abd-8a34-0a795fe0df92"),
                            FieldId = new Guid("eb800ad6-bb42-4678-a248-b851b0f8c5be"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("68f7eddd-3eb4-42df-a145-edbfdef698db"),
                            FieldId = new Guid("aa3fabf0-f20d-482d-bfea-212f91ff8a07"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("381e8a50-58df-45db-afa5-774779a651eb"),
                            FieldId = new Guid("83441c44-796e-4dbb-aead-056159c2dce1"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4d7184a8-e42c-4bcd-a684-005def2257c9"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f")
                        },
                        new
                        {
                            Id = new Guid("e408f3aa-e319-4db4-9055-b001f5b14124"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd")
                        },
                        new
                        {
                            Id = new Guid("9f71b183-bb78-4463-a407-32d33c4b4a62"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("11e75a53-35a9-4621-8340-89ffe110842a"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("b47fcc53-d007-438f-938b-4e7b26d816ec"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("4040e7c8-e77d-4de9-baa0-152971cc0e12"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289")
                        },
                        new
                        {
                            Id = new Guid("43b81216-0a90-4a1e-a086-99a40554f861"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("f631c791-de01-4ca4-888a-e3f4d1f9f78f")
                        },
                        new
                        {
                            Id = new Guid("038ad527-92ae-4093-ba74-82f1f831f1de"),
                            FieldId = new Guid("90e53935-15ca-4433-a770-87622da25149"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("6fd814f2-f710-4060-b362-6a9c042eeb57"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a")
                        },
                        new
                        {
                            Id = new Guid("c0b9b880-2818-4fa7-beb7-8cc5aa21bf25"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("f9784464-9672-447a-9b2c-799f2ed87539")
                        },
                        new
                        {
                            Id = new Guid("578f49ae-4253-4dc5-ba03-2d0b41c2bacc"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d")
                        },
                        new
                        {
                            Id = new Guid("1d8767a7-fa10-42f5-9e3c-63168f2229e0"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("905ec597-0cda-40ef-99c1-5da6f98db254"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b")
                        },
                        new
                        {
                            Id = new Guid("f1e76658-8db1-4a46-bf3f-124e3b323262"),
                            FieldId = new Guid("d103df4a-f97d-4598-a531-3b23514bb98b"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("deb8665f-09dc-4629-9f3e-33e416f21fde"),
                            FieldId = new Guid("822ba81c-22c6-49f0-9899-7db98eb77a5a"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("31e67ac8-504a-4421-bd53-adbeb1e76c85"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("d95cc0e6-1d4a-4e75-94e5-025484f4afef"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02")
                        },
                        new
                        {
                            Id = new Guid("da4716fb-5100-4754-98ea-3d15d8ac9fe9"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3")
                        },
                        new
                        {
                            Id = new Guid("ed31daa8-dd1c-46c5-b51b-032f5db80abc"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233")
                        },
                        new
                        {
                            Id = new Guid("69749738-0dc1-47c3-be26-5801ac555546"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("7d154ba3-fd84-4ef8-8322-06cdbed67f99"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3dc9e61-25fa-475b-b3a2-217797552f73"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("e484505b-4f2c-499f-b393-8e6ca717fd81"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2d34e4df-d41d-4e12-80a4-0a5e98155535"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("995c21d6-b018-4ecf-bf78-a4dc2db42e78"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("985f0b55-0984-4873-bb8c-44f0dc83cc0f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f3857d25-df47-4b75-a417-45e14cafe467"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("47d8b318-512b-41e6-901e-8501f69c3192"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("18f9a4e2-9b21-4038-ad2b-db1622c16a68"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5ce75ca-f48a-43a1-aa5d-129e8be5fb1a"),
                            EditBlockId = new Guid("34477e0b-6dd3-495b-a1ba-b7e34cfe87de"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности"
                        },
                        new
                        {
                            Id = new Guid("f9784464-9672-447a-9b2c-799f2ed87539"),
                            EditBlockId = new Guid("34477e0b-6dd3-495b-a1ba-b7e34cfe87de"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)"
                        },
                        new
                        {
                            Id = new Guid("b13e73c1-96c9-491e-92c5-17c2dc6db1e3"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)"
                        },
                        new
                        {
                            Id = new Guid("8e9af628-f992-4203-b1f7-3dcdf5df703f"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание"
                        },
                        new
                        {
                            Id = new Guid("4e93d1bf-3903-4fc6-9a13-aaba9449dde3"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год"
                        },
                        new
                        {
                            Id = new Guid("8785c8fe-4be9-44b8-bc18-322ac329e289"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("f631c791-de01-4ca4-888a-e3f4d1f9f78f"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("585b3d0a-316e-4fbc-a431-b9d3716c5cbd"),
                            EditBlockId = new Guid("950d9b95-7924-45b8-ba68-bd8d8940a195"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("91bbc6cc-8408-48a3-895f-c67230aeb96d"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Список научных публикаций за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("0d478bd6-c5de-4bfa-86a6-0732027d785b"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Персональные идентификаторы и показатели"
                        },
                        new
                        {
                            Id = new Guid("c1dc8519-6ede-4a0f-91a8-83695a048a02"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("2b1500d6-07d4-413a-a77a-5a869e3f1bf3"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)"
                        },
                        new
                        {
                            Id = new Guid("f8877ea3-11d3-44de-a4fd-0fd53a340233"),
                            EditBlockId = new Guid("70f75df0-1218-4a64-b025-938d15c54dc1"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da0bc58d-4994-4cef-9c29-0b610d0f4496"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("46ffec34-bea9-4a4d-ab63-797dfa23fe28"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
