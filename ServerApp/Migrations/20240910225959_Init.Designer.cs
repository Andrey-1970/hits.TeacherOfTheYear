// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910225959_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d26e96a1-7240-4b9a-a3f7-ae41e46d4de4"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            EditBlocksId = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            EditBlocksId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d26e96a1-7240-4b9a-a3f7-ae41e46d4de4"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("3be36319-913a-4811-bbd1-a80cc827d8ff"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("406f1feb-3ee0-4faa-a9c5-2c27616fd3ab"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("815d7569-db76-459d-9ec6-f710394a9850"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("5550cbd5-8666-431a-ac64-9ad0d02637cf"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("9afb914a-bfe2-4949-a33c-b3b449e57063"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("0d16c3af-3d39-4359-8b6e-4921b19d583e"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("3d02a5ad-07b6-46cf-b255-a3eba36fac81"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("b1105017-6764-4c89-82ae-39e55721ed15"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("b0d1f39c-9621-4896-8495-d6c479697256"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("49f2b53f-a843-4f2b-8b08-9d92897c1a6d"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("57a1953c-aa17-4f07-9e60-4d671ca883fa"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("a78f1d7c-0658-4be6-9fe0-007f7cc5b735"),
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02")
                        },
                        new
                        {
                            FieldsId = new Guid("56b8b971-c96f-41f3-acbb-dd55a8d6747b"),
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5")
                        },
                        new
                        {
                            FieldsId = new Guid("2b96aa3d-d9f7-4d27-b6aa-6db2e7a7e694"),
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5")
                        },
                        new
                        {
                            FieldsId = new Guid("fa16d661-a3a6-49c2-8e7b-a064ad1bb8fd"),
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5")
                        },
                        new
                        {
                            FieldsId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889")
                        },
                        new
                        {
                            FieldsId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58")
                        },
                        new
                        {
                            FieldsId = new Guid("02c6bb6e-1c1f-4e33-a0db-2ca3af27343e"),
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58")
                        },
                        new
                        {
                            FieldsId = new Guid("73f6a5cf-a4f2-4559-b2d6-1a4689105f9b"),
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            TablesId = new Guid("a664c290-78bc-4a89-917f-4503f7523052")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            TablesId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            TablesId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            TablesId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            TablesId = new Guid("35a6b994-c057-4213-8f68-93edf54d786b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            TablesId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            TablesId = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            TablesId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            TablesId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            TablesId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02"),
                            TablesId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            TablesId = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            TablesId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            TablesId = new Guid("4bf9c880-345c-48b5-b431-9fc241126381")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            TablesId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            TracksId = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            TracksId = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("5cc2563b-277a-47cd-ba49-3e166a8d1b90")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("a1575a4d-7f4f-440c-9886-14325b8d2628")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("64d0122c-4248-435e-a876-9ae1ee1a662d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("7af78210-b52c-4f69-8f16-c0db4f137ff6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("a00c36c5-c429-444a-8ffa-2dbaf5d7a141")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("a9482233-c2d6-474f-85e2-3a0b8ad930d5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            MarksId = new Guid("4d5410fd-6b0e-4730-8ed8-88b77564cb4f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            MarksId = new Guid("f749dab0-3254-4537-809c-7b941736c080")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            MarksId = new Guid("4d6056eb-b30e-4f06-9536-36909f7d9900")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            MarksId = new Guid("2f8e8bad-02a4-407b-9cd4-fbc3d395fc17")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            MarksId = new Guid("6275471d-6f30-4abb-a1c4-14516ac1625e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            MarksId = new Guid("d7b9a373-e697-4c30-ace2-7a0b4b4afe18")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            MarksId = new Guid("9d24ede2-0dce-46f5-8696-c4b47ca6ee11")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            MarksId = new Guid("b33d1a5c-0281-4473-8561-1b10872f9b94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            MarksId = new Guid("0e31347b-02d1-4f68-97c4-6ecce5e6c2fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("9d24ede2-0dce-46f5-8696-c4b47ca6ee11")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("b33d1a5c-0281-4473-8561-1b10872f9b94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("7c3bdb72-3086-4d50-8589-a2c315cf8f41")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("b2b6ed9f-a23d-4792-b470-19d267cf7422")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("2a1fc3ec-11ef-4223-bc5d-3f68b9845139")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("76606667-6603-435d-b2c4-340d2c0e62c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            MarksId = new Guid("2f761cfc-3beb-4b14-97fe-b55bf77f4d65")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            MarksId = new Guid("0e31347b-02d1-4f68-97c4-6ecce5e6c2fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            MarksId = new Guid("dbc3898b-8013-472c-9f83-c344c3d70daf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            MarksId = new Guid("50f999a9-b4d5-430c-b4f6-34307f271ed2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            MarksId = new Guid("c5c1c0aa-ad0a-4ffb-8546-f8a0fed87a89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            MarksId = new Guid("b304b218-0b09-4490-90e9-7ca253640044")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b92c51ee-f4c7-48e6-acde-cc720660ccd2",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "982db910-7726-4fd1-82ba-92c74b1f8dc7",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "9343c7c9-f47d-4474-b6ab-06a7c0b878c7",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "0fd12a8f-62a1-401e-a956-4dc5e494ed5c",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "05463486-141f-429c-adde-19cd5f2fd77d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5891a0a8-1bb6-4553-a383-8c751bfa2b3b"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("0a594e7a-323e-400a-926e-d7757d060c08"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("fe5cb1b7-d6a1-418b-996e-71308c7ad4f1"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("fc50830d-1552-46b1-8974-b06de848a9c5"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("889e79aa-a4f0-43e2-9dc3-6a3d401a7ed2"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("27d0bd9f-3bd6-4bd7-987a-666b50d11c37"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6cc7cb6-c93a-436c-80f0-0bee296a5de8"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7a97a2e4-2085-423f-8bb6-4f074191407d"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f1a440b-98aa-4784-b225-e1081f560d17"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3b523239-4327-45f7-896a-1cbfedabf754"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("c1b0d973-a4b1-47a5-b151-1e7a59d507e0"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3b523239-4327-45f7-896a-1cbfedabf754")
                        },
                        new
                        {
                            Id = new Guid("83e0dd2c-445e-4f30-83fe-1ad14248274c"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ec856a5a-be37-4d12-ac06-7512d67c29bf"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("9df97d59-34e1-4c0f-8da5-b372314e6f26"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ec856a5a-be37-4d12-ac06-7512d67c29bf")
                        },
                        new
                        {
                            Id = new Guid("3932be8e-abe2-4ac0-8462-8070f57804a8"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c6f71f42-b8b3-4e90-a154-f7fe558ecc33"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("21afb3a5-2257-4aa1-8248-5a90ff95b080"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c6f71f42-b8b3-4e90-a154-f7fe558ecc33")
                        },
                        new
                        {
                            Id = new Guid("c8b0c5ef-3831-4823-844f-5bcc5d15cf1c"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ccf13caa-c96d-4ff7-9dcf-df56b350b37d"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("9484d667-989c-4e81-9f05-c3d552854320"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ccf13caa-c96d-4ff7-9dcf-df56b350b37d")
                        },
                        new
                        {
                            Id = new Guid("edcd7cb8-f2f2-46db-8402-4c52aa7e1de5"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("09aece0a-d825-4215-a88a-c7dd6944ec74"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("50f7aad8-fa27-4307-8fe4-03dad66bcbd6"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("09aece0a-d825-4215-a88a-c7dd6944ec74")
                        },
                        new
                        {
                            Id = new Guid("79114761-8738-4192-a99b-530678294a70"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("21b3d800-76c9-4843-9413-cb682f43ae30"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("f37b96f6-1c1a-47ce-94fa-940bf08e06c4"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("21b3d800-76c9-4843-9413-cb682f43ae30")
                        },
                        new
                        {
                            Id = new Guid("93c24406-f9c0-4f2f-a28b-c026fa7f0d81"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2ff32d4b-1358-44a8-9308-b010c6bb0185"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("2365ba8a-4155-4e8e-a9e3-20ddf203b4d0"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2ff32d4b-1358-44a8-9308-b010c6bb0185")
                        },
                        new
                        {
                            Id = new Guid("ded7ab19-bad4-4624-ac64-c81f11386bf4"),
                            ColumnId = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a5034236-ddb9-4323-84c3-046d21971632"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("2c926bdc-8645-4058-ac39-97615938a34a"),
                            ColumnId = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a5034236-ddb9-4323-84c3-046d21971632")
                        },
                        new
                        {
                            Id = new Guid("470b0e45-2880-48eb-8cb2-39da68bacdd9"),
                            ColumnId = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f53e2c17-c9a7-4245-8df2-b32ddda4a8c4"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("341d1ce1-3df2-48c0-83c5-1ee6fc2d2c58"),
                            ColumnId = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f53e2c17-c9a7-4245-8df2-b32ddda4a8c4")
                        },
                        new
                        {
                            Id = new Guid("8526abb4-abf4-4fb8-95ed-781ebc5281a2"),
                            ColumnId = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("dff35b0f-aaf3-4894-bd99-762ed891fe45"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("6c3f3163-6a77-4787-b251-5906d17fa904"),
                            ColumnId = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("dff35b0f-aaf3-4894-bd99-762ed891fe45")
                        },
                        new
                        {
                            Id = new Guid("a03bc889-037c-429c-9c00-2ac71915ce2c"),
                            ColumnId = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("512ccad5-1ef6-4e6a-8722-72f13f33dfcd"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("ccbc6071-2a1b-44a9-83c7-884a3dd879a6"),
                            ColumnId = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("512ccad5-1ef6-4e6a-8722-72f13f33dfcd")
                        },
                        new
                        {
                            Id = new Guid("acacd5c4-8395-4218-834e-25fcc8ed4b21"),
                            ColumnId = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7d3fe3fc-7d81-4a9f-9793-405e49c0e0dc"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("6f9d53db-0f20-4390-84c0-6b8b49bd8e22"),
                            ColumnId = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7d3fe3fc-7d81-4a9f-9793-405e49c0e0dc")
                        },
                        new
                        {
                            Id = new Guid("3293e273-d009-4e6e-87e6-fe660fb90261"),
                            ColumnId = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a2f3159d-887a-46c3-8bf2-a58de8d79e97"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("ca3a2e4a-0932-45e6-8521-3cc559e8409a"),
                            ColumnId = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a2f3159d-887a-46c3-8bf2-a58de8d79e97")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8097bd5-e5c2-4160-809e-6d222f17fb70"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("f2580839-3049-4a05-b044-afda2d2e0b5d"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e"),
                            ValueTypeId = new Guid("1d751442-b53d-418d-b332-17966e54a79f")
                        },
                        new
                        {
                            Id = new Guid("795ce64a-ad12-4a65-9f6d-fbe18189c1aa"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("91833b5e-37a2-4bfa-9380-ee6b9e7d0839"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("785e7f56-2928-44ad-9664-a8d3019e9e07"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("0d948442-9df8-4340-aa11-4f5de5ae4aac"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("40a8b1c7-dcad-45c5-8c3d-0a5e6ad177cf"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("58ce34cb-e804-4155-9786-300ea84c9af6"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("8a943c30-74c8-4faa-a183-050b8f0fb0e3"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("a738975d-7066-4264-b224-5e7108fcbbc2"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("3d25f35b-3204-4281-bf61-bdfa17b16700"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("aa14eafc-c082-444f-8be9-8595624c5786"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("8dc5578f-36b2-4c7b-9027-5b7219c4cd1f"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("e55b716d-2a49-4e81-a690-5697d1a64989"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("a7502d54-d593-4d34-b1bf-32873332cdeb"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("cf36e284-cc09-4890-aa37-61fb0b380a80"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("6334b422-029e-4e2b-953a-7a8f30c5c1ee"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("2212e641-ce5a-4359-9b00-acad6bd41b4d"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("c9cad5de-7b34-48bc-a271-97aa76491958"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("ccae35c7-dfa2-42a8-81cc-4e599cfbd263"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("3264dc2c-73ff-461e-a7a3-cdebc6bee46d"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("59f8c244-1982-4cd8-94e2-b0c2474a7381"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("02a1fbf7-6a95-4305-a17d-4724917030c5"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("d240e381-0ed2-4b5f-94a1-e289e7a0fd16"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("a8ed0f32-940e-4b47-b542-95391ddaa5a2"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("ea1e4629-804e-439a-84bf-2631699ff7a3"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("977dc65d-1eef-4844-afbf-8c93a46a9c51")
                        },
                        new
                        {
                            Id = new Guid("9e76806f-1b32-4781-b679-72907fed60d0"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("e0d1aaaa-d5ca-4896-b934-5bf673ef75d8"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("12523a94-a14e-4504-9aa7-c8a8982cfc8b"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("d40c7a6a-513f-40cd-8ef5-062016c3bd47"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("35a6b994-c057-4213-8f68-93edf54d786b"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("51f2195d-0889-42c0-ad52-1a39e03dd06f"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("35a6b994-c057-4213-8f68-93edf54d786b"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("425db34e-482d-432d-bb66-780ab618a16c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("35a6b994-c057-4213-8f68-93edf54d786b"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("a62d4587-98d2-47ab-8333-e13b4ac40b68"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("83b9e279-6b4f-49cc-a647-7563853d214f"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("6635a4e5-c9b1-43c0-ab64-cac12c4a9886"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("0a9d6476-c1d3-4a61-aab3-4db4b187e738"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("39ff59d0-2977-4abc-8e3b-d557ef53d6c9"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("b6665b63-c5fd-41e8-8fe6-4152657d5669"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("2335f7fd-4b11-465f-bef6-3d916eccaeb9"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("7777e2c3-6df9-4c22-8060-0d1a37b9d855"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("ce53c974-0b10-4513-88b1-5b5bc29675e5"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("28a5b8b8-1cfa-4348-92bd-b2b4e857fc21"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("98961a51-4e1e-4d32-b3f1-dd58b1b2172e"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("638ae3eb-4841-4c53-9a0d-b5c63734e549"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("b0d7937f-ddc2-4eae-b196-0b1e1250dd71"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("8a8dffab-3e6a-4d0a-b6a4-38e794bd32f6"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("ea8d1456-edc2-43cd-b0ad-a3d4c8f1d216"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("6e3b077f-8a67-4874-9694-b5d39ef805d9"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("3fc97860-dc56-494e-91af-ec7e5e03ce9a"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("9d11c1d0-c23a-403f-9a37-09bb18d1e242"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("4bf9c880-345c-48b5-b431-9fc241126381"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("065f1372-859d-47b5-9749-02d6a0d90f36"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("4bf9c880-345c-48b5-b431-9fc241126381"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("bef76f6b-f11a-49c9-af1a-937efe948e34"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("4bf9c880-345c-48b5-b431-9fc241126381"),
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d26e96a1-7240-4b9a-a3f7-ae41e46d4de4"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f311045-c4a3-4d13-8b42-959c993b6dee"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3be36319-913a-4811-bbd1-a80cc827d8ff"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("406f1feb-3ee0-4faa-a9c5-2c27616fd3ab"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("ba18eee0-5b0d-4ef9-b1bb-7d3f2d6f4e61")
                        },
                        new
                        {
                            Id = new Guid("815d7569-db76-459d-9ec6-f710394a9850"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("5550cbd5-8666-431a-ac64-9ad0d02637cf"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("9afb914a-bfe2-4949-a33c-b3b449e57063"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("0d16c3af-3d39-4359-8b6e-4921b19d583e"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("3d02a5ad-07b6-46cf-b255-a3eba36fac81"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("b1105017-6764-4c89-82ae-39e55721ed15"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("b0d1f39c-9621-4896-8495-d6c479697256"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("49f2b53f-a843-4f2b-8b08-9d92897c1a6d"),
                            EditBlockId = new Guid("88e554fc-fe72-407c-9e00-a9e12ef69c42"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            EditBlockId = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("57a1953c-aa17-4f07-9e60-4d671ca883fa"),
                            EditBlockId = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("a78f1d7c-0658-4be6-9fe0-007f7cc5b735"),
                            EditBlockId = new Guid("d6bbb9f8-eaa0-4864-a63e-537e768d0de1"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80")
                        },
                        new
                        {
                            Id = new Guid("56b8b971-c96f-41f3-acbb-dd55a8d6747b"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("2b96aa3d-d9f7-4d27-b6aa-6db2e7a7e694"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("fa16d661-a3a6-49c2-8e7b-a064ad1bb8fd"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("02c6bb6e-1c1f-4e33-a0db-2ca3af27343e"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        },
                        new
                        {
                            Id = new Guid("73f6a5cf-a4f2-4559-b2d6-1a4689105f9b"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cc2563b-277a-47cd-ba49-3e166a8d1b90"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052")
                        },
                        new
                        {
                            Id = new Guid("a1575a4d-7f4f-440c-9886-14325b8d2628"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("a664c290-78bc-4a89-917f-4503f7523052")
                        },
                        new
                        {
                            Id = new Guid("64d0122c-4248-435e-a876-9ae1ee1a662d"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("fa16d661-a3a6-49c2-8e7b-a064ad1bb8fd"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7af78210-b52c-4f69-8f16-c0db4f137ff6"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("56b8b971-c96f-41f3-acbb-dd55a8d6747b"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a00c36c5-c429-444a-8ffa-2dbaf5d7a141"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("2b96aa3d-d9f7-4d27-b6aa-6db2e7a7e694"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("a9482233-c2d6-474f-85e2-3a0b8ad930d5"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064")
                        },
                        new
                        {
                            Id = new Guid("4d5410fd-6b0e-4730-8ed8-88b77564cb4f"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("f6976088-34e8-4254-a347-908d3934dbc9")
                        },
                        new
                        {
                            Id = new Guid("f749dab0-3254-4537-809c-7b941736c080"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81")
                        },
                        new
                        {
                            Id = new Guid("4d6056eb-b30e-4f06-9536-36909f7d9900"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81")
                        },
                        new
                        {
                            Id = new Guid("2f8e8bad-02a4-407b-9cd4-fbc3d395fc17"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81")
                        },
                        new
                        {
                            Id = new Guid("6275471d-6f30-4abb-a1c4-14516ac1625e"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81")
                        },
                        new
                        {
                            Id = new Guid("d7b9a373-e697-4c30-ace2-7a0b4b4afe18"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("35a6b994-c057-4213-8f68-93edf54d786b")
                        },
                        new
                        {
                            Id = new Guid("9d24ede2-0dce-46f5-8696-c4b47ca6ee11"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("b33d1a5c-0281-4473-8561-1b10872f9b94"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6")
                        },
                        new
                        {
                            Id = new Guid("0e31347b-02d1-4f68-97c4-6ecce5e6c2fd"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba")
                        },
                        new
                        {
                            Id = new Guid("7c3bdb72-3086-4d50-8589-a2c315cf8f41"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7")
                        },
                        new
                        {
                            Id = new Guid("b2b6ed9f-a23d-4792-b470-19d267cf7422"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("02c6bb6e-1c1f-4e33-a0db-2ca3af27343e"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("2a1fc3ec-11ef-4223-bc5d-3f68b9845139"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("73f6a5cf-a4f2-4559-b2d6-1a4689105f9b"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("76606667-6603-435d-b2c4-340d2c0e62c2"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9")
                        },
                        new
                        {
                            Id = new Guid("2f761cfc-3beb-4b14-97fe-b55bf77f4d65"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9")
                        },
                        new
                        {
                            Id = new Guid("dbc3898b-8013-472c-9f83-c344c3d70daf"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242")
                        },
                        new
                        {
                            Id = new Guid("50f999a9-b4d5-430c-b4f6-34307f271ed2"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("4bf9c880-345c-48b5-b431-9fc241126381")
                        },
                        new
                        {
                            Id = new Guid("c5c1c0aa-ad0a-4ffb-8546-f8a0fed87a89"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("b304b218-0b09-4490-90e9-7ca253640044"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4087db9a-2bb0-4521-bc26-6f594391bf02"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("445372c0-ecfa-40d8-8b8c-7a25d1d7dab5"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("66a0c11e-c5e8-40cc-b949-42318c941a48"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b838beca-82bb-4f44-bdb4-4b1dee5d0889"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ad6cd501-1984-44da-85e4-b7b7646aea58"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b5501e38-02f1-42b6-b08d-77de067b62f1"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("25d776b7-c234-47b0-b6f0-4be21cbb9090"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b523239-4327-45f7-896a-1cbfedabf754"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("ec856a5a-be37-4d12-ac06-7512d67c29bf"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("c6f71f42-b8b3-4e90-a154-f7fe558ecc33"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("ccf13caa-c96d-4ff7-9dcf-df56b350b37d"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("09aece0a-d825-4215-a88a-c7dd6944ec74"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("21b3d800-76c9-4843-9413-cb682f43ae30"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("2ff32d4b-1358-44a8-9308-b010c6bb0185"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("a5034236-ddb9-4323-84c3-046d21971632"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("62da8c12-4843-4869-9a80-b55cee49785e")
                        },
                        new
                        {
                            Id = new Guid("f53e2c17-c9a7-4245-8df2-b32ddda4a8c4"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        },
                        new
                        {
                            Id = new Guid("dff35b0f-aaf3-4894-bd99-762ed891fe45"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        },
                        new
                        {
                            Id = new Guid("512ccad5-1ef6-4e6a-8722-72f13f33dfcd"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        },
                        new
                        {
                            Id = new Guid("7d3fe3fc-7d81-4a9f-9793-405e49c0e0dc"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        },
                        new
                        {
                            Id = new Guid("a2f3159d-887a-46c3-8bf2-a58de8d79e97"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60577f02-ada9-47e9-9218-d6d27e269079"),
                            FieldId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("1b31a67e-a1d2-4012-a576-8e6375db189e"),
                            FieldId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("366ff9ea-1b88-4ea2-8ac3-11d68d1c4acb"),
                            FieldId = new Guid("00c065db-2298-4290-a3ff-518a7f2f7664"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("f02b0a3d-c8be-4d59-9ec0-58afe5d8b6dd"),
                            FieldId = new Guid("57a1953c-aa17-4f07-9e60-4d671ca883fa"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("c38379c6-3395-4dc1-94a2-86ac915e6ce3"),
                            FieldId = new Guid("57a1953c-aa17-4f07-9e60-4d671ca883fa"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("b94a2bd4-2a77-4ca9-9605-4dbc1b2c10c2"),
                            ColumnId = new Guid("785e7f56-2928-44ad-9664-a8d3019e9e07"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("442f3d7e-fb99-4f0b-ba6f-ecf24b316b11"),
                            ColumnId = new Guid("785e7f56-2928-44ad-9664-a8d3019e9e07"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("efb238e4-bc85-440a-92b6-b4d77e490971"),
                            ColumnId = new Guid("785e7f56-2928-44ad-9664-a8d3019e9e07"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("1adbfd32-8693-47dd-be02-b7b081e50ec5"),
                            ColumnId = new Guid("59f8c244-1982-4cd8-94e2-b0c2474a7381"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("87ed2fba-8359-417a-8e96-c1bd891ef6a5"),
                            ColumnId = new Guid("59f8c244-1982-4cd8-94e2-b0c2474a7381"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("df6a7f37-c86a-4ba1-903e-5aaf1b90a1bd"),
                            ColumnId = new Guid("59f8c244-1982-4cd8-94e2-b0c2474a7381"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("6d1bb098-65e8-4495-8af3-b9ef9dbe2720"),
                            ColumnId = new Guid("51f2195d-0889-42c0-ad52-1a39e03dd06f"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("49ecfd85-3e09-4845-98d3-535f26cd9e1a"),
                            ColumnId = new Guid("51f2195d-0889-42c0-ad52-1a39e03dd06f"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("eefc63aa-baff-47cf-977c-842c36d4232a"),
                            ColumnId = new Guid("638ae3eb-4841-4c53-9a0d-b5c63734e549"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("14dc52be-3afb-4e65-906c-e713f315be4f"),
                            ColumnId = new Guid("638ae3eb-4841-4c53-9a0d-b5c63734e549"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("9adb7846-0b26-4658-aa84-ddbf7d40a76d"),
                            ColumnId = new Guid("8a8dffab-3e6a-4d0a-b6a4-38e794bd32f6"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("2504a608-391f-4fe5-b2ec-2fa979b58822"),
                            ColumnId = new Guid("8a8dffab-3e6a-4d0a-b6a4-38e794bd32f6"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("87b8263b-46da-4588-b002-7ed9588d1455"),
                            ColumnId = new Guid("8a8dffab-3e6a-4d0a-b6a4-38e794bd32f6"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("dba509c0-7a36-487b-a502-4dd0ecf73249"),
                            ColumnId = new Guid("8a8dffab-3e6a-4d0a-b6a4-38e794bd32f6"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("d799ac24-0c9a-4b8a-9660-642a79b7c219"),
                            ColumnId = new Guid("9d11c1d0-c23a-403f-9a37-09bb18d1e242"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("8152b058-cd35-4a6c-a174-06d33fc641d4"),
                            ColumnId = new Guid("9d11c1d0-c23a-403f-9a37-09bb18d1e242"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("b7836c0e-95c2-420a-8e49-177937b302a1"),
                            ColumnId = new Guid("9d11c1d0-c23a-403f-9a37-09bb18d1e242"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("5de3c1e7-30f7-46ea-9138-480bb6936cfd"),
                            ColumnId = new Guid("9d11c1d0-c23a-403f-9a37-09bb18d1e242"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("2f0f5ce8-eb47-449c-8829-489f6129a21b"),
                            ColumnId = new Guid("d240e381-0ed2-4b5f-94a1-e289e7a0fd16"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e5fc7ccf-c666-46b6-b956-7db25890c415"),
                            ColumnId = new Guid("d240e381-0ed2-4b5f-94a1-e289e7a0fd16"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("c66e5b1b-693f-4fdf-8533-4253391acff7"),
                            ColumnId = new Guid("e0d1aaaa-d5ca-4896-b934-5bf673ef75d8"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d44d6266-f71a-404a-bfb0-95d11f8375e2"),
                            ColumnId = new Guid("e0d1aaaa-d5ca-4896-b934-5bf673ef75d8"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("754965fd-382a-4fbc-b0c9-cc56a8c182f8"),
                            ColumnId = new Guid("b6665b63-c5fd-41e8-8fe6-4152657d5669"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("88ae7a13-ee4d-4571-82a6-8f24d5504c1e"),
                            ColumnId = new Guid("b6665b63-c5fd-41e8-8fe6-4152657d5669"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("098874a4-f16f-4560-8975-25b069543d85"),
                            ColumnId = new Guid("2335f7fd-4b11-465f-bef6-3d916eccaeb9"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("e0fe8617-e67d-4118-8a8a-5129da4a223a"),
                            ColumnId = new Guid("2335f7fd-4b11-465f-bef6-3d916eccaeb9"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("372c45af-cd46-42b0-a364-3709079bb719"),
                            ColumnId = new Guid("2335f7fd-4b11-465f-bef6-3d916eccaeb9"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("c001406f-c403-4076-a69a-9b2d7a442ee9"),
                            ColumnId = new Guid("2335f7fd-4b11-465f-bef6-3d916eccaeb9"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("77bac38c-44bf-4f9a-ad39-d2895ef45079"),
                            ColumnId = new Guid("8dc5578f-36b2-4c7b-9027-5b7219c4cd1f"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("764cc13a-a1fd-4b36-a86d-1267bcbfc5a5"),
                            ColumnId = new Guid("8dc5578f-36b2-4c7b-9027-5b7219c4cd1f"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("3391c2fd-f92f-4805-a728-d5b5a19328ae"),
                            ColumnId = new Guid("8dc5578f-36b2-4c7b-9027-5b7219c4cd1f"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("f56b99cd-0aa5-4efc-be91-7bc4e2ace955"),
                            ColumnId = new Guid("ea1e4629-804e-439a-84bf-2631699ff7a3"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("d549a5b5-c6e2-4b65-8f49-3ceecc021859"),
                            ColumnId = new Guid("ea1e4629-804e-439a-84bf-2631699ff7a3"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("f112e277-ec4e-460f-bed6-76907807f34e"),
                            ColumnId = new Guid("83b9e279-6b4f-49cc-a647-7563853d214f"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("7cc986e5-7a44-4ac6-827d-0209bf445019"),
                            ColumnId = new Guid("83b9e279-6b4f-49cc-a647-7563853d214f"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62da8c12-4843-4869-9a80-b55cee49785e"),
                            EditBlockId = new Guid("d26e96a1-7240-4b9a-a3f7-ae41e46d4de4"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7b820576-4b39-4ea2-b83e-10fdb7a272a6"),
                            EditBlockId = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("5999e323-16e7-4ef5-9735-c95535fd43ba"),
                            EditBlockId = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("a01be511-409e-4ea0-91cd-b74ee07032b8"),
                            EditBlockId = new Guid("1dd2f109-23fe-485d-82fc-a00eabf6cddc"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a664c290-78bc-4a89-917f-4503f7523052"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b555ff0b-11ba-4d36-89db-b17389bc3064"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("8ecfe285-fd56-4724-8217-0fb39583db81"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("35a6b994-c057-4213-8f68-93edf54d786b"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("f6976088-34e8-4254-a347-908d3934dbc9"),
                            EditBlockId = new Guid("0373365f-4c9c-4ec4-af74-30f2f3f21352"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("f8e7b62e-5588-45e6-8510-3dbbd3cb85d7"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("ca73ac87-a862-4aea-9e7c-4f07b6f77bc9"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("9d593bee-5c5c-4338-9f2c-6c13ee10e242"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("4bf9c880-345c-48b5-b431-9fc241126381"),
                            EditBlockId = new Guid("4d3d5db6-8a9d-41a0-8a5f-443692887c20"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45139b37-9ccc-45e8-b716-1a88ace5b738"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("75d8269a-2b42-427e-96c5-6e2841ed333b"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03b3e58e-8275-4877-9ba3-494e07f0a052"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("fec31d8a-1857-40bc-b548-f0341398fe80"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("977dc65d-1eef-4844-afbf-8c93a46a9c51"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("ba18eee0-5b0d-4ef9-b1bb-7d3f2d6f4e61"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("1d751442-b53d-418d-b332-17966e54a79f"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
