// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240828194739_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fc6ae1dc-8d65-4df8-b228-3e81261ed611"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fc6ae1dc-8d65-4df8-b228-3e81261ed611"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("d86dd019-d3f8-43e7-8ae6-bef9af6c4eda"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("c9ceee42-378c-4828-a02c-2695f38c29fd"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("da679a09-f018-429d-92e4-90a561e473b3"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("db96ca45-0d2a-4e47-bb25-79f34039be2d"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("e52b2d58-dc60-48c9-ac7c-6e201cac1598"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("19b86aea-66ef-485b-8655-d134bda9c9d5"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("a73934a5-ab74-4eb8-93dc-5fe58b1b9752"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("6b3e8a96-8227-411e-8e6a-75cb36c7713c"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("05b4b270-5eed-46bc-843e-6f1605a6adb1"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("5ac76f06-36c4-48bc-89c7-a4970ee771b5"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("60d16eae-8f98-4d47-ae20-22b17db772f0"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("b729d1bd-5145-45b7-b05b-69115619f42e"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("c6ca29c9-ecde-4706-9de3-0a0d13e185c7"),
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32")
                        },
                        new
                        {
                            FieldsId = new Guid("dd53203a-0f3c-4863-9553-3287d3fdc04b"),
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32")
                        },
                        new
                        {
                            FieldsId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("920e2501-178c-4708-b6ef-f553126525d7"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("75a0fb5c-52cb-4189-aa7c-30408c69aa3f"),
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c")
                        },
                        new
                        {
                            FieldsId = new Guid("f6f05f30-74ab-4e20-8bed-d3e7a8976034"),
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9")
                        },
                        new
                        {
                            FieldsId = new Guid("8c448c2b-2be3-4e00-a6af-dc51883e8bf4"),
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9")
                        },
                        new
                        {
                            FieldsId = new Guid("3bc3b338-20dc-43ca-8dfb-f48e3bf6853d"),
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9")
                        },
                        new
                        {
                            FieldsId = new Guid("f39586bd-8feb-456a-a81b-185544ac3d19"),
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9")
                        },
                        new
                        {
                            FieldsId = new Guid("514643dd-5250-494f-b54d-192824efdddc"),
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9")
                        },
                        new
                        {
                            FieldsId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8")
                        },
                        new
                        {
                            FieldsId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171")
                        },
                        new
                        {
                            FieldsId = new Guid("0fce9a83-14f0-456e-83fe-98d52bb676e3"),
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171")
                        },
                        new
                        {
                            FieldsId = new Guid("f3b425c8-375c-4f58-b328-44425c35885e"),
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            TablesId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            TablesId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            TablesId = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            TablesId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            TablesId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            TablesId = new Guid("59723e2f-bc6b-442f-8570-86978a47f9c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            TablesId = new Guid("b3703821-b0da-47b6-ae64-05349c158985")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            TablesId = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            TablesId = new Guid("b3703821-b0da-47b6-ae64-05349c158985")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            TablesId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            TablesId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            TablesId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            TablesId = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            TablesId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            TablesId = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32"),
                            TracksId = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32"),
                            TracksId = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("765e3da5-6d4a-4fc7-b26d-226dfdfb06fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("e3a4d1e9-6a75-43ba-9e34-51def74e2942")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("cbb6490b-1b8b-4d4c-a0e0-7c57fb018c27")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("28cb734d-cf30-4545-b164-3de78fac0d5d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("b8dd6055-2c2f-460e-b09f-c4b746bf181d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("8a180871-86ac-4d89-a26e-45d2668771ab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            MarksId = new Guid("c5d5b695-d4d3-4455-87eb-fcff04c506ac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            MarksId = new Guid("e00d31b1-2c91-427a-bb49-9d31625eb6ca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            MarksId = new Guid("404c4824-344e-488d-bf0a-77c18cc35dea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            MarksId = new Guid("173c4f61-62bd-468e-9df7-eeefaf7c3540")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            MarksId = new Guid("cb40234e-8762-4664-b059-a042363650c8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            MarksId = new Guid("b286f5eb-80c4-4c87-85d0-7bf63e560615")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            MarksId = new Guid("c9e9ff72-7e33-431c-8ba8-5b018e8ffe5a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            MarksId = new Guid("a35eeab7-6284-4701-a79a-2c1d78e16883")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            MarksId = new Guid("b319de81-e4ec-4c46-bc40-bfdb4fea677c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("c9e9ff72-7e33-431c-8ba8-5b018e8ffe5a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("a35eeab7-6284-4701-a79a-2c1d78e16883")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("68583bd3-357e-49b4-9644-429ee74125b7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("02e732d6-ad75-4e7e-8801-11e3bd411ad7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("a301eb31-52c9-4a33-a2f3-f36a88cd52e8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("f7ced967-024c-495b-8347-f2b34880d91d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("153747d6-b944-49c7-99a8-48c53b9cb5e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("34b28ad5-553d-45fd-975e-4283cfc6d0f8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            MarksId = new Guid("2581e593-1c38-4b23-ae2c-dbb131916cc2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            MarksId = new Guid("b319de81-e4ec-4c46-bc40-bfdb4fea677c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            MarksId = new Guid("13bc9347-9f8b-4c86-934a-ec59c8847855")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            MarksId = new Guid("3b17b58c-fbdc-4efe-bb66-7340248c9caa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32"),
                            MarksId = new Guid("0d2c72c9-7a2f-462c-9b8b-bb12a31fbccf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32"),
                            MarksId = new Guid("29b559c2-9071-44b6-aee8-640bab3a87c4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("960e90d9-3dfb-44cb-9b51-c488a959103d"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("85c3a347-f125-4567-8b66-b10cc6e1ad83"),
                            Number = 2,
                            Status = "В ожидании оценки"
                        },
                        new
                        {
                            Id = new Guid("6fc8a9ce-c155-4c23-a655-f88115efb567"),
                            Number = 3,
                            Status = "В процессе оценки"
                        },
                        new
                        {
                            Id = new Guid("e9270362-c517-4246-876d-1e3c65c1ea3a"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("5133fb16-f530-4949-a442-01025e5a15e0"),
                            Number = 5,
                            Status = "Отклонена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f4d1ed-7da1-4027-a737-6f96b4962545"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("7275c018-40eb-42e7-aa95-27248c00d953"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be")
                        },
                        new
                        {
                            Id = new Guid("38d26adf-7f26-4793-bf00-f7dc46f6802a"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be")
                        },
                        new
                        {
                            Id = new Guid("20a8a55f-3bc9-46e8-986f-f3cd3ebc88c8"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be")
                        },
                        new
                        {
                            Id = new Guid("ea0a9880-86bb-441e-ab10-bf288ac2f432"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be")
                        },
                        new
                        {
                            Id = new Guid("5b9ab3ed-eaec-4045-bb1d-090adcecfda7"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("db799fd2-3545-4b81-9769-eb6e609b7bf4"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556")
                        },
                        new
                        {
                            Id = new Guid("1e524354-1769-44ad-95e3-376a508bfe30"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556")
                        },
                        new
                        {
                            Id = new Guid("b5d5cd0e-904f-4d06-886c-d34f26920855"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556")
                        },
                        new
                        {
                            Id = new Guid("19b869f8-5d8a-4b0d-89e4-985b1f80f5ab"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556")
                        },
                        new
                        {
                            Id = new Guid("c5f7b40a-6e10-4502-ac61-7da8d8c90986"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("492e6aeb-bdb0-4387-9348-8713c9eef46a"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a")
                        },
                        new
                        {
                            Id = new Guid("157497c3-0f36-4323-a2cb-4219d62308d4"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a")
                        },
                        new
                        {
                            Id = new Guid("4c5dba1b-38e8-40d3-a6c0-9d2869505627"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a")
                        },
                        new
                        {
                            Id = new Guid("b6c1cf1e-d96f-4981-87de-a2235adeaee5"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a")
                        },
                        new
                        {
                            Id = new Guid("2dfc9bb9-697a-4641-a940-57531d71a38a"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5e9e152b-f831-48f3-a473-291676742096"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("57633b45-b7f7-4ede-8d74-5111b8de8838"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5e9e152b-f831-48f3-a473-291676742096")
                        },
                        new
                        {
                            Id = new Guid("d65bcafc-878e-4b9c-bbc9-0fb6a4295680"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5e9e152b-f831-48f3-a473-291676742096")
                        },
                        new
                        {
                            Id = new Guid("5db56017-5cf4-478d-9006-9f90d5555a43"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5e9e152b-f831-48f3-a473-291676742096")
                        },
                        new
                        {
                            Id = new Guid("3fcf2af8-d163-49b8-84fe-d89a1c187ff1"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5e9e152b-f831-48f3-a473-291676742096")
                        },
                        new
                        {
                            Id = new Guid("f71ecbdd-6829-4d9e-a1aa-ef431a176be7"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("5bdfb083-2dc2-4dc4-b904-a3241c13a4c4"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453")
                        },
                        new
                        {
                            Id = new Guid("85687252-4c82-4501-9dd8-791db1b900f0"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453")
                        },
                        new
                        {
                            Id = new Guid("4f9a0f27-cf4a-48ff-80b7-5d0a760faad8"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453")
                        },
                        new
                        {
                            Id = new Guid("36569dad-9cb7-4217-a0b9-5e61d084abe1"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453")
                        },
                        new
                        {
                            Id = new Guid("e5e812cb-9aec-426a-9819-fb18fb251d19"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34"),
                            Value = "Количество монографий/глав в монографии"
                        },
                        new
                        {
                            Id = new Guid("c383e82d-6088-4ba9-943b-c8f3ffa84247"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34")
                        },
                        new
                        {
                            Id = new Guid("40f0f49e-dd6f-4187-973b-a007b201ab12"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34")
                        },
                        new
                        {
                            Id = new Guid("158f1454-5054-4b08-a3e7-12a10107e6f1"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34")
                        },
                        new
                        {
                            Id = new Guid("c818890b-1117-4ecf-9e22-00c3ddfece89"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34")
                        },
                        new
                        {
                            Id = new Guid("de2e983d-e4bc-401f-90f2-e6d567c82d3a"),
                            ColumnId = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc"),
                            Value = "Количество патентов"
                        },
                        new
                        {
                            Id = new Guid("ba934b87-d319-46a7-83ef-83dc16673f37"),
                            ColumnId = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc")
                        },
                        new
                        {
                            Id = new Guid("3514c8b3-c4b7-416b-8c98-eae4177e299a"),
                            ColumnId = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc")
                        },
                        new
                        {
                            Id = new Guid("4f47576e-83cf-4095-9c28-e7745d223847"),
                            ColumnId = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc")
                        },
                        new
                        {
                            Id = new Guid("04f7eb36-0cc8-42b2-a8ba-3c24e44128eb"),
                            ColumnId = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad5ff1df-e7e6-4653-b980-cde6ef9ecbd0"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("7035f684-69c3-4d47-a895-8e1e3b3d04de"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("6634e9d2-4777-4eef-91ca-0d27b58e181c"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("dbcc6f75-3e39-40da-9d06-1be641b6787d"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("eca8e385-6768-4de4-a30a-42e93651f3ff"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("c94d21b1-55e5-467e-bd93-1a53568002e5"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("7f384921-e27d-4e44-b28d-983eba03e3a6"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("a65deaf7-a076-403d-a2c0-bcf1338db3d8"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("e7add3db-a83e-404c-b837-94c3db5468e8"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("18291ef9-66c3-4622-a118-a8c7e007d7b7"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("5071cbf0-eaa3-4c32-a74a-fc6a36f09bd7"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("ba18f7e0-9969-4bd6-a37e-76d412ac186f"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("82783601-5ada-4a26-a90b-f4533b5e4190"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("7dd450d6-9776-4950-9f79-82e40d771d7e"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("bcab9562-e26b-4804-81f6-30dfceda8973"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("4e30cd4d-239b-4447-b909-d5191d5c420c"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("b8c0256c-8caf-41a0-a38c-eae771ede559"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("1f6360f4-34a8-4280-8d80-5c37dae57411"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("71e61752-ccfc-4555-a8b3-aef8daedf315"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("681f2965-40e1-4279-9e2d-626962c44467"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("5256d2e2-00d2-4584-9d54-6af1f5b97aa5"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("2697e848-6fc7-4111-8a30-c7498d2ce9c1"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("2659c1ab-94a2-4ed4-9075-fd424c0a1eb4"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("d7c3dcca-036f-4143-b4c3-a0076285d639"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("519f2b3d-f71c-4739-bf23-bc125cd1b468"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("b4ab329a-3124-4d5d-999f-4d04f473706c"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("d44bee15-7fd2-4443-99a9-e86ed4d99873")
                        },
                        new
                        {
                            Id = new Guid("d8bd6819-82d1-4683-a05c-e3460c6a46c7"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("2ffba51a-ce41-4f72-a8f4-2aac59671048"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("59723e2f-bc6b-442f-8570-86978a47f9c0"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("f5e9d6cf-97cd-4962-b4c7-931ed5b73dc7"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("59723e2f-bc6b-442f-8570-86978a47f9c0"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("70d7006d-5a90-400e-ac8f-6255fcb3a1a3"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("c85ae131-db33-41fa-9cf0-e647baca0951"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("7931a137-e498-4779-96cf-317bd206e77c"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("9a87a33f-d5a8-448a-af26-d0d168fdcd20"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("371c993b-e2dc-4011-b53c-cf497c7add21"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("ac161dd7-0ccb-4206-997e-0f98d8e54a83"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("19cd3592-ea8e-4aaa-867c-df1cc1fbdd72"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("2ad6f488-5005-4ce6-9d79-9d069f6b2293"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("dedbcdb5-8ed8-4fcb-af96-71c1cf9fe7be"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("4b8d974a-8730-495e-a833-b4ea485be0ae"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("1e898892-52c0-4b25-b5e7-718c875ee33b"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("fb61e99f-9e70-4b21-85b7-5d785bb29fb5"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("a6f7ed58-29e6-4547-8c93-aee99e2bc973"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("0679e985-c30c-4e6c-88b4-4ec7105db9bd"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("2d6f8edf-3420-498c-bd6c-7eddf743ac5a"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("9f6ffac4-7f3b-4d48-a0de-2de53ce359b0"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("86f03f55-4b0c-46dd-9096-af06f7e14b41"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("cdf318e5-834c-406d-b04e-1114a835aea8"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("03a6984e-386e-40c3-8afd-95fc273f04ea"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("c68dd76a-dd8c-4f4a-9f5b-3670c70217ac"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("edf33ea7-60df-46e6-8faa-c1550d735c60"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("accfd2fe-e26b-4df8-89b5-274227831b49"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("6975ace0-52e0-4a58-a3c9-29664e43e5de"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("72acd1c7-0c0c-4ed7-9efb-d7cf5db30ed2"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("ecd3ce2f-c68c-4daf-9168-c017d14ced9c"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe"),
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("fc6ae1dc-8d65-4df8-b228-3e81261ed611"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d86dd019-d3f8-43e7-8ae6-bef9af6c4eda"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("c9ceee42-378c-4828-a02c-2695f38c29fd"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            Required = true,
                            ValueTypeId = new Guid("e7962e03-32b8-4fd2-85bd-85bfb96c2c19")
                        },
                        new
                        {
                            Id = new Guid("da679a09-f018-429d-92e4-90a561e473b3"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("db96ca45-0d2a-4e47-bb25-79f34039be2d"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("e52b2d58-dc60-48c9-ac7c-6e201cac1598"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("19b86aea-66ef-485b-8655-d134bda9c9d5"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("a73934a5-ab74-4eb8-93dc-5fe58b1b9752"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("6b3e8a96-8227-411e-8e6a-75cb36c7713c"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("05b4b270-5eed-46bc-843e-6f1605a6adb1"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("5ac76f06-36c4-48bc-89c7-a4970ee771b5"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("60d16eae-8f98-4d47-ae20-22b17db772f0"),
                            EditBlockId = new Guid("3262f336-1f7d-41b9-8123-ee8b9f2397cb"),
                            Name = "Дополнительная информация",
                            Number = 11,
                            Placeholder = "Пример",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Направление конкурса",
                            Number = 12,
                            Placeholder = "Выберите направление конкурса",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("b729d1bd-5145-45b7-b05b-69115619f42e"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 13,
                            Placeholder = "Выберите категорию участника конкруса",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("c6ca29c9-ecde-4706-9de3-0a0d13e185c7"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Название конкурсной работы",
                            Number = 14,
                            Placeholder = "Введите название своей конкурсной работы",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("dd53203a-0f3c-4863-9553-3287d3fdc04b"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Ссылка на конкурсную работу",
                            Number = 15,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Ученое звание",
                            Number = 16,
                            Placeholder = "Выберите ученое звание",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("920e2501-178c-4708-b6ef-f553126525d7"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Ученая степень",
                            Number = 17,
                            Placeholder = "Выберите ученую степень",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("75a0fb5c-52cb-4189-aa7c-30408c69aa3f"),
                            EditBlockId = new Guid("43ebc997-d57c-47a2-bd19-930cf94844b5"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            Required = true,
                            ValueTypeId = new Guid("49e37e57-e921-4e28-9833-bf189a361827")
                        },
                        new
                        {
                            Id = new Guid("f6f05f30-74ab-4e20-8bed-d3e7a8976034"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("8c448c2b-2be3-4e00-a6af-dc51883e8bf4"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            Name = "Защитившиеся доктора наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("3bc3b338-20dc-43ca-8dfb-f48e3bf6853d"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            Name = "Защитившиеся бакалавры",
                            Number = 21,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("f39586bd-8feb-456a-a81b-185544ac3d19"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            Name = "Защитившиеся специалисты",
                            Number = 22,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("514643dd-5250-494f-b54d-192824efdddc"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            Name = "Защитившиеся магистры",
                            Number = 23,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("0fce9a83-14f0-456e-83fe-98d52bb676e3"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        },
                        new
                        {
                            Id = new Guid("f3b425c8-375c-4f58-b328-44425c35885e"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            Name = "Защитившиеся доктора наук",
                            Number = 25,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("0449aa50-1480-4fb2-b641-b2f450053764")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("765e3da5-6d4a-4fc7-b26d-226dfdfb06fc"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec")
                        },
                        new
                        {
                            Id = new Guid("e3a4d1e9-6a75-43ba-9e34-51def74e2942"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec")
                        },
                        new
                        {
                            Id = new Guid("cbb6490b-1b8b-4d4c-a0e0-7c57fb018c27"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("514643dd-5250-494f-b54d-192824efdddc"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("28cb734d-cf30-4545-b164-3de78fac0d5d"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("f6f05f30-74ab-4e20-8bed-d3e7a8976034"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("b8dd6055-2c2f-460e-b09f-c4b746bf181d"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("8c448c2b-2be3-4e00-a6af-dc51883e8bf4"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8a180871-86ac-4d89-a26e-45d2668771ab"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa")
                        },
                        new
                        {
                            Id = new Guid("c5d5b695-d4d3-4455-87eb-fcff04c506ac"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7")
                        },
                        new
                        {
                            Id = new Guid("e00d31b1-2c91-427a-bb49-9d31625eb6ca"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509")
                        },
                        new
                        {
                            Id = new Guid("404c4824-344e-488d-bf0a-77c18cc35dea"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509")
                        },
                        new
                        {
                            Id = new Guid("173c4f61-62bd-468e-9df7-eeefaf7c3540"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509")
                        },
                        new
                        {
                            Id = new Guid("cb40234e-8762-4664-b059-a042363650c8"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509")
                        },
                        new
                        {
                            Id = new Guid("b286f5eb-80c4-4c87-85d0-7bf63e560615"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("59723e2f-bc6b-442f-8570-86978a47f9c0")
                        },
                        new
                        {
                            Id = new Guid("c9e9ff72-7e33-431c-8ba8-5b018e8ffe5a"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("a35eeab7-6284-4701-a79a-2c1d78e16883"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("b3703821-b0da-47b6-ae64-05349c158985")
                        },
                        new
                        {
                            Id = new Guid("b319de81-e4ec-4c46-bc40-bfdb4fea677c"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae")
                        },
                        new
                        {
                            Id = new Guid("68583bd3-357e-49b4-9644-429ee74125b7"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a")
                        },
                        new
                        {
                            Id = new Guid("02e732d6-ad75-4e7e-8801-11e3bd411ad7"),
                            EvaluationMethodName = "EvaluateMark17",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("a301eb31-52c9-4a33-a2f3-f36a88cd52e8"),
                            EvaluationMethodName = "EvaluateMark18",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("f7ced967-024c-495b-8347-f2b34880d91d"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("0fce9a83-14f0-456e-83fe-98d52bb676e3"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("153747d6-b944-49c7-99a8-48c53b9cb5e4"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("f3b425c8-375c-4f58-b328-44425c35885e"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("34b28ad5-553d-45fd-975e-4283cfc6d0f8"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1")
                        },
                        new
                        {
                            Id = new Guid("2581e593-1c38-4b23-ae2c-dbb131916cc2"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1")
                        },
                        new
                        {
                            Id = new Guid("13bc9347-9f8b-4c86-934a-ec59c8847855"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5")
                        },
                        new
                        {
                            Id = new Guid("3b17b58c-fbdc-4efe-bb66-7340248c9caa"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe")
                        },
                        new
                        {
                            Id = new Guid("0d2c72c9-7a2f-462c-9b8b-bb12a31fbccf"),
                            FieldId = new Guid("dd53203a-0f3c-4863-9553-3287d3fdc04b"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("29b559c2-9071-44b6-aee8-640bab3a87c4"),
                            FieldId = new Guid("dd53203a-0f3c-4863-9553-3287d3fdc04b"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5270e79-44fb-4682-924f-a604a9ba276c"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d1e4407f-390c-422c-97d7-572ca512f6a9"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("62f5d92b-af9f-4e47-a3d1-8e5431c3f40b"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b6c8a191-3bb8-492f-9a8c-650624406bd8"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("8ff2c813-08a0-4753-a4cc-ed6db4776171"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("87ab9154-842c-4597-b332-8093caf1e1ca"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("ef15102a-6c09-4fde-ba88-0348d74c1d32"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68e8a41f-ce2d-4104-b676-8adf4f6ba7be"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("2af61f3f-b99e-446e-94e6-44cd28e81556"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("86cd7887-5268-4b4a-bfd3-0edcca7bfd6a"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("5e9e152b-f831-48f3-a473-291676742096"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("b9de5799-8ae2-4d33-a1aa-a6cd81598453"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("56d51ac4-6f79-4c33-ba5f-54d013761e34"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        },
                        new
                        {
                            Id = new Guid("9680b569-e257-488e-98b5-8ee8401d6ebc"),
                            IsPrefilled = true,
                            TableId = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26a44f21-feec-4fe6-949b-a6bc8b4ed450"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("d5c2a5d2-8385-4899-bfe0-534c514f31c1"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "ТЕХНИКА И ТЕХНОЛОГИИ СТРОИТЕЛЬСТВА"
                        },
                        new
                        {
                            Id = new Guid("d1e7577d-150e-452d-a7bc-679feac0248c"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "СТРОИТЕЛЬСТВО И АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("75064748-60d3-496d-ad62-887e386ccab2"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "ЭЛЕКТРО- И ТЕПЛОЭНЕРГЕТИКА"
                        },
                        new
                        {
                            Id = new Guid("cf5f886b-23ab-4f1c-a7a6-b588fe6fe275"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "ПРИКЛАДНАЯ ГЕОЛОГИЯ, ГОРНОЕ ДЕЛО, НЕФТЕГАЗОВОЕ ДЕЛО И ГЕОДЕЗИЯ"
                        },
                        new
                        {
                            Id = new Guid("ec7f108e-c629-46e2-a33d-b27ba5ac4b2b"),
                            FieldId = new Guid("db995e60-b165-423b-94db-f57892d0429d"),
                            Value = "НЕДРОПОЛЬЗОВАНИЕ И ГОРНЫЕ НАУКИ"
                        },
                        new
                        {
                            Id = new Guid("4aa9f7f7-d9e7-4f0e-a047-8d7e0071a91d"),
                            FieldId = new Guid("b729d1bd-5145-45b7-b05b-69115619f42e"),
                            Value = "Аспиранты, адъюнкты, ординаторы, ассистенты-стажеры, не имеющие ученой степени"
                        },
                        new
                        {
                            Id = new Guid("f26d5548-1530-448f-9888-79df766e85de"),
                            FieldId = new Guid("b729d1bd-5145-45b7-b05b-69115619f42e"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("8fc62bc7-2ab3-49a6-a33c-a5a02995a16b"),
                            FieldId = new Guid("b729d1bd-5145-45b7-b05b-69115619f42e"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("be3074c1-9182-4f84-80db-ff2f09fa35ce"),
                            FieldId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("4fad6c3a-1b47-44d4-ab51-b5febd84565a"),
                            FieldId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("5746d784-6806-416a-b8e5-58c294925c2a"),
                            ColumnId = new Guid("6634e9d2-4777-4eef-91ca-0d27b58e181c"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("c0ac638e-7bc4-4175-b473-42e26ef254fa"),
                            ColumnId = new Guid("6634e9d2-4777-4eef-91ca-0d27b58e181c"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("b6d2039f-01e5-4f9c-93c6-578fedec4264"),
                            ColumnId = new Guid("6634e9d2-4777-4eef-91ca-0d27b58e181c"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("37eae5d1-558f-4cb7-b335-3c7c579ea0b3"),
                            ColumnId = new Guid("2697e848-6fc7-4111-8a30-c7498d2ce9c1"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("4b1b6e1d-252c-43fc-9406-10a937cae0e3"),
                            ColumnId = new Guid("2697e848-6fc7-4111-8a30-c7498d2ce9c1"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("7b7a0f74-736c-4836-8b57-b0cf05194d06"),
                            ColumnId = new Guid("2697e848-6fc7-4111-8a30-c7498d2ce9c1"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("fbaeacae-a218-4df3-a3af-b53fdaaf2181"),
                            ColumnId = new Guid("f5e9d6cf-97cd-4962-b4c7-931ed5b73dc7"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("c4228884-5ad6-47b0-90b4-7ddae5843243"),
                            ColumnId = new Guid("f5e9d6cf-97cd-4962-b4c7-931ed5b73dc7"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("a0f757a1-0411-4067-82b0-91db2210ed62"),
                            ColumnId = new Guid("86f03f55-4b0c-46dd-9096-af06f7e14b41"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("d18a6caf-8cd0-4352-bc6d-04c35ecd8f2c"),
                            ColumnId = new Guid("86f03f55-4b0c-46dd-9096-af06f7e14b41"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("5fdc45fd-d496-4ba7-9def-78ec7ef5892b"),
                            ColumnId = new Guid("03a6984e-386e-40c3-8afd-95fc273f04ea"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("4591285c-1dd3-4519-9807-3aeec785b5dc"),
                            ColumnId = new Guid("03a6984e-386e-40c3-8afd-95fc273f04ea"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("60b43d11-6ad8-42e5-88cb-278aca09b406"),
                            ColumnId = new Guid("03a6984e-386e-40c3-8afd-95fc273f04ea"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("ef77e3ad-dba7-4a97-94b0-e69eb56cd542"),
                            ColumnId = new Guid("6975ace0-52e0-4a58-a3c9-29664e43e5de"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("b3440ba5-1aa7-4beb-ad86-f141a2caf6ad"),
                            ColumnId = new Guid("6975ace0-52e0-4a58-a3c9-29664e43e5de"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("194ef528-30a5-4f24-929d-3a1367a22aea"),
                            ColumnId = new Guid("6975ace0-52e0-4a58-a3c9-29664e43e5de"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("c212c087-3d2b-405c-bd77-d9a98bb244c0"),
                            FieldId = new Guid("fb5a6c70-fa22-4586-a991-573bb6b6a0c7"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3703821-b0da-47b6-ae64-05349c158985"),
                            EditBlockId = new Guid("fc6ae1dc-8d65-4df8-b228-3e81261ed611"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("8518c094-1195-43e1-9a73-cd224cfa29ae"),
                            EditBlockId = new Guid("fc6ae1dc-8d65-4df8-b228-3e81261ed611"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("45c1e9b8-1691-44f6-a69b-4710b2df20ec"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("4958877f-bcd1-442b-bf9f-21bd0665b1aa"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("315eee96-3f7f-4f41-9ac4-1e71137746a2"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("2d2a1c44-57ed-43eb-9446-7a5c12add509"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("59723e2f-bc6b-442f-8570-86978a47f9c0"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("95714ccd-3586-496a-b3ae-e78b286991c7"),
                            EditBlockId = new Guid("ebb88e8e-6005-4f6b-a595-c2b922171f73"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("0987da84-6c51-4262-a347-dd5edbf40c2a"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("d9bad709-4baf-4b33-9278-eea2d9bc127f"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("9a469748-a61b-4f17-9371-c8ef69e447c1"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("9c258316-aa8e-44fd-b36b-65cfeab242a5"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("5802f8be-958b-46da-baea-f6baba8f35fe"),
                            EditBlockId = new Guid("6c790915-357f-4bcb-89e9-0fdb690dc149"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e5ddfe5-155e-4378-a930-1e032ec3baa3"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("bcf46871-31eb-4ece-abf7-64e0f0a727b0"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfd42705-cfb1-46eb-9d66-e0a8e011902b"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("20bba253-9c09-4338-b813-cc1f58eb50d0"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0449aa50-1480-4fb2-b641-b2f450053764"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("49e37e57-e921-4e28-9833-bf189a361827"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("d44bee15-7fd2-4443-99a9-e86ed4d99873"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("e7962e03-32b8-4fd2-85bd-85bfb96c2c19"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
