// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240816022108_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("09b36f3d-9e08-4c9d-9f7c-2e5e78c7896b"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            EditBlocksId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            EditBlocksId = new Guid("09b36f3d-9e08-4c9d-9f7c-2e5e78c7896b"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("b51f8665-833e-4de6-aa01-56ea3f3c7d76"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("46c2218e-26cb-4796-88c8-cf20b8d3708d"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("b3f287d1-a3d9-4bc3-92f2-0379742c37ed"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("a73fc8a0-9b30-47df-80a1-369be00e62e2"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("a1ddb78e-3582-4529-b452-56e5fc44a06d"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("5883dfa4-f49d-40b6-9193-11d65c24a325"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("4c34ffea-d401-44bc-b93b-cbdbd9bbdf62"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("403ec031-2945-4555-a023-b1712d5e906f"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("c033f5aa-3bce-4621-95e1-5ef37ce4274f"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("ecea35a0-fa3e-43a2-91fe-b1fdebb2d493"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("69f8ef0e-4bd2-4406-8f90-fefefeeb5830"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("cddbdb77-fedd-4c44-8e83-581f83482553"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("1d989ace-9259-4dd7-930e-371d22fb8288"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("9136481f-ccb3-4067-bf4d-854f7aacc789"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("d260c8b6-1104-4c2c-af3d-b712c429753e"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("22046c92-aa2f-4f4a-b887-89896e7b9d31"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("cded8e03-9466-42b1-a81e-0d51d6b1b6f9"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("bd8161ad-c681-43e6-9a20-53bc86e53383"),
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35")
                        },
                        new
                        {
                            FieldsId = new Guid("af52c327-e339-4d2e-b019-327f854fad04"),
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2")
                        },
                        new
                        {
                            FieldsId = new Guid("1a2d2418-aa5a-4672-9804-f2cce7a69bec"),
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2")
                        },
                        new
                        {
                            FieldsId = new Guid("00518d78-5b6a-4ff7-941a-424ae4b194d4"),
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2")
                        },
                        new
                        {
                            FieldsId = new Guid("f27f268e-2ace-466f-9e5b-209e9235368a"),
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2")
                        },
                        new
                        {
                            FieldsId = new Guid("78cd04a3-9772-4825-bc16-eb7efd5c860f"),
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2")
                        },
                        new
                        {
                            FieldsId = new Guid("22046c92-aa2f-4f4a-b887-89896e7b9d31"),
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf")
                        },
                        new
                        {
                            FieldsId = new Guid("22046c92-aa2f-4f4a-b887-89896e7b9d31"),
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7")
                        },
                        new
                        {
                            FieldsId = new Guid("8dabc025-41c0-4da0-b642-e6c6446bdd76"),
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7")
                        },
                        new
                        {
                            FieldsId = new Guid("c3b2bdaa-fbd1-427c-80c1-37c92413cdca"),
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            TablesId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            TablesId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            TablesId = new Guid("e8506199-7513-465a-a443-8e3058549eeb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            TablesId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            TablesId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            TablesId = new Guid("d7f0c59a-77b0-4bd8-941e-fb464d157034")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            TablesId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            TablesId = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            TablesId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            TablesId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            TablesId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            TablesId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            TablesId = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            TablesId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            TablesId = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cbeaf8cb-4950-4051-8347-d3a3066d0105"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bd76bc2e-76bf-4c7b-b8de-c9f03cf42870"),
                            TracksId = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cbeaf8cb-4950-4051-8347-d3a3066d0105"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bd76bc2e-76bf-4c7b-b8de-c9f03cf42870"),
                            TracksId = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("aa51a001-4954-4a35-afb1-cd2477b77a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("96ba47fd-8d15-460a-9bba-dd7eb91720da")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("7565a6b5-26a3-4e47-b074-d5064c5bd529")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("41f2614a-4f79-47bd-878c-5ae9c3c75eaa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("6b035f03-a141-4cce-82c7-6c4f87fdfe47")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("6fbbe767-6ed5-415e-88f1-e491658b9104")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            MarksId = new Guid("5c9998e1-01f5-4746-90de-fe2245b97934")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            MarksId = new Guid("4e188757-2535-4c55-a9f9-e88e0e55e600")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            MarksId = new Guid("adf0d452-e66e-4ad7-aa97-829dc12a00c3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            MarksId = new Guid("6df5e09e-a8fb-4bfb-948d-fcc22bc01e47")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            MarksId = new Guid("20601223-20d4-4ab0-b989-e3fca863fba4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            MarksId = new Guid("4a108bcc-9740-4f6f-b028-3d523d1c43b5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            MarksId = new Guid("006c6097-9e4d-411d-bb01-7ff4a9d45946")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            MarksId = new Guid("dd818049-835b-4a87-837a-91e5e6a1e44d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            MarksId = new Guid("a14c0ea9-4159-4d65-800f-e9cdb17191b6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("006c6097-9e4d-411d-bb01-7ff4a9d45946")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("dd818049-835b-4a87-837a-91e5e6a1e44d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("e725e89e-9184-4425-8755-88186e0d3b12")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("8807802f-503d-44e7-81e4-2cc6ee0f2d29")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("5ef1f820-09b0-4394-97be-07ddd989abb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("ebcb19a8-534a-48a7-bd0d-b01c492ba80b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("0d5962fd-6f41-4be9-93f8-14b01782317b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("640e0c13-f843-461b-806e-84b793ef09e5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            MarksId = new Guid("4db020b6-2618-4da6-8fde-57a325e87933")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            MarksId = new Guid("a14c0ea9-4159-4d65-800f-e9cdb17191b6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            MarksId = new Guid("879e6952-0c18-4469-b834-656f7ba1b69e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            MarksId = new Guid("203e3765-60e1-46be-a156-69ecac152e6d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            MarksId = new Guid("0338ae3f-0481-4905-a456-650857c2d35e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            MarksId = new Guid("e9eb147c-2736-4853-9573-454f4374945f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27ce07cb-37f3-4ea9-ab54-38792c1efae6"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("9f5bcba1-e0dd-44c3-b1e9-f2d967b55265"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("6f0cea62-f545-4b06-af03-c46b300252a4"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("c275e871-8e68-4efa-b0eb-3fa99ffcb014"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("6a4c3347-9a34-4a7f-a2dc-402a65ea03a6"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("db5d24f8-4534-4cdc-a58a-f162532d97b2"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191")
                        },
                        new
                        {
                            Id = new Guid("25f7581c-d209-4b7d-8675-1944736b6c29"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191")
                        },
                        new
                        {
                            Id = new Guid("27ba2efe-5665-413e-a585-27762fb759ed"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("29e67506-d785-470a-acbf-1e75fe7f01c5"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("459879b0-ed70-43b3-9631-bc431f59e90e"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("7712ed57-068e-4349-9e8e-26d1f3037cc8"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("2a2d1c68-dc79-4102-a2fe-d89f7b11378d"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("226b0725-0677-477f-8dbc-22547e7ebc17"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("df74e95a-14c5-4596-a0dc-7113d7827564"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("68fe9026-089f-45cc-897c-69d0fbdc47bf"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("3a468656-f5cc-488f-827f-77ccac823170"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("e5a84d43-a409-40c8-8bb6-4f6296ad87ef"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("902da042-f19e-4461-926b-5f3429bc7f6f"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("e8506199-7513-465a-a443-8e3058549eeb")
                        },
                        new
                        {
                            Id = new Guid("615cdd2a-ae6e-43b4-8516-583d73b11afb"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("e8506199-7513-465a-a443-8e3058549eeb")
                        },
                        new
                        {
                            Id = new Guid("e5b60313-2d9c-4801-9802-de9bd47958fa"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("e8506199-7513-465a-a443-8e3058549eeb")
                        },
                        new
                        {
                            Id = new Guid("25b3d9bd-80f7-4f4d-ade6-8776e35c337b"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("e8506199-7513-465a-a443-8e3058549eeb")
                        },
                        new
                        {
                            Id = new Guid("c8fec2a7-ae96-4650-aa18-add9ddb9026b"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("0f0575b0-9d59-4015-880a-4f39c7e03b33"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("f461a335-15dc-4b07-8ba3-47702c811846"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("3c3743d3-945a-4014-88fb-9173ff0d0eaf"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("05314802-cafc-48ab-8b7d-0704a274d314"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("6f4b8ed0-c337-4bc7-9f83-387f3b197372"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("5ae7f664-d450-4d8b-8b78-f28aaba83dd1"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("d7f0c59a-77b0-4bd8-941e-fb464d157034")
                        },
                        new
                        {
                            Id = new Guid("d56b5f5a-aaca-432f-a786-c75651d8c172"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("d7f0c59a-77b0-4bd8-941e-fb464d157034")
                        },
                        new
                        {
                            Id = new Guid("aaf2f455-109a-461e-b7de-b8bb042a3adb"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            Id = new Guid("bf0869cb-9278-45c5-97fb-79a4d799b225"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            Id = new Guid("aa4a6d07-0e49-4203-943d-6c5cf0b0de39"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            Id = new Guid("7f268a5f-e9a9-49f8-95dd-f8b291f04957"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            Id = new Guid("736607b1-22f6-4822-9a85-ceca24533111"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            Id = new Guid("69767641-d896-44d9-b343-c83983cb82a0"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            Id = new Guid("853b2d86-9534-4b6b-b243-f018d92d7f40"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            Id = new Guid("04672ce1-575b-4ca1-9376-f9d507e8fb34"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            Id = new Guid("906db342-081d-4704-b7ba-162b490b4e17"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("22fadc02-39ea-4217-9c84-a6328fa2a9bf"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("5140d657-a366-40ab-a61d-c631e23f23d5"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("89eb2188-f78d-4d64-a8eb-9b4c07789103"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("58e9ad61-01c5-4669-883c-34ef72f3dbc5"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("15658f87-1ff6-4f3d-8ef9-b1c97fc0e684"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("2401da4d-fb28-49b2-935b-4ab14a4446f2"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("16d41ace-da6c-4d0f-ab81-a0f29d55d981"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("f4b969ff-d2e8-4934-8543-0f54a72e562c"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("7f1a6af5-e9fa-45ea-9b74-bf2eb47626ab"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("835b2d77-d80b-43a7-b3d3-10d4d262076c"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            Id = new Guid("522d08a1-e8a2-4aec-836d-7305d531572f"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            Id = new Guid("6e6d49c7-f6d3-4be5-b4cf-28074095ebe2"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            Id = new Guid("4672ac3c-c877-4405-95a4-6206cf08c84e"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            Id = new Guid("38299785-f8a5-4e38-90f2-ed3526ccd2ff"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c")
                        },
                        new
                        {
                            Id = new Guid("ed1fe1f4-4e8b-4e65-be22-800d1f775eae"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c")
                        },
                        new
                        {
                            Id = new Guid("9ae035e4-2b55-4c0a-b14b-e5806e61a775"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("09b36f3d-9e08-4c9d-9f7c-2e5e78c7896b"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b51f8665-833e-4de6-aa01-56ea3f3c7d76"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Трек конкурса",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("46c2218e-26cb-4796-88c8-cf20b8d3708d"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "ФИО",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b3f287d1-a3d9-4bc3-92f2-0379742c37ed"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Дата рождения",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("a73fc8a0-9b30-47df-80a1-369be00e62e2"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Домашний адрес",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a1ddb78e-3582-4529-b452-56e5fc44a06d"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Контактный телефон",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("5883dfa4-f49d-40b6-9193-11d65c24a325"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Электронная почта",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("4c34ffea-d401-44bc-b93b-cbdbd9bbdf62"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Место работы/учебы",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("403ec031-2945-4555-a023-b1712d5e906f"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Адрес работы/учебы",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("c033f5aa-3bce-4621-95e1-5ef37ce4274f"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("ecea35a0-fa3e-43a2-91fe-b1fdebb2d493"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Должность",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("69f8ef0e-4bd2-4406-8f90-fefefeeb5830"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("cddbdb77-fedd-4c44-8e83-581f83482553"),
                            EditBlockId = new Guid("3b4d126f-02f8-4bd7-ba72-4ae5be4b845f"),
                            Name = "Дополнительная информация",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("1d989ace-9259-4dd7-930e-371d22fb8288"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Направление конкурса",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("9136481f-ccb3-4067-bf4d-854f7aacc789"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Категория участника конкурса",
                            Number = 14
                        },
                        new
                        {
                            Id = new Guid("d260c8b6-1104-4c2c-af3d-b712c429753e"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Название конкрусной работы",
                            Number = 15
                        },
                        new
                        {
                            Id = new Guid("22046c92-aa2f-4f4a-b887-89896e7b9d31"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Ученое звание",
                            Number = 16
                        },
                        new
                        {
                            Id = new Guid("cded8e03-9466-42b1-a81e-0d51d6b1b6f9"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Ученая степень",
                            Number = 17
                        },
                        new
                        {
                            Id = new Guid("bd8161ad-c681-43e6-9a20-53bc86e53383"),
                            EditBlockId = new Guid("52ee2861-7adb-4800-a683-a677396af9ba"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18
                        },
                        new
                        {
                            Id = new Guid("af52c327-e339-4d2e-b019-327f854fad04"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("1a2d2418-aa5a-4672-9804-f2cce7a69bec"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Защитившиеся доктора наук",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("00518d78-5b6a-4ff7-941a-424ae4b194d4"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Защитившиеся бакалавры",
                            Number = 21
                        },
                        new
                        {
                            Id = new Guid("f27f268e-2ace-466f-9e5b-209e9235368a"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Защитившиеся специалисты",
                            Number = 22
                        },
                        new
                        {
                            Id = new Guid("78cd04a3-9772-4825-bc16-eb7efd5c860f"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Защитившиеся магистры",
                            Number = 23
                        },
                        new
                        {
                            Id = new Guid("8dabc025-41c0-4da0-b642-e6c6446bdd76"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24
                        },
                        new
                        {
                            Id = new Guid("c3b2bdaa-fbd1-427c-80c1-37c92413cdca"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Защитившиеся доктора наук",
                            Number = 25
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa51a001-4954-4a35-afb1-cd2477b77a42"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("96ba47fd-8d15-460a-9bba-dd7eb91720da"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b")
                        },
                        new
                        {
                            Id = new Guid("7565a6b5-26a3-4e47-b074-d5064c5bd529"),
                            FieldId = new Guid("78cd04a3-9772-4825-bc16-eb7efd5c860f"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("41f2614a-4f79-47bd-878c-5ae9c3c75eaa"),
                            FieldId = new Guid("af52c327-e339-4d2e-b019-327f854fad04"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("6b035f03-a141-4cce-82c7-6c4f87fdfe47"),
                            FieldId = new Guid("1a2d2418-aa5a-4672-9804-f2cce7a69bec"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("6fbbe767-6ed5-415e-88f1-e491658b9104"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80")
                        },
                        new
                        {
                            Id = new Guid("5c9998e1-01f5-4746-90de-fe2245b97934"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a0374092-fd69-4b5d-9edd-680717072291")
                        },
                        new
                        {
                            Id = new Guid("4e188757-2535-4c55-a9f9-e88e0e55e600"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("adf0d452-e66e-4ad7-aa97-829dc12a00c3"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("6df5e09e-a8fb-4bfb-948d-fcc22bc01e47"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("20601223-20d4-4ab0-b989-e3fca863fba4"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7")
                        },
                        new
                        {
                            Id = new Guid("4a108bcc-9740-4f6f-b028-3d523d1c43b5"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("d7f0c59a-77b0-4bd8-941e-fb464d157034")
                        },
                        new
                        {
                            Id = new Guid("006c6097-9e4d-411d-bb01-7ff4a9d45946"),
                            FieldId = new Guid("22046c92-aa2f-4f4a-b887-89896e7b9d31"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("dd818049-835b-4a87-837a-91e5e6a1e44d"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51")
                        },
                        new
                        {
                            Id = new Guid("a14c0ea9-4159-4d65-800f-e9cdb17191b6"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191")
                        },
                        new
                        {
                            Id = new Guid("e725e89e-9184-4425-8755-88186e0d3b12"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4")
                        },
                        new
                        {
                            Id = new Guid("8807802f-503d-44e7-81e4-2cc6ee0f2d29"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("5ef1f820-09b0-4394-97be-07ddd989abb7"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c")
                        },
                        new
                        {
                            Id = new Guid("ebcb19a8-534a-48a7-bd0d-b01c492ba80b"),
                            FieldId = new Guid("8dabc025-41c0-4da0-b642-e6c6446bdd76"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("0d5962fd-6f41-4be9-93f8-14b01782317b"),
                            FieldId = new Guid("c3b2bdaa-fbd1-427c-80c1-37c92413cdca"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("640e0c13-f843-461b-806e-84b793ef09e5"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("4db020b6-2618-4da6-8fde-57a325e87933"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89")
                        },
                        new
                        {
                            Id = new Guid("879e6952-0c18-4469-b834-656f7ba1b69e"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74")
                        },
                        new
                        {
                            Id = new Guid("203e3765-60e1-46be-a156-69ecac152e6d"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c")
                        },
                        new
                        {
                            Id = new Guid("0338ae3f-0481-4905-a456-650857c2d35e"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("e9eb147c-2736-4853-9573-454f4374945f"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb3a7b6b-03d3-4afe-b598-c6c2982e2f35"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("08590f39-3c58-45f0-9e9a-5b1b1d92e6d2"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("bcb2d10d-820d-45bf-905c-56b3db405ede"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("67860afa-07f4-45d4-a4e0-e9ee33bca4bf"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1b6cab68-9db8-42a4-8efb-a4c237f1ded7"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("bea1a3d8-583b-4db7-9b9e-b1b6a6fc97ac"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("cbeaf8cb-4950-4051-8347-d3a3066d0105"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("bd76bc2e-76bf-4c7b-b8de-c9f03cf42870"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a0a27ab-3b75-4868-b8aa-66959a030e51"),
                            EditBlockId = new Guid("09b36f3d-9e08-4c9d-9f7c-2e5e78c7896b"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b2832943-c7a8-4591-87b0-1b08b95ac191"),
                            EditBlockId = new Guid("09b36f3d-9e08-4c9d-9f7c-2e5e78c7896b"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("5045e727-83cd-4297-9cd1-f8d029e0ed6b"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b5ff80f5-b1cd-4a2a-98b7-645cc31c3f80"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("e8506199-7513-465a-a443-8e3058549eeb"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("03ed6969-7ec6-4f16-a8bc-990a13372de7"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("d7f0c59a-77b0-4bd8-941e-fb464d157034"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("a0374092-fd69-4b5d-9edd-680717072291"),
                            EditBlockId = new Guid("8eb01d0e-5630-4578-ac7c-e0ad69e970b9"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("922cb0ed-159b-4ba4-b391-06b5bcb225d4"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("c3e32940-4e64-4437-85c8-2d57bffcda1c"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("347910a6-123a-4b67-8c6c-88f921c84c89"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("582158d6-69d2-485f-8d0b-b8fd43c14e74"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("d8a7ead1-0693-4582-886c-212559f2a72c"),
                            EditBlockId = new Guid("f377852b-8f58-4948-9b0f-dcdd6fa50c6f"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e53511-cf51-4ae8-89a6-c1f20ede291a"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a9602a44-6e7e-4984-8f26-7a77399e0860"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f089109-3eef-47f5-8d38-67dc33a60423"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("946916d5-1d57-4605-b98b-8a3502b0f40f"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
