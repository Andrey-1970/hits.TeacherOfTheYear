// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240904141436_AddLastEmailSentDateToApplicationUser")]
    partial class AddLastEmailSentDateToApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5c7954fe-4de3-4e02-b50a-28a7913d1494"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5c7954fe-4de3-4e02-b50a-28a7913d1494"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("5e1f62a7-077d-4be2-873d-1f25fcb28e49"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("2f716f8b-5530-4028-b45c-c1d9e2caefdc"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("3ba4d37c-554a-497a-ba6d-c28bf30a5d2d"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("0a7f40a6-bec6-4fbe-9e1b-c838b3f05b01"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("bc37c186-7915-4ded-9d01-97ad41fed6f7"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("514ff213-8435-4250-ab50-a7ffc827615f"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("37b7b6c1-a0d9-43d7-b085-765aef60b4de"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("b7ab48b3-3bca-4a34-bd35-dfcf37a20e56"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("c607cc48-08ff-4d77-a964-b09e7d519958"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("15ebde32-243b-461e-aff6-d99289966b51"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("00fc07ae-ee3b-4170-ac2e-92a884f93af8"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("4c7f221f-861d-43e3-adb7-b71e571fba85"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("1e32053a-1da4-485e-8f79-e33e1acea171"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("a9893f83-e3a4-4838-a737-cc7f3fc23b1a"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("67d8bf97-d21b-4201-b24b-4d3120125188"),
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873")
                        },
                        new
                        {
                            FieldsId = new Guid("aad9c6f3-c4a6-45f1-9d27-880c320bfdf8"),
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c")
                        },
                        new
                        {
                            FieldsId = new Guid("d1c7d4f9-6a7c-4026-9344-8f57f89941c2"),
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c")
                        },
                        new
                        {
                            FieldsId = new Guid("3b46b9cf-1eeb-4c55-9b63-74c351e0baee"),
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c")
                        },
                        new
                        {
                            FieldsId = new Guid("bd012f39-f090-4e02-9b4d-74af749e26ee"),
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c")
                        },
                        new
                        {
                            FieldsId = new Guid("43a085ca-f3f0-4e35-972b-2c6aa03caf60"),
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c")
                        },
                        new
                        {
                            FieldsId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2")
                        },
                        new
                        {
                            FieldsId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8")
                        },
                        new
                        {
                            FieldsId = new Guid("d1f6648a-1ef0-4d1c-a04c-730c8ed6ecf5"),
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8")
                        },
                        new
                        {
                            FieldsId = new Guid("c9631aa3-d248-49ef-bdff-caf3f5ca9c87"),
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            TablesId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            TablesId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            TablesId = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            TablesId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            TablesId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            TablesId = new Guid("0b93bf18-38bb-4f00-844a-1631b6ec3da1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            TablesId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            TablesId = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            TablesId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            TablesId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            TablesId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            TablesId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            TablesId = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            TablesId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            TablesId = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f20f455-02c2-4732-89e8-bd4fc906e3c0"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8db424c-55fd-4139-8526-7a6bb3e7851d"),
                            TracksId = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f20f455-02c2-4732-89e8-bd4fc906e3c0"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8db424c-55fd-4139-8526-7a6bb3e7851d"),
                            TracksId = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("ea8d3556-6730-4140-8c7f-e0c1d9f127c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("eda7c9c2-0016-4cec-b724-feabadcf6141")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("ede72596-4da4-4261-8294-0d1d6a9c88c7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("5b6cad43-01bd-4d93-ac8c-38a09ad735ca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("48b8ce69-8ee6-4b8d-9018-467664160cd4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("8dd7c90d-3627-4d47-9677-7ab750e64dc3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            MarksId = new Guid("8017a83f-cdcd-4fb6-96ee-9b378986b2f5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            MarksId = new Guid("3b444141-0d8c-4493-a6a6-8993eb6ba2a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            MarksId = new Guid("b8243114-17b0-4b55-aca7-24a828b44eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            MarksId = new Guid("18615aeb-b454-4868-85e9-5797538ed87a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            MarksId = new Guid("c5e96a3f-5994-409f-84d9-d793a625f10a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            MarksId = new Guid("7bd64436-8fee-4e38-a1c3-47191850a380")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            MarksId = new Guid("5f38e6fa-cca5-4c4a-9040-f596829e9497")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            MarksId = new Guid("9e45928e-8164-4c60-9d60-b49448eaf3b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            MarksId = new Guid("c213528e-9bf0-42e8-87dc-9859fb9c3f06")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("5f38e6fa-cca5-4c4a-9040-f596829e9497")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("9e45928e-8164-4c60-9d60-b49448eaf3b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("289dd3e9-0c05-4128-9943-54c63a9a597e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("cd1dc253-c7a2-4f31-9347-aa978d9cf8d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("3f37876e-a2ee-430d-b075-09e4e01ced6c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("e2c5b831-fd49-4917-9816-6d47fd719f90")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("748dcc3d-ced5-44da-a574-4a91b1310a05")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("eb282122-e827-4e26-af18-325bbe0766b8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            MarksId = new Guid("cd0e4c54-0e79-4ba7-bc92-26899e10cff6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            MarksId = new Guid("c213528e-9bf0-42e8-87dc-9859fb9c3f06")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            MarksId = new Guid("b4d1a35b-1adf-45e6-b024-ecc5edc5f4aa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            MarksId = new Guid("95649e51-a165-47b1-b0f8-8b097cd838d0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            MarksId = new Guid("387e4122-1139-4d62-846e-bbac8ecf9a5b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            MarksId = new Guid("ee91728c-e171-4983-b240-012b3c619675")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54e3326a-caad-44eb-b4ff-dd9640369d1a"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("df34a8d2-b2b4-4951-8b81-0b81ef22668c"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("777327ec-3094-4b98-ad47-1cca1f089d3e"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("1f8e9528-98b3-41bc-9534-1458018194f2"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("b73a7491-6973-4a9b-a5f7-a6431d936972"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("99ec6ad2-4d4b-418e-9029-42787a8351a6"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("cef066a7-38c6-4f27-a96a-0ac87c171f6c"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("4f5c4fc9-7b31-4053-a552-1313e032573a"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("464f2f11-cf44-446d-9d58-aa86aefc4da9"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("92c0f73a-3885-4bbb-99c8-6a1fbc0a8bb4"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("0edeb934-3423-4d91-8fca-cb0493b6c353"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("feedcafb-0c7f-4cec-a6b0-e05af1c85b05"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("63eb8648-25c2-48c5-8b9e-49b3e8cb8861"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("04f93fac-064e-4826-bab9-a91d223999f9"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("3302c50f-3652-49de-88f1-a9916a0be733"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("c1c6c9d0-a21d-4832-9707-41435dffeb32"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("3e9cb301-3c7a-4b8e-b4a1-40ccba124c80"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("afd02925-e8ee-4eec-9e16-33cd7a9787f0"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("55fd0d1d-4532-4445-8331-3f6eea5a1e0a"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("97058987-6a0e-470c-9f45-16b2263bcfaa"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("5e7c7edb-f268-47af-be14-a4136d4e6e02"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("b30201ef-8d45-4940-856b-d689eb07446b"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("f7827f0e-94cf-4549-838b-3918619fbfdc"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("5dd8eeca-b357-4fb3-bad2-b198a48f1dfd"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("825f3c89-8e6e-4f8a-9c2e-c2999b91aae7"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("b581361f-3371-434f-878e-a5da5b440e15"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("7aa56c88-0c1c-4740-87ad-27bed2fa1f39")
                        },
                        new
                        {
                            Id = new Guid("16a3266c-40c4-4351-8df5-1efaf3468474"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("3e25e19f-6798-42ac-b619-960cc5305dd6"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("0b93bf18-38bb-4f00-844a-1631b6ec3da1"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("2a83b5be-2523-4805-8ca4-a4d11e8bd2fd"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("0b93bf18-38bb-4f00-844a-1631b6ec3da1"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("4488fbc6-073f-4d6b-b9bf-df8726dc70f7"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("a79db530-9a86-4797-8155-c5836e718bca"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("c19b80dd-9428-4c34-ac6a-7a7386f72b38"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("44331387-0714-4808-886f-2e9a24e4f99e"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("65b1a474-81ac-4058-a53e-70ab52daae57"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("f390b27f-0bc4-4f5a-846b-0d36f53d8d33"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("ffa47711-6897-4d9f-99f1-2e3de8eff27e"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("7f376237-660e-4ebc-b7d2-077688e1d2b6"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("f3910695-535e-489e-a5eb-9d5db9ad417f"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("e4cb315f-e615-47f0-94af-255adfbbec3d"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("c20a72a2-b55e-47dd-b7e9-46d613ed432f"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("87950d2f-2ac6-4fa9-b5bc-342f2afcbcf8"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("7e7073b0-b9b8-4522-97c7-becef935e221"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("cf1049ef-0ebd-4a8d-b35a-f917fbf6a1e7"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("9d1243bb-aa12-4082-9dea-e06bbb4602fa"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("e51edb87-74e9-43e6-a428-01ddc4004549"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("23a86912-cea3-46af-8ae4-ee8901c086a9"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("508d1d33-dbf5-4d21-9ca7-3240cb5301b2"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("88a0a28a-7abc-4bff-a5e9-0d8464a6e86f"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("d1164ef2-3275-40bc-aa7b-6fdeb670fc19"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("d6d1ad37-9266-421f-a170-eb20cece8883"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("3fee8691-e925-45a6-be5d-33d9c70d4fce"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("9789cbb1-49c6-4d27-be49-74e93cbd7e69"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("7e017f64-12b0-46ce-9b3b-8c5e7d34637e"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("6d4937bc-93ce-472e-adf1-10327f6424a9"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1"),
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("5c7954fe-4de3-4e02-b50a-28a7913d1494"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e1f62a7-077d-4be2-873d-1f25fcb28e49"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("2f716f8b-5530-4028-b45c-c1d9e2caefdc"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("b1f824fe-4ae7-48de-addc-d6111b1f04c8")
                        },
                        new
                        {
                            Id = new Guid("3ba4d37c-554a-497a-ba6d-c28bf30a5d2d"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("0a7f40a6-bec6-4fbe-9e1b-c838b3f05b01"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("bc37c186-7915-4ded-9d01-97ad41fed6f7"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("514ff213-8435-4250-ab50-a7ffc827615f"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("37b7b6c1-a0d9-43d7-b085-765aef60b4de"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("b7ab48b3-3bca-4a34-bd35-dfcf37a20e56"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("c607cc48-08ff-4d77-a964-b09e7d519958"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("15ebde32-243b-461e-aff6-d99289966b51"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("00fc07ae-ee3b-4170-ac2e-92a884f93af8"),
                            EditBlockId = new Guid("7c8cddf5-1ca9-48ad-8ee9-efbb5c8b6da2"),
                            Name = "Дополнительная информация",
                            Number = 11,
                            Placeholder = "Пример",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Направление конкурса",
                            Number = 12,
                            Placeholder = "Выберите направление конкурса",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("4c7f221f-861d-43e3-adb7-b71e571fba85"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 13,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("1e32053a-1da4-485e-8f79-e33e1acea171"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Название конкрусной работы",
                            Number = 14,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Ученое звание",
                            Number = 15,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("a9893f83-e3a4-4838-a737-cc7f3fc23b1a"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Ученая степень",
                            Number = 16,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("67d8bf97-d21b-4201-b24b-4d3120125188"),
                            EditBlockId = new Guid("c70a6377-6f01-4e51-9712-ae0091c20735"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 17,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9")
                        },
                        new
                        {
                            Id = new Guid("aad9c6f3-c4a6-45f1-9d27-880c320bfdf8"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            Name = "Защитившиеся кадидаты наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("d1c7d4f9-6a7c-4026-9344-8f57f89941c2"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Защитившиеся доктора наук",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("3b46b9cf-1eeb-4c55-9b63-74c351e0baee"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            Name = "Защитившиеся бакалавры",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("bd012f39-f090-4e02-9b4d-74af749e26ee"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Защитившиеся специалисты",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("43a085ca-f3f0-4e35-972b-2c6aa03caf60"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Защитившиеся магистры",
                            Number = 22,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("d1f6648a-1ef0-4d1c-a04c-730c8ed6ecf5"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            Name = "Защитившиеся кандидаты наук",
                            Number = 23,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        },
                        new
                        {
                            Id = new Guid("c9631aa3-d248-49ef-bdff-caf3f5ca9c87"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Защитившиеся доктора наук",
                            Number = 24,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("949950d2-f19f-4dde-92b5-7459198f5977")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea8d3556-6730-4140-8c7f-e0c1d9f127c1"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775")
                        },
                        new
                        {
                            Id = new Guid("eda7c9c2-0016-4cec-b724-feabadcf6141"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775")
                        },
                        new
                        {
                            Id = new Guid("ede72596-4da4-4261-8294-0d1d6a9c88c7"),
                            FieldId = new Guid("43a085ca-f3f0-4e35-972b-2c6aa03caf60"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("5b6cad43-01bd-4d93-ac8c-38a09ad735ca"),
                            FieldId = new Guid("aad9c6f3-c4a6-45f1-9d27-880c320bfdf8"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("48b8ce69-8ee6-4b8d-9018-467664160cd4"),
                            FieldId = new Guid("d1c7d4f9-6a7c-4026-9344-8f57f89941c2"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8dd7c90d-3627-4d47-9677-7ab750e64dc3"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b")
                        },
                        new
                        {
                            Id = new Guid("8017a83f-cdcd-4fb6-96ee-9b378986b2f5"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce")
                        },
                        new
                        {
                            Id = new Guid("3b444141-0d8c-4493-a6a6-8993eb6ba2a1"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d")
                        },
                        new
                        {
                            Id = new Guid("b8243114-17b0-4b55-aca7-24a828b44eb7"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d")
                        },
                        new
                        {
                            Id = new Guid("18615aeb-b454-4868-85e9-5797538ed87a"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d")
                        },
                        new
                        {
                            Id = new Guid("c5e96a3f-5994-409f-84d9-d793a625f10a"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d")
                        },
                        new
                        {
                            Id = new Guid("7bd64436-8fee-4e38-a1c3-47191850a380"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("0b93bf18-38bb-4f00-844a-1631b6ec3da1")
                        },
                        new
                        {
                            Id = new Guid("5f38e6fa-cca5-4c4a-9040-f596829e9497"),
                            FieldId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("9e45928e-8164-4c60-9d60-b49448eaf3b2"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("3e212b16-db45-43f4-91a3-301516b860b0")
                        },
                        new
                        {
                            Id = new Guid("c213528e-9bf0-42e8-87dc-9859fb9c3f06"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0")
                        },
                        new
                        {
                            Id = new Guid("289dd3e9-0c05-4128-9943-54c63a9a597e"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d")
                        },
                        new
                        {
                            Id = new Guid("cd1dc253-c7a2-4f31-9347-aa978d9cf8d1"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e")
                        },
                        new
                        {
                            Id = new Guid("3f37876e-a2ee-430d-b075-09e4e01ced6c"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e")
                        },
                        new
                        {
                            Id = new Guid("e2c5b831-fd49-4917-9816-6d47fd719f90"),
                            FieldId = new Guid("d1f6648a-1ef0-4d1c-a04c-730c8ed6ecf5"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("748dcc3d-ced5-44da-a574-4a91b1310a05"),
                            FieldId = new Guid("c9631aa3-d248-49ef-bdff-caf3f5ca9c87"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("eb282122-e827-4e26-af18-325bbe0766b8"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe")
                        },
                        new
                        {
                            Id = new Guid("cd0e4c54-0e79-4ba7-bc92-26899e10cff6"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe")
                        },
                        new
                        {
                            Id = new Guid("b4d1a35b-1adf-45e6-b024-ecc5edc5f4aa"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0")
                        },
                        new
                        {
                            Id = new Guid("95649e51-a165-47b1-b0f8-8b097cd838d0"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1")
                        },
                        new
                        {
                            Id = new Guid("387e4122-1139-4d62-846e-bbac8ecf9a5b"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("ee91728c-e171-4983-b240-012b3c619675"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a778d3ea-0f14-476b-a871-1d7959a98873"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3f79240b-e499-4fc8-99c1-31ffe16b445c"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("eb46bd9a-5ba8-4bae-999b-cb811d2c68ba"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8c61bb87-2a54-4a56-98d0-a85055e185f2"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("bffe2502-8592-4cb6-8d37-fbea84f37bf8"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b1dee06a-4188-492c-84ce-7913f372c685"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("3f20f455-02c2-4732-89e8-bd4fc906e3c0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("d8db424c-55fd-4139-8526-7a6bb3e7851d"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80e092b5-39c5-4733-ab39-ff634b94090a"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("92979e51-1297-4bda-8576-95acf7d64475"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "ТЕХНИКА И ТЕХНОЛОГИИ СТРОИТЕЛЬСТВА"
                        },
                        new
                        {
                            Id = new Guid("bc3e1a44-1669-46e7-9084-d52f8344c779"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "СТРОИТЕЛЬСТВО И АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("8b1896fd-263c-414e-94e7-4c9e96f30892"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "ЭЛЕКТРО- И ТЕПЛОЭНЕРГЕТИКА"
                        },
                        new
                        {
                            Id = new Guid("7547586c-4674-44f2-913a-319d2cd04016"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "ПРИКЛАДНАЯ ГЕОЛОГИЯ, ГОРНОЕ ДЕЛО, НЕФТЕГАЗОВОЕ ДЕЛО И ГЕОДЕЗИЯ"
                        },
                        new
                        {
                            Id = new Guid("6852cb7d-df71-4873-8ed3-7ce934dee07a"),
                            FieldId = new Guid("2a4b4b10-eacc-46f9-b8c8-9e8f066609eb"),
                            Value = "НЕДРОПОЛЬЗОВАНИЕ И ГОРНЫЕ НАУКИ"
                        },
                        new
                        {
                            Id = new Guid("1e5b7e40-5c0f-4bb3-8df2-943cc1399600"),
                            FieldId = new Guid("4c7f221f-861d-43e3-adb7-b71e571fba85"),
                            Value = "Аспиранты, адъюнкты, ординаторы, ассистенты-стажеры, не имеющие ученой степени"
                        },
                        new
                        {
                            Id = new Guid("dfa33f5b-63f3-41fa-b38b-7f33bbf2b732"),
                            FieldId = new Guid("4c7f221f-861d-43e3-adb7-b71e571fba85"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("b962f608-875a-4be8-81b3-40983d3712d3"),
                            FieldId = new Guid("4c7f221f-861d-43e3-adb7-b71e571fba85"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("464faf9a-c56f-474f-8df4-818ad6b9837d"),
                            FieldId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("1ddae28a-cb38-429a-b53a-1f5650b316fa"),
                            FieldId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("eb16f173-fd2c-4161-9311-8778fb147845"),
                            ColumnId = new Guid("777327ec-3094-4b98-ad47-1cca1f089d3e"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("ab910530-cc8f-4db1-a37a-0f984df84c0c"),
                            ColumnId = new Guid("777327ec-3094-4b98-ad47-1cca1f089d3e"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("78590a4a-04ed-45ec-9ad4-f49075462492"),
                            ColumnId = new Guid("777327ec-3094-4b98-ad47-1cca1f089d3e"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ec6e176b-43d7-41c5-b7b6-87f6ab94e01b"),
                            ColumnId = new Guid("b30201ef-8d45-4940-856b-d689eb07446b"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("e4024ff8-a688-43f2-acea-3ef15ba73d0b"),
                            ColumnId = new Guid("b30201ef-8d45-4940-856b-d689eb07446b"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("f32ae4c6-2559-488d-a002-35026c033e4c"),
                            ColumnId = new Guid("b30201ef-8d45-4940-856b-d689eb07446b"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("e675da6f-a162-4710-bbfe-1882e8b95acf"),
                            ColumnId = new Guid("2a83b5be-2523-4805-8ca4-a4d11e8bd2fd"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("824ff928-28f0-4f66-8a04-94890abb761a"),
                            ColumnId = new Guid("2a83b5be-2523-4805-8ca4-a4d11e8bd2fd"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("f734ad5e-81ef-42f7-9c25-4d028557c908"),
                            ColumnId = new Guid("23a86912-cea3-46af-8ae4-ee8901c086a9"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("98de9ce3-81d9-4f54-b0d0-b1b8db00f6ba"),
                            ColumnId = new Guid("23a86912-cea3-46af-8ae4-ee8901c086a9"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("1ba38f1e-c007-47a1-abd9-a78885446012"),
                            ColumnId = new Guid("88a0a28a-7abc-4bff-a5e9-0d8464a6e86f"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("c9b59430-19ed-4ceb-89f5-69d0c00137b8"),
                            ColumnId = new Guid("88a0a28a-7abc-4bff-a5e9-0d8464a6e86f"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("80930cc5-c2b7-4c1d-88ce-fd6ce0a85b7a"),
                            ColumnId = new Guid("88a0a28a-7abc-4bff-a5e9-0d8464a6e86f"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("b1466f38-bd26-456d-bb1d-e7b427e1345d"),
                            ColumnId = new Guid("9789cbb1-49c6-4d27-be49-74e93cbd7e69"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("a6d6a8fc-05f1-42ef-bdd0-55943b51965b"),
                            ColumnId = new Guid("9789cbb1-49c6-4d27-be49-74e93cbd7e69"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("60957dd3-fa55-4983-8d5d-b2d3b0f64bdf"),
                            ColumnId = new Guid("9789cbb1-49c6-4d27-be49-74e93cbd7e69"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("8cdc0bfd-971f-49ce-9bd9-715f867ad667"),
                            FieldId = new Guid("8e541440-3a07-4a19-b2a4-662acf9962ae"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e212b16-db45-43f4-91a3-301516b860b0"),
                            EditBlockId = new Guid("5c7954fe-4de3-4e02-b50a-28a7913d1494"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d3af0819-e1da-4add-a7b1-be5d79fcddc0"),
                            EditBlockId = new Guid("5c7954fe-4de3-4e02-b50a-28a7913d1494"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("410b3734-1ae7-4fbe-84c2-a2db6bc07775"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("da700baf-0cde-46b0-bfd9-4e7474e1d61b"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f04db9cf-5172-4b43-975e-a791057e9c84"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("25251225-46b0-4fd7-af00-96ab43f52e4d"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("0b93bf18-38bb-4f00-844a-1631b6ec3da1"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("dc927d3e-935e-48ec-9b6c-7800cd2e30ce"),
                            EditBlockId = new Guid("965c0833-ba26-4668-a049-3addf8eb13c0"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("b3161850-35ce-4bc3-a172-f6c94ef2544d"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("559e192f-a642-48c9-8130-f0bfad382c5e"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("ae7f2d02-e119-482a-a4d3-d32b625f3abe"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("2dded36e-bb55-4ecb-86d0-2e0cdb7c28b0"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("f762c787-82cf-4ba1-9d28-12ebcc732cc1"),
                            EditBlockId = new Guid("4cfe3b46-0b4a-4e5b-acd2-de25a84d8890"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("010cda4f-c838-45e5-b907-8663fb9c550f"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("9fe6316e-eecc-4d5b-97c6-08e7a5635f76"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffe3925f-656b-410c-8d38-a095bb6502ea"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("e77c4be3-d425-473c-981f-c42b1cbc9975"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("949950d2-f19f-4dde-92b5-7459198f5977"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("3af7e6fd-8a2c-4bbd-8f02-f0ae7ae7edb9"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("7aa56c88-0c1c-4740-87ad-27bed2fa1f39"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("b1f824fe-4ae7-48de-addc-d6111b1f04c8"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
