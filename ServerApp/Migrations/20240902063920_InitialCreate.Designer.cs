// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902063920_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            EditBlocksId = new Guid("31656f54-967e-4b97-844f-e338d6cd2e37"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            EditBlocksId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("31656f54-967e-4b97-844f-e338d6cd2e37"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("56f42679-849e-4516-b5ee-47ef2fcd6eee"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("41b09f99-2195-4322-8864-bd6b94211330"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("c31c864e-ddae-430a-8a0b-44a870413bd0"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("956f28e3-1487-43c1-9091-d44578228d68"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("8eae9c5f-ee8d-47bb-95cc-9c58c325a1b7"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("23dea0f3-06b7-4eca-83c2-848db0273ccf"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("f331b55c-7502-454f-810b-434a571fd742"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("96af9982-f3dc-4318-a3b7-fe00ec7faf9a"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("c1e83612-1c88-47b4-bddd-5e3eb7a654fb"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("3b6f10ca-cc78-4d49-aeb4-81129680ba6c"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("bc74df33-87c9-4b84-802f-5b42b0f11b39"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("c4f39e5e-c78e-49a3-a6f8-2b68ff14221f"),
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9")
                        },
                        new
                        {
                            FieldsId = new Guid("cab3f7f6-bca9-4fa2-954b-b9679ac8e13c"),
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9")
                        },
                        new
                        {
                            FieldsId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("6161dc90-8acb-4ffb-b9ef-a0b20137cd1c"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("ea10b698-efef-4ca0-9d86-bccc2665bd22"),
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb")
                        },
                        new
                        {
                            FieldsId = new Guid("bc83e844-728d-499e-b2d1-82d4f1ee43ad"),
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29")
                        },
                        new
                        {
                            FieldsId = new Guid("91001e70-e4ae-4dae-b6d2-cdcd092b9eca"),
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29")
                        },
                        new
                        {
                            FieldsId = new Guid("9115911e-1da6-465e-b927-212c33082e6e"),
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29")
                        },
                        new
                        {
                            FieldsId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e")
                        },
                        new
                        {
                            FieldsId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855")
                        },
                        new
                        {
                            FieldsId = new Guid("ab37ce68-6c88-4739-a22d-9648ff3ccdd3"),
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855")
                        },
                        new
                        {
                            FieldsId = new Guid("a5aed116-4253-4cff-911f-78e544e2c55c"),
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            TablesId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            TablesId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            TablesId = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            TablesId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            TablesId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            TablesId = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            TablesId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            TablesId = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            TablesId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            TablesId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            TablesId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            TablesId = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            TablesId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            TablesId = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9"),
                            TracksId = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9"),
                            TracksId = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("18f03a99-603c-4077-8736-8adfe1a857be")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("61a90278-076d-468f-a86b-d8e3d96b0c24")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("b6318c71-ebd7-4773-bf93-be3eaf0a1c17")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("40e045b6-3d01-4547-96b0-bbbf6cfb6e18")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("507a8d64-3c96-4888-a504-59e669faa2f1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("d8a4ffb3-9027-4dce-a1e6-d84b1d764999")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            MarksId = new Guid("2eb2027c-4115-438e-9562-436e961a92aa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            MarksId = new Guid("082d6711-5c41-4fe9-972c-fe82618bbcdb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            MarksId = new Guid("9d5cdf28-345a-454f-81ee-5f04a1f2cfb1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            MarksId = new Guid("1dd3bfe6-7e4d-41cf-bf95-7bfbb5326e1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            MarksId = new Guid("73ca166b-d4fa-4d86-93bd-f07494c91e71")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            MarksId = new Guid("6f357ff6-0e61-4e60-b236-4e998684f482")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            MarksId = new Guid("41fa3a0a-0e1f-48e6-a452-d81736af7d68")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            MarksId = new Guid("cf4c6072-3551-4c92-9447-2cf1ca9f5231")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            MarksId = new Guid("1b9a0a7f-d899-4501-a20b-8cd73a8abfba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("41fa3a0a-0e1f-48e6-a452-d81736af7d68")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("cf4c6072-3551-4c92-9447-2cf1ca9f5231")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("800e464c-d13c-4652-be28-1e675dd972ab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("1916cf06-6775-4dbf-9abe-3333d18e917c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("e43bbfef-71c3-417f-852e-87c2b712f672")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("56f922c3-a3b6-4e4e-a71a-258ff4bf6ba7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            MarksId = new Guid("c421ddc2-b170-43f7-8bc6-e2c0e86e9acf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            MarksId = new Guid("1b9a0a7f-d899-4501-a20b-8cd73a8abfba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            MarksId = new Guid("0b168258-ba11-4f45-815c-747c844ac9a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            MarksId = new Guid("e14092a2-1986-4dc9-adad-1a9134ad78f9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9"),
                            MarksId = new Guid("b81378c8-c485-4c56-bf1e-9a440eb367b4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9"),
                            MarksId = new Guid("28d49975-ab4f-405d-992c-156bd36c8e90")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29420d58-31f9-4a32-b967-0e9f151799ce"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("26e0e20e-c270-4748-8ec5-e61c63972031"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("6f0c14eb-249d-4c96-b077-d7dffeb4f6a8"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9f1bfa7c-d635-49b1-8666-38a2d8fe389e"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("bdab3491-0873-42fd-b1a6-f8fb80216c73"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("9fea36c0-55e5-4f87-af53-f233bf9fd376"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fac4c05-7de3-41f2-939f-f1ee5a9cd7cf"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("9e13a7f3-770f-4aaf-85ed-1d34dacc9ec0"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43986a4f-691e-4fc8-9004-e312543182ae"),
                            ColumnId = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6d69e636-4db5-41b9-9cbe-ca2769279a6a"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("04168f32-0a07-4c1f-bd01-a7e5a3fe3062"),
                            ColumnId = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6d69e636-4db5-41b9-9cbe-ca2769279a6a")
                        },
                        new
                        {
                            Id = new Guid("15370c6d-047a-4121-88f0-8b0bf8b7827e"),
                            ColumnId = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ac0cb7b0-3977-436f-acff-76d46a175c51"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("46d032d4-0756-4b30-b76b-50588b18623c"),
                            ColumnId = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ac0cb7b0-3977-436f-acff-76d46a175c51")
                        },
                        new
                        {
                            Id = new Guid("829ae04d-b2cc-4a26-b42a-8c3794dac3ac"),
                            ColumnId = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("53214603-7cff-4cec-a12d-909a2102d243"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("4d9cc115-d618-4036-9841-a86a21c030c0"),
                            ColumnId = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("53214603-7cff-4cec-a12d-909a2102d243")
                        },
                        new
                        {
                            Id = new Guid("c99bef62-d2fa-47b8-be93-a2c402bd41a6"),
                            ColumnId = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5d15d4a2-9a9f-4908-8cc1-c3e1d8f2996d"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("a0f82535-024b-49f8-a39c-beb711054b9c"),
                            ColumnId = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5d15d4a2-9a9f-4908-8cc1-c3e1d8f2996d")
                        },
                        new
                        {
                            Id = new Guid("56a291b7-1d7c-4d22-834e-e444e007e312"),
                            ColumnId = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9ed6adb2-1916-42be-86ac-261562f2602a"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("57adedf4-1a79-44a5-9d72-a2f3443bc99e"),
                            ColumnId = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9ed6adb2-1916-42be-86ac-261562f2602a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14399098-c9e3-459b-a19a-a2b3206cae36"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("437094bd-f1a5-4a73-a5f4-591c2508076b"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("9e0ba3b7-2ccf-46ac-bb47-127ef385fca2"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("e0e29023-3db4-4dd6-863d-6b522843b3c7"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("bda94ef8-ccf4-4e93-a71b-bc5848d90c19"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("b194ff71-16da-4ceb-a33a-dd6e013a56f9"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("1b2c56d4-0036-4368-b188-54130b403f7e"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("970eef25-8ad9-4a96-a3ee-a28884656ae8"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("e901eee2-1439-4ec7-bea7-b7c3bf9a80f3"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("c64e328d-0826-4885-8a6b-7a69653af9e0"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("006c9849-eeb4-40d0-a0fa-067ccdf0fbfc"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("7255c67b-7b15-4392-9364-371fe47ad80e"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("6a0b4e24-7c0f-476c-9ffb-b80ac1eeba05"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("d5a287a8-b67f-44f6-971c-6aad3c5f4275"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("c118051b-0f01-4af8-97dd-d2c609e20538"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("7aceedff-71fa-4b38-b508-e97b43e77dca"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("b7cd1b27-43b9-465e-8ac5-eb3c32956ca6"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("0492b6d7-2d18-47bc-b82d-fb86673ff6b0"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("1e64f7eb-c676-4911-a466-e9e791456e7a"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("f377c5ca-6443-45a0-8bae-700b30ec2a6d"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("96b0fd53-6fb3-4b29-af04-be57de61947a"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("7e0f160a-7784-46fd-9426-0aa42164af9f"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("5c3df951-572a-4bc9-aa5f-5a3d3784844e"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("00e15960-7eba-4a1a-8056-971a85371bb2"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("143bb287-d767-4d8e-8168-622d26ab1182"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("94b0764b-5fa8-4b15-958a-d068e4b5a829"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("53afa585-7e73-4d8b-bf27-ad9d2f905ae8")
                        },
                        new
                        {
                            Id = new Guid("56d93969-642c-4d7a-88f1-d43852bb8b08"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("38ba8eee-7b39-4411-84da-2beb4310ccab"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("9b9185d9-77cb-4973-b729-32c421c25f42"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("c2876fd8-76db-45b5-bdb7-35c7fc5cf22c"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("519ca72a-1d91-4267-8e6f-941c43c353a8"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("e05d9fec-9d56-424f-a1b7-9c5ebf72fc98"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("01507286-30f0-458f-b1d1-20d1dd6fa388"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("6e8fd8ea-ceb2-4276-90bf-cc15afbd6818"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("d7eff4b9-f61d-4a51-a152-61ded6b1496a"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("d5d618b4-2e3a-437d-bb59-421266bca11d"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("923bf2b0-b24f-45ac-b38f-f2113718fef9"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("b103a367-1ffa-47ad-bfe6-c30ee2ea1074"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("ec5cd6cc-8093-4e44-929c-4ddd35c92ce0"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("24f1f674-7f91-456b-8b82-e11b2bfdaa51"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("a720623e-cd0d-483c-a8f5-d0df98b38f89"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("888669ae-d92e-4222-88cc-f6c08502e5f7"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("646a6251-c770-4cfa-97f2-19ee0764b01f"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("67db44f5-a71f-4395-83e5-4227501e4e6b"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("90628f58-d1e9-487e-aa18-1decb3c6321f"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("484e3ff1-0f74-4df1-9f7b-0c78a1bc6183"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("99d501bc-c9bb-494c-a846-1942b8e13974"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("0749a794-2e82-4aa9-a901-c09e55e08351"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("aa8ecfda-ed09-40e0-98c0-78ccc1c2f51c"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("d0b5fd01-308c-42d9-9fde-97632e44d7d7"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("3c5c00c7-db27-4ef1-b68a-05f791cbc60e"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("070fe5d5-48a9-41d9-b9c3-40f553562ff3"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("bac8bf87-cc20-4324-b09c-32babc031d64"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("048957c7-de46-4e8a-9cb7-6ed3dae9f740"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763"),
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("31656f54-967e-4b97-844f-e338d6cd2e37"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56f42679-849e-4516-b5ee-47ef2fcd6eee"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("41b09f99-2195-4322-8864-bd6b94211330"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("37aafa95-f656-493d-9083-d3f0c28f5ee3")
                        },
                        new
                        {
                            Id = new Guid("c31c864e-ddae-430a-8a0b-44a870413bd0"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("956f28e3-1487-43c1-9091-d44578228d68"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("8eae9c5f-ee8d-47bb-95cc-9c58c325a1b7"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("23dea0f3-06b7-4eca-83c2-848db0273ccf"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("f331b55c-7502-454f-810b-434a571fd742"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("96af9982-f3dc-4318-a3b7-fe00ec7faf9a"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("c1e83612-1c88-47b4-bddd-5e3eb7a654fb"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("3b6f10ca-cc78-4d49-aeb4-81129680ba6c"),
                            EditBlockId = new Guid("6289ecdb-8251-410b-a528-d67f5fea0ada"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("bc74df33-87c9-4b84-802f-5b42b0f11b39"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("c4f39e5e-c78e-49a3-a6f8-2b68ff14221f"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Название конкурсной работы",
                            Number = 12,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("cab3f7f6-bca9-4fa2-954b-b9679ac8e13c"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Ссылка на конкурсную работу",
                            Number = 13,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("6161dc90-8acb-4ffb-b9ef-a0b20137cd1c"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("ea10b698-efef-4ca0-9d86-bccc2665bd22"),
                            EditBlockId = new Guid("b0777302-a4fb-4367-b7ae-eacd8bed54f1"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737")
                        },
                        new
                        {
                            Id = new Guid("bc83e844-728d-499e-b2d1-82d4f1ee43ad"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("91001e70-e4ae-4dae-b6d2-cdcd092b9eca"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("9115911e-1da6-465e-b927-212c33082e6e"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("ab37ce68-6c88-4739-a22d-9648ff3ccdd3"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        },
                        new
                        {
                            Id = new Guid("a5aed116-4253-4cff-911f-78e544e2c55c"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18f03a99-603c-4077-8736-8adfe1a857be"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783")
                        },
                        new
                        {
                            Id = new Guid("61a90278-076d-468f-a86b-d8e3d96b0c24"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("7e95e1c3-953b-4644-b945-aaa391860783")
                        },
                        new
                        {
                            Id = new Guid("b6318c71-ebd7-4773-bf93-be3eaf0a1c17"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("9115911e-1da6-465e-b927-212c33082e6e"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("40e045b6-3d01-4547-96b0-bbbf6cfb6e18"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("bc83e844-728d-499e-b2d1-82d4f1ee43ad"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("507a8d64-3c96-4888-a504-59e669faa2f1"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("91001e70-e4ae-4dae-b6d2-cdcd092b9eca"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d8a4ffb3-9027-4dce-a1e6-d84b1d764999"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("5eb57df2-6626-434f-8f0e-29c801633173")
                        },
                        new
                        {
                            Id = new Guid("2eb2027c-4115-438e-9562-436e961a92aa"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1")
                        },
                        new
                        {
                            Id = new Guid("082d6711-5c41-4fe9-972c-fe82618bbcdb"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22")
                        },
                        new
                        {
                            Id = new Guid("9d5cdf28-345a-454f-81ee-5f04a1f2cfb1"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22")
                        },
                        new
                        {
                            Id = new Guid("1dd3bfe6-7e4d-41cf-bf95-7bfbb5326e1d"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22")
                        },
                        new
                        {
                            Id = new Guid("73ca166b-d4fa-4d86-93bd-f07494c91e71"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22")
                        },
                        new
                        {
                            Id = new Guid("6f357ff6-0e61-4e60-b236-4e998684f482"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc")
                        },
                        new
                        {
                            Id = new Guid("41fa3a0a-0e1f-48e6-a452-d81736af7d68"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("cf4c6072-3551-4c92-9447-2cf1ca9f5231"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db")
                        },
                        new
                        {
                            Id = new Guid("1b9a0a7f-d899-4501-a20b-8cd73a8abfba"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47")
                        },
                        new
                        {
                            Id = new Guid("800e464c-d13c-4652-be28-1e675dd972ab"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910")
                        },
                        new
                        {
                            Id = new Guid("1916cf06-6775-4dbf-9abe-3333d18e917c"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("ab37ce68-6c88-4739-a22d-9648ff3ccdd3"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("e43bbfef-71c3-417f-852e-87c2b712f672"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("a5aed116-4253-4cff-911f-78e544e2c55c"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("56f922c3-a3b6-4e4e-a71a-258ff4bf6ba7"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd")
                        },
                        new
                        {
                            Id = new Guid("c421ddc2-b170-43f7-8bc6-e2c0e86e9acf"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd")
                        },
                        new
                        {
                            Id = new Guid("0b168258-ba11-4f45-815c-747c844ac9a7"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9")
                        },
                        new
                        {
                            Id = new Guid("e14092a2-1986-4dc9-adad-1a9134ad78f9"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763")
                        },
                        new
                        {
                            Id = new Guid("b81378c8-c485-4c56-bf1e-9a440eb367b4"),
                            FieldId = new Guid("cab3f7f6-bca9-4fa2-954b-b9679ac8e13c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("28d49975-ab4f-405d-992c-156bd36c8e90"),
                            FieldId = new Guid("cab3f7f6-bca9-4fa2-954b-b9679ac8e13c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50c12c99-adfb-436f-b6aa-5e7e8fc3a7cb"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4ca1764a-81e2-4103-8502-f87602af0a29"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("12afaacd-ad1f-4fc4-b30f-a312b7259bb6"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0487eeef-3104-4191-b46a-98a02274014e"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4fb1aca2-921e-4e55-a2e4-5bdcbd908855"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("387d9f7d-3a39-41a8-9f07-7c300520d085"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("0ba26cef-bc3a-46bd-a42c-225a7f56e2c9"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d69e636-4db5-41b9-9cbe-ca2769279a6a"),
                            IsPrefilled = true,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38")
                        },
                        new
                        {
                            Id = new Guid("ac0cb7b0-3977-436f-acff-76d46a175c51"),
                            IsPrefilled = true,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38")
                        },
                        new
                        {
                            Id = new Guid("53214603-7cff-4cec-a12d-909a2102d243"),
                            IsPrefilled = true,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38")
                        },
                        new
                        {
                            Id = new Guid("5d15d4a2-9a9f-4908-8cc1-c3e1d8f2996d"),
                            IsPrefilled = true,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38")
                        },
                        new
                        {
                            Id = new Guid("9ed6adb2-1916-42be-86ac-261562f2602a"),
                            IsPrefilled = true,
                            TableId = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d77711c5-2e1f-4b70-908a-d1b5f7e2445c"),
                            FieldId = new Guid("bc74df33-87c9-4b84-802f-5b42b0f11b39"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("483c7931-167b-4a87-b9b8-748a8c40d019"),
                            FieldId = new Guid("bc74df33-87c9-4b84-802f-5b42b0f11b39"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("07b1ce99-27aa-430b-bde2-a9317db92854"),
                            FieldId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("6a914e7a-725f-4349-b01b-d8e3c77868c4"),
                            FieldId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("c16a3a9a-a953-4000-83fb-af4386570760"),
                            FieldId = new Guid("d90f5912-f467-4c2d-ac4e-4d79552661f5"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("81b1848a-8f33-44bd-a055-4e3db394d18f"),
                            ColumnId = new Guid("9e0ba3b7-2ccf-46ac-bb47-127ef385fca2"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("1732d22b-9661-4e09-af6d-941b5aa60c26"),
                            ColumnId = new Guid("9e0ba3b7-2ccf-46ac-bb47-127ef385fca2"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("928ac75f-00f2-4e70-a7b8-0c9e6c5a2a87"),
                            ColumnId = new Guid("9e0ba3b7-2ccf-46ac-bb47-127ef385fca2"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("b5896a0d-5cd6-40bb-94e7-3a369e65481b"),
                            ColumnId = new Guid("7e0f160a-7784-46fd-9426-0aa42164af9f"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("30fc5eb5-da4d-44db-94fe-d90a2e718643"),
                            ColumnId = new Guid("7e0f160a-7784-46fd-9426-0aa42164af9f"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("2c0efa94-a9ea-4c53-bc55-789f6118d55e"),
                            ColumnId = new Guid("7e0f160a-7784-46fd-9426-0aa42164af9f"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("8d532dba-b5cf-4879-a6ad-dcc2b91acdc5"),
                            ColumnId = new Guid("519ca72a-1d91-4267-8e6f-941c43c353a8"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("bc2e6750-c3f2-4033-b3cf-2154fcdd8f69"),
                            ColumnId = new Guid("519ca72a-1d91-4267-8e6f-941c43c353a8"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("29b696b6-c013-4662-92b9-97441cf3e22b"),
                            ColumnId = new Guid("484e3ff1-0f74-4df1-9f7b-0c78a1bc6183"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("cb70b697-f6a2-4ef1-a784-07f97326c027"),
                            ColumnId = new Guid("484e3ff1-0f74-4df1-9f7b-0c78a1bc6183"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("09b971e6-a78d-44cb-abdf-840aadae4dcf"),
                            ColumnId = new Guid("0749a794-2e82-4aa9-a901-c09e55e08351"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("07386a78-3d5b-4cce-b0f3-3e147bc8a9e2"),
                            ColumnId = new Guid("0749a794-2e82-4aa9-a901-c09e55e08351"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("cfd68f64-0629-4629-9cbe-94d6ae49bb1e"),
                            ColumnId = new Guid("0749a794-2e82-4aa9-a901-c09e55e08351"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("766d9cf3-b5e3-45b3-9c31-083186e8eacb"),
                            ColumnId = new Guid("070fe5d5-48a9-41d9-b9c3-40f553562ff3"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("858ec46f-9b7a-4080-8cbb-800d8590cb26"),
                            ColumnId = new Guid("070fe5d5-48a9-41d9-b9c3-40f553562ff3"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("f7b767f2-b965-4822-9ebf-e68941b1aae0"),
                            ColumnId = new Guid("070fe5d5-48a9-41d9-b9c3-40f553562ff3"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("be719e6c-da07-463d-a864-c831d327cd97"),
                            ColumnId = new Guid("00e15960-7eba-4a1a-8056-971a85371bb2"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("79f473f8-6418-4cd4-8ab9-65d774305377"),
                            ColumnId = new Guid("00e15960-7eba-4a1a-8056-971a85371bb2"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("cd7a4671-b678-4c67-a0a1-03d9770030eb"),
                            ColumnId = new Guid("38ba8eee-7b39-4411-84da-2beb4310ccab"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("2cd757ff-bbbe-481f-adef-ea4307120b80"),
                            ColumnId = new Guid("38ba8eee-7b39-4411-84da-2beb4310ccab"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f3bd229-59e9-4552-8b35-edb92ad129db"),
                            EditBlockId = new Guid("31656f54-967e-4b97-844f-e338d6cd2e37"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("101f2e8b-e4a5-4c69-8b3a-cd747eb88e47"),
                            EditBlockId = new Guid("31656f54-967e-4b97-844f-e338d6cd2e37"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("7e95e1c3-953b-4644-b945-aaa391860783"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("5eb57df2-6626-434f-8f0e-29c801633173"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ffa90a23-1ba0-42f9-b068-1f0e8b61f7f7"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("bdee68a4-c3a0-43eb-8a5f-d65f1baeef22"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("4e8866f2-28af-47d0-b2ba-1c201c133dbc"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("dcf45ceb-fb36-440a-a3cf-3017a273b8d1"),
                            EditBlockId = new Guid("87e8b2ed-b2f7-40b4-82b2-a47bfb22c2db"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("d0175fd9-c96f-4984-bfc5-9530caf4e910"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("b4659bd8-8cab-4c5e-9267-d34b5c8aad38"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("ab46db0b-1757-4b03-9754-55757a2ea1fd"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("bb1eb9fc-4629-493e-b98c-204a7e6b16e9"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("3a4a12b8-58c6-4d7f-aff4-8a89283df763"),
                            EditBlockId = new Guid("74bb175f-d2ea-4307-9d0b-17b6c55317be"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("474fa6e1-6b0c-4f7b-97bc-b669ce227b55"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("1f16b883-2b2f-4668-8c27-c4de7f9ad74f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f452e23-083d-454c-af2a-4063308b8ea4"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("f4cf0be1-728d-4c5c-9f56-a1ac342ca42d"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e4bdf88-b9ac-49d8-b182-d96edc0bf37e"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("82d80f40-40d8-4047-881b-7ff75d0c1737"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("53afa585-7e73-4d8b-bf27-ad9d2f905ae8"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("37aafa95-f656-493d-9083-d3f0c28f5ee3"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
