// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916125608_Update1")]
    partial class Update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            EditBlocksId = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            EditBlocksId = new Guid("494aaf71-2e72-4131-a81c-fb30e904f0a5"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            EditBlocksId = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            EditBlocksId = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            EditBlocksId = new Guid("494aaf71-2e72-4131-a81c-fb30e904f0a5"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            EditBlocksId = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            EditBlocksId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("c0c1d00e-7251-4780-8f22-ce0289a91086"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("798b0114-ed4b-4b3f-82f7-6a6b46565d83"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("d2c0b15f-41b4-40f9-9d91-6caac382ec5a"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("f1329234-cbb1-4baf-9df8-dfc7463c44ee"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("33df80f6-2c0d-47a0-ac0e-1116fe2fb8f6"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("b64d5e46-7960-430b-b4d4-bcc7f2b93928"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("3ea1dbb9-e8e5-42b9-957f-3450a70b8fd9"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("230dc038-45b0-49ed-9237-8fa471c6d27f"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("e51fff4f-d19c-449a-a478-05aff9933bed"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("d22fc1ff-6e1d-41fa-af8e-a4eede9ff358"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("9add7cdc-2de1-4016-8632-949a5e282d23"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("ad164da7-8d34-4734-ac1d-c19e7fbd1a9c"),
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105")
                        },
                        new
                        {
                            FieldsId = new Guid("6faf4a66-de06-413b-871c-a7953033928e"),
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14")
                        },
                        new
                        {
                            FieldsId = new Guid("e644002f-1397-454e-8e90-b94187110030"),
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14")
                        },
                        new
                        {
                            FieldsId = new Guid("9483e0e8-592a-4966-bfc6-57969c12f3c2"),
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14")
                        },
                        new
                        {
                            FieldsId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740")
                        },
                        new
                        {
                            FieldsId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7")
                        },
                        new
                        {
                            FieldsId = new Guid("c4d593a5-5494-44bd-85c5-4d53a5601c82"),
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7")
                        },
                        new
                        {
                            FieldsId = new Guid("7edead4d-9be4-4b33-a29d-97000155d38c"),
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            TablesId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            TablesId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            TablesId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            TablesId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            TablesId = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            TablesId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            TablesId = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            TablesId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            TablesId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            TablesId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105"),
                            TablesId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            TablesId = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            TablesId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            TablesId = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            TablesId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            TracksId = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            TracksId = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("74907aa6-4388-4b94-974a-557dcc52b33f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("c5385d47-a9f1-4adb-8162-678b37038971")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("d82015dc-8fba-4864-aa5e-71b634fc61c6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("e7ca8de7-d3c5-4a01-b128-ff8ab284f435")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("23df4548-6856-4abd-8e67-cdd10ed0a17a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("c55b57e1-4b65-4acd-a49d-c1caf707a708")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            MarksId = new Guid("b770b62e-ed58-49a5-bc69-42ece7281efe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            MarksId = new Guid("e626aad0-2781-4823-a002-61428ed73c8d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            MarksId = new Guid("5d7018af-4240-4b31-8566-81d7cc46f076")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            MarksId = new Guid("7e8d7df2-58e0-403e-a28c-31d300fc6d9c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            MarksId = new Guid("ae2f89f8-1838-4529-8945-2612916a7dc3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            MarksId = new Guid("a7be8687-0e47-4001-be0c-f6105334f18c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            MarksId = new Guid("32a5d559-bf36-411a-81e7-ed4703712575")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            MarksId = new Guid("52acedbd-bb1a-4e3b-a4f8-175d3af93158")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            MarksId = new Guid("7f343e91-4b6a-4d96-8ba1-f6d017baca60")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("32a5d559-bf36-411a-81e7-ed4703712575")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("52acedbd-bb1a-4e3b-a4f8-175d3af93158")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("aa0cfab9-25fc-40ec-af86-2e6e48da3b9b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("8dc3dca4-7b56-4846-9aed-e1e5e178a4d2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("924cb53c-6549-4c62-bb5a-e62ef2e67c66")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("aa719c79-70f8-4288-98f1-ea0485e152df")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            MarksId = new Guid("5163dda5-f512-486f-91d5-3ae5172942ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            MarksId = new Guid("7f343e91-4b6a-4d96-8ba1-f6d017baca60")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            MarksId = new Guid("3e28908e-c0bc-4fd2-bd70-a87c27aeb177")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            MarksId = new Guid("e453061d-cb03-48e4-ae8b-d9de68c47c4c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            MarksId = new Guid("7436d69b-1991-4aea-99e5-a5f31c1869d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            MarksId = new Guid("5e6914aa-a2dd-4931-a7f5-d87d3ce667bc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e43c79a2-41d2-4f64-a7a1-045ed72d2c83",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "d3bf2a83-f06e-4e6b-8f6d-11cbfadb5c25",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "d46bdea5-c82d-4b67-9607-11c70db8a442",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "68e62329-639b-45b7-be9a-13355669cd2e",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "4908ce3c-46e0-4df3-bd5a-2e8619e59941",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb1e845f-e57e-4257-a32a-9f078d296d6e"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("43613151-2ed4-40be-8a09-d20ebedb05af"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("c4e7064c-45b0-4c2a-a8b4-2174b152ca2d"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("0ab636fb-08fc-4d97-b08c-12c05a72b556"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("e1f1304e-2095-4fea-ad8d-3cb368502d74"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("d4c1f6be-1aa9-48ea-b31d-d956abf9cd73"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("608bc03a-ddad-4970-a01f-d609ee9515ea"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5048b4f3-291f-421c-801a-0f5ddc56a97c"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd60a5ff-4385-48ea-8cf1-f089d7d3e34a"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("65b5ae7b-ea77-402b-8069-1151737856bf"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("0c89b28d-e92f-4ea9-988f-6094f7e6fe18"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("65b5ae7b-ea77-402b-8069-1151737856bf")
                        },
                        new
                        {
                            Id = new Guid("a52357d8-c670-4a88-8004-5058a0fa2a13"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0daebd13-6273-4efa-b53d-154a28d7f559"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("baa99643-8930-41cf-a41e-8e88f6fbe587"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0daebd13-6273-4efa-b53d-154a28d7f559")
                        },
                        new
                        {
                            Id = new Guid("e97ddd38-a962-42c0-97e4-f66e205c7e86"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fedd03d4-d1cb-43ee-af34-1c9f18b2e340"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("9653baff-2828-47d0-8c77-df6a88e60603"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fedd03d4-d1cb-43ee-af34-1c9f18b2e340")
                        },
                        new
                        {
                            Id = new Guid("f7ba2b6e-5957-4fb1-b621-8023555bc012"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("05f82324-25a8-4aeb-af16-85625f9af5e0"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("ff14b458-cf7a-48b6-85ff-cc3cb7789393"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("05f82324-25a8-4aeb-af16-85625f9af5e0")
                        },
                        new
                        {
                            Id = new Guid("aa3af56f-84fe-44e8-b629-48c6510ca1f3"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("aac3a94f-9d72-4fc4-8140-dc5f3d7100c0"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("6d85f3c1-d9a7-43da-9dd1-470e7539720a"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("aac3a94f-9d72-4fc4-8140-dc5f3d7100c0")
                        },
                        new
                        {
                            Id = new Guid("5cb94647-f954-4ece-9ac3-5b60dd84a76f"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("24a08ad2-0357-4228-b84a-4855ef51dd00"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("3f1f446b-3055-4b25-8cfa-428556c85669"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("24a08ad2-0357-4228-b84a-4855ef51dd00")
                        },
                        new
                        {
                            Id = new Guid("4ccbf775-ec5d-41f4-970c-72048f9a6dd6"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("14618955-2523-4e94-b629-72a933c180c9"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("e413f770-3961-44d9-9e94-fc204cb9028d"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("14618955-2523-4e94-b629-72a933c180c9")
                        },
                        new
                        {
                            Id = new Guid("f8ac2cb5-db41-4a0d-86b3-55e3cd083c23"),
                            ColumnId = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("add690d6-ae49-4a9a-a4f8-620fc18b068d"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("e7298f04-7cd9-4732-9ba3-6bcbd280faf4"),
                            ColumnId = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("add690d6-ae49-4a9a-a4f8-620fc18b068d")
                        },
                        new
                        {
                            Id = new Guid("dc04c625-07c5-49ac-b283-f1b3891f5701"),
                            ColumnId = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("df28c8ce-efa6-4d10-88c2-1b06806ac944"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("785685ad-7224-4684-80a4-7de53b8e7d94"),
                            ColumnId = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("df28c8ce-efa6-4d10-88c2-1b06806ac944")
                        },
                        new
                        {
                            Id = new Guid("8734264b-9e76-4489-a0b0-4bce0fad87bc"),
                            ColumnId = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a5f2581a-e10a-4d07-99d5-a0eeb739ee6a"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("d61e7443-e73f-4b32-aa1e-61b9766c319a"),
                            ColumnId = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a5f2581a-e10a-4d07-99d5-a0eeb739ee6a")
                        },
                        new
                        {
                            Id = new Guid("61d3c9b4-b44b-4477-8d01-7d541c21d522"),
                            ColumnId = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("83ca003b-14e8-4a50-9807-268628d01a49"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("0c145354-9ab8-410f-9ecc-016cf05a4563"),
                            ColumnId = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("83ca003b-14e8-4a50-9807-268628d01a49")
                        },
                        new
                        {
                            Id = new Guid("f81807a0-0275-43e0-9769-178e6fba1095"),
                            ColumnId = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c00f538b-0aab-4b49-98e9-b8d67cdb63ac"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("29a2930c-0dcf-42e9-a4d1-9af5cba09c74"),
                            ColumnId = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c00f538b-0aab-4b49-98e9-b8d67cdb63ac")
                        },
                        new
                        {
                            Id = new Guid("f511d649-7dfa-4b24-a89a-8c4fb0ef36c6"),
                            ColumnId = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("37c1b027-4a14-4bae-980f-ecbd149bfc0a"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("d5b0b764-5459-45e2-8fec-60678d92a387"),
                            ColumnId = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("37c1b027-4a14-4bae-980f-ecbd149bfc0a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("828c935a-47d9-4403-897d-b71e23fc702f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("b85a8685-fc43-4d7f-b1d2-d335944e1015"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a"),
                            ValueTypeId = new Guid("7ff04fba-b9ce-4f6f-a95d-c806e045ab47")
                        },
                        new
                        {
                            Id = new Guid("cf46870c-72bc-434e-8da0-13e4a6044f89"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("851e8910-8834-40b0-a9d9-eaf045f68627"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("13693374-8d1f-4bdc-8850-f73798e0fb8c"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("f2acf8dc-bcfe-406d-8dbd-45089644403d"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("b2b40024-06a2-4c47-b8f5-adec704b0700"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("58eb8f44-3e61-4b64-bcad-b96fd9c1c0a4"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("2d9dcbc9-137f-43c0-ab9b-b086ee8c1f8e"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("0bc1f5db-692d-451a-b1dc-1717a49fe58a"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("003f2f8d-ecff-479a-8140-2082fc5f7d3b"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("aee7da82-8b04-4a92-9556-25ec93c5c1ea"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("ce36f90d-41b1-493f-b16d-0781dd0ab8b3"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("d92d242a-f13d-4bd6-9f48-8a18608b8b02"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("ee7af2b9-63ed-467a-8097-0a793b936775"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("9ad1349b-6c42-4bd0-ac72-22e53ce1a708"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("2eb1dfcd-be07-487a-9a3c-08afbf277f39"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("4bb36f26-c226-4bd6-a1d0-5f741b15ec10"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("cc05da76-3187-4d2e-844a-11e642321d18"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("5604a2d9-73f3-4609-8ff3-7718a4e5bb56"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("644ccc7c-7a81-4c00-8e8d-51dae75a4c27"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("23fc3786-2c0e-4f1f-966d-b6bc1b29c8f6"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("2e6b944f-b75e-4744-bc8c-178eb1482a42"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("942e08d8-d118-4f7b-8262-94b45d29cc56"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("4cc09bc7-e1cf-4ff7-b2a1-ea277f8f52cd"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("a02a8812-1647-454c-955e-fb5c595a7c79"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("632cfd27-0c37-4e4c-ac4b-e01b54b35af7")
                        },
                        new
                        {
                            Id = new Guid("390e4d87-4657-4e79-b36a-6778487b3c51"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("0db10ea0-84d0-468b-b2d9-a71543c6ab9c"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("bf635166-9e45-4bc2-ac1f-02f49fe9f148"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("7f9ad4b6-4b35-4350-b7ba-32253d27104f"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("84e9cb4d-d481-49a7-a79f-860edbee5437"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("b02c5347-c73a-4139-84ce-9fddf7e60e23"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("836cbbe7-9177-48f3-a002-235bcf1bf705"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("f3f5a7cf-3b71-4646-a340-d53525feb0e9"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("8f1363cb-930f-4225-a9a3-765bbf6b112c"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("418804e3-8775-4394-a3d5-9c726c2b4ce8"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("f9b99333-4529-47e3-aec2-cc95c2776a66"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("aa207ddf-252c-47c4-aa2f-55a96678ef88"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("b785f8a4-4b63-4d93-ba77-0a296a29b40c"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("9a8e2a9b-0506-4b62-b0fe-24eebc5b61d5"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("4f1b9510-3e16-46b9-acec-ba33905099d6"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("1c92f290-59e3-43a5-8744-caf4255fed05"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("ce3ff3ff-006a-4d5c-ac2d-f73c98980e23"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("aae005a5-7406-4385-815c-aed03a628c31"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("124e3159-dbe6-4f38-bb52-1629b5b6b312"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("94bfb9d2-1c6a-45dc-94fa-ea4232c520c6"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("fcf4b207-40b2-43ce-b608-385314995938"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("1c86e180-64de-4d99-abf8-3c455cd07403"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("e813368a-a6b1-4ce3-b705-361b8963bc36"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("0d82cb01-e97a-4732-93f2-79fd07a74dcf"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("2443bd06-a327-4a0e-9214-ee66b849a43b"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("9121932a-b69e-45b2-8534-077d5b8fba02"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b"),
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("494aaf71-2e72-4131-a81c-fb30e904f0a5"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0c1d00e-7251-4780-8f22-ce0289a91086"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("798b0114-ed4b-4b3f-82f7-6a6b46565d83"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("5dbaf338-a9e8-4e76-acb0-2771af5059a8")
                        },
                        new
                        {
                            Id = new Guid("d2c0b15f-41b4-40f9-9d91-6caac382ec5a"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("f1329234-cbb1-4baf-9df8-dfc7463c44ee"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("33df80f6-2c0d-47a0-ac0e-1116fe2fb8f6"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("b64d5e46-7960-430b-b4d4-bcc7f2b93928"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("3ea1dbb9-e8e5-42b9-957f-3450a70b8fd9"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("230dc038-45b0-49ed-9237-8fa471c6d27f"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("e51fff4f-d19c-449a-a478-05aff9933bed"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("d22fc1ff-6e1d-41fa-af8e-a4eede9ff358"),
                            EditBlockId = new Guid("d96f0f82-e1d1-42c2-9889-45a69dbcbd4b"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            EditBlockId = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("9add7cdc-2de1-4016-8632-949a5e282d23"),
                            EditBlockId = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("ad164da7-8d34-4734-ac1d-c19e7fbd1a9c"),
                            EditBlockId = new Guid("021355c2-28b0-482e-8940-29848ba0e3f7"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876")
                        },
                        new
                        {
                            Id = new Guid("6faf4a66-de06-413b-871c-a7953033928e"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("e644002f-1397-454e-8e90-b94187110030"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("9483e0e8-592a-4966-bfc6-57969c12f3c2"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("c4d593a5-5494-44bd-85c5-4d53a5601c82"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        },
                        new
                        {
                            Id = new Guid("7edead4d-9be4-4b33-a29d-97000155d38c"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74907aa6-4388-4b94-974a-557dcc52b33f"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33")
                        },
                        new
                        {
                            Id = new Guid("c5385d47-a9f1-4adb-8162-678b37038971"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33")
                        },
                        new
                        {
                            Id = new Guid("d82015dc-8fba-4864-aa5e-71b634fc61c6"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("9483e0e8-592a-4966-bfc6-57969c12f3c2"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("e7ca8de7-d3c5-4a01-b128-ff8ab284f435"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("6faf4a66-de06-413b-871c-a7953033928e"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("23df4548-6856-4abd-8e67-cdd10ed0a17a"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("e644002f-1397-454e-8e90-b94187110030"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c55b57e1-4b65-4acd-a49d-c1caf707a708"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8")
                        },
                        new
                        {
                            Id = new Guid("b770b62e-ed58-49a5-bc69-42ece7281efe"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a4dde68d-df59-48ad-87ee-5689da825566")
                        },
                        new
                        {
                            Id = new Guid("e626aad0-2781-4823-a002-61428ed73c8d"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758")
                        },
                        new
                        {
                            Id = new Guid("5d7018af-4240-4b31-8566-81d7cc46f076"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758")
                        },
                        new
                        {
                            Id = new Guid("7e8d7df2-58e0-403e-a28c-31d300fc6d9c"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758")
                        },
                        new
                        {
                            Id = new Guid("ae2f89f8-1838-4529-8945-2612916a7dc3"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("7a0fa9be-d40d-4673-9371-248b81367758")
                        },
                        new
                        {
                            Id = new Guid("a7be8687-0e47-4001-be0c-f6105334f18c"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86")
                        },
                        new
                        {
                            Id = new Guid("32a5d559-bf36-411a-81e7-ed4703712575"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("52acedbd-bb1a-4e3b-a4f8-175d3af93158"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c")
                        },
                        new
                        {
                            Id = new Guid("7f343e91-4b6a-4d96-8ba1-f6d017baca60"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba")
                        },
                        new
                        {
                            Id = new Guid("aa0cfab9-25fc-40ec-af86-2e6e48da3b9b"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1")
                        },
                        new
                        {
                            Id = new Guid("8dc3dca4-7b56-4846-9aed-e1e5e178a4d2"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("c4d593a5-5494-44bd-85c5-4d53a5601c82"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("924cb53c-6549-4c62-bb5a-e62ef2e67c66"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("7edead4d-9be4-4b33-a29d-97000155d38c"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("aa719c79-70f8-4288-98f1-ea0485e152df"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e")
                        },
                        new
                        {
                            Id = new Guid("5163dda5-f512-486f-91d5-3ae5172942ce"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e")
                        },
                        new
                        {
                            Id = new Guid("3e28908e-c0bc-4fd2-bd70-a87c27aeb177"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("7f775f07-4b75-4f25-8871-378a128741f0")
                        },
                        new
                        {
                            Id = new Guid("e453061d-cb03-48e4-ae8b-d9de68c47c4c"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b")
                        },
                        new
                        {
                            Id = new Guid("7436d69b-1991-4aea-99e5-a5f31c1869d6"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("5e6914aa-a2dd-4931-a7f5-d87d3ce667bc"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2333b215-3eb0-439a-acf9-0bfbdd7a3105"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("81562e43-d2e3-45f5-9592-bcb3ec405e14"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("dd6c673f-2273-4598-ab0c-c58ed4f68490"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("80e53ad6-eb2a-42bc-8a63-08380290e740"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5857dfea-ddfd-4191-adee-f3c11e9a74f7"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("a3145a8d-8469-47b7-a5c0-90325e48204f"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("e04a11b6-e134-4d3e-bad3-419fe566b94c"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65b5ae7b-ea77-402b-8069-1151737856bf"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("0daebd13-6273-4efa-b53d-154a28d7f559"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("fedd03d4-d1cb-43ee-af34-1c9f18b2e340"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("05f82324-25a8-4aeb-af16-85625f9af5e0"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("aac3a94f-9d72-4fc4-8140-dc5f3d7100c0"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("24a08ad2-0357-4228-b84a-4855ef51dd00"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("14618955-2523-4e94-b629-72a933c180c9"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("add690d6-ae49-4a9a-a4f8-620fc18b068d"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a")
                        },
                        new
                        {
                            Id = new Guid("df28c8ce-efa6-4d10-88c2-1b06806ac944"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        },
                        new
                        {
                            Id = new Guid("a5f2581a-e10a-4d07-99d5-a0eeb739ee6a"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        },
                        new
                        {
                            Id = new Guid("83ca003b-14e8-4a50-9807-268628d01a49"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        },
                        new
                        {
                            Id = new Guid("c00f538b-0aab-4b49-98e9-b8d67cdb63ac"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        },
                        new
                        {
                            Id = new Guid("37c1b027-4a14-4bae-980f-ecbd149bfc0a"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6361cc98-e14e-4087-83d1-19fb6e3053f6"),
                            FieldId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("0b68a4ad-1d3a-4a93-80a4-76b57563ca8a"),
                            FieldId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("ebf6a503-e52b-45e8-bb29-748ab2e0e9c1"),
                            FieldId = new Guid("daafcaaf-f450-4e37-bbfd-3c7a3d03c2b1"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("1f346c38-0b27-497b-b9fc-f77379a2fa3f"),
                            FieldId = new Guid("9add7cdc-2de1-4016-8632-949a5e282d23"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("3508b889-0a8d-47ec-96ad-45d7fc46c730"),
                            FieldId = new Guid("9add7cdc-2de1-4016-8632-949a5e282d23"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("07b97c14-2e72-4e5a-9c9c-63124c9d2513"),
                            ColumnId = new Guid("13693374-8d1f-4bdc-8850-f73798e0fb8c"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("5f9ebb1e-d56c-4630-8195-1b4318382e5a"),
                            ColumnId = new Guid("13693374-8d1f-4bdc-8850-f73798e0fb8c"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("51f9e184-dc27-4f98-ae37-db67db46bf52"),
                            ColumnId = new Guid("13693374-8d1f-4bdc-8850-f73798e0fb8c"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("48bb77c9-e485-4be2-876c-30d01b224c50"),
                            ColumnId = new Guid("23fc3786-2c0e-4f1f-966d-b6bc1b29c8f6"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("e7807f9f-e64f-43e1-a112-a76f64a1836d"),
                            ColumnId = new Guid("23fc3786-2c0e-4f1f-966d-b6bc1b29c8f6"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("e24cd41e-647b-4dda-afe5-5f5e0870f75b"),
                            ColumnId = new Guid("23fc3786-2c0e-4f1f-966d-b6bc1b29c8f6"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("1928a4ce-2b42-4bb7-b0ca-978365ec4e85"),
                            ColumnId = new Guid("84e9cb4d-d481-49a7-a79f-860edbee5437"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("5cd2e23e-7df4-48a9-9ee1-a29ec06707dd"),
                            ColumnId = new Guid("84e9cb4d-d481-49a7-a79f-860edbee5437"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("c98b14f5-c2c7-4381-92d1-16a274461c2d"),
                            ColumnId = new Guid("aae005a5-7406-4385-815c-aed03a628c31"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("cd40c5a5-a414-4515-9286-9cffd1d8fc40"),
                            ColumnId = new Guid("aae005a5-7406-4385-815c-aed03a628c31"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("902cb0ca-2261-453a-b325-b28a7237c419"),
                            ColumnId = new Guid("94bfb9d2-1c6a-45dc-94fa-ea4232c520c6"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("fe5ae102-c3dd-4897-857a-cf100f510da7"),
                            ColumnId = new Guid("94bfb9d2-1c6a-45dc-94fa-ea4232c520c6"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("ed8a147a-eb8c-4b57-bcd9-1fae211d42fb"),
                            ColumnId = new Guid("94bfb9d2-1c6a-45dc-94fa-ea4232c520c6"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("13c95a51-4970-4f96-a6ab-7e05b8f3e4f8"),
                            ColumnId = new Guid("94bfb9d2-1c6a-45dc-94fa-ea4232c520c6"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("d50854bb-bed2-469a-ad8f-e3fd88e9f0b1"),
                            ColumnId = new Guid("0d82cb01-e97a-4732-93f2-79fd07a74dcf"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("ce3f434c-59cc-4084-86e4-8e9d4c0a726d"),
                            ColumnId = new Guid("0d82cb01-e97a-4732-93f2-79fd07a74dcf"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("e681a03b-3dbb-4088-92ee-bc04a7305505"),
                            ColumnId = new Guid("0d82cb01-e97a-4732-93f2-79fd07a74dcf"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("df668b3f-dbca-4906-a666-fad5b38f20fe"),
                            ColumnId = new Guid("0d82cb01-e97a-4732-93f2-79fd07a74dcf"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("7e3b94ca-d063-45a6-99aa-527ae68139db"),
                            ColumnId = new Guid("942e08d8-d118-4f7b-8262-94b45d29cc56"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("30a97e3b-7c95-4ccc-93ba-b0201aa022df"),
                            ColumnId = new Guid("942e08d8-d118-4f7b-8262-94b45d29cc56"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9512696f-d806-46c0-8899-e51dcf774341"),
                            ColumnId = new Guid("0db10ea0-84d0-468b-b2d9-a71543c6ab9c"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("230c6d59-7dda-4e9c-b1c7-fbccdb2d0857"),
                            ColumnId = new Guid("0db10ea0-84d0-468b-b2d9-a71543c6ab9c"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("f3a5b016-abe0-4d7d-a786-d99cc4e545b6"),
                            ColumnId = new Guid("aa207ddf-252c-47c4-aa2f-55a96678ef88"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("dc78b9d1-7948-4bf7-b036-b0ec57ca5291"),
                            ColumnId = new Guid("aa207ddf-252c-47c4-aa2f-55a96678ef88"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("e4109766-a430-4ce3-bc57-fd96663525ce"),
                            ColumnId = new Guid("b785f8a4-4b63-4d93-ba77-0a296a29b40c"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("4679f1a8-7f1b-4ec3-9193-8b9a849a3ac2"),
                            ColumnId = new Guid("b785f8a4-4b63-4d93-ba77-0a296a29b40c"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("80b1d4b0-be32-4f57-b4ef-6798470a47f4"),
                            ColumnId = new Guid("b785f8a4-4b63-4d93-ba77-0a296a29b40c"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("d872fcb7-71ab-4ebc-a84b-4f1d67d68e6f"),
                            ColumnId = new Guid("b785f8a4-4b63-4d93-ba77-0a296a29b40c"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("54ed37e5-13c7-4dad-934a-02fd97ceb265"),
                            ColumnId = new Guid("ce36f90d-41b1-493f-b16d-0781dd0ab8b3"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("9c01cbda-9c58-4f7b-998e-398819bc092f"),
                            ColumnId = new Guid("ce36f90d-41b1-493f-b16d-0781dd0ab8b3"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("2361190a-b91e-459e-9860-839816ae123e"),
                            ColumnId = new Guid("ce36f90d-41b1-493f-b16d-0781dd0ab8b3"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("f5e387a0-7f17-4f5c-921c-b1e8159a64aa"),
                            ColumnId = new Guid("a02a8812-1647-454c-955e-fb5c595a7c79"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("00f2f84b-2c0f-4065-9575-517eed00822e"),
                            ColumnId = new Guid("a02a8812-1647-454c-955e-fb5c595a7c79"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("959d4e37-5d87-4aaa-b208-db9aa36e27c8"),
                            ColumnId = new Guid("f3f5a7cf-3b71-4646-a340-d53525feb0e9"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("caaf35dc-0e25-49a7-a8bd-0bc1a058526f"),
                            ColumnId = new Guid("f3f5a7cf-3b71-4646-a340-d53525feb0e9"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1b6b87a-a6ca-45b2-9e0d-914fb601919a"),
                            EditBlockId = new Guid("494aaf71-2e72-4131-a81c-fb30e904f0a5"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c94feb10-12d7-46d0-bc44-6a403c8c871c"),
                            EditBlockId = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("c36749b8-e3d8-4fe3-8cc5-0b8143e4a1ba"),
                            EditBlockId = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("deed79c3-64e7-4de2-b51b-76b9487c778d"),
                            EditBlockId = new Guid("24b8d3a1-9ef5-4cd6-b62b-4e0130649b68"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ce3e60ed-9209-4318-8f8b-7ebbe0b29c33"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("15f2ca6a-6008-4728-be13-9e10189482b8"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("7a0fa9be-d40d-4673-9371-248b81367758"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b4088ac0-0bf5-4466-855d-5176d55d1f86"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("a4dde68d-df59-48ad-87ee-5689da825566"),
                            EditBlockId = new Guid("4f662606-a956-4f10-9042-443ad2989452"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("04fa5841-bc5f-4b27-a2bc-e81b7299caf1"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("ed6ae8bc-7e2d-4b58-b8ef-3dafb24d7c7e"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("7f775f07-4b75-4f25-8871-378a128741f0"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("9b7c8dd7-7c11-4967-b40e-36115c319e8b"),
                            EditBlockId = new Guid("df29bfca-db5a-4690-9789-1922afa19723"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8240ac67-ddae-4712-b1cf-50fdbcbec657"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("1d74cfca-b595-4262-9f5f-3495fa1dd5ef"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7e41199-b1e5-49be-b4a4-9ef19ffc8db1"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("4e7806ec-2c88-4bc5-8011-ae16af801876"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("632cfd27-0c37-4e4c-ac4b-e01b54b35af7"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("5dbaf338-a9e8-4e76-acb0-2771af5059a8"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("7ff04fba-b9ce-4f6f-a95d-c806e045ab47"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
