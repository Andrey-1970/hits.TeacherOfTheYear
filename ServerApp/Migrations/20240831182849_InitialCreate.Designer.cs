// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240831182849_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a8451fae-180d-4f0b-8651-c41d4a8cde60"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a8451fae-180d-4f0b-8651-c41d4a8cde60"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("6c85da0d-4059-4519-98f7-931a60f1a13f"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("ef686a67-36ba-4f5e-a4b4-844d3c6b23a1"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("0e2204d0-a8d5-4365-871d-3bd475d35a61"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("2d6cb6b5-0a78-42ec-9955-8530c76b7a77"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("8e4e721f-46ca-4629-b16a-4c69938cee69"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("01705476-13e3-4aea-b2c9-230cfa0d1b12"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("57293cf7-2cea-4965-8c66-5b2f6ea158bd"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("4317ab69-fefb-4995-998c-dfae5159c894"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("09d68976-0b43-49cc-84ff-971bd3dc765a"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("8a0658b6-4fb2-4cf8-afd0-a5555dcc8dcc"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("71191a86-d9b7-49a6-88ad-5450267546ba"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("a0788d4e-1b28-4bbe-9ec6-13d7605baa8b"),
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b")
                        },
                        new
                        {
                            FieldsId = new Guid("1e117d44-ab26-45fd-b494-ead3b1cb79ad"),
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b")
                        },
                        new
                        {
                            FieldsId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("1623d556-5df0-49db-aefb-a734b581edda"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("171f414e-4615-47a5-8794-d70ce06a9f4f"),
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77")
                        },
                        new
                        {
                            FieldsId = new Guid("44ab130a-ccd8-426e-ae65-970b08fea4f3"),
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e")
                        },
                        new
                        {
                            FieldsId = new Guid("d23f2adf-9679-411f-be0f-46f7749be6fd"),
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e")
                        },
                        new
                        {
                            FieldsId = new Guid("704234f6-8f0d-4060-bc0c-1b9a6b6202f8"),
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e")
                        },
                        new
                        {
                            FieldsId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68")
                        },
                        new
                        {
                            FieldsId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1")
                        },
                        new
                        {
                            FieldsId = new Guid("8a7f1b4e-1d2d-406e-8476-cbbb9abed560"),
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1")
                        },
                        new
                        {
                            FieldsId = new Guid("8195554a-96df-43bd-bd91-481ef2fef86a"),
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            TablesId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            TablesId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            TablesId = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            TablesId = new Guid("eea80838-f915-40d7-808f-66c38f510336")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            TablesId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            TablesId = new Guid("ba0eb36c-860f-409e-9eb2-f1f14e9d3f67")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            TablesId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            TablesId = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            TablesId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            TablesId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            TablesId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            TablesId = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            TablesId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            TablesId = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b"),
                            TracksId = new Guid("6bd33d06-b38a-409a-a31e-88696071968b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b"),
                            TracksId = new Guid("ad74a202-e9f4-4918-b735-290d3715277f")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("d4d5d26b-23de-45fc-b38a-dde4cddbbaa1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("ab047713-018d-4b45-b334-0c77bc1d2389")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("87e9457b-b3f8-429c-8983-039696e82e90")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("20a3c16f-0a73-4e6e-a964-9df1e32b5632")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("819a15e2-539c-4700-b403-13a52e683373")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("ad2cbf84-5c17-4b52-af0e-7760f9fb8387")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            MarksId = new Guid("1a283c9d-25b2-499c-a72b-d40aa81eff57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            MarksId = new Guid("693444b0-c3a5-463c-8663-08c3654e46ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            MarksId = new Guid("5b2430db-d84d-444b-afe4-2b8ebf303b04")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            MarksId = new Guid("46c3f985-a166-4c30-8955-28d1078e5356")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            MarksId = new Guid("16cbd1c7-3d9e-49bb-a17d-67d8d6ecbb99")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            MarksId = new Guid("c475f7ed-2271-4016-b30c-4e63a691f28e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            MarksId = new Guid("7417d244-88c1-4baf-b719-c01f042b0a4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            MarksId = new Guid("052d993c-e07c-409f-a339-d6bf6ea5051b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            MarksId = new Guid("881b4279-6ea8-45af-b679-a2d4b38a8f1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("7417d244-88c1-4baf-b719-c01f042b0a4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("052d993c-e07c-409f-a339-d6bf6ea5051b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("17c1c056-4db6-4fdf-8bdd-6eabd6b4a55a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("edaf35f9-1b22-4309-84cf-7103a53c1b27")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("50794a5e-2542-4650-870f-e72718e79a26")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("8f4023ea-0bca-4742-86b3-c58306ad8af3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            MarksId = new Guid("9872fe8c-2d8a-4986-8d39-e9ed484c0c3b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            MarksId = new Guid("881b4279-6ea8-45af-b679-a2d4b38a8f1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            MarksId = new Guid("88184a0f-d84b-484a-805e-a6852c1a23e7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            MarksId = new Guid("17d1f0de-aca0-4a85-a2d2-ec9257d165d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b"),
                            MarksId = new Guid("dd391558-1056-47f8-9a5e-09b3a7afd204")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6d74014-2823-40a4-a380-0257cf43084b"),
                            MarksId = new Guid("00d4586a-f35d-46b4-aa60-279af316f626")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6588c1d-90e5-44c3-8f59-af6e6c50f030"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("d5b30fb7-180c-41cb-a182-01c0051e407b"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("8bd065d1-9ed6-4efa-881a-1ba583d0b2e8"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("cf62fe48-9347-4eab-b4b5-bdb2bfb9fa7b"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("57ada0f7-8ce1-4a8d-9b3e-2704a4c3c9ed"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("8e89f78d-1ecb-43ca-bb82-374ce7609e37"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2543067d-bd5d-4818-a75e-e382a64a5fec"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5d7b0e4c-d3f0-4840-ba6d-7fe4aec2ad53"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7484bd40-711c-481d-99c5-a2fb427c5aac"),
                            ColumnId = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("53fd66e7-9f03-40e7-aa18-cc25e92eb53a"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("98870490-619c-4223-a10f-435728306f20"),
                            ColumnId = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("53fd66e7-9f03-40e7-aa18-cc25e92eb53a")
                        },
                        new
                        {
                            Id = new Guid("bee355cb-60b6-4115-8396-8201f5733dd5"),
                            ColumnId = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0e08a263-9fe8-4e16-9153-3c1f1367b2a0"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("8a939c20-4517-41f8-b354-00ecb05073ed"),
                            ColumnId = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0e08a263-9fe8-4e16-9153-3c1f1367b2a0")
                        },
                        new
                        {
                            Id = new Guid("63ca8d63-323d-4bef-803c-fdf95f17920e"),
                            ColumnId = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("596f4ecb-08e2-47b7-9341-2d30b855f9c1"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("b4e5f9a4-b570-4d5d-a4b6-389e199a746b"),
                            ColumnId = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("596f4ecb-08e2-47b7-9341-2d30b855f9c1")
                        },
                        new
                        {
                            Id = new Guid("97bb27b3-3594-4330-87fe-f2e328699541"),
                            ColumnId = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("eab2b87d-4417-46ef-a747-75060122e8aa"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("6d84ca21-94c1-4c73-8a34-197b1eb414d8"),
                            ColumnId = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("eab2b87d-4417-46ef-a747-75060122e8aa")
                        },
                        new
                        {
                            Id = new Guid("94674499-ea17-4ddf-a9ad-7702dcc5e19b"),
                            ColumnId = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("70fd23fc-8880-4fde-98ae-a3b6751cdb32"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("b5fd1f82-58ff-4e49-b5da-5062292186c3"),
                            ColumnId = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("70fd23fc-8880-4fde-98ae-a3b6751cdb32")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fb475fa-5b8d-4aef-881c-233a55993bcc"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("a222f09b-556a-4359-ad74-d02d791d22cc"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("64e847cf-5ea6-47e5-bf07-1f6c60e26859"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("f20b9002-77bf-4492-ac26-c1bfe33f986f"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("99509a75-e09c-4e28-980c-1690cf499772"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("603e19d5-2bef-46b6-b3ae-c31317184ae8"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("46aac30b-67ac-4101-884f-115d10a53fa7"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("29afeea6-df5f-4116-9806-817f49f6191d"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("c4c85f44-2836-4ddf-b36e-b97f932ae77d"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("971d01e8-8fb1-47ef-8a19-2bc9114ce15a"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("498d64ff-22af-4713-8156-cb1e447631be"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("503096e0-6064-4901-83fd-00328a2d3c98"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("6f44de91-6d7a-4ae1-91fc-41629d11aa18"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("f2cfa204-5ff2-4d4d-b2ab-8bbad5376d1d"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("1667c9f9-c9b8-4515-a93c-aae148a1e01a"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("50a55657-57ea-466c-a724-f6f5a7dc8f28"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("e5a86250-16f4-4224-90b1-163cee613f02"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("525d7e71-1ced-4d54-9cc2-5c4586b2ddf1"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("c46f4d7b-b106-4f0f-9cef-17ad97aa9bc3"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("21e44aa8-a6d0-434a-a867-79189ae81e0e"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("a58d06d3-48c1-4135-91ce-7943101528bc"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("87ab4ab6-4d93-4dec-83ff-18c0a3495f7f"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("182113e6-da85-4b5d-9043-19f05dcd400b"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("87903667-5aeb-4816-b4cf-21c2389eeb39"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("acf13628-fbae-44a3-b426-0f8bd6e28d9d"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("fa7b68e8-b08f-4205-b8ce-0e46de0da60e"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("dc0ca3d8-68f4-41b8-b3be-92061f60453b")
                        },
                        new
                        {
                            Id = new Guid("600b79b9-627b-4401-8096-fba616138684"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("a28fa750-54b1-45f0-8e87-6f16d1e7222a"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("ba0eb36c-860f-409e-9eb2-f1f14e9d3f67"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("551d7639-c932-4978-9096-94e9f643cb5b"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("ba0eb36c-860f-409e-9eb2-f1f14e9d3f67"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("c9a567a2-d8f0-4c65-9cd8-ffe983203211"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("eea80838-f915-40d7-808f-66c38f510336"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("e2996728-32e0-44bb-8cda-982161de4a8b"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("eea80838-f915-40d7-808f-66c38f510336"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("dea9d77b-e47b-4b38-9854-a9c51224cd9f"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("eea80838-f915-40d7-808f-66c38f510336"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("b30e00df-13bf-4f16-baae-28f9fe908736"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("eea80838-f915-40d7-808f-66c38f510336"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("de305386-df97-4131-a575-a71f0f3dce95"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("947b9878-6877-4f54-ac27-c9964194b10c"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("da4795dc-4ce8-43e0-b566-ce6ec0e9a4bf"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("ee4c1384-986e-4ada-bcb7-b66f74dbfef1"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("6019c5d7-48f9-4409-a8cc-bc7ba6512bb3"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("adcb8447-10e4-491d-81f1-affa2ce5713a"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("21727fc6-9da0-4fc1-b536-35499cdd9dfa"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("b36bb234-2d8d-4e23-95a9-30c69513414f"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("ef43c6d4-9e5c-45af-acaa-09c1eed08fed"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("ff36729a-e1ed-4332-bd54-14e036c2f0c9"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("8ea7b9af-24ef-4706-90ce-861efb96ae8d"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("56769c9f-b1d3-42b9-b5c1-4e54543e45fe"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("79499466-6f90-4c3a-af88-e179222b3e00"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("fb6e4234-e33a-4721-a2d5-4cbf3088a3b2"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("5ba175d5-3697-4f36-a9ea-87c1af4fce8b"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("31534846-2ed5-43c4-9637-10fd7053c693"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("687e994b-26b1-411a-994c-32dc374562d6"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("c3a8516f-c32f-4afa-8523-3142e755a422"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381"),
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a8451fae-180d-4f0b-8651-c41d4a8cde60"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c85da0d-4059-4519-98f7-931a60f1a13f"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("ef686a67-36ba-4f5e-a4b4-844d3c6b23a1"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("3a22da0d-80d9-4621-9c1f-f86e170f7fe3")
                        },
                        new
                        {
                            Id = new Guid("0e2204d0-a8d5-4365-871d-3bd475d35a61"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("2d6cb6b5-0a78-42ec-9955-8530c76b7a77"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("8e4e721f-46ca-4629-b16a-4c69938cee69"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("01705476-13e3-4aea-b2c9-230cfa0d1b12"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("57293cf7-2cea-4965-8c66-5b2f6ea158bd"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("4317ab69-fefb-4995-998c-dfae5159c894"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("09d68976-0b43-49cc-84ff-971bd3dc765a"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("8a0658b6-4fb2-4cf8-afd0-a5555dcc8dcc"),
                            EditBlockId = new Guid("e50945b6-f490-4592-8343-8ac840552bb0"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("71191a86-d9b7-49a6-88ad-5450267546ba"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("a0788d4e-1b28-4bbe-9ec6-13d7605baa8b"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Название конкурсной работы",
                            Number = 12,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("1e117d44-ab26-45fd-b494-ead3b1cb79ad"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Ссылка на конкурсную работу",
                            Number = 13,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("1623d556-5df0-49db-aefb-a734b581edda"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("171f414e-4615-47a5-8794-d70ce06a9f4f"),
                            EditBlockId = new Guid("c7c56f5e-d9f8-4ff2-aa78-b7688a2a1ee6"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("76529b15-5416-4a8a-b568-4d62194330eb")
                        },
                        new
                        {
                            Id = new Guid("44ab130a-ccd8-426e-ae65-970b08fea4f3"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("d23f2adf-9679-411f-be0f-46f7749be6fd"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("704234f6-8f0d-4060-bc0c-1b9a6b6202f8"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("8a7f1b4e-1d2d-406e-8476-cbbb9abed560"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        },
                        new
                        {
                            Id = new Guid("8195554a-96df-43bd-bd91-481ef2fef86a"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4d5d26b-23de-45fc-b38a-dde4cddbbaa1"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a")
                        },
                        new
                        {
                            Id = new Guid("ab047713-018d-4b45-b334-0c77bc1d2389"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a")
                        },
                        new
                        {
                            Id = new Guid("87e9457b-b3f8-429c-8983-039696e82e90"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("704234f6-8f0d-4060-bc0c-1b9a6b6202f8"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("20a3c16f-0a73-4e6e-a964-9df1e32b5632"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("44ab130a-ccd8-426e-ae65-970b08fea4f3"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("819a15e2-539c-4700-b403-13a52e683373"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("d23f2adf-9679-411f-be0f-46f7749be6fd"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ad2cbf84-5c17-4b52-af0e-7760f9fb8387"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0")
                        },
                        new
                        {
                            Id = new Guid("1a283c9d-25b2-499c-a72b-d40aa81eff57"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("eea80838-f915-40d7-808f-66c38f510336")
                        },
                        new
                        {
                            Id = new Guid("693444b0-c3a5-463c-8663-08c3654e46ba"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c")
                        },
                        new
                        {
                            Id = new Guid("5b2430db-d84d-444b-afe4-2b8ebf303b04"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c")
                        },
                        new
                        {
                            Id = new Guid("46c3f985-a166-4c30-8955-28d1078e5356"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c")
                        },
                        new
                        {
                            Id = new Guid("16cbd1c7-3d9e-49bb-a17d-67d8d6ecbb99"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c")
                        },
                        new
                        {
                            Id = new Guid("c475f7ed-2271-4016-b30c-4e63a691f28e"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("ba0eb36c-860f-409e-9eb2-f1f14e9d3f67")
                        },
                        new
                        {
                            Id = new Guid("7417d244-88c1-4baf-b719-c01f042b0a4b"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("052d993c-e07c-409f-a339-d6bf6ea5051b"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c")
                        },
                        new
                        {
                            Id = new Guid("881b4279-6ea8-45af-b679-a2d4b38a8f1c"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091")
                        },
                        new
                        {
                            Id = new Guid("17c1c056-4db6-4fdf-8bdd-6eabd6b4a55a"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456")
                        },
                        new
                        {
                            Id = new Guid("edaf35f9-1b22-4309-84cf-7103a53c1b27"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("8a7f1b4e-1d2d-406e-8476-cbbb9abed560"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("50794a5e-2542-4650-870f-e72718e79a26"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("8195554a-96df-43bd-bd91-481ef2fef86a"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("8f4023ea-0bca-4742-86b3-c58306ad8af3"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b")
                        },
                        new
                        {
                            Id = new Guid("9872fe8c-2d8a-4986-8d39-e9ed484c0c3b"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b")
                        },
                        new
                        {
                            Id = new Guid("88184a0f-d84b-484a-805e-a6852c1a23e7"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f")
                        },
                        new
                        {
                            Id = new Guid("17d1f0de-aca0-4a85-a2d2-ec9257d165d1"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381")
                        },
                        new
                        {
                            Id = new Guid("dd391558-1056-47f8-9a5e-09b3a7afd204"),
                            FieldId = new Guid("1e117d44-ab26-45fd-b494-ead3b1cb79ad"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("00d4586a-f35d-46b4-aa60-279af316f626"),
                            FieldId = new Guid("1e117d44-ab26-45fd-b494-ead3b1cb79ad"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("995848e7-3b94-442e-9e3c-f09b41718c77"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("65e772fc-2525-4b18-9eca-ca56442c3b2e"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2f6b0182-3a47-40b9-be91-f8f94f371c24"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("e8e78abb-d51d-45c4-ac17-1e4804c47d68"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1deb580c-0a2c-4de1-a7c2-cffcb89989a1"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ab649fe1-ea2f-48b9-abf4-b5dfc551356c"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("b6d74014-2823-40a4-a380-0257cf43084b"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53fd66e7-9f03-40e7-aa18-cc25e92eb53a"),
                            IsPrefilled = true,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd")
                        },
                        new
                        {
                            Id = new Guid("0e08a263-9fe8-4e16-9153-3c1f1367b2a0"),
                            IsPrefilled = true,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd")
                        },
                        new
                        {
                            Id = new Guid("596f4ecb-08e2-47b7-9341-2d30b855f9c1"),
                            IsPrefilled = true,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd")
                        },
                        new
                        {
                            Id = new Guid("eab2b87d-4417-46ef-a747-75060122e8aa"),
                            IsPrefilled = true,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd")
                        },
                        new
                        {
                            Id = new Guid("70fd23fc-8880-4fde-98ae-a3b6751cdb32"),
                            IsPrefilled = true,
                            TableId = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("788d418f-2810-41ef-8189-4ba250f8c396"),
                            FieldId = new Guid("71191a86-d9b7-49a6-88ad-5450267546ba"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("708d30d8-b76c-4d87-a4d3-dc62b38eb6f2"),
                            FieldId = new Guid("71191a86-d9b7-49a6-88ad-5450267546ba"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("f9506186-ab0f-4722-9294-7e1c1247cd2d"),
                            FieldId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("45df1ab0-f6d5-4266-8071-0617fbdf2b5b"),
                            FieldId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("952b109c-5da3-4b18-bf61-28133b063563"),
                            FieldId = new Guid("f08218d6-2c54-4a3f-96ec-377266048786"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("022ddcb9-2914-48f9-a6c9-5637393a83da"),
                            ColumnId = new Guid("64e847cf-5ea6-47e5-bf07-1f6c60e26859"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("225afe33-99aa-4271-8d64-ddad0ad80173"),
                            ColumnId = new Guid("64e847cf-5ea6-47e5-bf07-1f6c60e26859"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("f7aa86af-6c58-402c-a978-f61e0da5aa83"),
                            ColumnId = new Guid("64e847cf-5ea6-47e5-bf07-1f6c60e26859"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("dab44a9b-0d33-4b4f-8ef3-00c32978bec3"),
                            ColumnId = new Guid("87ab4ab6-4d93-4dec-83ff-18c0a3495f7f"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("91a531c1-704d-4ede-b900-1a9116755a98"),
                            ColumnId = new Guid("87ab4ab6-4d93-4dec-83ff-18c0a3495f7f"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("3a94bfc0-29ff-42b4-8346-9f387951dae4"),
                            ColumnId = new Guid("87ab4ab6-4d93-4dec-83ff-18c0a3495f7f"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("28d11d2d-44c9-4e3c-b4b9-dcd6b23437de"),
                            ColumnId = new Guid("551d7639-c932-4978-9096-94e9f643cb5b"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("5e385b91-49b6-499c-92d4-c78cf2b1a581"),
                            ColumnId = new Guid("551d7639-c932-4978-9096-94e9f643cb5b"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("f572444a-a317-47ae-9c31-81f47fe400e0"),
                            ColumnId = new Guid("ff36729a-e1ed-4332-bd54-14e036c2f0c9"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("d3519c9b-1919-4208-9c90-d2c1137b00b8"),
                            ColumnId = new Guid("ff36729a-e1ed-4332-bd54-14e036c2f0c9"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("c448efc5-86b1-40c8-9c29-4feec9f3cead"),
                            ColumnId = new Guid("56769c9f-b1d3-42b9-b5c1-4e54543e45fe"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("84aec9d1-34bb-4bb1-92e1-70165cab536a"),
                            ColumnId = new Guid("56769c9f-b1d3-42b9-b5c1-4e54543e45fe"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("a30052c9-3715-4146-9408-ed3c18530515"),
                            ColumnId = new Guid("56769c9f-b1d3-42b9-b5c1-4e54543e45fe"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("38360d60-ab67-4d33-a4c5-a7f15c876c34"),
                            ColumnId = new Guid("31534846-2ed5-43c4-9637-10fd7053c693"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("25725f00-795c-4eb1-a307-871fe276041b"),
                            ColumnId = new Guid("31534846-2ed5-43c4-9637-10fd7053c693"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("8d99a42a-c0d2-4dd5-94fe-0d1b7cc21e34"),
                            ColumnId = new Guid("31534846-2ed5-43c4-9637-10fd7053c693"),
                            Value = "База данных"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3f57ba5-e9b4-4568-ab1b-049f3a76a56c"),
                            EditBlockId = new Guid("a8451fae-180d-4f0b-8651-c41d4a8cde60"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5ffe480a-0f3f-4a83-abe4-479c11b74091"),
                            EditBlockId = new Guid("a8451fae-180d-4f0b-8651-c41d4a8cde60"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b32d42fc-5018-41af-bfe5-2f74a0d1994a"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("687672a7-7991-4415-b5cd-a3885b75b9e0"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c9978c55-8fac-4a3c-ac3a-2961da3918ca"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("dafd9b16-efad-48ca-9d89-ffc5e2052a3c"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("ba0eb36c-860f-409e-9eb2-f1f14e9d3f67"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("eea80838-f915-40d7-808f-66c38f510336"),
                            EditBlockId = new Guid("71ad9c25-dbac-4a82-81cc-95f94ad36715"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("c2398fe9-6a10-49a5-b7f5-dc7f8546b456"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("1783a927-4cb2-4aed-859b-46ec02fe8ddd"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("939e3cc6-3a46-4c79-b1cd-5556cbd7161b"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("ef3f6bc9-b899-416b-bde9-056b1c40fe6f"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("e983487a-8a7d-46b1-be81-7c0fcf23b381"),
                            EditBlockId = new Guid("3b6cb258-4e86-44ef-9cbe-dc29e0d2b154"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bd33d06-b38a-409a-a31e-88696071968b"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ad74a202-e9f4-4918-b735-290d3715277f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef2e6094-7283-4bd8-bba9-ef034775a448"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("9d9de597-3fa1-47a0-a81c-b9b5b37d0e37"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1104cbd-bfff-41cf-8782-4062dc9e7fd1"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("76529b15-5416-4a8a-b568-4d62194330eb"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("dc0ca3d8-68f4-41b8-b3be-92061f60453b"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("3a22da0d-80d9-4621-9c1f-f86e170f7fe3"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
