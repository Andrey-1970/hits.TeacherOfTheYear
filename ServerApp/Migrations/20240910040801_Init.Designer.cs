// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910040801_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bc6f0a31-167c-43a7-8360-23f4b14a14ea"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bc6f0a31-167c-43a7-8360-23f4b14a14ea"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("4ea0a189-add9-4fb3-9aaf-c1e2dd838037"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("dc350ec6-2f6b-4877-8777-d72c7050a062"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("89b82802-867b-4e4f-81ae-deac1e0bdab5"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("0ad486c0-e928-4467-b8c0-998ac7985ce4"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("5f604cbf-b2b6-4e3b-b1dd-8603dd1eb9f1"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("cf5b549f-da92-4dfa-9267-3c365ceff5c9"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("089b9c14-84d1-4c70-a386-347c137770e4"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("670d04c0-4608-4eb2-92b6-0e9968174d37"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("0be5f723-2729-4a1a-9aea-e50c2c24189c"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("68bbab74-57cb-41f1-b691-17ab7516f987"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("81799947-97a0-4edf-8898-7ac5d03f9f25"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("19609395-7cfa-4c4a-94c2-135e39f2b950"),
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a")
                        },
                        new
                        {
                            FieldsId = new Guid("b32e5cf3-095e-4a66-9cb6-886003ebb308"),
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a")
                        },
                        new
                        {
                            FieldsId = new Guid("873f298e-683c-4246-b000-97efbf8e80a7"),
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a")
                        },
                        new
                        {
                            FieldsId = new Guid("4a8e9061-057f-4ed1-8797-c31c69eb8201"),
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a")
                        },
                        new
                        {
                            FieldsId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2")
                        },
                        new
                        {
                            FieldsId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f")
                        },
                        new
                        {
                            FieldsId = new Guid("a4168dc4-d19f-4811-9ccb-b3f038ba2992"),
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f")
                        },
                        new
                        {
                            FieldsId = new Guid("37ed6da7-11b6-4020-8a6a-eddffca003eb"),
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            TablesId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            TablesId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            TablesId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            TablesId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            TablesId = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            TablesId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            TablesId = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            TablesId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            TablesId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            TablesId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            TablesId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            TablesId = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            TablesId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            TablesId = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            TablesId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            TracksId = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            TracksId = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("9d35a90a-d15b-4045-91c6-637265f6ea8e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("12734d3f-313b-43d9-9f59-126524d60c64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("5c241225-a9d9-4582-add6-44c62201b604")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("0ec14e71-071a-46a3-a2e1-6a737d728b00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("4709b3d4-90f5-415f-bce0-28b60f1d0493")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("ae251340-2698-4ff7-82b4-856ec1c97de1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            MarksId = new Guid("960b3b8c-3d68-43e7-a8f9-1194db9ecb10")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            MarksId = new Guid("8777cf9b-94b1-421b-9e77-99172a2f97fe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            MarksId = new Guid("e8dc0281-c3e6-46cb-bfbb-d218640d2591")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            MarksId = new Guid("30de9046-aecf-4ffe-9ca9-c4a54fc3ccc0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            MarksId = new Guid("43a7744d-c214-497c-8e8c-b32f475acd5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            MarksId = new Guid("37d53298-6889-4b2f-bf7b-378eacd99a0f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            MarksId = new Guid("ad6e6a24-dc52-46e0-a5b5-813337960062")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            MarksId = new Guid("92e35077-dbc8-41f7-bbbb-a4508d1c4bbb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            MarksId = new Guid("cebad1f3-2c1a-4fa5-a29e-6dc6e0808040")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("ad6e6a24-dc52-46e0-a5b5-813337960062")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("92e35077-dbc8-41f7-bbbb-a4508d1c4bbb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("eb47b23e-a5f8-4483-b4fb-c58cf4527839")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("18ea5b48-b22d-423e-bd4a-2263a41f4e0f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("48fa8a99-aeeb-4fce-99cb-f744e7acaaf7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("a01d615a-3f06-4ba6-a7aa-830cd63a166e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            MarksId = new Guid("279dc8f8-2937-419a-b98e-7319d043d999")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            MarksId = new Guid("cebad1f3-2c1a-4fa5-a29e-6dc6e0808040")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            MarksId = new Guid("eea07bae-c84b-4b17-a80b-24eef7456e91")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            MarksId = new Guid("82857856-36d1-43a0-854d-983e50432454")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            MarksId = new Guid("3371c2ab-9664-4402-a3a8-d608749a203a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            MarksId = new Guid("cf17dc1c-a02d-4183-85ee-3f0d1ae1a82d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "db441c18-f388-48d1-99ac-b797fd63180c",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "2a945df1-2508-43e0-b475-5107c6bbb7de",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "fa5a773f-67dd-43bf-a8f5-01bcec1b18c9",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "627993c7-1407-4ea5-8a19-b992ad8da369",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "8b8206a1-6090-4536-966e-fdcec091c072",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a59ad311-b5d2-46ed-a7ce-f239cb6d0b0f"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("252c5eee-a7ce-4866-b66f-259b68de4f5f"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("f15225bc-1c39-4844-aeee-a5c3027b6ba5"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("1d37e7e4-cdb5-4448-8156-10bbe389dbd5"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("73152f00-3e5f-463d-adc3-ed23ad465a38"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("b697193b-9d76-431f-88b9-160934d43aa0"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("461cb115-10f4-4fbf-ad4a-5e2aeeb6c552"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("142611c9-f515-4196-b239-f087d0f6e49b"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1e24ee0-f10d-431f-9edf-6d5659ef8571"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e98dfb25-8213-4e45-811e-c361474f616c"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("aa3abddf-804d-4d4e-9390-34f215b29cd9"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e98dfb25-8213-4e45-811e-c361474f616c")
                        },
                        new
                        {
                            Id = new Guid("756f396c-2b00-4523-8915-6cdfc536517c"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("baa4543f-d30a-4b8e-9814-461f82b4b888"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("d1a22e67-c39e-4819-afdc-12902c00d31c"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("baa4543f-d30a-4b8e-9814-461f82b4b888")
                        },
                        new
                        {
                            Id = new Guid("deb5aae4-eecc-4a78-a085-31408edbdd11"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8f4c3a3b-dc5e-42e7-9e35-fca6f26a76d3"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("50a11655-e9cd-4af3-8c4d-37ea6460f67b"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8f4c3a3b-dc5e-42e7-9e35-fca6f26a76d3")
                        },
                        new
                        {
                            Id = new Guid("363a5bdc-cfb2-4cc7-b861-04dfe43206c9"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1682fdb5-2d27-410b-9586-dce905705fac"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("c5f9fc92-5203-4930-a510-c1ff1fedc266"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1682fdb5-2d27-410b-9586-dce905705fac")
                        },
                        new
                        {
                            Id = new Guid("3c95a1fb-e95a-449b-95cb-2bcae53d13c6"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("62a99744-70b6-41ff-84d1-5862b3c4cb17"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("7cff038a-030c-4eab-9f5c-b2106bba966e"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("62a99744-70b6-41ff-84d1-5862b3c4cb17")
                        },
                        new
                        {
                            Id = new Guid("c86379ff-495d-492b-96f6-762702199dfb"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ffe115e1-5304-4118-b5c5-d697c487a5cb"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("13cd6cee-cde6-4439-bb4f-7375a6a51673"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ffe115e1-5304-4118-b5c5-d697c487a5cb")
                        },
                        new
                        {
                            Id = new Guid("b0d31002-573b-4292-a44e-7b0dad7a6a6a"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fce5ad2a-cbc5-4cff-8271-f8abeb1131c9"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("51e51ea4-90ba-4ff6-ac40-5516f229a717"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fce5ad2a-cbc5-4cff-8271-f8abeb1131c9")
                        },
                        new
                        {
                            Id = new Guid("e08b6b94-3c99-40b8-8c58-0adb651ad0e3"),
                            ColumnId = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("332dbd73-7148-47ae-b9bf-38ecbcff8f92"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("8937e070-cba2-4ef5-87f1-32a22a81058c"),
                            ColumnId = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("332dbd73-7148-47ae-b9bf-38ecbcff8f92")
                        },
                        new
                        {
                            Id = new Guid("6f92b164-b19d-439d-807a-d90c77a5ef45"),
                            ColumnId = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4ec39cd4-e23f-4da4-be0d-6dd65dc32a6a"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("6da495d7-d0ea-43ba-acb8-59412484c6e3"),
                            ColumnId = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4ec39cd4-e23f-4da4-be0d-6dd65dc32a6a")
                        },
                        new
                        {
                            Id = new Guid("02643980-2a56-4563-a0a0-750903cf2589"),
                            ColumnId = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7dea40b7-7802-4d55-a522-522a8b7db53d"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("a3ea6a82-318b-45d4-b8ec-94cdfc36f209"),
                            ColumnId = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7dea40b7-7802-4d55-a522-522a8b7db53d")
                        },
                        new
                        {
                            Id = new Guid("99b3b345-8234-4276-bef8-aae2ac5b9275"),
                            ColumnId = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("363aa6c0-56f4-4f15-9643-b16a75fed83d"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("3e86fa99-8915-452f-9816-b270d5f56ab7"),
                            ColumnId = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("363aa6c0-56f4-4f15-9643-b16a75fed83d")
                        },
                        new
                        {
                            Id = new Guid("a3a1122e-be65-4e77-b249-629bf5910882"),
                            ColumnId = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("262ce73a-ce2b-422f-8cd7-59574ea3ef5f"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("b24c731b-9a0a-47a2-be36-9a20449198ad"),
                            ColumnId = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("262ce73a-ce2b-422f-8cd7-59574ea3ef5f")
                        },
                        new
                        {
                            Id = new Guid("381649e9-35c3-4c73-85f9-66bfb658579d"),
                            ColumnId = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("30dee042-4b84-458e-b500-65b1c74fc7c7"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("d6691349-81cb-4000-9d87-f4e789158a21"),
                            ColumnId = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("30dee042-4b84-458e-b500-65b1c74fc7c7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7c0fefb-0886-4153-9185-014d52089a88"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("aa526734-9e84-4f40-b14e-eb856a40da00"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10"),
                            ValueTypeId = new Guid("86216d10-1a07-4c1b-ba08-3415e20c4005")
                        },
                        new
                        {
                            Id = new Guid("9a245acf-9694-4885-96b2-801b9f625a68"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("cbb58720-cfe6-4c67-9077-60510bab8e4d"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("4b9f545e-3797-48ae-9878-b3be41aec242"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("071d3121-e829-41a9-a7dc-63c2713ad6ae"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("f8e607fc-960d-4c15-aa99-77a93829171b"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("ac3b557a-f000-49f2-96d4-358879c011e4"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("9ec7a633-c575-4903-84c9-554d7dc8e71b"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("0d69bfd6-711f-4b6b-b616-bbd9ab608b62"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("a1e304e5-7526-44c3-9cd5-97b32ab9fcba"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("f6fc0ff0-7cab-45cd-9785-6d462ae512d9"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("e7920855-69ec-49ed-b237-8110845015dc"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("bc5e0781-a7c1-4658-9a22-3bef24a01fe9"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("1a92c43a-ec6d-4b2f-9ddf-a1f09c5bf5d5"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("c13fb5f4-a5d0-46b4-881f-aa37f21816ad"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("9557c16b-6115-41e5-bd1b-4eb695384bc4"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("c7c6ff3e-e401-444a-bb00-54e5c72d4739"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("ba988429-3599-4779-b473-4acbcf9a886f"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("5ff041c6-9d25-4b02-8512-5e2775fdc475"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("44e66a48-e6bf-428b-958f-0aa241b6d75f"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("eea714ce-9d7c-4ffa-bb91-9ff10d0d569e"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("bc8d98f1-7d9c-4867-a0d3-ebcc2277d21b"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("bec18c6f-dcf2-4db3-8ff2-52f6cf38922b"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("9231d8a8-f1da-4027-8840-7483678efe53"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("e4c6f935-6649-4141-9aa9-b4838bcb29f1"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("286cd814-11dc-4a55-b15a-6d3c422b1a0e")
                        },
                        new
                        {
                            Id = new Guid("19856afd-0331-4e65-8080-8d853536080e"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("6af87a52-7eed-4ed1-b0c7-0af506949eaa"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("a18a775d-fcd4-459f-b914-523e5769c203"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("6c603679-f703-41be-9b3d-8682443a45f2"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("a896871f-7dca-42b6-b44a-a407e6cee720"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("80d8a6da-b05a-4e4a-8718-1819961f89d5"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("f35a04e7-9018-4f90-80c4-2bb09af9f851"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("df8494ba-f010-4a18-927b-f88b7f312d33"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("0fb7a83a-c75d-4504-8c2c-8a50fa930128"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("3be85085-85a3-4839-99a6-c54e1c267fed"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("704fc776-8dfe-4758-8228-8155e5e29189"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("7c3fc0c1-5e0d-437a-9cf3-257de0d36156"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("b1f38bd3-4316-4960-a022-182ebbbfaeba"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("7c9290ed-a1a2-4c3b-ba93-e36ec1b0fc04"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("5b8d62dc-1b52-4fdb-bc7e-5604182032ef"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("ea68d8cd-d542-4408-ac0c-624499c42d20"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("61122f13-5b7f-48af-a4cd-094d4a73807d"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("95da8fcf-fc9d-47d2-a6e8-d78148d10c2c"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("eea06e67-4e4d-4280-a78a-37bdb9a24d23"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("8076da5d-67ab-4e12-bb76-02e23ae130bd"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("3761b199-43fd-4a93-95eb-9c158a7ef2d2"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("3f4f40bd-e44f-45b6-b1e9-342aa08bcd6c"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("f710a677-9d8d-46f9-9134-36c59996a09d"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("43932a5e-4ae4-49d9-b54e-21c92c78b20e"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("f26abc9d-fd8a-46e5-a18a-6f412851e90a"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("af75ae9e-fe4b-4266-933b-8840e3c38593"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc"),
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("bc6f0a31-167c-43a7-8360-23f4b14a14ea"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ea0a189-add9-4fb3-9aaf-c1e2dd838037"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("dc350ec6-2f6b-4877-8777-d72c7050a062"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("d0bb8e29-ae04-4e88-9113-f28faab677d9")
                        },
                        new
                        {
                            Id = new Guid("89b82802-867b-4e4f-81ae-deac1e0bdab5"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("0ad486c0-e928-4467-b8c0-998ac7985ce4"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("5f604cbf-b2b6-4e3b-b1dd-8603dd1eb9f1"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("cf5b549f-da92-4dfa-9267-3c365ceff5c9"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("089b9c14-84d1-4c70-a386-347c137770e4"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("670d04c0-4608-4eb2-92b6-0e9968174d37"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("0be5f723-2729-4a1a-9aea-e50c2c24189c"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("68bbab74-57cb-41f1-b691-17ab7516f987"),
                            EditBlockId = new Guid("442321a2-eb8e-4252-865b-e836b92b4281"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            EditBlockId = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("81799947-97a0-4edf-8898-7ac5d03f9f25"),
                            EditBlockId = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("19609395-7cfa-4c4a-94c2-135e39f2b950"),
                            EditBlockId = new Guid("6c660954-514f-4871-913f-c58e3b17de28"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb")
                        },
                        new
                        {
                            Id = new Guid("b32e5cf3-095e-4a66-9cb6-886003ebb308"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("873f298e-683c-4246-b000-97efbf8e80a7"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("4a8e9061-057f-4ed1-8797-c31c69eb8201"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("a4168dc4-d19f-4811-9ccb-b3f038ba2992"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        },
                        new
                        {
                            Id = new Guid("37ed6da7-11b6-4020-8a6a-eddffca003eb"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d35a90a-d15b-4045-91c6-637265f6ea8e"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd")
                        },
                        new
                        {
                            Id = new Guid("12734d3f-313b-43d9-9f59-126524d60c64"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd")
                        },
                        new
                        {
                            Id = new Guid("5c241225-a9d9-4582-add6-44c62201b604"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("4a8e9061-057f-4ed1-8797-c31c69eb8201"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("0ec14e71-071a-46a3-a2e1-6a737d728b00"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("b32e5cf3-095e-4a66-9cb6-886003ebb308"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4709b3d4-90f5-415f-bce0-28b60f1d0493"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("873f298e-683c-4246-b000-97efbf8e80a7"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ae251340-2698-4ff7-82b4-856ec1c97de1"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd")
                        },
                        new
                        {
                            Id = new Guid("960b3b8c-3d68-43e7-a8f9-1194db9ecb10"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c")
                        },
                        new
                        {
                            Id = new Guid("8777cf9b-94b1-421b-9e77-99172a2f97fe"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212")
                        },
                        new
                        {
                            Id = new Guid("e8dc0281-c3e6-46cb-bfbb-d218640d2591"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212")
                        },
                        new
                        {
                            Id = new Guid("30de9046-aecf-4ffe-9ca9-c4a54fc3ccc0"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212")
                        },
                        new
                        {
                            Id = new Guid("43a7744d-c214-497c-8e8c-b32f475acd5e"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212")
                        },
                        new
                        {
                            Id = new Guid("37d53298-6889-4b2f-bf7b-378eacd99a0f"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1")
                        },
                        new
                        {
                            Id = new Guid("ad6e6a24-dc52-46e0-a5b5-813337960062"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("92e35077-dbc8-41f7-bbbb-a4508d1c4bbb"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a")
                        },
                        new
                        {
                            Id = new Guid("cebad1f3-2c1a-4fa5-a29e-6dc6e0808040"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019")
                        },
                        new
                        {
                            Id = new Guid("eb47b23e-a5f8-4483-b4fb-c58cf4527839"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a")
                        },
                        new
                        {
                            Id = new Guid("18ea5b48-b22d-423e-bd4a-2263a41f4e0f"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("a4168dc4-d19f-4811-9ccb-b3f038ba2992"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("48fa8a99-aeeb-4fce-99cb-f744e7acaaf7"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("37ed6da7-11b6-4020-8a6a-eddffca003eb"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("a01d615a-3f06-4ba6-a7aa-830cd63a166e"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb")
                        },
                        new
                        {
                            Id = new Guid("279dc8f8-2937-419a-b98e-7319d043d999"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb")
                        },
                        new
                        {
                            Id = new Guid("eea07bae-c84b-4b17-a80b-24eef7456e91"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c")
                        },
                        new
                        {
                            Id = new Guid("82857856-36d1-43a0-854d-983e50432454"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc")
                        },
                        new
                        {
                            Id = new Guid("3371c2ab-9664-4402-a3a8-d608749a203a"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("cf17dc1c-a02d-4183-85ee-3f0d1ae1a82d"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c0414d2-5820-4d6c-b071-d09ff4b67a4a"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("889f34c1-b5cf-4af8-85d1-355dce8c085a"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("33fda319-7aa9-4e32-bfe2-3956e72c6df6"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7203f2e6-1012-425b-8e5f-4aab263970a2"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9a64f626-1181-4cad-bc4a-60af4dce353f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("cf8d82db-2591-408a-a14e-5bdf85835a31"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("d7669888-52c8-4b48-99e1-22f26be886e6"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e98dfb25-8213-4e45-811e-c361474f616c"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("baa4543f-d30a-4b8e-9814-461f82b4b888"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("8f4c3a3b-dc5e-42e7-9e35-fca6f26a76d3"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("1682fdb5-2d27-410b-9586-dce905705fac"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("62a99744-70b6-41ff-84d1-5862b3c4cb17"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("ffe115e1-5304-4118-b5c5-d697c487a5cb"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("fce5ad2a-cbc5-4cff-8271-f8abeb1131c9"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("332dbd73-7148-47ae-b9bf-38ecbcff8f92"),
                            IsPrefilled = true,
                            TableId = new Guid("b0755350-9212-4176-89cd-66bea8054a10")
                        },
                        new
                        {
                            Id = new Guid("4ec39cd4-e23f-4da4-be0d-6dd65dc32a6a"),
                            IsPrefilled = true,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        },
                        new
                        {
                            Id = new Guid("7dea40b7-7802-4d55-a522-522a8b7db53d"),
                            IsPrefilled = true,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        },
                        new
                        {
                            Id = new Guid("363aa6c0-56f4-4f15-9643-b16a75fed83d"),
                            IsPrefilled = true,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        },
                        new
                        {
                            Id = new Guid("262ce73a-ce2b-422f-8cd7-59574ea3ef5f"),
                            IsPrefilled = true,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        },
                        new
                        {
                            Id = new Guid("30dee042-4b84-458e-b500-65b1c74fc7c7"),
                            IsPrefilled = true,
                            TableId = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("445a6a95-1400-4ab4-b4b9-f92bf81b1d08"),
                            FieldId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("3acb1f8d-67d4-4d84-96b1-2a870645c35b"),
                            FieldId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("fa6e8229-f9ae-4779-826b-67a1451f5bfd"),
                            FieldId = new Guid("9bf65fbb-54d5-4781-8717-62f08fac08ce"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("fd280a07-9c5e-4d5d-9040-75ad07c364f0"),
                            FieldId = new Guid("81799947-97a0-4edf-8898-7ac5d03f9f25"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("d765fef2-5998-4ad4-b84e-1009a0378b0c"),
                            FieldId = new Guid("81799947-97a0-4edf-8898-7ac5d03f9f25"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("c7bd018f-f123-4c60-be00-2bb7a0f81523"),
                            ColumnId = new Guid("4b9f545e-3797-48ae-9878-b3be41aec242"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("2f15f36c-b730-4dbd-b8d7-571fe0bf530b"),
                            ColumnId = new Guid("4b9f545e-3797-48ae-9878-b3be41aec242"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("93c512d4-9a12-41e2-98ee-b06b5c35071b"),
                            ColumnId = new Guid("4b9f545e-3797-48ae-9878-b3be41aec242"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("7ff900d2-f35c-4cce-b316-e75aaa0b9dd6"),
                            ColumnId = new Guid("eea714ce-9d7c-4ffa-bb91-9ff10d0d569e"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("a8da0cff-2f65-4d3f-bab4-7204f613f7f9"),
                            ColumnId = new Guid("eea714ce-9d7c-4ffa-bb91-9ff10d0d569e"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("85d41067-87eb-46a3-bdf4-bddd52ae9e99"),
                            ColumnId = new Guid("eea714ce-9d7c-4ffa-bb91-9ff10d0d569e"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("1be1bf59-4033-470c-bc3a-2336d40bde49"),
                            ColumnId = new Guid("a896871f-7dca-42b6-b44a-a407e6cee720"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("ad7a7a92-2be2-4e23-9273-f1ffe3b41ecc"),
                            ColumnId = new Guid("a896871f-7dca-42b6-b44a-a407e6cee720"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("dbe39909-1cb9-4c81-ac62-1a0257658557"),
                            ColumnId = new Guid("95da8fcf-fc9d-47d2-a6e8-d78148d10c2c"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("37964d56-948b-4c56-9e41-f8e5c84ababe"),
                            ColumnId = new Guid("95da8fcf-fc9d-47d2-a6e8-d78148d10c2c"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("7f085d9a-64b0-4377-91dd-e0960572b777"),
                            ColumnId = new Guid("8076da5d-67ab-4e12-bb76-02e23ae130bd"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("801395ff-b047-443b-8be4-32af234584fa"),
                            ColumnId = new Guid("8076da5d-67ab-4e12-bb76-02e23ae130bd"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("8454868f-6a98-4e04-a9fd-ecbbc893be0f"),
                            ColumnId = new Guid("8076da5d-67ab-4e12-bb76-02e23ae130bd"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("c993d6ae-59ed-4d4b-840c-7591ae220b97"),
                            ColumnId = new Guid("8076da5d-67ab-4e12-bb76-02e23ae130bd"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("cdfa6026-94d6-4ab2-a62f-cd2d68ae1567"),
                            ColumnId = new Guid("43932a5e-4ae4-49d9-b54e-21c92c78b20e"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("353a8483-74a2-4f58-90e3-2709041712de"),
                            ColumnId = new Guid("43932a5e-4ae4-49d9-b54e-21c92c78b20e"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("4c46412d-5047-41b4-8e14-d7718efaf269"),
                            ColumnId = new Guid("43932a5e-4ae4-49d9-b54e-21c92c78b20e"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("1ddd2616-e50f-4064-bf88-34286ac6715c"),
                            ColumnId = new Guid("43932a5e-4ae4-49d9-b54e-21c92c78b20e"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("4ee2186c-8bc1-4341-a5df-afe26a6a8716"),
                            ColumnId = new Guid("bec18c6f-dcf2-4db3-8ff2-52f6cf38922b"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("37571dab-aa08-4e0b-8532-767d54b08ca5"),
                            ColumnId = new Guid("bec18c6f-dcf2-4db3-8ff2-52f6cf38922b"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("39949fe6-f4fe-4481-bd3e-e33e644b23be"),
                            ColumnId = new Guid("6af87a52-7eed-4ed1-b0c7-0af506949eaa"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("27c7178a-3d3f-4a3c-83c0-fa3160a2c706"),
                            ColumnId = new Guid("6af87a52-7eed-4ed1-b0c7-0af506949eaa"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("349ac9d1-8681-4b01-af1e-c8ffee978ed6"),
                            ColumnId = new Guid("7c3fc0c1-5e0d-437a-9cf3-257de0d36156"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("d99d7ed0-f42c-4dd3-af5e-9d6eea9e151d"),
                            ColumnId = new Guid("7c3fc0c1-5e0d-437a-9cf3-257de0d36156"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ec869d87-780d-4461-9498-2668260da92c"),
                            ColumnId = new Guid("b1f38bd3-4316-4960-a022-182ebbbfaeba"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("08e55412-3c76-4761-80b0-36681a1bb37f"),
                            ColumnId = new Guid("b1f38bd3-4316-4960-a022-182ebbbfaeba"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("17cd04e6-258d-43e0-a1dc-50d14bacffd4"),
                            ColumnId = new Guid("b1f38bd3-4316-4960-a022-182ebbbfaeba"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("563dbcb3-17ad-495d-b439-48ec05911197"),
                            ColumnId = new Guid("b1f38bd3-4316-4960-a022-182ebbbfaeba"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("55e11e1a-8382-462a-99a7-58447e0856dd"),
                            ColumnId = new Guid("e7920855-69ec-49ed-b237-8110845015dc"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d3bc1c54-a6c3-4d67-9d1f-da5e58644a53"),
                            ColumnId = new Guid("e7920855-69ec-49ed-b237-8110845015dc"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("6ea16251-d95f-4fa7-830d-b9e87a28d0b9"),
                            ColumnId = new Guid("e7920855-69ec-49ed-b237-8110845015dc"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("8f640508-da51-47b4-aadc-2a7d20d4ab7d"),
                            ColumnId = new Guid("e4c6f935-6649-4141-9aa9-b4838bcb29f1"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("4bb71fdc-ca9a-4bf9-8b6b-bad64d75f626"),
                            ColumnId = new Guid("e4c6f935-6649-4141-9aa9-b4838bcb29f1"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("b29d32ae-a7ab-415c-a4f3-5695102c50a7"),
                            ColumnId = new Guid("df8494ba-f010-4a18-927b-f88b7f312d33"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("74b8bd5c-351c-478a-be57-a21c545b5b06"),
                            ColumnId = new Guid("df8494ba-f010-4a18-927b-f88b7f312d33"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0755350-9212-4176-89cd-66bea8054a10"),
                            EditBlockId = new Guid("bc6f0a31-167c-43a7-8360-23f4b14a14ea"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c10270b8-1745-4a9c-b9e9-6203ce24f74a"),
                            EditBlockId = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("20ee5791-13f3-4d8f-80f7-347b0bba2019"),
                            EditBlockId = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0396333d-fb94-438e-80fb-0add2a7aea91"),
                            EditBlockId = new Guid("826bc23e-2102-4236-9b71-51ee2c1b9103"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4f0f7932-89d5-4da9-ae21-f0d0046e73dd"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b80c6141-eddc-4903-8d89-7ec310cfb3cd"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("5ab59416-a2b7-4d16-8080-f5c5dfefd212"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("e1987b83-74bd-4f25-a244-6483c48fd3a1"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("134f4e63-54d2-48ee-9790-bd6f3707fd7c"),
                            EditBlockId = new Guid("5bfc8731-88ef-4367-87ee-e8df5bd99d1f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("ff123000-a20b-4fba-a332-ae81efe45d2a"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("6a364418-0ca8-4f8e-9227-23e52e2dbefb"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("9dbee2b5-160b-4861-a3f4-db5f8010509c"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("53dec41a-9a9e-4e63-bb29-b218537e68cc"),
                            EditBlockId = new Guid("4904908b-bf3f-4ada-937f-7216c14e7aff"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3bfe35b-1835-4b9a-aaea-8044c935527f"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("95e48c82-35ac-445d-9577-821fbdabdbc4"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58c343e6-d218-4b14-9c2c-972a233767e7"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("53b84499-7b5c-435c-b578-6f772c9879bb"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("286cd814-11dc-4a55-b15a-6d3c422b1a0e"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("d0bb8e29-ae04-4e88-9113-f28faab677d9"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("86216d10-1a07-4c1b-ba08-3415e20c4005"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
