// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910174639_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("02cbb2b5-4d83-412c-9e63-2cb8605da39c"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("02cbb2b5-4d83-412c-9e63-2cb8605da39c"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("93a8ba57-ea1c-4c68-9f28-526c856a18be"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("c94f389c-5cd6-4f8c-bc48-b001f39b3b88"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("f4e50202-b06b-461a-bdc1-876c87aa5891"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("bdc21a39-5bcf-4dbd-8462-56fb2a0bfead"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("1a4ae845-babb-47d9-9b04-97f0b1f7d88d"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("8311e53b-f7c5-48f5-9257-3b02ad060bdf"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("e9a837fe-ae32-4a9a-81d2-dee4c341f330"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("392e77e7-11ed-4162-8731-3a9d48192be4"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("019d460e-fc4e-4189-b8cc-23eb63d78306"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("ea089abb-ead8-4b47-82bf-ccdaa3b92b96"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("1cd5e797-4fea-4321-82ab-a8ca11924e6b"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("baf9e003-c1eb-426b-8f66-52f9db19b49f"),
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7")
                        },
                        new
                        {
                            FieldsId = new Guid("543fe1e2-0d5e-47b5-a9e4-8fdc3032d2c5"),
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95")
                        },
                        new
                        {
                            FieldsId = new Guid("5c4c89ad-9e0f-40db-bfe8-b235d980d97d"),
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95")
                        },
                        new
                        {
                            FieldsId = new Guid("0e0e107a-de79-4060-8bb4-c980e2fcac81"),
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95")
                        },
                        new
                        {
                            FieldsId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf")
                        },
                        new
                        {
                            FieldsId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14")
                        },
                        new
                        {
                            FieldsId = new Guid("666edbaf-9af5-4012-8af7-b60212541946"),
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14")
                        },
                        new
                        {
                            FieldsId = new Guid("bbe7ce67-d76f-4086-9404-72d4584b14c0"),
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            TablesId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            TablesId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            TablesId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            TablesId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            TablesId = new Guid("30c38833-0f80-43ff-a90c-333049816a07")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            TablesId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            TablesId = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            TablesId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            TablesId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            TablesId = new Guid("7a942551-54d9-4ff7-930e-410046a50488")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            TablesId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            TablesId = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            TablesId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            TablesId = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            TablesId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            TracksId = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            TracksId = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("ed92348d-11f5-409e-8f52-d61f0c150dc7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("90bf144c-7141-44c6-9a8e-090516507507")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("0407b820-a80a-4dda-a4d3-1d41ab1150f9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("4e65b7b9-3ffa-4f25-a437-b0768c008861")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("414b117e-1122-43ea-80de-ed48548c6161")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("c94f8f1a-f4e8-4493-b10d-9031c448c0c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            MarksId = new Guid("f3f4bf12-836d-4a7b-a9be-bb6ad2da7ab6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            MarksId = new Guid("552b0831-0964-47a5-84f0-b2401aa10033")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            MarksId = new Guid("7de98bd8-5c90-4ebb-a9ce-9d432eaabe9a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            MarksId = new Guid("042d25b8-72d4-4e4f-aca7-ce427b4cfb82")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            MarksId = new Guid("4d89c663-0897-4e57-a7c9-5705ca76d662")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            MarksId = new Guid("17f28762-b7f9-47ae-9224-ce8f13add82a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            MarksId = new Guid("c3f40036-e3e8-48a5-b966-32063713a580")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            MarksId = new Guid("3a67c6a7-eb06-4baf-b70a-efe3f8dd3edc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            MarksId = new Guid("cbb91061-a0ef-4805-905d-77feb9048c9b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("c3f40036-e3e8-48a5-b966-32063713a580")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("3a67c6a7-eb06-4baf-b70a-efe3f8dd3edc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("a06763c1-5166-4f11-8f38-d59416fe586b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("43e2ff93-450f-4552-84fb-bcda427c6951")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("ca6b2ece-72eb-4d52-989c-68ec19201a5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("bb63f58c-9606-41d2-9431-bf53bfadbd88")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            MarksId = new Guid("98e4e82c-c880-4aa9-be09-dd71877242d7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            MarksId = new Guid("cbb91061-a0ef-4805-905d-77feb9048c9b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            MarksId = new Guid("72248509-ee14-48c0-a985-4713301883f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            MarksId = new Guid("4567bca9-0036-4836-bb0a-0f34a0a20851")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            MarksId = new Guid("fdc291e2-00e1-4008-8772-433cdd1aff4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            MarksId = new Guid("90c2694c-1130-4066-890d-a0c7552d30df")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "35904fd5-b7ac-418b-b5d6-6d51df6b2d50",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "b3952180-bf00-42e4-a5c1-2b6399d8236b",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "be923f9e-014e-48b0-83e3-e73e728b8b62",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "edd683ea-cf06-48bd-9429-4a2796bbee49",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "e0165e81-9d3b-4219-a786-67ffe2c7e912",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9573523c-cf1d-4f8c-bf7f-6ee4b69c9e42"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("a835805c-3754-443e-9023-94f789f2b1cb"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("538d28b5-5356-49aa-b692-17bef499ab41"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("e07d1a6c-6c94-4b7c-8fad-32e0ffe1b4b0"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("de9f828d-2cc4-480b-8d31-77c053e722b2"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("04cda66e-1d11-43c8-86b0-337a450e77c4"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("024be3d5-32de-481f-9083-590d55a7f058"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3a4349d0-302f-4952-8c9e-308c5df3364e"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0edbdfee-deaf-48bd-ac98-9357c5ef8e51"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f938f750-1014-42ee-b97e-71dea3a1a67c"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("73f39748-de48-49a5-9f3a-ab09e104bd50"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f938f750-1014-42ee-b97e-71dea3a1a67c")
                        },
                        new
                        {
                            Id = new Guid("e0299bfb-3998-4364-b03d-6c12eb83fde0"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("20653146-eda0-488e-9895-d3ad157f5478"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("6d566707-89b7-4182-8052-065fd53af44e"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("20653146-eda0-488e-9895-d3ad157f5478")
                        },
                        new
                        {
                            Id = new Guid("80819b4c-c58c-4a6c-b8a3-cfe141f1d0a5"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("95854a17-33f2-41a8-af19-f7239bd63b05"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("d82e925d-f177-40cc-b438-336c124dee72"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("95854a17-33f2-41a8-af19-f7239bd63b05")
                        },
                        new
                        {
                            Id = new Guid("73779e7c-17f5-4554-ac16-130aa4f44aec"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5c41cc41-6002-447c-b3b7-8c689d27fa32"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("2b60f982-0cf6-4b51-9f6f-74d85e146d19"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5c41cc41-6002-447c-b3b7-8c689d27fa32")
                        },
                        new
                        {
                            Id = new Guid("c8504f8e-718c-4ecd-8057-551afd3e4f07"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("eabdc2d6-8675-47b0-8435-49452474fbee"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("8b3d6cbe-0e49-4dd4-8722-083ef1ac088b"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("eabdc2d6-8675-47b0-8435-49452474fbee")
                        },
                        new
                        {
                            Id = new Guid("dbb2ee6c-a266-4eb8-9472-12da49ffa80a"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b8d14532-e69d-491e-b9eb-78f2f8c66194"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("25e391ea-e8f5-4c4e-b640-ef54c11fd788"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b8d14532-e69d-491e-b9eb-78f2f8c66194")
                        },
                        new
                        {
                            Id = new Guid("cdf08a79-dc10-49b9-b582-b0253cc0c403"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("27ae2bf7-b2bb-4b2d-8996-114a9aecd633"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("96863b7d-7d5f-4311-b9ff-3fef2d69c0d4"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("27ae2bf7-b2bb-4b2d-8996-114a9aecd633")
                        },
                        new
                        {
                            Id = new Guid("d902c4c7-2943-4716-b926-2497fe38cb7d"),
                            ColumnId = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("743f31b8-8e93-4ba2-9818-56dc3be8dd70"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("4f89acef-fa07-4f1e-a7d7-7a89c1e99416"),
                            ColumnId = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("743f31b8-8e93-4ba2-9818-56dc3be8dd70")
                        },
                        new
                        {
                            Id = new Guid("b37d6f13-e8a5-4c62-b6fc-61ff697b77e5"),
                            ColumnId = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("67051994-66a3-41f3-bd13-33169d94da80"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("de0d9c8b-cf68-424e-b435-8ec28404fe0d"),
                            ColumnId = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("67051994-66a3-41f3-bd13-33169d94da80")
                        },
                        new
                        {
                            Id = new Guid("cb36a518-174f-4439-b6f2-a9ab667d1d88"),
                            ColumnId = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("997edd44-795d-4fa5-8b76-b97551aed762"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("ea5fedae-baa1-4a9a-927c-94a6c845c8ca"),
                            ColumnId = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("997edd44-795d-4fa5-8b76-b97551aed762")
                        },
                        new
                        {
                            Id = new Guid("54d1b75a-e85a-415f-a2de-c1fd253b8e68"),
                            ColumnId = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("696b0289-a660-464b-81bb-560af17852b2"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("78ef06d9-d4b8-41b9-90b5-42f4b68ce653"),
                            ColumnId = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("696b0289-a660-464b-81bb-560af17852b2")
                        },
                        new
                        {
                            Id = new Guid("f4e2d906-f148-4973-be01-c48c15518d36"),
                            ColumnId = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("93e9e782-5e2c-41d1-be83-14e3defb96e7"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("903e52db-1906-43ef-ad6a-b9a5cf5d838e"),
                            ColumnId = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("93e9e782-5e2c-41d1-be83-14e3defb96e7")
                        },
                        new
                        {
                            Id = new Guid("99d4ed29-d875-41ab-b760-a7630ddb2558"),
                            ColumnId = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("eef130a2-6c21-4a6c-b4c4-a8742423834e"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("a0825153-fc6c-45b3-b987-22a632bf5e0a"),
                            ColumnId = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("eef130a2-6c21-4a6c-b4c4-a8742423834e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7978997-edb1-46d0-9432-60d6a7a11610"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("583569cf-aed3-4bf4-b20b-d3108830bb46"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56"),
                            ValueTypeId = new Guid("7876653e-40c9-432f-895a-54ad9422a34c")
                        },
                        new
                        {
                            Id = new Guid("279b31ba-12d3-42a4-9fe0-1e244a0e4e6f"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("8c7a01cf-6fdf-4860-8e46-84239c5c309f"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("4b5b91b6-5152-4c82-9444-05b01a8133f1"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("c5896183-0556-4ddb-b8db-59474d7ea69b"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("67f06a57-b09c-4ce0-927f-c882b9c57e22"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("06a5dae0-5524-4787-8de0-0e3c2f34d388"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("7a906850-8883-4d6c-9611-a59d51e92945"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("8966b28a-de8a-4553-ad7c-446a34935a73"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("5830aa6b-a9dd-475b-a7fb-1f1c236908c4"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("d66cdc4f-e702-4d3e-9258-47bf0aa734da"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("e554e881-f688-4839-8dfc-b11da695230b"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("74e9ba44-3b8e-484b-9e13-633773de8707"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("9c3516ea-4436-4178-8eb3-d9074ae90593"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("0013f533-661b-4b36-aa76-9e3b4b414d57"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("343483c0-56c4-4f06-ae21-df0e31c77649"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("ef33b13e-6f20-42a3-8b40-a3ed1b72cc99"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("2afbebf7-206f-46a0-bf23-5dfe7bffb7e7"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("56c16b2a-c8ea-4550-a1d0-cef732eecc22"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("1b0303f3-88af-409e-b7d5-3f7266b68ec2"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("95d5dbcb-5194-4de6-9f19-e3f8adfd2854"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("d4fa0af8-f9c1-41ed-8822-30ac421927ea"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("082651d9-007c-4578-8115-c3d68877a303"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("a823a5cf-8d94-48ad-b4c3-14ff77137df0"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("f9146a70-ae0c-4477-aee3-c031ad29efa0"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("f296d010-7248-4ad2-a3e3-10f6825f9617")
                        },
                        new
                        {
                            Id = new Guid("d8725bc0-fe00-465f-9054-071545a06363"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("80ae6aeb-0130-48e4-83f7-aeff92127b29"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("d57d17ed-3c9f-4e6a-bd51-a0ad1ee79c99"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("58342579-4980-4a2a-9722-c91bcbf07ff1"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("30c38833-0f80-43ff-a90c-333049816a07"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("dc54dc56-5bcc-4f76-a43a-d9fd97c981a1"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("30c38833-0f80-43ff-a90c-333049816a07"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("bf7aae8e-da7b-46e6-a09a-1c82636b5eff"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("30c38833-0f80-43ff-a90c-333049816a07"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("e017de26-7c6f-4ef4-b01c-f847ba48ec91"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("bc966b65-802a-4c0c-8030-ec5127a7359a"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("b1fdab69-5355-44bd-b1fc-850adc2f7519"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("d7305ec9-9b9f-4f18-95d3-707580f14522"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("f3d117ee-6bd3-4bcc-8a92-b1e8e4eaadd1"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("df389a80-4299-44c9-b93e-65a442277b0b"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("ffcbde6c-027b-4134-90d2-e74417e2cb8b"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("bb6edd75-5a6d-4d1f-8071-71edf7bc806b"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("5fa607b3-fc38-47f9-81af-e0c7f0e09e30"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("aa5966e6-14e7-430b-bfca-3fe887b55c74"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("5c084d49-aaf8-47a1-8655-4c9fd4065833"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("2bcd4a4c-df5e-48bd-89f2-6b943034d81b"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("b2fac289-6915-4c62-b201-ba0deb8a856b"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("b6c07694-09c6-4d5b-a090-2c127d1dec3b"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("43803922-5e12-4bc7-bb47-457e0b33d745"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("be3675f8-b0aa-488c-b97c-d790096faf06"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("852c97be-eba1-437b-b496-f855b4e2e886"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("d46939c4-cad0-40a5-a4b4-918115842cd1"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("82f58982-d990-4bb1-95e0-d2cfae3acccf"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("a7287ec4-8f31-4ed4-8878-d3c339615088"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6"),
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("02cbb2b5-4d83-412c-9e63-2cb8605da39c"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10746455-1427-4f8b-9e1d-2320cf8290b4"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93a8ba57-ea1c-4c68-9f28-526c856a18be"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("c94f389c-5cd6-4f8c-bc48-b001f39b3b88"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("e35da956-df7a-4234-b4f0-99bcad4623a1")
                        },
                        new
                        {
                            Id = new Guid("f4e50202-b06b-461a-bdc1-876c87aa5891"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("bdc21a39-5bcf-4dbd-8462-56fb2a0bfead"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("1a4ae845-babb-47d9-9b04-97f0b1f7d88d"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("8311e53b-f7c5-48f5-9257-3b02ad060bdf"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("e9a837fe-ae32-4a9a-81d2-dee4c341f330"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("392e77e7-11ed-4162-8731-3a9d48192be4"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("019d460e-fc4e-4189-b8cc-23eb63d78306"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("ea089abb-ead8-4b47-82bf-ccdaa3b92b96"),
                            EditBlockId = new Guid("63cb9d69-2f54-41a5-8564-1c9794060f03"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            EditBlockId = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("1cd5e797-4fea-4321-82ab-a8ca11924e6b"),
                            EditBlockId = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("baf9e003-c1eb-426b-8f66-52f9db19b49f"),
                            EditBlockId = new Guid("6eb54a51-e2c3-496e-9c14-3b4d59529662"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5")
                        },
                        new
                        {
                            Id = new Guid("543fe1e2-0d5e-47b5-a9e4-8fdc3032d2c5"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("5c4c89ad-9e0f-40db-bfe8-b235d980d97d"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("0e0e107a-de79-4060-8bb4-c980e2fcac81"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("666edbaf-9af5-4012-8af7-b60212541946"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        },
                        new
                        {
                            Id = new Guid("bbe7ce67-d76f-4086-9404-72d4584b14c0"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed92348d-11f5-409e-8f52-d61f0c150dc7"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23")
                        },
                        new
                        {
                            Id = new Guid("90bf144c-7141-44c6-9a8e-090516507507"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23")
                        },
                        new
                        {
                            Id = new Guid("0407b820-a80a-4dda-a4d3-1d41ab1150f9"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("0e0e107a-de79-4060-8bb4-c980e2fcac81"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("4e65b7b9-3ffa-4f25-a437-b0768c008861"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("543fe1e2-0d5e-47b5-a9e4-8fdc3032d2c5"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("414b117e-1122-43ea-80de-ed48548c6161"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("5c4c89ad-9e0f-40db-bfe8-b235d980d97d"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c94f8f1a-f4e8-4493-b10d-9031c448c0c2"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3")
                        },
                        new
                        {
                            Id = new Guid("f3f4bf12-836d-4a7b-a9be-bb6ad2da7ab6"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c")
                        },
                        new
                        {
                            Id = new Guid("552b0831-0964-47a5-84f0-b2401aa10033"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a")
                        },
                        new
                        {
                            Id = new Guid("7de98bd8-5c90-4ebb-a9ce-9d432eaabe9a"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a")
                        },
                        new
                        {
                            Id = new Guid("042d25b8-72d4-4e4f-aca7-ce427b4cfb82"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a")
                        },
                        new
                        {
                            Id = new Guid("4d89c663-0897-4e57-a7c9-5705ca76d662"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a")
                        },
                        new
                        {
                            Id = new Guid("17f28762-b7f9-47ae-9224-ce8f13add82a"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("30c38833-0f80-43ff-a90c-333049816a07")
                        },
                        new
                        {
                            Id = new Guid("c3f40036-e3e8-48a5-b966-32063713a580"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("3a67c6a7-eb06-4baf-b70a-efe3f8dd3edc"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4")
                        },
                        new
                        {
                            Id = new Guid("cbb91061-a0ef-4805-905d-77feb9048c9b"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856")
                        },
                        new
                        {
                            Id = new Guid("a06763c1-5166-4f11-8f38-d59416fe586b"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed")
                        },
                        new
                        {
                            Id = new Guid("43e2ff93-450f-4552-84fb-bcda427c6951"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("666edbaf-9af5-4012-8af7-b60212541946"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("ca6b2ece-72eb-4d52-989c-68ec19201a5e"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("bbe7ce67-d76f-4086-9404-72d4584b14c0"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("bb63f58c-9606-41d2-9431-bf53bfadbd88"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488")
                        },
                        new
                        {
                            Id = new Guid("98e4e82c-c880-4aa9-be09-dd71877242d7"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("7a942551-54d9-4ff7-930e-410046a50488")
                        },
                        new
                        {
                            Id = new Guid("72248509-ee14-48c0-a985-4713301883f0"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665")
                        },
                        new
                        {
                            Id = new Guid("4567bca9-0036-4836-bb0a-0f34a0a20851"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6")
                        },
                        new
                        {
                            Id = new Guid("fdc291e2-00e1-4008-8772-433cdd1aff4b"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("90c2694c-1130-4066-890d-a0c7552d30df"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d6b4747-90c1-44ab-831a-29404a012be7"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6e8b61a7-73a5-4da5-9114-a506063ace95"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("91b3af8e-1004-4f85-baae-1e822ef57833"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("14c70270-af4c-4cdf-b86b-d0edf2fd06cf"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("210d4982-0674-4727-883b-cc6ba1a8ad14"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("3ef15748-de91-45aa-aa34-66dba21db4f9"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("b489c041-15b9-49f1-9efa-ae6fada3cd28"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f938f750-1014-42ee-b97e-71dea3a1a67c"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("20653146-eda0-488e-9895-d3ad157f5478"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("95854a17-33f2-41a8-af19-f7239bd63b05"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("5c41cc41-6002-447c-b3b7-8c689d27fa32"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("eabdc2d6-8675-47b0-8435-49452474fbee"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("b8d14532-e69d-491e-b9eb-78f2f8c66194"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("27ae2bf7-b2bb-4b2d-8996-114a9aecd633"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("743f31b8-8e93-4ba2-9818-56dc3be8dd70"),
                            IsPrefilled = true,
                            TableId = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56")
                        },
                        new
                        {
                            Id = new Guid("67051994-66a3-41f3-bd13-33169d94da80"),
                            IsPrefilled = true,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        },
                        new
                        {
                            Id = new Guid("997edd44-795d-4fa5-8b76-b97551aed762"),
                            IsPrefilled = true,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        },
                        new
                        {
                            Id = new Guid("696b0289-a660-464b-81bb-560af17852b2"),
                            IsPrefilled = true,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        },
                        new
                        {
                            Id = new Guid("93e9e782-5e2c-41d1-be83-14e3defb96e7"),
                            IsPrefilled = true,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        },
                        new
                        {
                            Id = new Guid("eef130a2-6c21-4a6c-b4c4-a8742423834e"),
                            IsPrefilled = true,
                            TableId = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb57eefd-23a0-4d8c-8186-dbc5b5211fb8"),
                            FieldId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("df0f01fa-b6db-48ca-b12f-5d4091660882"),
                            FieldId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("02c22160-2c72-4b5c-b7e5-8022d99b02d0"),
                            FieldId = new Guid("769e9d87-2bf0-4f4b-87af-b22a81927188"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("41e778ca-b531-498c-9227-b1575be57719"),
                            FieldId = new Guid("1cd5e797-4fea-4321-82ab-a8ca11924e6b"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("c1d1ecf4-6b64-4909-942e-1e2c8310783d"),
                            FieldId = new Guid("1cd5e797-4fea-4321-82ab-a8ca11924e6b"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("4e6e1aed-6409-403e-9b79-11a01f021fa5"),
                            ColumnId = new Guid("4b5b91b6-5152-4c82-9444-05b01a8133f1"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("999f2b11-4962-49e1-a54a-05458f822ab5"),
                            ColumnId = new Guid("4b5b91b6-5152-4c82-9444-05b01a8133f1"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("e68bf556-36ac-406f-ab57-0b5d0cbb1c96"),
                            ColumnId = new Guid("4b5b91b6-5152-4c82-9444-05b01a8133f1"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("0762bd02-5c16-40af-9cb1-8c8706a5bd17"),
                            ColumnId = new Guid("95d5dbcb-5194-4de6-9f19-e3f8adfd2854"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("204f8e77-3282-4ee4-afcd-8e450cd4fc90"),
                            ColumnId = new Guid("95d5dbcb-5194-4de6-9f19-e3f8adfd2854"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("a6bab86b-4376-486f-ac59-b5a1dc0e1582"),
                            ColumnId = new Guid("95d5dbcb-5194-4de6-9f19-e3f8adfd2854"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("6f2873de-fe36-4110-8e90-6fe0619ef047"),
                            ColumnId = new Guid("dc54dc56-5bcc-4f76-a43a-d9fd97c981a1"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("8bd3503b-6196-4017-b936-76b50ad0c1b5"),
                            ColumnId = new Guid("dc54dc56-5bcc-4f76-a43a-d9fd97c981a1"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("7feec527-5835-407a-86d1-6b08faf05c4b"),
                            ColumnId = new Guid("2bcd4a4c-df5e-48bd-89f2-6b943034d81b"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("cbdbfdec-1dfd-4158-a190-312b2099d5a7"),
                            ColumnId = new Guid("2bcd4a4c-df5e-48bd-89f2-6b943034d81b"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("d08c3b88-8162-4f9e-ad7f-3f85a97e1601"),
                            ColumnId = new Guid("b6c07694-09c6-4d5b-a090-2c127d1dec3b"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("539ecf2b-3bf8-4708-8b5b-6b16f8ab5e7b"),
                            ColumnId = new Guid("b6c07694-09c6-4d5b-a090-2c127d1dec3b"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c286e4ea-9212-4a26-b0c8-a87d9478d86c"),
                            ColumnId = new Guid("b6c07694-09c6-4d5b-a090-2c127d1dec3b"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("96c385bc-7fe7-419a-898d-02c6c73d7002"),
                            ColumnId = new Guid("b6c07694-09c6-4d5b-a090-2c127d1dec3b"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("3c02706d-8098-47a9-8677-1349655097a6"),
                            ColumnId = new Guid("d46939c4-cad0-40a5-a4b4-918115842cd1"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("29012b35-1183-4ac7-8ac3-fa464b11c250"),
                            ColumnId = new Guid("d46939c4-cad0-40a5-a4b4-918115842cd1"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("6fd3e0b3-c6e3-4461-a60e-bd1ece253153"),
                            ColumnId = new Guid("d46939c4-cad0-40a5-a4b4-918115842cd1"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("5211ec2c-f254-47cb-abb8-91e011df8a41"),
                            ColumnId = new Guid("d46939c4-cad0-40a5-a4b4-918115842cd1"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("9cc7361f-83e8-45b8-a16a-f5de92f5e7bc"),
                            ColumnId = new Guid("082651d9-007c-4578-8115-c3d68877a303"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("8ee8361d-d765-4bf0-aef1-df2395eea42a"),
                            ColumnId = new Guid("082651d9-007c-4578-8115-c3d68877a303"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("e5607aa4-8372-42fe-a88a-9c090fccc906"),
                            ColumnId = new Guid("80ae6aeb-0130-48e4-83f7-aeff92127b29"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("611f6bbe-7b19-4683-b2bb-fec73589b28b"),
                            ColumnId = new Guid("80ae6aeb-0130-48e4-83f7-aeff92127b29"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("d7251aa5-e2b4-483a-b462-2ef74b6a7e97"),
                            ColumnId = new Guid("df389a80-4299-44c9-b93e-65a442277b0b"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e992813c-b1b8-4c54-955f-cd74e33d7e2f"),
                            ColumnId = new Guid("df389a80-4299-44c9-b93e-65a442277b0b"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ed59a196-5966-4806-9d71-a504dd52d02c"),
                            ColumnId = new Guid("ffcbde6c-027b-4134-90d2-e74417e2cb8b"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("9a616536-c7bf-42b6-ab48-e84e048a455f"),
                            ColumnId = new Guid("ffcbde6c-027b-4134-90d2-e74417e2cb8b"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("24b63ee9-674b-48d6-9cff-038ff77b0ad9"),
                            ColumnId = new Guid("ffcbde6c-027b-4134-90d2-e74417e2cb8b"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("5ddbcd3e-ab99-47a7-bac3-a13b1a611a9e"),
                            ColumnId = new Guid("ffcbde6c-027b-4134-90d2-e74417e2cb8b"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("14ed240c-7b81-4eb6-aa3e-fe57a914d231"),
                            ColumnId = new Guid("e554e881-f688-4839-8dfc-b11da695230b"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("f79028d7-e670-4b93-9b60-4e17305b6997"),
                            ColumnId = new Guid("e554e881-f688-4839-8dfc-b11da695230b"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("e0a7059b-f3d0-4160-b702-a0b08f35ff1d"),
                            ColumnId = new Guid("e554e881-f688-4839-8dfc-b11da695230b"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("46f02232-e24b-419e-bf8f-49cee4cb329c"),
                            ColumnId = new Guid("f9146a70-ae0c-4477-aee3-c031ad29efa0"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("9d81f355-852b-4de2-b6e0-1014bfb9b1d7"),
                            ColumnId = new Guid("f9146a70-ae0c-4477-aee3-c031ad29efa0"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("f257aa4e-debc-45ef-a34c-5ca67a737a6d"),
                            ColumnId = new Guid("bc966b65-802a-4c0c-8030-ec5127a7359a"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e4826291-bc37-4b40-a547-3e55584fe3a9"),
                            ColumnId = new Guid("bc966b65-802a-4c0c-8030-ec5127a7359a"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62935825-d4ef-4c9f-9a47-b5e129b8fd56"),
                            EditBlockId = new Guid("02cbb2b5-4d83-412c-9e63-2cb8605da39c"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("eb0beede-75fa-4c4b-89bf-57fec64a47e4"),
                            EditBlockId = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("de0dd325-f661-4a8c-9cda-ce460d1b7856"),
                            EditBlockId = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0d6b01d8-c2b2-4981-94b4-d55e1479fcdf"),
                            EditBlockId = new Guid("aee1c6f0-d172-4d33-baa3-f3b94610f9b6"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5f59bc9f-1f02-40c7-8988-b0d4b5d16b23"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("46a5f250-f1d8-4449-bb82-2eefec5a3fe3"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("a68c47e6-7d30-4f41-836f-03ac4fb5181a"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("30c38833-0f80-43ff-a90c-333049816a07"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("0f63fcce-759d-4f8c-bbdb-dbea7bc3978c"),
                            EditBlockId = new Guid("4751b4b4-b8cc-4f41-9ec5-f483a06cfeae"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("eeb6911c-e106-4eef-9862-55b0e08b49ed"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("7a942551-54d9-4ff7-930e-410046a50488"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("7bd55868-c2ee-4222-9c69-8e7745b5d665"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("c8ac826d-5717-43b9-b581-9df3e50354a6"),
                            EditBlockId = new Guid("da777e74-f04e-4a95-92c8-273842897bd4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee256d2d-2d15-4a3c-87e9-7374256470a0"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d913f7b8-2963-4f7a-aaf5-8acd52b80ee4"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b6005a3-6de8-498a-8282-9e315b856b90"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("a9f78d42-83e4-4837-8f58-fab74440f7b5"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("f296d010-7248-4ad2-a3e3-10f6825f9617"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("e35da956-df7a-4234-b4f0-99bcad4623a1"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("7876653e-40c9-432f-895a-54ad9422a34c"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
