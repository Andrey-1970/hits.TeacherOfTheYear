// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910171115_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ad7b8dd2-a748-4e12-a0e9-4153bec6e692"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            EditBlocksId = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ad7b8dd2-a748-4e12-a0e9-4153bec6e692"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("87198fa4-90dc-433c-8397-cac33d2ed235"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("74be5948-c512-404f-83d9-786baddf38e9"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("a3f47aef-3365-49eb-ae6f-53f21ebbf3d7"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("3b6ba367-d632-44b0-83d4-b5688e4f339f"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("dac2fbf1-b7f2-49aa-ba4d-46dcd6b71e82"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("190f3662-1c39-46e1-9ff7-b2847ab3ff62"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("38774fc4-08aa-4cb0-b360-6a18ee3fabfc"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("d8ac395e-3c65-4699-a740-9d86bb7be008"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("36cc01f1-e301-4844-91c2-c1ba2523f877"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("e49774b1-b09c-4dd2-a721-36a86e816714"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("5ac0949b-8195-4f4f-9c16-d63f89fc002e"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("f3e71212-1747-4ab9-9013-bda3019efd23"),
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d")
                        },
                        new
                        {
                            FieldsId = new Guid("66adab8d-ddd4-4829-a1e3-2bbc8ff99324"),
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03")
                        },
                        new
                        {
                            FieldsId = new Guid("bfb1724c-2934-484d-bf23-7d1b432cc9ba"),
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03")
                        },
                        new
                        {
                            FieldsId = new Guid("772d09d6-1100-4d05-a9c8-10c180b1c1aa"),
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03")
                        },
                        new
                        {
                            FieldsId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661")
                        },
                        new
                        {
                            FieldsId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c")
                        },
                        new
                        {
                            FieldsId = new Guid("6df78fad-6b3e-4d1b-869b-962917044372"),
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c")
                        },
                        new
                        {
                            FieldsId = new Guid("13242216-f904-4a9b-b922-642e921cb56c"),
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            TablesId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            TablesId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            TablesId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            TablesId = new Guid("de13ac7c-436f-464f-be53-028e857738ee")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            TablesId = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            TablesId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            TablesId = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            TablesId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            TablesId = new Guid("93d22632-1384-42b5-9730-52e924c471e2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            TablesId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            TablesId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            TablesId = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            TablesId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            TablesId = new Guid("1d09ce56-95ea-4a44-895d-368208643870")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            TablesId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            TracksId = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            TracksId = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("902620ee-b410-490d-a7eb-279d99b836d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("9a0fb81b-e445-428b-a138-8504798e0689")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("38e86127-35b7-4a85-ae3b-37635d23806c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("51c0bfd5-54e3-4282-a428-850845b1f996")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("854f4288-350f-4a06-839a-1a5e35661ae2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("4cfe5b5e-203a-4b31-99db-3836a9cca298")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            MarksId = new Guid("4ecfdb43-e729-48c3-aa87-b71bb99e5be5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            MarksId = new Guid("f7581523-987e-41d9-a7f4-1edff7735a40")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            MarksId = new Guid("a9aa8408-17e7-45d0-aa88-519b1ba3227e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            MarksId = new Guid("6dcc2b10-2083-423b-8cf4-78e806cba501")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            MarksId = new Guid("0d831865-db24-4356-97a9-5901664f592a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            MarksId = new Guid("4c9334b3-5a83-4d81-8386-0c38bbd525a6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            MarksId = new Guid("cc5aad06-85fa-4cd0-9640-d247f2464871")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            MarksId = new Guid("0c1a4869-4465-4355-9037-de683bb878be")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            MarksId = new Guid("78214b2a-b80f-4e51-a0a0-0321fc3d8c73")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("cc5aad06-85fa-4cd0-9640-d247f2464871")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("0c1a4869-4465-4355-9037-de683bb878be")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("db758007-8d84-44d8-b5d8-493e35b132d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("7a397476-c662-4728-9d17-5126186cb789")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("3bdfc411-d925-4599-9706-ce2b6227ee5a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("746ca343-156e-42b0-bcac-266a4d350820")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            MarksId = new Guid("42bf3c14-e3c2-4d8f-a39f-bdbbef0bb949")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            MarksId = new Guid("78214b2a-b80f-4e51-a0a0-0321fc3d8c73")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            MarksId = new Guid("51ef4dd1-d4a8-4737-8853-f1c5454b49c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            MarksId = new Guid("7182f437-cd87-4a2c-b269-a1db61abd174")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            MarksId = new Guid("bf92e7e9-6e5d-4d35-8bb2-e9693c270310")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            MarksId = new Guid("3b7c6dd0-35fb-4429-937b-b0debe2ffbee")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f2fc2487-5634-48fe-b7fc-55dc6ae22d39",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "0ac7b7a5-fd3d-445b-9799-5d1acae823ec",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "3d652730-1bfe-4c06-884f-324360ca947c",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "21048b29-4a3e-490e-b020-6ea97a53dd59",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "3cb0a7f6-80ad-4801-9989-747fcbce1fba",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a216686-a310-4c9a-aeb5-46f47a6a02d9"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("8094ac8f-b610-421c-9023-126dddb062e3"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("1a3031f2-a98b-4708-a259-23a7faf189ae"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("61f260c8-9647-44fb-a451-b070f621b6c9"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("0a8111bf-4b97-40b8-8267-d27535d65f40"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("079b2ed6-4e64-4b3c-85b0-0103f89f2cdf"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5baddaa6-e89f-484d-9bfe-b311bccf891c"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7e9cd782-1a29-4da8-99f8-2a5d4d766852"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4f88876-9341-405f-b19d-cbac108a6846"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c5efec5f-b98b-49b6-92f5-ee9cbd24731b"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("8f917b8e-af42-4eff-8510-92c7f4ad7feb"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c5efec5f-b98b-49b6-92f5-ee9cbd24731b")
                        },
                        new
                        {
                            Id = new Guid("3e225323-5e54-4bf0-966c-b1c718c0ec69"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ad83d774-4926-4f45-b815-32f44af8c40c"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("56a00795-1f42-4536-9956-fbb9f5ffae9a"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ad83d774-4926-4f45-b815-32f44af8c40c")
                        },
                        new
                        {
                            Id = new Guid("eca400d2-79c2-4a9a-883c-d84aa74fe1b1"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("aa548383-b4e5-4175-a230-33126b148324"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("002c3b2c-7219-4f8f-a781-e16116a36955"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("aa548383-b4e5-4175-a230-33126b148324")
                        },
                        new
                        {
                            Id = new Guid("c1be94e6-d514-49c2-9ef4-883450715e26"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("497d36ac-37e2-4c22-98d8-b4ece6f19b48"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("8103b030-259b-4f96-979e-13d98c1be364"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("497d36ac-37e2-4c22-98d8-b4ece6f19b48")
                        },
                        new
                        {
                            Id = new Guid("40352cc6-006f-4276-abc2-95f5bb551f64"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9a0f3e78-f319-4b3f-a670-0ecaccf1b823"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("010ccf05-c56b-400a-a410-29ba41ad4423"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9a0f3e78-f319-4b3f-a670-0ecaccf1b823")
                        },
                        new
                        {
                            Id = new Guid("b3351a5c-4d26-462c-a6c6-ca11ba5e6104"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("40869c61-bf17-4202-ab7e-2d6ad4ee94f5"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("1a3fc1aa-20d5-4b7b-8092-ced8b8dd45ae"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("40869c61-bf17-4202-ab7e-2d6ad4ee94f5")
                        },
                        new
                        {
                            Id = new Guid("a61d68d7-e283-4337-ab1e-74f849c73df4"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("414f0412-b0c3-476a-8d3b-4f588639cca7"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("3fc65a5c-535d-4807-8ad9-95e7800cca24"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("414f0412-b0c3-476a-8d3b-4f588639cca7")
                        },
                        new
                        {
                            Id = new Guid("11e58916-7896-4977-97ac-ac3d682e7b75"),
                            ColumnId = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ffb732d7-33ed-49a4-9b4e-47bafad512d9"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("070b6237-b97e-4a3d-bbc1-6f20d3115841"),
                            ColumnId = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ffb732d7-33ed-49a4-9b4e-47bafad512d9")
                        },
                        new
                        {
                            Id = new Guid("3f364b2f-1465-4de2-8645-6d522d0f954b"),
                            ColumnId = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("546f996f-3c7a-4e84-b6f3-06122fe6a810"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("6ae35bd3-79d3-4b6f-ab9c-280f9bc44083"),
                            ColumnId = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("546f996f-3c7a-4e84-b6f3-06122fe6a810")
                        },
                        new
                        {
                            Id = new Guid("b8d577ea-d21d-4227-a256-f533bfd12069"),
                            ColumnId = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6c85c44d-50cb-407b-bb30-4482348f435b"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("5427a2ba-3dfa-413c-8acd-aaeb3d94e4d9"),
                            ColumnId = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6c85c44d-50cb-407b-bb30-4482348f435b")
                        },
                        new
                        {
                            Id = new Guid("0b3cfa0e-77c9-4e91-ac17-5a3e36d25977"),
                            ColumnId = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("681299f7-cc86-408f-8539-9c94ee364814"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("974f0107-ff57-40f4-be95-df7215581663"),
                            ColumnId = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("681299f7-cc86-408f-8539-9c94ee364814")
                        },
                        new
                        {
                            Id = new Guid("814dae57-de98-4215-9f8a-c92d6bb5108f"),
                            ColumnId = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("332c8c13-efce-423a-a2d3-f25c55f35944"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("7feadb19-ac8f-4c85-a7c7-fbb26206bb12"),
                            ColumnId = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("332c8c13-efce-423a-a2d3-f25c55f35944")
                        },
                        new
                        {
                            Id = new Guid("b966c937-f5e3-4651-8ab6-6e32179f2b62"),
                            ColumnId = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5f54cab0-6fd8-4059-9b18-19f1ffb2bf09"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("07ce7811-c689-4213-b36d-a442bb307d85"),
                            ColumnId = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5f54cab0-6fd8-4059-9b18-19f1ffb2bf09")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96a09638-966b-482b-a88e-27e1817aa71f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("72bdf078-c81a-4795-bf8b-d5eb7aebc7a7"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015"),
                            ValueTypeId = new Guid("cdfdb011-4a38-4866-bc47-5f7ee665cc1d")
                        },
                        new
                        {
                            Id = new Guid("922b714b-e078-4e8c-a8bc-cda4cbc2d142"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("fff2a2dd-5adb-4903-9768-3525d6f36c0f"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("4a96c023-3d63-428d-8cc2-fc52741e397b"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("163a3526-8c25-4a74-83d4-f8a2b28861e8"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("2d8bad94-db38-4cd9-96cb-1a585abf2169"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("248dc71e-a4cd-4a9c-aa47-1d7ade6bc6c3"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("c84dca20-576d-4645-b8ba-7a17e05a93eb"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("ab5e3c53-2a44-4bc1-a1c1-393f0685a6c3"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("fe28051b-1b52-432a-8bc2-35ad66059c81"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("aede3aac-4611-43dc-b3c3-ca6683ef2ae5"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("a1727995-b4a6-4f35-babc-6daa0fdd067f"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("2e9c172d-55d8-48c3-8ca5-652b83205194"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("5663b99b-5cc7-461a-840a-4065648f150e"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("67eefb74-2fbe-451e-a164-a3ed1cbc2bc7"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("870036c3-04ff-436f-9b47-305bc5af4ff0"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("966506c5-fb4d-4daf-a420-cb13be4d8538"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("b2f36209-575a-449b-b571-c6510d761532"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("e6896cba-d3b4-4aa3-8314-47827bf1f03e"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("4c80a116-6373-43c0-8930-1f04833a94e4"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("24190458-6133-4bb1-8bae-eb8f11da5c55"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("92b106f6-e6ad-4b56-bb26-6ac329a65d21"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("d856acb7-d188-4e41-87e1-21aa5a08ce84"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("fdcf7f50-d7dd-4ccc-9e86-914f9c3a9acf"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("da44e0fb-76e1-4dfd-8e6c-53f418adc3c3"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("861961b2-e547-49b0-b389-28bb66e3ac44")
                        },
                        new
                        {
                            Id = new Guid("f552c88f-d3f1-4c4d-a23f-a8d51fa3a726"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("1b881ec7-16d0-4694-902a-8a6001b4b90c"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("f8b3e6c6-7372-4921-b2bc-173a6134d09a"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("d6ff6308-d49c-494d-bfec-c152fb170149"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("b5537c32-f0dd-4d8c-b2f9-b9a9f5422a0a"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("6040c54c-4d8e-461e-8c63-4aea9ce43e62"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("772ea5b8-c041-47ad-b662-d6f5082d5e95"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("c69aa347-6e9c-4c23-a654-d2150536ae52"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("99a1bc5d-a93d-487c-9f52-0c82b247da9c"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("58785baf-71fd-4f3b-ac3f-b086e8da33f3"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("f1d1d0f4-3905-4514-8b07-c17d00ed6573"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("93d22632-1384-42b5-9730-52e924c471e2"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("ce36a31b-13cc-4fbc-b5bd-fb2e20525c7d"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("93d22632-1384-42b5-9730-52e924c471e2"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("c56f3fc1-3239-43a9-8f93-c000f8e9a99f"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("93d22632-1384-42b5-9730-52e924c471e2"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("bc7ff425-4dd5-4c8c-bf75-4415057ab160"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("93d22632-1384-42b5-9730-52e924c471e2"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("7e99de46-d995-45cf-bfa0-60f57a01d5f6"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("5c600814-28ed-4bd1-b46d-c8a11ecdbf3a"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("fd7fb135-620b-4485-9390-a31bab8648ac"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("b1997a50-f3f4-413b-bdcf-3034460012fb"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("6909f0f5-f3f8-4b23-837a-011fee4ca932"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("01a3fd5f-e733-4231-bd15-e4822f0c59e4"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("478537a4-c43f-4d58-8fb8-0913218f45ce"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("d373b20b-6b2d-4155-b9e8-0626ff93fbc7"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("d81c1d03-b4b3-435d-9b0a-74df9acd16a8"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("591500c1-16fa-4e2a-906c-1d0592ef78ed"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("1d09ce56-95ea-4a44-895d-368208643870"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("86fb1d72-275f-4610-8788-b461f817b0a0"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("1d09ce56-95ea-4a44-895d-368208643870"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("ce3bf420-b431-43bd-a325-5fe9a6831ef4"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("1d09ce56-95ea-4a44-895d-368208643870"),
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("ad7b8dd2-a748-4e12-a0e9-4153bec6e692"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87198fa4-90dc-433c-8397-cac33d2ed235"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("74be5948-c512-404f-83d9-786baddf38e9"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("431059ce-25e3-4cac-b31a-1501428cb4d9")
                        },
                        new
                        {
                            Id = new Guid("a3f47aef-3365-49eb-ae6f-53f21ebbf3d7"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("3b6ba367-d632-44b0-83d4-b5688e4f339f"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("dac2fbf1-b7f2-49aa-ba4d-46dcd6b71e82"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("190f3662-1c39-46e1-9ff7-b2847ab3ff62"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("38774fc4-08aa-4cb0-b360-6a18ee3fabfc"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("d8ac395e-3c65-4699-a740-9d86bb7be008"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("36cc01f1-e301-4844-91c2-c1ba2523f877"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("e49774b1-b09c-4dd2-a721-36a86e816714"),
                            EditBlockId = new Guid("213abb0b-f923-4850-87e0-17afef85252f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            EditBlockId = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("5ac0949b-8195-4f4f-9c16-d63f89fc002e"),
                            EditBlockId = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("f3e71212-1747-4ab9-9013-bda3019efd23"),
                            EditBlockId = new Guid("cbacb16c-d35f-4efe-b3a6-4dce2772800a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575")
                        },
                        new
                        {
                            Id = new Guid("66adab8d-ddd4-4829-a1e3-2bbc8ff99324"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("bfb1724c-2934-484d-bf23-7d1b432cc9ba"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("772d09d6-1100-4d05-a9c8-10c180b1c1aa"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("6df78fad-6b3e-4d1b-869b-962917044372"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        },
                        new
                        {
                            Id = new Guid("13242216-f904-4a9b-b922-642e921cb56c"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("902620ee-b410-490d-a7eb-279d99b836d9"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488")
                        },
                        new
                        {
                            Id = new Guid("9a0fb81b-e445-428b-a138-8504798e0689"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488")
                        },
                        new
                        {
                            Id = new Guid("38e86127-35b7-4a85-ae3b-37635d23806c"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("772d09d6-1100-4d05-a9c8-10c180b1c1aa"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("51c0bfd5-54e3-4282-a428-850845b1f996"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("66adab8d-ddd4-4829-a1e3-2bbc8ff99324"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("854f4288-350f-4a06-839a-1a5e35661ae2"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("bfb1724c-2934-484d-bf23-7d1b432cc9ba"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4cfe5b5e-203a-4b31-99db-3836a9cca298"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("361e2016-4542-446b-b5d0-794500ca2fac")
                        },
                        new
                        {
                            Id = new Guid("4ecfdb43-e729-48c3-aa87-b71bb99e5be5"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554")
                        },
                        new
                        {
                            Id = new Guid("f7581523-987e-41d9-a7f4-1edff7735a40"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee")
                        },
                        new
                        {
                            Id = new Guid("a9aa8408-17e7-45d0-aa88-519b1ba3227e"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee")
                        },
                        new
                        {
                            Id = new Guid("6dcc2b10-2083-423b-8cf4-78e806cba501"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee")
                        },
                        new
                        {
                            Id = new Guid("0d831865-db24-4356-97a9-5901664f592a"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("de13ac7c-436f-464f-be53-028e857738ee")
                        },
                        new
                        {
                            Id = new Guid("4c9334b3-5a83-4d81-8386-0c38bbd525a6"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869")
                        },
                        new
                        {
                            Id = new Guid("cc5aad06-85fa-4cd0-9640-d247f2464871"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("0c1a4869-4465-4355-9037-de683bb878be"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6")
                        },
                        new
                        {
                            Id = new Guid("78214b2a-b80f-4e51-a0a0-0321fc3d8c73"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d")
                        },
                        new
                        {
                            Id = new Guid("db758007-8d84-44d8-b5d8-493e35b132d3"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("93d22632-1384-42b5-9730-52e924c471e2")
                        },
                        new
                        {
                            Id = new Guid("7a397476-c662-4728-9d17-5126186cb789"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("6df78fad-6b3e-4d1b-869b-962917044372"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("3bdfc411-d925-4599-9706-ce2b6227ee5a"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("13242216-f904-4a9b-b922-642e921cb56c"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("746ca343-156e-42b0-bcac-266a4d350820"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a")
                        },
                        new
                        {
                            Id = new Guid("42bf3c14-e3c2-4d8f-a39f-bdbbef0bb949"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("84767f28-6541-490d-91b4-aa24083bb82a")
                        },
                        new
                        {
                            Id = new Guid("51ef4dd1-d4a8-4737-8853-f1c5454b49c1"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6")
                        },
                        new
                        {
                            Id = new Guid("7182f437-cd87-4a2c-b269-a1db61abd174"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("1d09ce56-95ea-4a44-895d-368208643870")
                        },
                        new
                        {
                            Id = new Guid("bf92e7e9-6e5d-4d35-8bb2-e9693c270310"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("3b7c6dd0-35fb-4429-937b-b0debe2ffbee"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8a3e2eb-b23a-4513-a5c1-98bbee47a68d"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("298bfacd-f28e-43d6-8041-114db12d2a03"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("c86cc38e-1b73-47c6-beae-a93037a36e5e"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("cf2dce72-bfbd-441c-a1f1-efb5dbfc7661"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("85d9c829-55f3-44f0-90d3-937451a0f74c"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("68986c81-0d69-4fbf-8c01-81036c4bf2f2"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("3d1e51fe-18e9-4320-a281-2ee867df6ec0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5efec5f-b98b-49b6-92f5-ee9cbd24731b"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("ad83d774-4926-4f45-b815-32f44af8c40c"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("aa548383-b4e5-4175-a230-33126b148324"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("497d36ac-37e2-4c22-98d8-b4ece6f19b48"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("9a0f3e78-f319-4b3f-a670-0ecaccf1b823"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("40869c61-bf17-4202-ab7e-2d6ad4ee94f5"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("414f0412-b0c3-476a-8d3b-4f588639cca7"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("ffb732d7-33ed-49a4-9b4e-47bafad512d9"),
                            IsPrefilled = true,
                            TableId = new Guid("f29ee4c1-4b56-44ce-8500-217027415015")
                        },
                        new
                        {
                            Id = new Guid("546f996f-3c7a-4e84-b6f3-06122fe6a810"),
                            IsPrefilled = true,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        },
                        new
                        {
                            Id = new Guid("6c85c44d-50cb-407b-bb30-4482348f435b"),
                            IsPrefilled = true,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        },
                        new
                        {
                            Id = new Guid("681299f7-cc86-408f-8539-9c94ee364814"),
                            IsPrefilled = true,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        },
                        new
                        {
                            Id = new Guid("332c8c13-efce-423a-a2d3-f25c55f35944"),
                            IsPrefilled = true,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        },
                        new
                        {
                            Id = new Guid("5f54cab0-6fd8-4059-9b18-19f1ffb2bf09"),
                            IsPrefilled = true,
                            TableId = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2233776a-3195-4f92-81ed-eb9477796d28"),
                            FieldId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("d853bc9c-096e-4ab0-ac35-27fc2dd41034"),
                            FieldId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("b23d7980-c5cb-4299-bbf7-ece3acb8a735"),
                            FieldId = new Guid("aab9e618-b28d-4074-9963-d697f377274c"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("decb5fc8-63aa-4dfe-af5c-b009d38b2329"),
                            FieldId = new Guid("5ac0949b-8195-4f4f-9c16-d63f89fc002e"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("700ad3c4-1937-4d68-9f94-bd54feaea1df"),
                            FieldId = new Guid("5ac0949b-8195-4f4f-9c16-d63f89fc002e"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("5520524c-b53d-439f-a6a0-28258e956dac"),
                            ColumnId = new Guid("4a96c023-3d63-428d-8cc2-fc52741e397b"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("add564bc-be03-4bfa-8435-7b77a70eee74"),
                            ColumnId = new Guid("4a96c023-3d63-428d-8cc2-fc52741e397b"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("a737c546-16f8-4435-a2b5-865892f520b4"),
                            ColumnId = new Guid("4a96c023-3d63-428d-8cc2-fc52741e397b"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ba641e10-fbde-40aa-ae38-8f8fd0028551"),
                            ColumnId = new Guid("24190458-6133-4bb1-8bae-eb8f11da5c55"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("8dd1a901-8fe5-43bc-8d5d-c82f3e3ac900"),
                            ColumnId = new Guid("24190458-6133-4bb1-8bae-eb8f11da5c55"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("bf785016-fea3-40eb-82c8-d95be984a095"),
                            ColumnId = new Guid("24190458-6133-4bb1-8bae-eb8f11da5c55"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("74756c02-28a3-49a7-9ca7-f67f09c422fb"),
                            ColumnId = new Guid("b5537c32-f0dd-4d8c-b2f9-b9a9f5422a0a"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("590a2124-a6b7-4c83-8d0f-55ab61f4c303"),
                            ColumnId = new Guid("b5537c32-f0dd-4d8c-b2f9-b9a9f5422a0a"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("ee69618d-7281-47aa-a792-0350ee2409c9"),
                            ColumnId = new Guid("b1997a50-f3f4-413b-bdcf-3034460012fb"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("0c7b4127-853b-42c1-a1c3-21a8fb69c24f"),
                            ColumnId = new Guid("b1997a50-f3f4-413b-bdcf-3034460012fb"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("2eaf2bd8-888c-4b7a-bc7e-924c811ff07b"),
                            ColumnId = new Guid("01a3fd5f-e733-4231-bd15-e4822f0c59e4"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("212220cb-82cd-422e-a0ee-fe4161ccefcc"),
                            ColumnId = new Guid("01a3fd5f-e733-4231-bd15-e4822f0c59e4"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("2a811229-0078-4c93-99a9-4835bf1133e7"),
                            ColumnId = new Guid("01a3fd5f-e733-4231-bd15-e4822f0c59e4"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("767a5d80-6de7-4213-b93f-b5be1abd8913"),
                            ColumnId = new Guid("01a3fd5f-e733-4231-bd15-e4822f0c59e4"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("ee3c29ae-dfe1-4bb2-b772-a9b7678027d7"),
                            ColumnId = new Guid("591500c1-16fa-4e2a-906c-1d0592ef78ed"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("206bc03f-41ee-46a8-ac6b-13c3644ce9ac"),
                            ColumnId = new Guid("591500c1-16fa-4e2a-906c-1d0592ef78ed"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("ee076437-b83c-4d3d-909c-3d83e84f24c3"),
                            ColumnId = new Guid("591500c1-16fa-4e2a-906c-1d0592ef78ed"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("f45acad2-1558-4121-bc59-ca341020849e"),
                            ColumnId = new Guid("591500c1-16fa-4e2a-906c-1d0592ef78ed"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("e6462eb3-04bd-4aca-9147-afb30b39a430"),
                            ColumnId = new Guid("d856acb7-d188-4e41-87e1-21aa5a08ce84"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("374d852b-d271-4fb7-ae40-eea855bb68f6"),
                            ColumnId = new Guid("d856acb7-d188-4e41-87e1-21aa5a08ce84"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("39ac4cca-3c6d-4247-b6bc-da12f75101ab"),
                            ColumnId = new Guid("1b881ec7-16d0-4694-902a-8a6001b4b90c"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d518d472-27f1-4166-9e8b-e276a78ec261"),
                            ColumnId = new Guid("1b881ec7-16d0-4694-902a-8a6001b4b90c"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("eb072ce9-8208-4851-886e-fcd311a2f033"),
                            ColumnId = new Guid("ce36a31b-13cc-4fbc-b5bd-fb2e20525c7d"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e0f0ab3b-12e8-4a93-ad75-f164ac4d2d0f"),
                            ColumnId = new Guid("ce36a31b-13cc-4fbc-b5bd-fb2e20525c7d"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("bc6d30db-a6d6-4a37-81f4-cc58b7c3a853"),
                            ColumnId = new Guid("c56f3fc1-3239-43a9-8f93-c000f8e9a99f"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("98bc047c-dd6f-44a1-a6b0-38e5e6cd35d8"),
                            ColumnId = new Guid("c56f3fc1-3239-43a9-8f93-c000f8e9a99f"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("1828b689-6401-48fa-8384-24fea8c0104a"),
                            ColumnId = new Guid("c56f3fc1-3239-43a9-8f93-c000f8e9a99f"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("9686686d-6137-4fc8-9cfd-6e45df413c62"),
                            ColumnId = new Guid("c56f3fc1-3239-43a9-8f93-c000f8e9a99f"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("d52ff8a5-a0bf-44e5-9fdd-03dfa684b045"),
                            ColumnId = new Guid("a1727995-b4a6-4f35-babc-6daa0fdd067f"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6a8cff74-f49c-4f3b-a48e-dc6015caf5a5"),
                            ColumnId = new Guid("a1727995-b4a6-4f35-babc-6daa0fdd067f"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("cf5d1882-31b9-422e-b576-7a0c903f1275"),
                            ColumnId = new Guid("a1727995-b4a6-4f35-babc-6daa0fdd067f"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("e3f2b317-b1c8-4d46-8523-1ca30d45e049"),
                            ColumnId = new Guid("da44e0fb-76e1-4dfd-8e6c-53f418adc3c3"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("1b8f7292-1c04-40d2-a6c9-4030b7953579"),
                            ColumnId = new Guid("da44e0fb-76e1-4dfd-8e6c-53f418adc3c3"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("cc2cf5e0-83d6-4c9e-a3bd-bab3c99818cc"),
                            ColumnId = new Guid("c69aa347-6e9c-4c23-a654-d2150536ae52"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("958536bd-0bad-4163-83b0-0a9bbaeae761"),
                            ColumnId = new Guid("c69aa347-6e9c-4c23-a654-d2150536ae52"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f29ee4c1-4b56-44ce-8500-217027415015"),
                            EditBlockId = new Guid("ad7b8dd2-a748-4e12-a0e9-4153bec6e692"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("278aec07-276e-482a-bdcf-1467a17ad8e6"),
                            EditBlockId = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("7079ce59-17de-4a48-a9fd-fcbbb76e7a7d"),
                            EditBlockId = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("93f577ce-e6c5-4001-a7e5-af683aa81511"),
                            EditBlockId = new Guid("9429c33c-4193-4dc1-b4fd-56c094d72e7e"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1eef2e01-3f77-4e7a-8a5e-c2693eed5488"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("361e2016-4542-446b-b5d0-794500ca2fac"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("de13ac7c-436f-464f-be53-028e857738ee"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("831b4ea4-45e4-4a12-8ac7-a8435bbfb869"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("523aced1-f35b-4106-8488-c8ec75d4a554"),
                            EditBlockId = new Guid("ffb9e384-cf34-4201-a3ac-bacafce0817c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("93d22632-1384-42b5-9730-52e924c471e2"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("84767f28-6541-490d-91b4-aa24083bb82a"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("df519d91-bd20-4baa-ac4f-8032115d06c6"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("1d09ce56-95ea-4a44-895d-368208643870"),
                            EditBlockId = new Guid("0735a811-f994-47f6-91b6-53f6a40dd6cd"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89c69578-3e73-4031-bfd2-29a352e36d1d"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0c63a5b6-b38a-4f05-a57f-8cc5ec94bc77"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("feaf045e-1507-49fd-b069-f0d07b6075af"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("dc2f8204-427f-4a5d-a082-112444bb0575"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("861961b2-e547-49b0-b389-28bb66e3ac44"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("431059ce-25e3-4cac-b31a-1501428cb4d9"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("cdfdb011-4a38-4866-bc47-5f7ee665cc1d"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
