// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240910192251_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ecc9acfb-cb7d-4e24-adbd-944dad2e6477"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ecc9acfb-cb7d-4e24-adbd-944dad2e6477"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            EditBlocksId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("7f8f1abf-fb1f-4505-9a55-01e7be876c58"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("d05d7dca-c5ec-4445-ac1d-2204c02a4994"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("8f0c4fdf-3748-47e8-87ba-6ce390748db6"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("c8d71622-55e3-40f3-82e7-31414073c936"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("868099f3-a71f-47b2-bff8-e8a1b468503b"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("9d2ed4a0-f2b6-4e65-840e-7b5a8b668153"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("202c4ff2-232e-4624-81d9-2ed1d9814036"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("760c44c2-66fa-4799-98ba-dd33416d02b7"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("5f698694-8145-48ab-a11b-cc03cc04026a"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("5e4b9951-2ff5-4f32-b356-07f8bf2fc3a2"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("c5d4173a-4997-4a6f-9090-04b985a96c17"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("c53a5353-2275-4a8a-a6ea-65b57b58529c"),
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577")
                        },
                        new
                        {
                            FieldsId = new Guid("afb20597-1e45-4c00-8cf8-fb0623c845e7"),
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3")
                        },
                        new
                        {
                            FieldsId = new Guid("5e12b848-7796-4c9d-92f7-12054288bb1f"),
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3")
                        },
                        new
                        {
                            FieldsId = new Guid("3bb5d16e-cf1f-4821-abd5-612a0e5fecd8"),
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3")
                        },
                        new
                        {
                            FieldsId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f")
                        },
                        new
                        {
                            FieldsId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750")
                        },
                        new
                        {
                            FieldsId = new Guid("8eece850-aa0e-4006-951e-00406f1ae283"),
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750")
                        },
                        new
                        {
                            FieldsId = new Guid("285852ab-e1df-41ec-9895-b28b441d6c5a"),
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            TablesId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            TablesId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            TablesId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            TablesId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            TablesId = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            TablesId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            TablesId = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            TablesId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            TablesId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            TablesId = new Guid("b4753eb2-515f-4568-97c2-031785054fae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            TablesId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            TablesId = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            TablesId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            TablesId = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            TablesId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            TracksId = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            TracksId = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("7b8152ec-ea21-4aa4-8a93-f26a8d3d6251")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("69cbfe8e-8861-4cde-90cb-cef1026f8d4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("3565ac35-3dfe-44b2-bcbe-96cc30d0453e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("43750645-15d5-4621-81bc-30dcc9ef2dd5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("b85613fc-8633-414b-b38a-9272670b63c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("cca37bde-2dcd-4228-8a87-d6ab48047471")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            MarksId = new Guid("6a57bbd5-fa24-4278-a53d-2f101d9940e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            MarksId = new Guid("e0dc5a50-21e7-42fa-b926-65eb40f2aa5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            MarksId = new Guid("ef250158-d577-4fc4-bb53-ef9bc5b16e2d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            MarksId = new Guid("71a59f78-4cf5-46d1-b061-8c0620b88cfd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            MarksId = new Guid("60bd9a12-9064-4c72-9c33-7f40b2ae6c57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            MarksId = new Guid("0e46bcb3-380f-464f-9464-3366bea6d1f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            MarksId = new Guid("45e4a6a7-5f20-44b4-baeb-fef239173fd6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            MarksId = new Guid("f81e479f-7f67-45b6-97c4-bc367636ca85")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            MarksId = new Guid("40747b2d-dbba-4dde-879a-f5f943a31eb2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("45e4a6a7-5f20-44b4-baeb-fef239173fd6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("f81e479f-7f67-45b6-97c4-bc367636ca85")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("7edcb638-48cd-48ca-ad00-b5cc2976c1d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("8c1c6596-dfc0-4e0b-98c5-7c5d151b9947")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("7320b799-edf2-4f32-9478-284bd569b9d7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("8effa915-f14d-4776-ac28-9767c6a7e2fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            MarksId = new Guid("05bdca45-e52b-4d45-97e7-66250d90f5e1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            MarksId = new Guid("40747b2d-dbba-4dde-879a-f5f943a31eb2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            MarksId = new Guid("99b49122-1a55-4801-ab4b-28e7d148cafc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            MarksId = new Guid("c7bd78d2-9d04-42e7-a222-5303b958c8f4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            MarksId = new Guid("1f81b2ba-1447-45f1-983d-d471b0bd13ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            MarksId = new Guid("a9b1de5d-48f1-472b-b632-8b7850633287")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a9fc755a-3616-45ff-8073-6f9393358879",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "9e783888-0690-4733-892a-8afdaab54a1d",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "64a7ebc6-93a0-4a5e-b6e4-038c17f371b6",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "1c141175-4022-44d4-868e-8b3389f90a2a",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "653e036a-8613-4353-a880-bd02e7970839",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("814fb6f4-e591-44fc-a84e-7164e9802bfc"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("3d66ef32-908b-4ea0-8a13-b6177b7eb264"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("31fe3e0f-7b0c-4ab7-bf4b-ee2e1dad31f2"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("f27d0153-cedc-439d-8533-bb616cbe1d5f"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("339bb72f-7db0-4abd-aea9-810c7dde577c"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("ef55b7a9-8ef4-49cf-b07a-19c47eff6900"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c600152-3678-4ea1-ad6a-d17096d2e1a3"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("860b1b5a-5076-42a6-8505-b3e62988ba48"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f07ff47-f8ed-411a-acb4-10289a134c2b"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0ffecc9c-41df-4830-a1c4-881054c0b520"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("aac6ef1e-6c5a-4a43-aa1f-0d35336224cf"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0ffecc9c-41df-4830-a1c4-881054c0b520")
                        },
                        new
                        {
                            Id = new Guid("70591fd6-e239-4d56-b7c1-647fd711d653"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1dfde371-bfbc-4c69-87ef-6105958864e5"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("ea6164b4-a796-4284-88e0-d0c3fa6a41be"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1dfde371-bfbc-4c69-87ef-6105958864e5")
                        },
                        new
                        {
                            Id = new Guid("62fe4c3f-0d53-4b44-b46a-4d1558333916"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ba61bd0f-7a19-4b57-a078-bfdf681cf4e3"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("a3510bf1-a134-40de-80c8-f7189d8c4839"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ba61bd0f-7a19-4b57-a078-bfdf681cf4e3")
                        },
                        new
                        {
                            Id = new Guid("9e5e2f35-bf66-4fb4-a44d-0f66c42655d9"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("12b89ab3-8a27-492a-94e1-b6e31e75e926"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("7c9fb4ca-97b3-4e07-83cf-deb8a4328387"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("12b89ab3-8a27-492a-94e1-b6e31e75e926")
                        },
                        new
                        {
                            Id = new Guid("be365ab6-7824-4f5c-8c6c-d71699d36591"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2e311395-5967-4693-b8b8-8d66e9c204d4"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("c7f352d5-d228-46eb-9169-0bc83ee4ee00"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2e311395-5967-4693-b8b8-8d66e9c204d4")
                        },
                        new
                        {
                            Id = new Guid("62363edf-405f-4f9d-b1ab-b125a1d1e1a5"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3515f9c6-ec0c-44de-b3e9-b7e318b795e8"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("b06feb57-05da-44e5-8056-761bad94219c"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3515f9c6-ec0c-44de-b3e9-b7e318b795e8")
                        },
                        new
                        {
                            Id = new Guid("0d32a553-2b7d-4000-ab62-c1000ffa3e81"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4cadb1a1-ce21-4913-bca5-cb43226ad275"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("1c730f6d-f45f-4ea5-97fe-55252b29e8cc"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4cadb1a1-ce21-4913-bca5-cb43226ad275")
                        },
                        new
                        {
                            Id = new Guid("e763e467-801c-4b99-92de-b349bfa1d6da"),
                            ColumnId = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c47edb9f-e74e-4148-a76d-46931a03fbe0"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("d66996cd-4b91-421f-bcfb-39beee8d9030"),
                            ColumnId = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c47edb9f-e74e-4148-a76d-46931a03fbe0")
                        },
                        new
                        {
                            Id = new Guid("b1a5892f-5411-46d5-b4df-45b3c94ffb1f"),
                            ColumnId = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("829ce874-59c1-4733-b9b9-9bdda432056b"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("224f66b7-0723-4a7f-b8a1-c74ea5bc74f0"),
                            ColumnId = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("829ce874-59c1-4733-b9b9-9bdda432056b")
                        },
                        new
                        {
                            Id = new Guid("001a12a9-406d-446e-9380-f46241ad05e4"),
                            ColumnId = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7ef6459b-44c9-4741-9b75-c00570fff366"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("038975ff-3117-499a-939c-d45369eabb01"),
                            ColumnId = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7ef6459b-44c9-4741-9b75-c00570fff366")
                        },
                        new
                        {
                            Id = new Guid("bae6ee40-9fa2-425f-902e-629b02dc8842"),
                            ColumnId = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ec86f23f-2eb2-40e5-9263-ec116a6055ad"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("a544b3b6-faed-4d2f-8405-f86c4efe7d55"),
                            ColumnId = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ec86f23f-2eb2-40e5-9263-ec116a6055ad")
                        },
                        new
                        {
                            Id = new Guid("e6860710-2aa5-468d-85b8-80dbce21c7bb"),
                            ColumnId = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d351dc50-8927-40c1-9841-b11754cc9eec"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("8c2f74c4-7427-4044-ba36-798761bb8d9d"),
                            ColumnId = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d351dc50-8927-40c1-9841-b11754cc9eec")
                        },
                        new
                        {
                            Id = new Guid("360e7c85-5f3b-43aa-aded-17ca8100ad66"),
                            ColumnId = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("43cd727e-9914-43ff-936a-283fc639baf2"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("4478d0a0-cad8-4ade-938b-4fe786e9b025"),
                            ColumnId = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("43cd727e-9914-43ff-936a-283fc639baf2")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c5a26c0-29a4-40f5-bb06-5840637d6ee3"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("e0c4664d-5f9e-4da8-9a63-0a382ad9d3ae"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd"),
                            ValueTypeId = new Guid("82dcb3a9-554a-422d-9066-d22a56caf284")
                        },
                        new
                        {
                            Id = new Guid("053eba6e-ebb8-4988-986a-f23ad611c20a"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("d94e98a9-d10b-4bce-a5b7-faa344c319a4"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("ffff7bee-3535-436d-97ba-002a46926e6d"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("76f08ac7-79bf-4843-ac5b-a4aa3c9e35df"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("3eeddf24-33bf-41af-b989-544aa64a66aa"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("f0ad9e8b-f8a5-4d20-b0a2-ce7781550af0"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("0b6a6c5b-502a-4f49-9309-0a9a19b11eb7"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("a6658f08-4db9-474a-a8d2-70b79be83d71"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("debd5830-d6b6-4ea8-9bf1-be192376bd3f"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("10bab067-92e8-4c89-a47f-fe64c5761936"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("db9d24f1-273c-45fa-9b12-7af653275516"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("37ba7725-d908-47a9-818c-4c2ff62224d7"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("99f5f03b-0dce-404b-a8a1-911ae7b7ed89"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("6c195661-5698-4a78-827c-96cae0c7ee95"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("c2b2fb11-74e3-4b2c-84e6-3d7fd3832fe2"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("71b0113b-ac3f-47de-a5ad-15acf07b6537"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("db9356c8-99f0-4351-ace2-6e873da67eb5"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("2828a61f-7974-44eb-832c-614f43629a80"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("302dbd3a-faa0-49b4-b15f-8236b66ad6c5"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("15c5c6c9-515c-497f-aaa0-0e592f168de7"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("251ab893-acbb-4511-8e72-4101f2e659f0"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("d8d011d6-19a1-4c53-8973-c3e9a6c7b02f"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("d4a558e1-824a-4a58-b30c-94412ebf4948"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("76533f46-1e83-4564-b758-c3bffb37604d"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("e6da0a01-2c32-475a-9c27-e60598f54228")
                        },
                        new
                        {
                            Id = new Guid("34862597-6c59-4d3c-9d94-58b2988de4c3"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("644ef08f-984c-4e64-9b8d-099f075e4e7c"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("1a17b11d-0116-4f59-8ad5-500c9b9c167c"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("0d73e716-4722-4e0f-94fd-0e2b2a9eed2f"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("85cbbcd2-acdd-4318-9a65-e4aefce4801b"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("9b72899c-b984-4598-a464-85e6fa31da46"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("32306500-eee1-4b84-8228-40eb1d156c9f"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("431e73c9-fd8e-4cf5-b2b8-a3e4420be043"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("4067dede-5a40-4651-8061-1a800f7659f3"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("b95f12e4-4882-47c5-ad80-36193a1b1872"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("f8f6e6bb-d6d7-43d4-b0be-1510e4588013"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("84048dd5-aa21-4ba3-8153-39f2188ed262"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("55e04c5d-ba76-47fe-ad07-9fc2508ed9dc"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("c06661e4-ac15-4d50-94b5-83272f549c51"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("571dcbb3-58e0-4551-be60-f99a75dda839"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("9462a63e-3f5b-416a-891d-314b3fb7a60a"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("846dde22-6f82-4007-a6c5-cb524404481b"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("a1310bb8-8735-4222-b388-5a5c01a6157f"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("2f6bbef8-11fb-4b98-8c34-c40b0243d275"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("901fb26a-c9c4-4e84-9cdb-75ebca87d586"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("0c41dd85-7772-4274-878f-b9d15e926176"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("4fa7adc9-49fe-49e8-b896-7c02106f88db"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("0c5071a8-f271-42fe-ae26-e125f7266627"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("e8e6e2bc-f8e4-4389-831a-67c3f518044e"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("a329f8f7-e0aa-4615-a2c2-cf9396c0b1a6"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("97dcd596-7ce6-4ae1-856d-51ec7088e985"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386"),
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("ecc9acfb-cb7d-4e24-adbd-944dad2e6477"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29a214da-d059-4b4b-848f-ad13ca7ea1f9"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f8f1abf-fb1f-4505-9a55-01e7be876c58"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("d05d7dca-c5ec-4445-ac1d-2204c02a4994"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("c86453c8-bb60-47fb-9d88-4020a447d121")
                        },
                        new
                        {
                            Id = new Guid("8f0c4fdf-3748-47e8-87ba-6ce390748db6"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("c8d71622-55e3-40f3-82e7-31414073c936"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("868099f3-a71f-47b2-bff8-e8a1b468503b"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("9d2ed4a0-f2b6-4e65-840e-7b5a8b668153"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("202c4ff2-232e-4624-81d9-2ed1d9814036"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("760c44c2-66fa-4799-98ba-dd33416d02b7"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("5f698694-8145-48ab-a11b-cc03cc04026a"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("5e4b9951-2ff5-4f32-b356-07f8bf2fc3a2"),
                            EditBlockId = new Guid("55345b0e-0a28-4149-975b-a53cd88bb1ba"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            EditBlockId = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("c5d4173a-4997-4a6f-9090-04b985a96c17"),
                            EditBlockId = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("c53a5353-2275-4a8a-a6ea-65b57b58529c"),
                            EditBlockId = new Guid("6fafcf74-e541-4277-9fa9-1663abd7566a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369")
                        },
                        new
                        {
                            Id = new Guid("afb20597-1e45-4c00-8cf8-fb0623c845e7"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("5e12b848-7796-4c9d-92f7-12054288bb1f"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("3bb5d16e-cf1f-4821-abd5-612a0e5fecd8"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("8eece850-aa0e-4006-951e-00406f1ae283"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        },
                        new
                        {
                            Id = new Guid("285852ab-e1df-41ec-9895-b28b441d6c5a"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b8152ec-ea21-4aa4-8a93-f26a8d3d6251"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d")
                        },
                        new
                        {
                            Id = new Guid("69cbfe8e-8861-4cde-90cb-cef1026f8d4a"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d")
                        },
                        new
                        {
                            Id = new Guid("3565ac35-3dfe-44b2-bcbe-96cc30d0453e"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("3bb5d16e-cf1f-4821-abd5-612a0e5fecd8"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("43750645-15d5-4621-81bc-30dcc9ef2dd5"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("afb20597-1e45-4c00-8cf8-fb0623c845e7"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("b85613fc-8633-414b-b38a-9272670b63c9"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("5e12b848-7796-4c9d-92f7-12054288bb1f"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("cca37bde-2dcd-4228-8a87-d6ab48047471"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512")
                        },
                        new
                        {
                            Id = new Guid("6a57bbd5-fa24-4278-a53d-2f101d9940e9"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8")
                        },
                        new
                        {
                            Id = new Guid("e0dc5a50-21e7-42fa-b926-65eb40f2aa5e"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48")
                        },
                        new
                        {
                            Id = new Guid("ef250158-d577-4fc4-bb53-ef9bc5b16e2d"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48")
                        },
                        new
                        {
                            Id = new Guid("71a59f78-4cf5-46d1-b061-8c0620b88cfd"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48")
                        },
                        new
                        {
                            Id = new Guid("60bd9a12-9064-4c72-9c33-7f40b2ae6c57"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48")
                        },
                        new
                        {
                            Id = new Guid("0e46bcb3-380f-464f-9464-3366bea6d1f0"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4")
                        },
                        new
                        {
                            Id = new Guid("45e4a6a7-5f20-44b4-baeb-fef239173fd6"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("f81e479f-7f67-45b6-97c4-bc367636ca85"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00")
                        },
                        new
                        {
                            Id = new Guid("40747b2d-dbba-4dde-879a-f5f943a31eb2"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec")
                        },
                        new
                        {
                            Id = new Guid("7edcb638-48cd-48ca-ad00-b5cc2976c1d9"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("df4991fe-f095-430c-a3a0-540c258f5485")
                        },
                        new
                        {
                            Id = new Guid("8c1c6596-dfc0-4e0b-98c5-7c5d151b9947"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("8eece850-aa0e-4006-951e-00406f1ae283"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("7320b799-edf2-4f32-9478-284bd569b9d7"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("285852ab-e1df-41ec-9895-b28b441d6c5a"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("8effa915-f14d-4776-ac28-9767c6a7e2fd"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae")
                        },
                        new
                        {
                            Id = new Guid("05bdca45-e52b-4d45-97e7-66250d90f5e1"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("b4753eb2-515f-4568-97c2-031785054fae")
                        },
                        new
                        {
                            Id = new Guid("99b49122-1a55-4801-ab4b-28e7d148cafc"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f")
                        },
                        new
                        {
                            Id = new Guid("c7bd78d2-9d04-42e7-a222-5303b958c8f4"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386")
                        },
                        new
                        {
                            Id = new Guid("1f81b2ba-1447-45f1-983d-d471b0bd13ec"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("a9b1de5d-48f1-472b-b632-8b7850633287"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b84b9975-6879-4c6e-a7d0-e8701f968577"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cc7b6819-0149-4539-b257-9a98d1d1dfb3"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("23e3f5a3-9db1-4f8b-98c0-229198a72d83"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("aa89f7d0-27a8-4ae2-aefe-0e386166036f"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("7a390d0a-b2df-4655-b992-5df774c3f750"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("3f2101f4-c9f6-4e65-89ce-4c7c80002804"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("57eea358-1a55-4c2f-b6a0-ac4a70c052b2"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ffecc9c-41df-4830-a1c4-881054c0b520"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("1dfde371-bfbc-4c69-87ef-6105958864e5"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("ba61bd0f-7a19-4b57-a078-bfdf681cf4e3"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("12b89ab3-8a27-492a-94e1-b6e31e75e926"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("2e311395-5967-4693-b8b8-8d66e9c204d4"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("3515f9c6-ec0c-44de-b3e9-b7e318b795e8"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("4cadb1a1-ce21-4913-bca5-cb43226ad275"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("c47edb9f-e74e-4148-a76d-46931a03fbe0"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd")
                        },
                        new
                        {
                            Id = new Guid("829ce874-59c1-4733-b9b9-9bdda432056b"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        },
                        new
                        {
                            Id = new Guid("7ef6459b-44c9-4741-9b75-c00570fff366"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        },
                        new
                        {
                            Id = new Guid("ec86f23f-2eb2-40e5-9263-ec116a6055ad"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        },
                        new
                        {
                            Id = new Guid("d351dc50-8927-40c1-9841-b11754cc9eec"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        },
                        new
                        {
                            Id = new Guid("43cd727e-9914-43ff-936a-283fc639baf2"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4444f4c9-aa52-4e74-bb6b-cb8f80f2af36"),
                            FieldId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("e54a532b-1644-410f-be57-fc1c9f519bc0"),
                            FieldId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("589059c7-dd7e-4d88-85f2-a8984ccffefa"),
                            FieldId = new Guid("5dfe7ce7-554a-4793-b7b1-fa5a68588a3f"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("8ee896e8-1523-414a-b6e3-d522f2904c7b"),
                            FieldId = new Guid("c5d4173a-4997-4a6f-9090-04b985a96c17"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("02440a26-ffb1-42ff-a17e-cdfafacb834d"),
                            FieldId = new Guid("c5d4173a-4997-4a6f-9090-04b985a96c17"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("2b2bb834-7310-491a-a59b-d66ab0ee8742"),
                            ColumnId = new Guid("ffff7bee-3535-436d-97ba-002a46926e6d"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("65920874-f6ff-44c2-a808-4eb472144553"),
                            ColumnId = new Guid("ffff7bee-3535-436d-97ba-002a46926e6d"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("9c190371-230c-455d-bdc8-fcb2d84ab7bc"),
                            ColumnId = new Guid("ffff7bee-3535-436d-97ba-002a46926e6d"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("e3ad34a1-8cf7-4bcb-8e4e-6f6ef832cb53"),
                            ColumnId = new Guid("15c5c6c9-515c-497f-aaa0-0e592f168de7"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("bfa1edf9-f435-4699-bb87-534b2d817f03"),
                            ColumnId = new Guid("15c5c6c9-515c-497f-aaa0-0e592f168de7"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("2fc48f85-5a4e-4de7-a39e-84c67fcdfb99"),
                            ColumnId = new Guid("15c5c6c9-515c-497f-aaa0-0e592f168de7"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("cc3a9be2-ce45-4641-bf17-7f16a8edbc55"),
                            ColumnId = new Guid("85cbbcd2-acdd-4318-9a65-e4aefce4801b"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("8e2deceb-ef36-4610-96b2-a31b352ab8eb"),
                            ColumnId = new Guid("85cbbcd2-acdd-4318-9a65-e4aefce4801b"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("f142c30d-5c43-4a2c-b347-672b7cff368c"),
                            ColumnId = new Guid("a1310bb8-8735-4222-b388-5a5c01a6157f"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("121ea70c-0bc5-46db-b7b7-7f74a0511504"),
                            ColumnId = new Guid("a1310bb8-8735-4222-b388-5a5c01a6157f"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("15d9e6f0-5099-47ac-bbe0-8da7e1fb7dac"),
                            ColumnId = new Guid("901fb26a-c9c4-4e84-9cdb-75ebca87d586"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("45662b69-5623-4cdb-83a8-536ea7eb71a3"),
                            ColumnId = new Guid("901fb26a-c9c4-4e84-9cdb-75ebca87d586"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("cd1c5678-715b-4740-ada1-180ef9cb66b0"),
                            ColumnId = new Guid("901fb26a-c9c4-4e84-9cdb-75ebca87d586"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("a8ce9d5d-c8b0-45aa-871c-90a1847fe330"),
                            ColumnId = new Guid("901fb26a-c9c4-4e84-9cdb-75ebca87d586"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("46afa68a-0b3a-4e9a-bbe1-86ff7f916f3b"),
                            ColumnId = new Guid("e8e6e2bc-f8e4-4389-831a-67c3f518044e"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("575dfb58-0182-467f-af3b-8d21f8ede37c"),
                            ColumnId = new Guid("e8e6e2bc-f8e4-4389-831a-67c3f518044e"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("d2c57f1b-b950-41f0-b70f-4fcece2e35e1"),
                            ColumnId = new Guid("e8e6e2bc-f8e4-4389-831a-67c3f518044e"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("40c0708e-7202-43c3-b3f0-1ec8e8ca4c21"),
                            ColumnId = new Guid("e8e6e2bc-f8e4-4389-831a-67c3f518044e"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("2d6cf2aa-7c44-4938-94cc-cb47a3db2a1c"),
                            ColumnId = new Guid("d8d011d6-19a1-4c53-8973-c3e9a6c7b02f"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("534bd736-d906-459a-be3a-47f75bf815e3"),
                            ColumnId = new Guid("d8d011d6-19a1-4c53-8973-c3e9a6c7b02f"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("106940f5-309b-4b9f-89ed-3ee3f42d78e2"),
                            ColumnId = new Guid("644ef08f-984c-4e64-9b8d-099f075e4e7c"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6c18924f-c22f-4426-9eb8-839ca6a12292"),
                            ColumnId = new Guid("644ef08f-984c-4e64-9b8d-099f075e4e7c"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("bc0bd130-a37d-497b-8f1b-dc312f5467ab"),
                            ColumnId = new Guid("84048dd5-aa21-4ba3-8153-39f2188ed262"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("c25c833c-d699-4052-a82f-086e84721904"),
                            ColumnId = new Guid("84048dd5-aa21-4ba3-8153-39f2188ed262"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9e375563-2815-432d-a6c6-22dbcdaa99ad"),
                            ColumnId = new Guid("55e04c5d-ba76-47fe-ad07-9fc2508ed9dc"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("7bc45564-8135-45c6-b42f-6cb5296d41f6"),
                            ColumnId = new Guid("55e04c5d-ba76-47fe-ad07-9fc2508ed9dc"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("39bb2992-1efd-42b8-8c4c-36ba0e7baab4"),
                            ColumnId = new Guid("55e04c5d-ba76-47fe-ad07-9fc2508ed9dc"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("5bce7ea6-0735-4e48-87a8-9b50c2c2f54c"),
                            ColumnId = new Guid("55e04c5d-ba76-47fe-ad07-9fc2508ed9dc"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("af9031b6-0848-436c-912f-0ec6ed9dc5ec"),
                            ColumnId = new Guid("db9d24f1-273c-45fa-9b12-7af653275516"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("f8ef5a93-bdb8-40a9-9c81-628f7272bb82"),
                            ColumnId = new Guid("db9d24f1-273c-45fa-9b12-7af653275516"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("d67bcc36-b0e8-47a2-a0b8-ecd4d4dae116"),
                            ColumnId = new Guid("db9d24f1-273c-45fa-9b12-7af653275516"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("8f5c5cee-e7b0-4126-bc7f-9f37ec31484d"),
                            ColumnId = new Guid("76533f46-1e83-4564-b758-c3bffb37604d"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("2e60c6ea-3ac4-4ebb-975c-23fd648f7f0b"),
                            ColumnId = new Guid("76533f46-1e83-4564-b758-c3bffb37604d"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ceb3d431-dad5-4728-acd2-effb7ebd3558"),
                            ColumnId = new Guid("431e73c9-fd8e-4cf5-b2b8-a3e4420be043"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("0e042da1-4520-4edc-96e3-25be09c23671"),
                            ColumnId = new Guid("431e73c9-fd8e-4cf5-b2b8-a3e4420be043"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2a9be0e-d162-4efe-b594-fdd635c86cbd"),
                            EditBlockId = new Guid("ecc9acfb-cb7d-4e24-adbd-944dad2e6477"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("18a0d6bf-770a-4857-a3dc-2cab801a2f00"),
                            EditBlockId = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d88264f8-3767-48eb-90ad-21706e1d2bec"),
                            EditBlockId = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("51430dec-ae6f-401c-ac9c-a55c1643c060"),
                            EditBlockId = new Guid("ddb854f6-288e-4531-8c8d-bc7abd13b903"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("cccaf1ef-6454-4d0b-b2bc-867d8da9131d"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ac34c976-4041-46f8-9e0b-a3ba3f0f6512"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("facae2b8-722b-4e5e-8d71-f95d9f66cd48"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("66e2b6e1-5aa9-4ec3-a02d-0dd305a029d4"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("f950dee5-3feb-4cd0-b5ec-4b8b74ef49c8"),
                            EditBlockId = new Guid("1a160172-a1a0-4753-9322-39e561f7894b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("df4991fe-f095-430c-a3a0-540c258f5485"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("b4753eb2-515f-4568-97c2-031785054fae"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("163c3f68-2b6d-491c-8f5d-48507a307a1f"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("024ecc6b-8207-4c8a-bfbe-04be10f27386"),
                            EditBlockId = new Guid("eff5ba8a-4b9d-4862-900c-88b7f0177d0a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c668801c-9e74-46dc-a404-aecbe5c5ebe8"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("29466caf-29b4-48d5-bf66-1ddd74ae7f1c"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2d0a9ec-7589-4a9c-b055-ed10619b2ef7"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("df9cba96-8f35-499c-9ddb-14e227ecf369"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("e6da0a01-2c32-475a-9c27-e60598f54228"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("c86453c8-bb60-47fb-9d88-4020a447d121"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("82dcb3a9-554a-422d-9066-d22a56caf284"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
