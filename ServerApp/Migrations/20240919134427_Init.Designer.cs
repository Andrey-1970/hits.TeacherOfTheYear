// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240919134427_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FullPhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CropPhotoId")
                        .IsUnique();

                    b.HasIndex("FullPhotoId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9967712e-3f47-4ea6-aab9-836f88b487e7"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9967712e-3f47-4ea6-aab9-836f88b487e7"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("6523f40f-45af-4b37-a077-ab6096165d43"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("c950e6c5-6db9-49d6-9db0-16913073d0c2"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("b6891625-1b31-412f-88a3-440278e950ee"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("70f382fc-d843-4a46-8fc2-b5f59fe7d08d"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("8f9b4f41-7896-46b9-8fd4-551e6450126b"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("121c91af-2589-40ef-ab81-b80cf3db3173"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("5727090d-2558-458c-8601-7d453dabc509"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("86ee4edd-fbc4-49f4-b943-cf56131a391a"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("120f2266-c1fe-41e3-b76e-abb96db14140"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("b37f849a-b386-40b4-b278-fed7bcb5e3ed"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("9c0880c1-0079-475c-8366-75a06729d405"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("c399d079-6aed-4829-b0ba-a357007bd345"),
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2")
                        },
                        new
                        {
                            FieldsId = new Guid("9bacde36-1b12-4b9b-8f22-c9bb7ae7386e"),
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707")
                        },
                        new
                        {
                            FieldsId = new Guid("a1484d5a-671b-4ec9-b3fe-7078198a5f6a"),
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707")
                        },
                        new
                        {
                            FieldsId = new Guid("e642a2d5-45d8-473b-aa01-444b036241e0"),
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707")
                        },
                        new
                        {
                            FieldsId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c")
                        },
                        new
                        {
                            FieldsId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435")
                        },
                        new
                        {
                            FieldsId = new Guid("1e224f2d-da13-45d1-ab61-7b237fd4db4e"),
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435")
                        },
                        new
                        {
                            FieldsId = new Guid("83cdded2-7dd3-4186-b485-cc1f15680696"),
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            TablesId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            TablesId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            TablesId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            TablesId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            TablesId = new Guid("52a2156e-118b-49df-8995-24229b971dfe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            TablesId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            TablesId = new Guid("db414d60-b234-4126-9541-8c583f6b79bb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            TablesId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            TablesId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            TablesId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2"),
                            TablesId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            TablesId = new Guid("db414d60-b234-4126-9541-8c583f6b79bb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            TablesId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            TablesId = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            TablesId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            TracksId = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            TracksId = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("23e861bf-4cb0-46ee-a41f-ee12cf0284fb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("9c77e8b8-65eb-4c41-816e-d295da43368b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("246518bb-8425-4192-972c-05a05f2b671c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("2fcb76a0-6788-428e-b4c6-a2863b9c1801")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("6b5dacc3-4f70-4a38-a60a-0056306d0820")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("5a0e6a41-19b6-4e54-a1ae-4dc9625b7b14")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            MarksId = new Guid("94f02709-a6ed-447d-b918-6203387aaae8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            MarksId = new Guid("c2e1efe5-cabb-4ec0-9829-68060a5ba3b5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            MarksId = new Guid("d10e9753-29c9-400a-a395-2983cef459f7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            MarksId = new Guid("6c7a217b-39fc-4cd5-9219-756c0d7a3578")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            MarksId = new Guid("84ca054b-420b-4748-8da2-e75d4153f631")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            MarksId = new Guid("39ee357c-064a-4659-9a91-95192c3fa545")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            MarksId = new Guid("de25242a-b896-42be-996e-ce140ea6d6bd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            MarksId = new Guid("37f2f971-0c1a-4f64-8163-6dad4fead714")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            MarksId = new Guid("d6f20fc3-96a4-4e80-86e6-e928489c3cb0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("de25242a-b896-42be-996e-ce140ea6d6bd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("37f2f971-0c1a-4f64-8163-6dad4fead714")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("e01b46c4-3433-4ea1-9429-315da9831ccd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("793a6be7-b2ec-4c73-a70e-beea032ed8c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("2334316a-0939-42f3-a2ee-7b1d3e7cb328")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("d69ff61a-656b-4ad6-b083-02f8b2cc5780")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            MarksId = new Guid("62e3155e-0099-4e36-9747-4a4226e03091")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            MarksId = new Guid("d6f20fc3-96a4-4e80-86e6-e928489c3cb0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            MarksId = new Guid("882a2ebf-120a-48b2-b620-75ce96c597f9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            MarksId = new Guid("1626eef8-c7f3-497c-b8fe-535f38412070")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            MarksId = new Guid("f20ffb32-8a56-43e1-9021-e5b5d3510515")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            MarksId = new Guid("ed5927dc-7c1d-4279-9783-074ec0bf0fda")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10a9b1f4-b492-47ea-8cd9-30892bbd9404",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "4af48a6f-ff6e-4b6d-b29e-87f86eb3096f",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "b7e6c1b9-1649-4a46-8c3c-282227845f41",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "47ab566a-decc-4123-917c-8aa3226b7e15",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "d29ab40b-40d4-4af5-9117-b8749d78180f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26f4687b-ad69-4905-b729-64d9345d3d84"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("7a7f9107-ae26-4d93-8cd8-1874da49bcf3"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("b3d29f69-92d9-42af-ac47-0f96d841ea5a"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("6230785d-ff20-4d12-9d26-4a1dfe5408e7"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("c13b78d6-1d99-462c-bbfa-c5c1fa892028"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("a0ebd598-aabc-49ef-ab1f-1c1792581314"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cc63aab-fc51-41b6-a020-214a57e960da"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b3f15ed7-4dbf-45fd-8bff-e56300b1b561"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("484c4743-7e2b-418d-9361-52ccda5cebf2"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("cebb3d70-d992-453b-934e-0826a5769918"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("f2a35711-facb-4f82-b74a-98a7c04d295e"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("cebb3d70-d992-453b-934e-0826a5769918")
                        },
                        new
                        {
                            Id = new Guid("f9c06f2a-59f3-4d5e-b9f9-f845d5947320"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("30536ada-1d88-4639-9409-adb9f080fe79"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("e961a39b-b50a-4871-a987-7d0ec6881fdf"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("30536ada-1d88-4639-9409-adb9f080fe79")
                        },
                        new
                        {
                            Id = new Guid("aa40a65e-6050-452b-86fa-60b76742390d"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("884532fc-4a24-44b5-af56-690338e5330d"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("a2004dab-e536-475d-a057-02e3ca032a94"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("884532fc-4a24-44b5-af56-690338e5330d")
                        },
                        new
                        {
                            Id = new Guid("95d3677e-41bc-4e71-b10e-bcf8b7a66993"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a94facb4-c2bd-4827-b259-32828e307cbf"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("8139a774-2c2a-4faa-8966-bc20f8647cec"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a94facb4-c2bd-4827-b259-32828e307cbf")
                        },
                        new
                        {
                            Id = new Guid("2c791da5-7b77-4e15-bcea-2417aafcd8e4"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c35ace35-8bb2-4aa3-9200-65195296df57"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("8ddf9367-df46-45e3-87e2-dc0110b6716e"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c35ace35-8bb2-4aa3-9200-65195296df57")
                        },
                        new
                        {
                            Id = new Guid("00a08c48-18db-4481-b1cd-82608601900f"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("817cadde-d90c-4848-811a-83024551e095"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("c67575dd-2e4f-4c3d-8b6e-c0d6ef0fcacb"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("817cadde-d90c-4848-811a-83024551e095")
                        },
                        new
                        {
                            Id = new Guid("d9498e16-1bac-4c22-a3bc-ebd694505184"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c858440d-73de-452e-8f70-bd9219b47a7f"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("232b31fd-ee72-4a0e-bf90-b80eac02ffb5"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c858440d-73de-452e-8f70-bd9219b47a7f")
                        },
                        new
                        {
                            Id = new Guid("7257057d-e1bf-45bd-823e-aea82dfea5af"),
                            ColumnId = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("416b1c46-e994-433a-9a0a-b9546c3cd244"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("2547df98-a778-48ad-aca0-f66f9f491266"),
                            ColumnId = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("416b1c46-e994-433a-9a0a-b9546c3cd244")
                        },
                        new
                        {
                            Id = new Guid("5049f21b-20f2-4ffc-8764-b82c663479fb"),
                            ColumnId = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("537789e3-6937-4396-bce3-ce3c62889b88"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("d2108337-098f-480c-bd82-d797d17ff1c9"),
                            ColumnId = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("537789e3-6937-4396-bce3-ce3c62889b88")
                        },
                        new
                        {
                            Id = new Guid("8aeb9cac-98c9-4c2f-8b88-33a0e45be383"),
                            ColumnId = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e0f612bf-d114-4dcd-995e-ea5cf6688148"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("b23cca76-b755-4c15-9a46-fbea632f5af2"),
                            ColumnId = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e0f612bf-d114-4dcd-995e-ea5cf6688148")
                        },
                        new
                        {
                            Id = new Guid("f603f7b0-845a-49b5-bfb8-dca00cedf810"),
                            ColumnId = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("cf308d0d-7233-423b-ad01-3adc945d5c87"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("fa73cea1-d0eb-45c8-a7f0-676b151da156"),
                            ColumnId = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("cf308d0d-7233-423b-ad01-3adc945d5c87")
                        },
                        new
                        {
                            Id = new Guid("84d79306-e8c5-458b-8c8f-6c924aa62290"),
                            ColumnId = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("08e86362-252b-4a65-a324-6b7cfc9cd1a2"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("0f51338d-46e6-42e3-a8fb-a00913ae739b"),
                            ColumnId = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("08e86362-252b-4a65-a324-6b7cfc9cd1a2")
                        },
                        new
                        {
                            Id = new Guid("b3a10402-476d-4b87-b83f-2834caaf5919"),
                            ColumnId = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c219acb7-d2a8-4ff0-a653-3d5d0aa319e2"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("fb8dd645-c17c-456c-b6c1-3c7278b35402"),
                            ColumnId = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c219acb7-d2a8-4ff0-a653-3d5d0aa319e2")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6363ecd3-e9a2-4f91-b5dc-d87c60f88134"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("9c85dcdf-53cd-4d5f-9632-f1668f0384e9"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8"),
                            ValueTypeId = new Guid("1cc5f6d1-e47e-46b1-8ebc-0ae83fa447bb")
                        },
                        new
                        {
                            Id = new Guid("3179ef44-0235-4cc1-b33d-cd60cf5adcb9"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("ea31d9c4-f085-43f6-a8b1-b9713fcbc33e"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("1c1afe35-4cc2-4536-84c9-aa6dcdec0b2e"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("c454027a-8b6e-4e3b-aac1-d8626d9c6895"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("c4339936-96e7-434d-b47d-1d0cfd0eec21"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("83032e8f-2a93-4dfa-a26d-fceb27173686"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("db414d60-b234-4126-9541-8c583f6b79bb"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("59fe935c-eedb-45c0-85a1-a7e01db9c625"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("db414d60-b234-4126-9541-8c583f6b79bb"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("e338a101-a8d9-4785-9857-2923db18d724"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("7f2cc1e6-210b-4c93-812e-c4d8b71fa594"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("b1effc34-b154-459f-a899-a0a7e14dfea1"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("aaa35a2e-28e5-48a9-b858-c50bebf7c99d"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("58b7d8d9-36e4-4049-ad94-0d4904e26af6"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("a57cce37-a28a-4106-b3a7-ef2ab5600c9a"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("ef602d16-6f7a-4389-bc64-149a373666ba"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("6fda8e6d-e1fe-4a9a-a838-b7a9539e73ec"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("0426748e-6c57-4073-898f-4516b49e18e5"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("bde4c8a1-2996-4047-839c-873828ba1cd0"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("bda5c300-4cc7-4d21-8df5-ae2df797df6f"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("bd226921-3592-4b68-b7f3-f65898230e6e"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("53231167-fc6a-49af-8552-ded0b9c3cbdf"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("00b48533-b380-436e-8e20-c0abd4c356e5"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("af5ff55e-4cba-4d7b-ac22-9467dee92762"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("0df5c285-988f-46a7-a80a-c3b9f4a17788"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("b1d99c88-de60-4782-980b-bc235262b088"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("12666697-320b-4c92-9113-2bd4a47480fd")
                        },
                        new
                        {
                            Id = new Guid("e146d8f8-488a-4e18-90b9-096ce5b8535d"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("113e0e86-f774-4512-8a84-692da1abc9db"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("8d9cb476-7a90-431a-ab8b-1040e70baa02"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("27c66ab9-a694-4c22-a221-80a84b6247b0"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("52a2156e-118b-49df-8995-24229b971dfe"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("2f9da356-5025-4835-8690-c89b25ac434d"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("52a2156e-118b-49df-8995-24229b971dfe"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("83ab97b9-9944-4bd9-8cd8-d49b7c07132c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("52a2156e-118b-49df-8995-24229b971dfe"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("317c84c5-91d7-4fc3-a18d-c6db643b9b43"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("5d31cd93-59d2-4e5d-9698-caeecdfa8345"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("2b49b9bb-18a5-4aad-acaa-407bb006edb3"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("b200902e-2496-4013-a81c-ec2b41000a6f"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("a1d22b0f-0cbb-48dd-92a5-383605041eb3"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("911e324c-bff4-49ae-a68a-3d8a639d6aa0"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("4d828c4f-cd9e-4805-9d80-edd6faccb5ca"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("3245ff05-4e9b-415a-826f-e8d96c9162ab"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("bc3cd99a-0905-40a4-81b5-a3f1b2831992"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("f789fda7-bfa2-43ab-9579-09dbe2fca5ac"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("f6fd1161-13c1-4236-a32e-5c90d7213544"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("4ccd0150-e2ca-4160-a1fb-57c00a2f3b54"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("39b2d0b0-dea6-43e2-a6c2-8c996a6bffd0"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("a8eacf85-4d31-45c1-a784-c4bbce96610c"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("309c1cc9-9573-422e-af69-eefbaae079c8"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("17b4f97d-7e44-4d4d-8450-100e0b735159"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("e0f5af1e-63ee-4ef0-9d17-e3aed3f3d909"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("5c04d09a-72b3-4086-8bbc-1428cc3a5fe5"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("c45c9202-2de8-4b9d-9c3f-765c8360924b"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("d782da9d-376d-494a-9b32-d3e3be10baf7"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7"),
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Deadline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Deadlines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df98170d-e1a3-4f4b-bba3-ab0f791663f5"),
                            End = new DateTimeOffset(new DateTime(2024, 10, 20, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Прием заявок",
                            Number = 1,
                            Start = new DateTimeOffset(new DateTime(2024, 9, 20, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("0adc4bdf-c085-4370-b459-4166924e5429"),
                            End = new DateTimeOffset(new DateTime(2024, 11, 30, 23, 59, 59, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Name = "Голосование",
                            Number = 2,
                            Start = new DateTimeOffset(new DateTime(2024, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("9967712e-3f47-4ea6-aab9-836f88b487e7"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6523f40f-45af-4b37-a077-ab6096165d43"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("c950e6c5-6db9-49d6-9db0-16913073d0c2"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("40c6253f-8a9c-46b4-b941-36069eb524a3")
                        },
                        new
                        {
                            Id = new Guid("b6891625-1b31-412f-88a3-440278e950ee"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("70f382fc-d843-4a46-8fc2-b5f59fe7d08d"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("8f9b4f41-7896-46b9-8fd4-551e6450126b"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("121c91af-2589-40ef-ab81-b80cf3db3173"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("5727090d-2558-458c-8601-7d453dabc509"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("86ee4edd-fbc4-49f4-b943-cf56131a391a"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("120f2266-c1fe-41e3-b76e-abb96db14140"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("b37f849a-b386-40b4-b278-fed7bcb5e3ed"),
                            EditBlockId = new Guid("20ae319f-ba03-4fe0-b8cd-893051708844"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            EditBlockId = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("9c0880c1-0079-475c-8366-75a06729d405"),
                            EditBlockId = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("c399d079-6aed-4829-b0ba-a357007bd345"),
                            EditBlockId = new Guid("ffeef190-af6c-4282-969d-62aca2081113"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89")
                        },
                        new
                        {
                            Id = new Guid("9bacde36-1b12-4b9b-8f22-c9bb7ae7386e"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("a1484d5a-671b-4ec9-b3fe-7078198a5f6a"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("e642a2d5-45d8-473b-aa01-444b036241e0"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("1e224f2d-da13-45d1-ab61-7b237fd4db4e"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        },
                        new
                        {
                            Id = new Guid("83cdded2-7dd3-4186-b485-cc1f15680696"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e861bf-4cb0-46ee-a41f-ee12cf0284fb"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315")
                        },
                        new
                        {
                            Id = new Guid("9c77e8b8-65eb-4c41-816e-d295da43368b"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315")
                        },
                        new
                        {
                            Id = new Guid("246518bb-8425-4192-972c-05a05f2b671c"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("e642a2d5-45d8-473b-aa01-444b036241e0"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2fcb76a0-6788-428e-b4c6-a2863b9c1801"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("9bacde36-1b12-4b9b-8f22-c9bb7ae7386e"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("6b5dacc3-4f70-4a38-a60a-0056306d0820"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("a1484d5a-671b-4ec9-b3fe-7078198a5f6a"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("5a0e6a41-19b6-4e54-a1ae-4dc9625b7b14"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43")
                        },
                        new
                        {
                            Id = new Guid("94f02709-a6ed-447d-b918-6203387aaae8"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2")
                        },
                        new
                        {
                            Id = new Guid("c2e1efe5-cabb-4ec0-9829-68060a5ba3b5"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643")
                        },
                        new
                        {
                            Id = new Guid("d10e9753-29c9-400a-a395-2983cef459f7"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643")
                        },
                        new
                        {
                            Id = new Guid("6c7a217b-39fc-4cd5-9219-756c0d7a3578"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643")
                        },
                        new
                        {
                            Id = new Guid("84ca054b-420b-4748-8da2-e75d4153f631"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643")
                        },
                        new
                        {
                            Id = new Guid("39ee357c-064a-4659-9a91-95192c3fa545"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("52a2156e-118b-49df-8995-24229b971dfe")
                        },
                        new
                        {
                            Id = new Guid("de25242a-b896-42be-996e-ce140ea6d6bd"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("37f2f971-0c1a-4f64-8163-6dad4fead714"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e")
                        },
                        new
                        {
                            Id = new Guid("d6f20fc3-96a4-4e80-86e6-e928489c3cb0"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("db414d60-b234-4126-9541-8c583f6b79bb")
                        },
                        new
                        {
                            Id = new Guid("e01b46c4-3433-4ea1-9429-315da9831ccd"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("69d7a632-4087-40ca-be13-7d811f230c91")
                        },
                        new
                        {
                            Id = new Guid("793a6be7-b2ec-4c73-a70e-beea032ed8c2"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("1e224f2d-da13-45d1-ab61-7b237fd4db4e"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("2334316a-0939-42f3-a2ee-7b1d3e7cb328"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("83cdded2-7dd3-4186-b485-cc1f15680696"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("d69ff61a-656b-4ad6-b083-02f8b2cc5780"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119")
                        },
                        new
                        {
                            Id = new Guid("62e3155e-0099-4e36-9747-4a4226e03091"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("6a837e39-eb55-4648-983a-ef40e462a119")
                        },
                        new
                        {
                            Id = new Guid("882a2ebf-120a-48b2-b620-75ce96c597f9"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08")
                        },
                        new
                        {
                            Id = new Guid("1626eef8-c7f3-497c-b8fe-535f38412070"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7")
                        },
                        new
                        {
                            Id = new Guid("f20ffb32-8a56-43e1-9021-e5b5d3510515"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("ed5927dc-7c1d-4279-9783-074ec0bf0fda"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("2605c7a1-2818-45a0-a735-d726f77b0690"),
                            EvaluationMethodName = "EvaluateMark25",
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за голосование",
                            Number = 27
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28b82063-0fee-41f6-9278-0917399fb5e2"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cfb1d694-c3be-4ac2-8408-3b9c3e21a707"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("daeb5579-6a97-43ea-9010-f7c15aebd6e6"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("22d79145-709c-4d8a-a8ab-c53548e4b31c"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("e88047de-1472-452b-9307-ea0d84d65435"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d8a7d45c-8180-48f8-978b-447b8a0733e8"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("225c6269-914d-4ec7-990f-e6b0884490d0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cebb3d70-d992-453b-934e-0826a5769918"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("30536ada-1d88-4639-9409-adb9f080fe79"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("884532fc-4a24-44b5-af56-690338e5330d"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("a94facb4-c2bd-4827-b259-32828e307cbf"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("c35ace35-8bb2-4aa3-9200-65195296df57"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("817cadde-d90c-4848-811a-83024551e095"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("c858440d-73de-452e-8f70-bd9219b47a7f"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("416b1c46-e994-433a-9a0a-b9546c3cd244"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8")
                        },
                        new
                        {
                            Id = new Guid("537789e3-6937-4396-bce3-ce3c62889b88"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        },
                        new
                        {
                            Id = new Guid("e0f612bf-d114-4dcd-995e-ea5cf6688148"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        },
                        new
                        {
                            Id = new Guid("cf308d0d-7233-423b-ad01-3adc945d5c87"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        },
                        new
                        {
                            Id = new Guid("08e86362-252b-4a65-a324-6b7cfc9cd1a2"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        },
                        new
                        {
                            Id = new Guid("c219acb7-d2a8-4ff0-a653-3d5d0aa319e2"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7050f762-abf1-4195-9992-05e4b774243d"),
                            FieldId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("1c9cf108-f2b1-4d81-b0d7-a86c8044b582"),
                            FieldId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("d69ceac1-bcd4-4f2b-9f53-f5413026c5bb"),
                            FieldId = new Guid("c6f2897e-b982-4618-b22e-28bc9cfd8a25"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("13ed82b1-7852-404c-9dca-9a77c6babf6c"),
                            FieldId = new Guid("9c0880c1-0079-475c-8366-75a06729d405"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("b76d531f-80be-4ac1-94bb-33ac84f3eaeb"),
                            FieldId = new Guid("9c0880c1-0079-475c-8366-75a06729d405"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("7d251a00-3a88-4094-8230-9d81aa487f3f"),
                            ColumnId = new Guid("1c1afe35-4cc2-4536-84c9-aa6dcdec0b2e"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("38879d4c-0ed0-405a-8886-023916a4c1eb"),
                            ColumnId = new Guid("1c1afe35-4cc2-4536-84c9-aa6dcdec0b2e"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("fe30d34a-f10c-41c3-a286-18950ce0050c"),
                            ColumnId = new Guid("1c1afe35-4cc2-4536-84c9-aa6dcdec0b2e"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("885d992a-7923-4e55-a6f2-c615b65c6609"),
                            ColumnId = new Guid("53231167-fc6a-49af-8552-ded0b9c3cbdf"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("e20e0bb8-e193-41b0-b933-70b8ae6b3ac0"),
                            ColumnId = new Guid("53231167-fc6a-49af-8552-ded0b9c3cbdf"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("9b86502a-51e9-4555-9824-b882c2d4447d"),
                            ColumnId = new Guid("53231167-fc6a-49af-8552-ded0b9c3cbdf"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("fd85e9dd-41b7-4cdd-b0c6-78fee22a0bb8"),
                            ColumnId = new Guid("2f9da356-5025-4835-8690-c89b25ac434d"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("752f497e-4e97-41d0-9efa-0a7a6d659480"),
                            ColumnId = new Guid("2f9da356-5025-4835-8690-c89b25ac434d"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("d8e90916-4502-4c86-9e00-bd3b995dbc37"),
                            ColumnId = new Guid("4ccd0150-e2ca-4160-a1fb-57c00a2f3b54"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("39acd1ae-09bd-428d-9015-29b03237ab34"),
                            ColumnId = new Guid("4ccd0150-e2ca-4160-a1fb-57c00a2f3b54"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("323be335-e769-4690-8912-4bd6539e47b5"),
                            ColumnId = new Guid("a8eacf85-4d31-45c1-a784-c4bbce96610c"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("575d541a-249a-45f7-a019-7ad211dd7c7a"),
                            ColumnId = new Guid("a8eacf85-4d31-45c1-a784-c4bbce96610c"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("77c1ec64-360d-4949-ab9f-b6efe32b7b93"),
                            ColumnId = new Guid("a8eacf85-4d31-45c1-a784-c4bbce96610c"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("0e4c749f-c331-47db-a5da-a3f4523b7a49"),
                            ColumnId = new Guid("a8eacf85-4d31-45c1-a784-c4bbce96610c"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("569ff2db-ea7a-45b6-adda-29ceeffd1482"),
                            ColumnId = new Guid("5c04d09a-72b3-4086-8bbc-1428cc3a5fe5"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("ecf1f9c3-4500-46c9-abee-2eca5eb6e583"),
                            ColumnId = new Guid("5c04d09a-72b3-4086-8bbc-1428cc3a5fe5"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("b55ca268-43f5-402b-aa4f-35b3edb76f0b"),
                            ColumnId = new Guid("5c04d09a-72b3-4086-8bbc-1428cc3a5fe5"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("88368be0-6b96-4ec9-aea1-2784d324a35a"),
                            ColumnId = new Guid("5c04d09a-72b3-4086-8bbc-1428cc3a5fe5"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("ba40900a-9f0e-4d65-ae40-aba863d790f2"),
                            ColumnId = new Guid("af5ff55e-4cba-4d7b-ac22-9467dee92762"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("98e7ffc9-9fbb-44ee-b74a-cf1e6313dd38"),
                            ColumnId = new Guid("af5ff55e-4cba-4d7b-ac22-9467dee92762"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("6a8a741d-e5d3-4ac0-9c54-4bb38766c8fd"),
                            ColumnId = new Guid("113e0e86-f774-4512-8a84-692da1abc9db"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("902288ec-6e09-4487-bdc2-b7736aabe9f6"),
                            ColumnId = new Guid("113e0e86-f774-4512-8a84-692da1abc9db"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("de16584c-790d-42f0-9278-f71eca0de8dc"),
                            ColumnId = new Guid("911e324c-bff4-49ae-a68a-3d8a639d6aa0"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("0c9f2d6c-1656-45c2-9731-1ed3304d4739"),
                            ColumnId = new Guid("911e324c-bff4-49ae-a68a-3d8a639d6aa0"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("3c35ac46-605b-4c81-9eb7-1b491318c3ff"),
                            ColumnId = new Guid("4d828c4f-cd9e-4805-9d80-edd6faccb5ca"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("bb28517b-c875-4439-8e9e-26b49f1cfc02"),
                            ColumnId = new Guid("4d828c4f-cd9e-4805-9d80-edd6faccb5ca"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("72e920e5-06d1-4714-be86-d086ad5915e8"),
                            ColumnId = new Guid("4d828c4f-cd9e-4805-9d80-edd6faccb5ca"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("ec885007-12bf-45be-aec8-74b96208e6de"),
                            ColumnId = new Guid("4d828c4f-cd9e-4805-9d80-edd6faccb5ca"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("f687e3a2-2840-4cb0-88c4-87477b539fab"),
                            ColumnId = new Guid("aaa35a2e-28e5-48a9-b858-c50bebf7c99d"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6cbfd7c3-6207-45f0-a4f7-e6ad517ab62a"),
                            ColumnId = new Guid("aaa35a2e-28e5-48a9-b858-c50bebf7c99d"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("5c60cea8-f82d-4dee-897c-3aab59498229"),
                            ColumnId = new Guid("aaa35a2e-28e5-48a9-b858-c50bebf7c99d"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("c5c6f852-e32a-495e-9f00-5ab57ff97429"),
                            ColumnId = new Guid("b1d99c88-de60-4782-980b-bc235262b088"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("acfa9438-3723-4f0c-9e53-416c9014033e"),
                            ColumnId = new Guid("b1d99c88-de60-4782-980b-bc235262b088"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("2c8a8f90-1e50-43a0-be44-d50eeb583421"),
                            ColumnId = new Guid("5d31cd93-59d2-4e5d-9698-caeecdfa8345"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("3f59a91e-92c2-471a-8026-0c3bee520eff"),
                            ColumnId = new Guid("5d31cd93-59d2-4e5d-9698-caeecdfa8345"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c2fdd22-bfb7-40b4-b0d4-2617186ae8e8"),
                            EditBlockId = new Guid("9967712e-3f47-4ea6-aab9-836f88b487e7"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("1a4e3b9c-5bd5-43be-af0d-69180481ec7e"),
                            EditBlockId = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("db414d60-b234-4126-9541-8c583f6b79bb"),
                            EditBlockId = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("bb03a285-288a-4f48-bfc2-d529d466e1e5"),
                            EditBlockId = new Guid("0d31a144-3e14-4da7-bb20-a2ab77a259a4"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("05eae27c-71b6-4a1a-afe2-b88d391b7315"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("cec261a8-c79a-4994-a50e-7848ad22bd43"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("3944c263-680f-44d1-bc0c-fb7f44bb5643"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("52a2156e-118b-49df-8995-24229b971dfe"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("d45f302b-3fde-4d98-9878-3485c06e3cd2"),
                            EditBlockId = new Guid("a5224107-9dff-4abf-99f8-7afb5a5bb5e5"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("69d7a632-4087-40ca-be13-7d811f230c91"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("6a837e39-eb55-4648-983a-ef40e462a119"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("f410cf37-dbc8-4967-b9d0-a9596f9a9d08"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("d5681c7a-5a17-4702-a9c0-eb4faa1530a7"),
                            EditBlockId = new Guid("9b58a218-39ec-4237-8ec3-e82dcd328ceb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2340e88-d0b7-4f2c-8f33-590f960d740e"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ee9ba777-4efe-41ce-a870-a2ad9a27839b"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a374a321-ee31-4cd8-8656-538a8498c83f"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("2ff41c33-80b2-48bc-8c8d-1d0df8771c89"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("12666697-320b-4c92-9113-2bd4a47480fd"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("40c6253f-8a9c-46b4-b941-36069eb524a3"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("1cc5f6d1-e47e-46b1-8ebc-0ae83fa447bb"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertCategoryId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.Photo", "CropPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "CropPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServerApp.Data.Entities.Photo", "FullPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "FullPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId");

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("CropPhoto");

                    b.Navigation("FullPhoto");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Photos")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Category", "ExpertCategory")
                        .WithMany("Experts")
                        .HasForeignKey("ExpertCategoryId");

                    b.Navigation("ExpertCategory");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Photos");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
