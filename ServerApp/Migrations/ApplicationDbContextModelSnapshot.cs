// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("539c0aa4-b3ea-4ef7-bb6c-264e064dabd2"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            EditBlocksId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            EditBlocksId = new Guid("539c0aa4-b3ea-4ef7-bb6c-264e064dabd2"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("46e19fb3-0b51-4821-8d5a-13f1fec31ac8"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("4422e57a-829b-45e1-af55-87f78291a482"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("76c8d2bf-6eb6-411d-87e4-4c18d08a8c75"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("5c6882ba-bbba-468b-9081-f90769147664"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("b31f9ce8-2a5b-4b28-9799-07af758f5598"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("5b1a48a9-8780-4c8a-9dc4-92660272750f"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("3a811ab9-b949-404d-b6fa-3285de7f1c03"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("1ff77572-ddeb-44ba-a7e5-42728786b241"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("18865aa3-8d33-4078-87bc-686104c7b6b4"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("b751b13e-c06f-4210-8877-af6f62c1ebef"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("4b4d6203-7e86-4009-81ce-14a411f1d9a7"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("a17228e1-5beb-4096-869f-6bae9211a22b"),
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9")
                        },
                        new
                        {
                            FieldsId = new Guid("240415f6-ec4b-407f-833e-4eea9d3f3c8c"),
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9")
                        },
                        new
                        {
                            FieldsId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("231a1abf-d250-4803-9ae9-36c7f094bb82"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("ae2f63a3-4ac0-477c-bdf6-def159daae5e"),
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341")
                        },
                        new
                        {
                            FieldsId = new Guid("c84b064b-f703-49aa-8feb-3c6d8d0dd66b"),
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53")
                        },
                        new
                        {
                            FieldsId = new Guid("8ef24f91-8788-4427-9084-4ab32d838643"),
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53")
                        },
                        new
                        {
                            FieldsId = new Guid("33880d65-2942-4ffb-abd6-3287925700aa"),
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53")
                        },
                        new
                        {
                            FieldsId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949")
                        },
                        new
                        {
                            FieldsId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2")
                        },
                        new
                        {
                            FieldsId = new Guid("1c6b3a72-89a3-4fb3-bddc-da7e46e9da34"),
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2")
                        },
                        new
                        {
                            FieldsId = new Guid("5d7cf0cd-6fd5-4f96-824f-d666e14444f2"),
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            TablesId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            TablesId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            TablesId = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            TablesId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            TablesId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            TablesId = new Guid("024f549f-e6d7-4c1f-8029-83ebb2d550b9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            TablesId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            TablesId = new Guid("778a01ec-17de-450c-abdc-67be26aa5237")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            TablesId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            TablesId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            TablesId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            TablesId = new Guid("778a01ec-17de-450c-abdc-67be26aa5237")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            TablesId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            TablesId = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9"),
                            TracksId = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9"),
                            TracksId = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("c9dcd70f-024f-4a8f-b80e-c579f20709ac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("6d7aae53-84e9-41c4-adec-6bb843ffdb4e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("3faad36f-fe97-4bd8-9262-3487a17bd125")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("5ac90f5d-f4da-41dc-b9bc-9483344c9b39")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("06147156-6d11-4b6f-b0ad-15633afbf1b4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("8a010216-3072-4532-9c9e-0e19cd8aeae3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            MarksId = new Guid("9b989651-6818-472a-b2f1-0ed4dcb804a3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            MarksId = new Guid("dab4ba78-7451-4d82-997f-cc195ea42869")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            MarksId = new Guid("173a78fd-750a-4b66-adc1-bf56f2f9133d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            MarksId = new Guid("422fbc51-cbd4-423e-92b3-bc00965a8282")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            MarksId = new Guid("b63ce748-195c-4b93-9512-661c9826546c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            MarksId = new Guid("55ff3134-6029-4cda-91f5-a5fc47e24ab8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            MarksId = new Guid("fc6d7978-0784-422c-ae24-09e5adc75527")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            MarksId = new Guid("4306857a-17e9-4592-99d1-bd7d5928ccd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            MarksId = new Guid("631a3d3c-65cb-43e0-afb8-cec175559266")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("fc6d7978-0784-422c-ae24-09e5adc75527")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("4306857a-17e9-4592-99d1-bd7d5928ccd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("b842fdd8-de6d-4181-bf0d-60a55fc1bad3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("6929e9d3-970e-4927-9de9-a3a608cd8759")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("4187042a-03ca-43f4-b750-81fbd2f4c7eb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("00cde3f5-bae9-4046-b1ae-b070af93b837")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            MarksId = new Guid("4ae89c03-d12f-4c32-b39a-d87783ef5bf1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            MarksId = new Guid("631a3d3c-65cb-43e0-afb8-cec175559266")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            MarksId = new Guid("a657173b-6faf-4d6a-bcca-5461ad081046")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            MarksId = new Guid("34f8ff15-ccb6-4384-a947-8487cd8198e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9"),
                            MarksId = new Guid("86102120-9d0a-4a63-8bc6-d11f2bc505c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eccb5078-7bde-4960-a68e-763e453184b9"),
                            MarksId = new Guid("43406a17-f56c-4786-b147-c26a471474e7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f57b919f-114c-47ea-9450-a86bbc1d802f"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("92ff5c21-6d02-4724-800c-c5b3e734e17c"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("6557ad5b-b1ea-4609-92e3-b55bdf76cefb"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("a5e4adda-a210-4aa4-8845-6816b1019dff"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("70b4446f-3028-4a59-8bbb-73d906ef670a"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("5eec3d78-b18a-4e1f-9319-bb2a011b1f11"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48408019-e00e-4dd3-b398-0a04d0473172"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d5d6ced7-087e-4096-8fd4-81122c236419"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68953ff1-4b38-4c28-9468-95f33c0699bb"),
                            ColumnId = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("232d4486-09bb-4987-879d-8d2a8e09a5f3"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("81f8fd8f-fa56-4cc0-8c10-00cb841b9d25"),
                            ColumnId = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("232d4486-09bb-4987-879d-8d2a8e09a5f3")
                        },
                        new
                        {
                            Id = new Guid("c2acf009-cf44-4167-9ebe-64ad8c13bb8b"),
                            ColumnId = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("77abbe48-3219-4da0-bc43-fe69f025779e"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("5e8799bf-f0e3-4b6d-8e4d-4f36f5e537e6"),
                            ColumnId = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("77abbe48-3219-4da0-bc43-fe69f025779e")
                        },
                        new
                        {
                            Id = new Guid("9002f267-39a8-4d91-9d8c-dcc4a3dc3284"),
                            ColumnId = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("014ad11b-026c-40c9-acde-b6091102c02f"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("7c8f74ed-92a3-4d5c-9cac-777cf8df0ef0"),
                            ColumnId = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("014ad11b-026c-40c9-acde-b6091102c02f")
                        },
                        new
                        {
                            Id = new Guid("39cdd5d5-0a31-4066-a148-55844d8d24a6"),
                            ColumnId = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3f9461ef-7a13-461b-a4d5-48f30bfa44da"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("a237d59b-24fc-44d8-84d2-9ad3489ba783"),
                            ColumnId = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3f9461ef-7a13-461b-a4d5-48f30bfa44da")
                        },
                        new
                        {
                            Id = new Guid("6ef896d3-43fe-401b-b19a-29023bb09330"),
                            ColumnId = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8ac25860-d7e6-4475-a4c2-779046abc376"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("4863d798-5cda-4500-ac85-8a5333e49528"),
                            ColumnId = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8ac25860-d7e6-4475-a4c2-779046abc376")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79fca59b-2dad-4ab7-b1c2-dacd374caab8"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("d805e776-6dc1-4661-8f76-e319fa9ab88a"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("f34f512d-ccc2-45dc-98e1-144a62ef729c"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("e1624eac-17d0-41da-8a18-bdbbfbd62147"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("91f1c1cb-8da4-4631-b386-84f277adfd3b"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("ff98ff3c-8908-47f4-b0ab-2e47920c99dc"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("778a01ec-17de-450c-abdc-67be26aa5237"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("e066c842-b57e-4222-8263-f89b6567467e"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("778a01ec-17de-450c-abdc-67be26aa5237"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("a1c998c0-78b2-482d-bd2e-1fae0a6e7180"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("982efe87-6041-46bc-b672-8ed0fc6b4cf1"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("da344cab-c1bd-40f7-b04e-e5d8eac8036f"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("9f9ed1d7-cec3-4b1f-b64f-9a5705b01c61"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("4f42d2fc-5c7c-46fb-b7e7-8fb02f00890d"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("7970cd01-8b2e-411a-a4d3-066893bd389f"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("09b8a964-6538-4b7a-9d45-4c5f55ef3915"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("bf92cbe7-cbc8-479d-958f-8950d7570870"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("a49a4bed-e450-42d3-b037-83253b2ed62e"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("27631e54-bf0f-4a74-8d28-5a6531ea30ca"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("87ac3df8-0a3f-488c-b91d-fa6df3cb35e5"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("96b2ea8f-ed91-43c1-a2b5-416006706018"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("bfd438ed-1112-4956-8dfa-65fdd1907f71"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("5e041b48-706f-4a3a-9db5-19327b515e10"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("abc83e4e-e8e4-419e-8253-dd700c36b249"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("78339566-e8da-4746-8cae-dedf46b05108"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("d0dff28d-52dc-48d0-941d-876d48d4ec04"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("54b3b26e-9606-4831-9daa-d15731c574e7"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("07bd0bc4-4b31-4f84-9b65-bacc97c6dc9a"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("6a9a5d06-3081-4ddd-80ae-fc8f015120ec")
                        },
                        new
                        {
                            Id = new Guid("1a3683e3-e55e-4c27-9858-43d22d3b3eeb"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("6634c1f5-d81d-45e0-8e6a-8ba2e87a41b2"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("e49b0999-71b3-419b-af22-ea69be28008e"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("0f60ae81-ed91-44ff-89e9-fe70802e4fce"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("024f549f-e6d7-4c1f-8029-83ebb2d550b9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("8961c9fd-36c0-47c3-95d0-afc10ba41d9b"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("024f549f-e6d7-4c1f-8029-83ebb2d550b9"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("ca14ce38-e6ca-419e-b1a0-ab1822d28e70"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("e326a2e9-4ed0-4809-ba1c-6d6da4e3a072"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("2bb12708-f7b0-442a-8dc8-f500804babe3"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("48facd9d-21d7-441a-ba69-687ed1d84593"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("fb5766d6-22d1-4b6c-9e49-f478717025fd"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("faf07c01-cd72-401d-b6b9-7a1b6b43bfaa"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("c21965d6-873b-4a9f-b812-4212a62b5d0e"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("ed2dc31a-6b39-424c-b696-5fd0666e4a99"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("633a2882-bfc8-4775-8434-a10452cde296"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("8b8fb155-2080-4ca6-8163-09d9169d6c0a"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("6d5c3cb0-52a4-4981-a352-2375e4cccfa4"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("773f9004-859b-4993-9544-a9779b69ab32"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("7b35d21c-7daf-49da-86d2-1af4c497c8c1"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("d595c169-6f91-409a-8a08-8dffeb170f47"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("52f8362f-6321-49e5-a637-27a39e683a81"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("eb1752b2-9db1-4ce9-8bb3-48f04b239db7"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("6d0f99b1-6793-4237-b854-4e6b683f1f06"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("9709f193-239f-4fbe-bbc1-98054ea071cf"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("80ea4d22-3bd3-4169-8d2d-8f7ff8dc2a0e"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("209840ed-1aff-450d-9482-a1417ee3c943"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("0398a03c-28b9-4238-b95e-c0a9fa54940f"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("c3c44ce4-18d6-4df1-b892-9544ffb8a2d9"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2"),
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("539c0aa4-b3ea-4ef7-bb6c-264e064dabd2"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46e19fb3-0b51-4821-8d5a-13f1fec31ac8"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("4422e57a-829b-45e1-af55-87f78291a482"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("b3e926e5-8934-42af-96e6-bb1a7d2b6bc0")
                        },
                        new
                        {
                            Id = new Guid("76c8d2bf-6eb6-411d-87e4-4c18d08a8c75"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("5c6882ba-bbba-468b-9081-f90769147664"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("b31f9ce8-2a5b-4b28-9799-07af758f5598"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("5b1a48a9-8780-4c8a-9dc4-92660272750f"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("3a811ab9-b949-404d-b6fa-3285de7f1c03"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("1ff77572-ddeb-44ba-a7e5-42728786b241"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("18865aa3-8d33-4078-87bc-686104c7b6b4"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("b751b13e-c06f-4210-8877-af6f62c1ebef"),
                            EditBlockId = new Guid("cc45c134-851b-409c-bb25-103e7cb74792"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("4b4d6203-7e86-4009-81ce-14a411f1d9a7"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("a17228e1-5beb-4096-869f-6bae9211a22b"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Название конкурсной работы",
                            Number = 12,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("240415f6-ec4b-407f-833e-4eea9d3f3c8c"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Ссылка на конкурсную работу",
                            Number = 13,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("231a1abf-d250-4803-9ae9-36c7f094bb82"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("ae2f63a3-4ac0-477c-bdf6-def159daae5e"),
                            EditBlockId = new Guid("822c3154-9f58-4d6d-b499-5b185474726f"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("614ff430-7064-4691-a370-ef5a118daf9b")
                        },
                        new
                        {
                            Id = new Guid("c84b064b-f703-49aa-8feb-3c6d8d0dd66b"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("8ef24f91-8788-4427-9084-4ab32d838643"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("33880d65-2942-4ffb-abd6-3287925700aa"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("1c6b3a72-89a3-4fb3-bddc-da7e46e9da34"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        },
                        new
                        {
                            Id = new Guid("5d7cf0cd-6fd5-4f96-824f-d666e14444f2"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9dcd70f-024f-4a8f-b80e-c579f20709ac"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a")
                        },
                        new
                        {
                            Id = new Guid("6d7aae53-84e9-41c4-adec-6bb843ffdb4e"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a")
                        },
                        new
                        {
                            Id = new Guid("3faad36f-fe97-4bd8-9262-3487a17bd125"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("33880d65-2942-4ffb-abd6-3287925700aa"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("5ac90f5d-f4da-41dc-b9bc-9483344c9b39"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("c84b064b-f703-49aa-8feb-3c6d8d0dd66b"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("06147156-6d11-4b6f-b0ad-15633afbf1b4"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("8ef24f91-8788-4427-9084-4ab32d838643"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8a010216-3072-4532-9c9e-0e19cd8aeae3"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9")
                        },
                        new
                        {
                            Id = new Guid("9b989651-6818-472a-b2f1-0ed4dcb804a3"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c")
                        },
                        new
                        {
                            Id = new Guid("dab4ba78-7451-4d82-997f-cc195ea42869"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4")
                        },
                        new
                        {
                            Id = new Guid("173a78fd-750a-4b66-adc1-bf56f2f9133d"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4")
                        },
                        new
                        {
                            Id = new Guid("422fbc51-cbd4-423e-92b3-bc00965a8282"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4")
                        },
                        new
                        {
                            Id = new Guid("b63ce748-195c-4b93-9512-661c9826546c"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("1da1da32-67b6-4b51-9067-af24170053f4")
                        },
                        new
                        {
                            Id = new Guid("55ff3134-6029-4cda-91f5-a5fc47e24ab8"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("024f549f-e6d7-4c1f-8029-83ebb2d550b9")
                        },
                        new
                        {
                            Id = new Guid("fc6d7978-0784-422c-ae24-09e5adc75527"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("4306857a-17e9-4592-99d1-bd7d5928ccd9"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847")
                        },
                        new
                        {
                            Id = new Guid("631a3d3c-65cb-43e0-afb8-cec175559266"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("778a01ec-17de-450c-abdc-67be26aa5237")
                        },
                        new
                        {
                            Id = new Guid("b842fdd8-de6d-4181-bf0d-60a55fc1bad3"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39")
                        },
                        new
                        {
                            Id = new Guid("6929e9d3-970e-4927-9de9-a3a608cd8759"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("1c6b3a72-89a3-4fb3-bddc-da7e46e9da34"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("4187042a-03ca-43f4-b750-81fbd2f4c7eb"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("5d7cf0cd-6fd5-4f96-824f-d666e14444f2"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("00cde3f5-bae9-4046-b1ae-b070af93b837"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e")
                        },
                        new
                        {
                            Id = new Guid("4ae89c03-d12f-4c32-b39a-d87783ef5bf1"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e")
                        },
                        new
                        {
                            Id = new Guid("a657173b-6faf-4d6a-bcca-5461ad081046"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d")
                        },
                        new
                        {
                            Id = new Guid("34f8ff15-ccb6-4384-a947-8487cd8198e9"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2")
                        },
                        new
                        {
                            Id = new Guid("86102120-9d0a-4a63-8bc6-d11f2bc505c0"),
                            FieldId = new Guid("240415f6-ec4b-407f-833e-4eea9d3f3c8c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("43406a17-f56c-4786-b147-c26a471474e7"),
                            FieldId = new Guid("240415f6-ec4b-407f-833e-4eea9d3f3c8c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57185318-9cd0-44d9-83c9-03997ba9d341"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7480b9d0-5330-4367-9678-f44df826ea53"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("538037b2-ed4f-46da-9ca1-8b6ec103f4cb"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("1aa5a36b-6c54-4aa3-a244-b63e7d9b1949"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("78e4307e-edfd-4712-88a7-52af60d878c2"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("3b0d1d7f-2b46-4b9b-9f04-ca262c41ce12"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("eccb5078-7bde-4960-a68e-763e453184b9"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("232d4486-09bb-4987-879d-8d2a8e09a5f3"),
                            IsPrefilled = true,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050")
                        },
                        new
                        {
                            Id = new Guid("77abbe48-3219-4da0-bc43-fe69f025779e"),
                            IsPrefilled = true,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050")
                        },
                        new
                        {
                            Id = new Guid("014ad11b-026c-40c9-acde-b6091102c02f"),
                            IsPrefilled = true,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050")
                        },
                        new
                        {
                            Id = new Guid("3f9461ef-7a13-461b-a4d5-48f30bfa44da"),
                            IsPrefilled = true,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050")
                        },
                        new
                        {
                            Id = new Guid("8ac25860-d7e6-4475-a4c2-779046abc376"),
                            IsPrefilled = true,
                            TableId = new Guid("25528442-cfa7-4166-9a4e-2d47af512050")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0a0044e-8113-46ab-be52-8953644fc7a5"),
                            FieldId = new Guid("4b4d6203-7e86-4009-81ce-14a411f1d9a7"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("e4b2b26b-05b5-48a6-859c-654135f034c0"),
                            FieldId = new Guid("4b4d6203-7e86-4009-81ce-14a411f1d9a7"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("603ae54e-fec6-4d2e-a1d5-057dc92bd72a"),
                            FieldId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("a0b4f320-73c3-4424-9f0c-400dd3dbe50f"),
                            FieldId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("a1f20cd4-786f-48f0-ae39-0f1e6e7da563"),
                            FieldId = new Guid("76c87a49-ee3c-483e-8c27-8a540da0153b"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("d7c63b76-cd06-48c7-b6d7-bbeabc00228b"),
                            ColumnId = new Guid("f34f512d-ccc2-45dc-98e1-144a62ef729c"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("2837b41f-9e70-49e0-a6cd-9ee7883ed01e"),
                            ColumnId = new Guid("f34f512d-ccc2-45dc-98e1-144a62ef729c"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("ab35154a-1d29-4ac9-a416-4076de23d4d0"),
                            ColumnId = new Guid("f34f512d-ccc2-45dc-98e1-144a62ef729c"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("fca44148-f1a5-4175-b5d2-dbcaf5c1fc8a"),
                            ColumnId = new Guid("abc83e4e-e8e4-419e-8253-dd700c36b249"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("eb44c182-78f1-455b-95ba-6db9406b665a"),
                            ColumnId = new Guid("abc83e4e-e8e4-419e-8253-dd700c36b249"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("df5bdc33-bd66-40e7-89bb-f95946c95c42"),
                            ColumnId = new Guid("abc83e4e-e8e4-419e-8253-dd700c36b249"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("67108e79-e7ed-468a-8573-f5404171c28b"),
                            ColumnId = new Guid("8961c9fd-36c0-47c3-95d0-afc10ba41d9b"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("f6ae870e-fb19-4340-af18-5316a12b07fc"),
                            ColumnId = new Guid("8961c9fd-36c0-47c3-95d0-afc10ba41d9b"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("245b0437-8f76-49ff-93b1-b4df440e3538"),
                            ColumnId = new Guid("d595c169-6f91-409a-8a08-8dffeb170f47"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("d128863e-dea7-416a-9306-751e12303885"),
                            ColumnId = new Guid("d595c169-6f91-409a-8a08-8dffeb170f47"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("67772d6a-3b6d-40c3-9c90-10e0edd25984"),
                            ColumnId = new Guid("eb1752b2-9db1-4ce9-8bb3-48f04b239db7"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("e1d46459-79ab-4524-b15a-bd7903cc0e38"),
                            ColumnId = new Guid("eb1752b2-9db1-4ce9-8bb3-48f04b239db7"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c28b9137-393b-4783-aa7f-ca0565978094"),
                            ColumnId = new Guid("eb1752b2-9db1-4ce9-8bb3-48f04b239db7"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("6c112ea9-1a8d-47ae-815e-30b6bbb46105"),
                            ColumnId = new Guid("209840ed-1aff-450d-9482-a1417ee3c943"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("425e9054-311c-4b2c-86db-7ee5ea69518e"),
                            ColumnId = new Guid("209840ed-1aff-450d-9482-a1417ee3c943"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("f02879a9-9445-4232-ad13-66e91daa02ba"),
                            ColumnId = new Guid("209840ed-1aff-450d-9482-a1417ee3c943"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("a475b09d-e464-4dc7-be04-deffa12f12f0"),
                            ColumnId = new Guid("d0dff28d-52dc-48d0-941d-876d48d4ec04"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("2dab5391-8616-4271-8b39-217e04ddd728"),
                            ColumnId = new Guid("d0dff28d-52dc-48d0-941d-876d48d4ec04"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("2e08cea0-2f36-4dd5-b809-024aba1eb44c"),
                            ColumnId = new Guid("6634c1f5-d81d-45e0-8e6a-8ba2e87a41b2"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d50a9357-425a-4a46-ba7a-f45e51a1e4c8"),
                            ColumnId = new Guid("6634c1f5-d81d-45e0-8e6a-8ba2e87a41b2"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("860cf7d7-d44d-42d1-8332-fa9870971847"),
                            EditBlockId = new Guid("539c0aa4-b3ea-4ef7-bb6c-264e064dabd2"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("778a01ec-17de-450c-abdc-67be26aa5237"),
                            EditBlockId = new Guid("539c0aa4-b3ea-4ef7-bb6c-264e064dabd2"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("1ac699cd-e4da-4e65-ab6c-d1f53d9c711a"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("49500e47-c27a-4cf8-a00e-163c02a8c4e9"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c0e3dd9f-86aa-4d8a-8cf2-80f8577cd91a"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("1da1da32-67b6-4b51-9067-af24170053f4"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("024f549f-e6d7-4c1f-8029-83ebb2d550b9"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b8abd972-aa72-45dc-9514-b301d9e8e86c"),
                            EditBlockId = new Guid("d74659cf-c6bd-4dbf-8684-f934b3fd03d6"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("7068bebc-5366-47bf-9d94-34dbad647f39"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("25528442-cfa7-4166-9a4e-2d47af512050"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("52c5b3ea-8079-40f8-ad5b-ab26d68d917e"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("a36767c8-c1ae-4556-aacd-820c1382538d"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("f493eb1f-2036-4e6e-b803-a90663570db2"),
                            EditBlockId = new Guid("0a4a83f0-8acd-46a8-bdf2-9da32876d192"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e2a3985-6a17-410e-8483-d49fb8282ec4"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c8c803bc-6b78-4408-a48e-d804b299bbbd"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c00194d-d990-4710-b454-d3f556d3b503"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("77fe5ab5-8b5b-47be-a3c5-2ab9b4ee3904"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("181c273c-d450-4c03-b8a5-f57aa3ef5f35"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("614ff430-7064-4691-a370-ef5a118daf9b"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("6a9a5d06-3081-4ddd-80ae-fc8f015120ec"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("b3e926e5-8934-42af-96e6-bb1a7d2b6bc0"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
