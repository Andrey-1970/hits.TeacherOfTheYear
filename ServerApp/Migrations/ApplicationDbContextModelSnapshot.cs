// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            EditBlocksId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c90287a2-c0db-421c-b4a7-54b4f0ddac87"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c90287a2-c0db-421c-b4a7-54b4f0ddac87"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("59f17939-dbf1-4650-8a1a-d6eea67f494f"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("2b9c4f97-40ee-4aee-9459-09082858aa56"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("bb152a1e-a236-439d-bb3f-1cb8e14233e9"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("afd310d9-b98e-4afa-afb0-daf4c748877c"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("5b2140db-d0a7-47a5-bc3c-412cc2e52528"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("486fe20a-80d5-41ae-a08a-f1e2d84a5db5"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("c883f75d-266b-48f8-8325-4faae705d492"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("4f7398bf-2cb9-43dd-9f10-dacaeb122fbe"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("88a5d3d7-b0b8-4845-b663-33622f19a82e"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("5d472461-2200-4d2a-82c4-8801fd878835"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("ee2ff6ff-dcc3-469c-a77a-7bb8cdcaff9d"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("6d8d378a-005c-445c-934c-d0e9cc08faab"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("5abbc9bd-a7bf-4f18-9e67-76ce93283798"),
                            MarkBlocksId = new Guid("6f60dbec-fc8d-4ae3-8db7-669f5e559b84")
                        },
                        new
                        {
                            FieldsId = new Guid("269fe0ba-8f0a-471c-8a22-1596cda13a83"),
                            MarkBlocksId = new Guid("6f60dbec-fc8d-4ae3-8db7-669f5e559b84")
                        },
                        new
                        {
                            FieldsId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("bcad71ac-b989-42ae-9641-af4f9138f8c6"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("028ea5ba-49a9-47a2-bf9f-e1968fe9abe2"),
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e")
                        },
                        new
                        {
                            FieldsId = new Guid("02b91a72-fe64-433b-8d83-7ff480e24db5"),
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34")
                        },
                        new
                        {
                            FieldsId = new Guid("2c12554f-83b8-44a0-a63d-2ac23de401d5"),
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34")
                        },
                        new
                        {
                            FieldsId = new Guid("61c76373-3d5e-4e13-bd40-3898961b64e9"),
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34")
                        },
                        new
                        {
                            FieldsId = new Guid("cba68fa0-99f2-44ae-924f-38cd87cdee52"),
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34")
                        },
                        new
                        {
                            FieldsId = new Guid("643f6133-3970-40ba-a3d1-9f3f11fb1973"),
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34")
                        },
                        new
                        {
                            FieldsId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274")
                        },
                        new
                        {
                            FieldsId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9")
                        },
                        new
                        {
                            FieldsId = new Guid("94b4864a-3139-48cc-8888-e8fbef8c694a"),
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9")
                        },
                        new
                        {
                            FieldsId = new Guid("740d3b1e-5dad-4264-9d24-2cac4161b49a"),
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            TablesId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            TablesId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            TablesId = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            TablesId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            TablesId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            TablesId = new Guid("45354f6f-5e09-4726-b7b3-ad5a376442a3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            TablesId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            TablesId = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            TablesId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            TablesId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            TablesId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            TablesId = new Guid("da9e3386-452d-409e-860c-e65f06168e72")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            TablesId = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            TablesId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            TablesId = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6f60dbec-fc8d-4ae3-8db7-669f5e559b84"),
                            TracksId = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6f60dbec-fc8d-4ae3-8db7-669f5e559b84"),
                            TracksId = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("2c654393-11f8-489a-9c75-954d31ff97cf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("a74290a6-3854-4083-81b5-a7ae4e5738b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("2ab143b9-7d2f-4e91-ad44-d2b9fccc9d20")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("fc91f625-0365-489e-a857-ac9b06e67b15")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("3441ae6a-75d4-4988-ac97-58c0da24e320")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("e1ac3234-54a0-40ca-ade1-c83005733a95")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            MarksId = new Guid("0e37f100-5dc8-4887-bda0-d0ca71fd29c6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            MarksId = new Guid("7b27b3f4-f22a-4bdf-95ba-97cb4814e945")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            MarksId = new Guid("480bdef2-8e88-44bc-8591-46b85a32fa21")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            MarksId = new Guid("80c201b3-7662-4ec5-a5c4-afac44c60eca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            MarksId = new Guid("ef36d637-703a-4c39-bca4-726d0feef4c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            MarksId = new Guid("dad8d92d-1e15-4886-97cd-00ec5d0d373d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            MarksId = new Guid("07ceb1be-0b03-4908-a90a-9c8a8cc94012")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            MarksId = new Guid("c5d3fa52-4dd2-4644-8900-b4f754e7f3d5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            MarksId = new Guid("ac481082-2ad8-4311-8e64-b7e09f7cb69a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("07ceb1be-0b03-4908-a90a-9c8a8cc94012")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("c5d3fa52-4dd2-4644-8900-b4f754e7f3d5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("30d06184-48e6-437f-ab9f-f5ff0f984bc9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("920b007d-83d2-4c3e-9a01-c98e7abf142f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("18d6a359-f609-4ecb-866c-c35743400c8e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("2ada0f24-03c9-408f-b2ca-48c11faf9594")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("f31387d1-100c-4e3e-904e-7c68b2d0cbd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("0375eea8-d3d5-4102-93fb-85b58817829b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            MarksId = new Guid("9e323af0-c75a-429b-9fc4-cacb9e74aaf7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            MarksId = new Guid("ac481082-2ad8-4311-8e64-b7e09f7cb69a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            MarksId = new Guid("931a3639-8c0c-4d2e-94d9-62dacee0b22b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            MarksId = new Guid("338bc376-50dc-45aa-936e-1acefbc4212c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            MarksId = new Guid("eacac388-49bb-4f6e-95cc-3b2877f99d1e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            MarksId = new Guid("5b13e4ad-ec5d-4b0c-a5bb-aed8d4192b8f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("854ad383-bd5f-4038-a782-82325df486e4"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("62affb94-6c91-4b70-8fdb-3cf411f9c0ef"),
                            Number = 2,
                            Status = "В ожидании оценки"
                        },
                        new
                        {
                            Id = new Guid("50b2ef8b-3728-4fe1-b020-1a72cf492316"),
                            Number = 3,
                            Status = "В процессе оценки"
                        },
                        new
                        {
                            Id = new Guid("e03b34d1-3a04-42bb-8283-40469e6f79c3"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("e6259677-42bb-4bb8-aa5a-84351c67a9e8"),
                            Number = 5,
                            Status = "Отклонена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1340997b-cde6-49b4-9392-98e5ce84f4a7"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0d933de6-a850-4542-b639-2c992d4a140b"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("83c1fcd5-95b6-4531-8572-69030fce002f"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d933de6-a850-4542-b639-2c992d4a140b")
                        },
                        new
                        {
                            Id = new Guid("e346a07b-3fe9-4a46-9e9b-c200e0e0f667"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d933de6-a850-4542-b639-2c992d4a140b")
                        },
                        new
                        {
                            Id = new Guid("75ccd908-b935-4721-964c-ea1c6c99b7a6"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d933de6-a850-4542-b639-2c992d4a140b")
                        },
                        new
                        {
                            Id = new Guid("0c34eb37-44bc-4468-be11-9073ed462d53"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d933de6-a850-4542-b639-2c992d4a140b")
                        },
                        new
                        {
                            Id = new Guid("841643fa-134f-4c06-a6fe-a956e7a6f6c3"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("faec8c6e-2138-4aae-9c41-9aec7fdec920"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de")
                        },
                        new
                        {
                            Id = new Guid("4694aa2c-f7fa-4330-a005-eb7520f2dd1f"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de")
                        },
                        new
                        {
                            Id = new Guid("890fe8fd-56b1-444b-ae22-abc53a4b1f6b"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de")
                        },
                        new
                        {
                            Id = new Guid("2f58139b-f062-4d42-878e-92f880535fba"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de")
                        },
                        new
                        {
                            Id = new Guid("02749450-9cf6-4524-8592-01c55a157f72"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0d822c64-1146-4580-82db-d298a54abbdd"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("81ec1765-57bc-4082-a4f1-9b01da4691fc"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d822c64-1146-4580-82db-d298a54abbdd")
                        },
                        new
                        {
                            Id = new Guid("d4653400-f836-462f-9718-65b58a0db290"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d822c64-1146-4580-82db-d298a54abbdd")
                        },
                        new
                        {
                            Id = new Guid("5005a955-f197-4ad3-a1cf-1397ff7460dd"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d822c64-1146-4580-82db-d298a54abbdd")
                        },
                        new
                        {
                            Id = new Guid("c96b37b9-efab-49b8-b95e-7506cfee7608"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0d822c64-1146-4580-82db-d298a54abbdd")
                        },
                        new
                        {
                            Id = new Guid("1940b72f-51f1-4f30-8de8-2cb0e489d3d2"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("89db6a3f-4ec7-4df9-aedb-bdbf5cbd78f4"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2")
                        },
                        new
                        {
                            Id = new Guid("e726e0b0-57b9-4031-afee-678ca3deff25"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2")
                        },
                        new
                        {
                            Id = new Guid("f1a09d2b-7e30-4ded-8f47-7e778dde2258"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2")
                        },
                        new
                        {
                            Id = new Guid("81986635-2d99-4bdc-89be-79992bc45c39"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2")
                        },
                        new
                        {
                            Id = new Guid("15725a18-71c8-445b-afa5-cc893ad0ed12"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("6a6cd643-4275-435a-993b-3434fd3e2b3b"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f")
                        },
                        new
                        {
                            Id = new Guid("2492ebcd-c269-4c65-bc68-ec36b31d0cda"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f")
                        },
                        new
                        {
                            Id = new Guid("ad1a653c-1d51-48d7-8198-d96dfe409e89"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f")
                        },
                        new
                        {
                            Id = new Guid("b46f6ee4-484c-4fe7-b5d9-7c4a0f816ce4"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f")
                        },
                        new
                        {
                            Id = new Guid("cd48cee2-2048-4412-80f1-b6453ebb97b4"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816"),
                            Value = "Количество монографий/глав в монографии"
                        },
                        new
                        {
                            Id = new Guid("fad7093d-ab79-4340-ac71-7a332667b9a7"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816")
                        },
                        new
                        {
                            Id = new Guid("62c6ba05-4e1f-4969-9062-dc4d21596668"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816")
                        },
                        new
                        {
                            Id = new Guid("580ae8a5-d092-49b9-8451-20af960869ae"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816")
                        },
                        new
                        {
                            Id = new Guid("4920c25f-5b64-4d1a-820b-8fe0eff32862"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816")
                        },
                        new
                        {
                            Id = new Guid("fd99a590-cb0b-4abd-956a-ed5c08ce5ad9"),
                            ColumnId = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("17a87551-141b-4080-9b38-32887639fcba"),
                            Value = "Количество патентов"
                        },
                        new
                        {
                            Id = new Guid("134b676e-265d-4047-9965-061c041e32f4"),
                            ColumnId = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("17a87551-141b-4080-9b38-32887639fcba")
                        },
                        new
                        {
                            Id = new Guid("da388110-6325-480c-a893-d3fe28e8626b"),
                            ColumnId = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("17a87551-141b-4080-9b38-32887639fcba")
                        },
                        new
                        {
                            Id = new Guid("2c18f3ab-3683-45a8-8bc0-7bda321c72d1"),
                            ColumnId = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("17a87551-141b-4080-9b38-32887639fcba")
                        },
                        new
                        {
                            Id = new Guid("7037920c-a948-428c-a80b-1ac6ec551541"),
                            ColumnId = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("17a87551-141b-4080-9b38-32887639fcba")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bbe3876-5d3c-4e5b-b6c7-5eddd142b4a6"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("8b5270c2-92ac-4907-b36f-ad679949e4f1"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("85b3f8c3-6b6f-4278-8c09-a4ba822865f7"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("3f9c7b52-08ca-40d5-91f0-b323bcf261ee"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("5d76b515-912e-4b21-abd0-dc8fd67e72a9"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("fb8eb704-4d76-4933-af3c-f412c145d88a"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("0df10e33-f389-4d48-a87a-3db098b72d2c"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("fedffb6f-9a3b-497b-bc81-61bf66a48a07"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("6b615f87-a781-40da-8005-876b418631b6"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("340eceb5-5f17-4e52-92a7-9e700bc2d9d8"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("e042d5e2-0a5f-4591-aa8a-ae6c2999f5c1"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("e60dce1d-3cb7-4335-9d6f-0e61c7865258"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("ae2787c8-1c05-4ef8-bfef-7a51a18a1341"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("d8980ce7-aefc-4ef4-8be1-bfc58cf22ad1"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("5801dd5a-b629-4696-8b0a-4bc0d51b6a36"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("a7161494-5835-4a4a-a1e2-683b54df22e5"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("b9abdc78-36a0-4f9a-b49a-3c9ee4c0f65d"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("8f7a6263-abd4-4258-ab16-f381c8760e91"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("f2f98add-f67b-42c5-b8dd-24aa8b06c530"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("7247ee9d-c052-41d6-abc1-06ee52db33d9"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("14d43f3f-b46e-40db-bfa1-2eb89ab6d875"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("8abda747-e0fc-4637-8d8c-80a39596305c"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("62e07370-de38-4df3-bda0-017c61cb9683"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("bc209802-9fe7-4938-9666-cb6fbba051f0"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("115bcec8-b077-4d92-99fc-b4b1c95aac28"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("2569b656-cae8-4af0-8226-fe55a3e979c3"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("0a082c69-7567-45cf-b95d-21a49bba091a")
                        },
                        new
                        {
                            Id = new Guid("807f8a80-a061-401a-944d-0ec50b930417"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("cdc14840-6fed-4b09-b443-d3e4f9455683"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("45354f6f-5e09-4726-b7b3-ad5a376442a3"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("1a4fac46-afb5-4f7f-8b00-ac540b7986f7"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("45354f6f-5e09-4726-b7b3-ad5a376442a3"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("c667aea7-369d-4dfc-b8c6-876ffdd4baeb"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("39827149-182c-4f23-8243-1083a38f2efb"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("e9d48990-9068-4bbc-9132-7a0aa7b0b55f"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("a51f997d-19a3-4e15-a4b3-98eac19738de"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("0270e21a-ab10-4351-8998-c0e60a4f0f92"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("14b10c7f-8a3d-41ef-a748-de4d3773f62a"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("93f97341-44b2-4c6e-a26d-5852e6c138c0"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("0a666f5e-2b47-463d-a5e2-04054d10c93c"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("ed888e7c-fd24-486d-9671-678f2c44b637"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("93728924-1f66-445d-b5cd-7305717776e4"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("ef0d015f-50b7-4bff-b238-3b5c83780c9f"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("5bff18cd-8e95-4ad1-b22a-1c4d73c7ddfe"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("67373828-1926-4ea2-86c1-29a9b6d80cf7"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("bd3a2856-a695-43df-b877-6f4dc59664ff"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("bd0c42a3-a164-4ed7-b5c3-1fe57ff1dfc9"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("371f6e74-442d-415c-83b7-25252c771ddb"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("9da25b3c-d28a-49d0-a2ba-7ad3522d8b16"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("bba91b97-f5cb-4126-a6ff-7d172bbd58b2"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("44bdc9b8-5d61-4ab4-8fa1-2868dd252eae"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("9de623e4-5a13-42dd-bebb-bd174ecf5106"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("ebcdd84d-805f-4e68-a9fa-c293184d5341"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("af6397ed-725a-4953-8d53-7b8f79cfb05a"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("72d859c8-f484-4b45-acc6-5527802d7768"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("deb1f399-0665-49aa-94ee-b0141469b2df"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("fe1b23cc-5e2f-4418-ba63-ae0dcf33dc47"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc"),
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("c90287a2-c0db-421c-b4a7-54b4f0ddac87"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59f17939-dbf1-4650-8a1a-d6eea67f494f"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("2b9c4f97-40ee-4aee-9459-09082858aa56"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            Required = true,
                            ValueTypeId = new Guid("1731457d-afaf-4cc9-adf6-bbdfb13acee3")
                        },
                        new
                        {
                            Id = new Guid("bb152a1e-a236-439d-bb3f-1cb8e14233e9"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("afd310d9-b98e-4afa-afb0-daf4c748877c"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("5b2140db-d0a7-47a5-bc3c-412cc2e52528"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("486fe20a-80d5-41ae-a08a-f1e2d84a5db5"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("c883f75d-266b-48f8-8325-4faae705d492"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("4f7398bf-2cb9-43dd-9f10-dacaeb122fbe"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("88a5d3d7-b0b8-4845-b663-33622f19a82e"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("5d472461-2200-4d2a-82c4-8801fd878835"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("ee2ff6ff-dcc3-469c-a77a-7bb8cdcaff9d"),
                            EditBlockId = new Guid("5e66d320-b43e-48e1-87ab-31cae394d372"),
                            Name = "Дополнительная информация",
                            Number = 11,
                            Placeholder = "Пример",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Направление конкурса",
                            Number = 12,
                            Placeholder = "Выберите направление конкурса",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("6d8d378a-005c-445c-934c-d0e9cc08faab"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 13,
                            Placeholder = "Выберите категорию участника конкруса",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("5abbc9bd-a7bf-4f18-9e67-76ce93283798"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Название конкурсной работы",
                            Number = 14,
                            Placeholder = "Введите название своей конкурсной работы",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("269fe0ba-8f0a-471c-8a22-1596cda13a83"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Ссылка на конкурсную работу",
                            Number = 15,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Ученое звание",
                            Number = 16,
                            Placeholder = "Выберите ученое звание",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("bcad71ac-b989-42ae-9641-af4f9138f8c6"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Ученая степень",
                            Number = 17,
                            Placeholder = "Выберите ученую степень",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("028ea5ba-49a9-47a2-bf9f-e1968fe9abe2"),
                            EditBlockId = new Guid("74eb00d5-1d0d-4e6f-8e72-b0f0837d3f1f"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            Required = true,
                            ValueTypeId = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4")
                        },
                        new
                        {
                            Id = new Guid("02b91a72-fe64-433b-8d83-7ff480e24db5"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("2c12554f-83b8-44a0-a63d-2ac23de401d5"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            Name = "Защитившиеся доктора наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("61c76373-3d5e-4e13-bd40-3898961b64e9"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            Name = "Защитившиеся бакалавры",
                            Number = 21,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("cba68fa0-99f2-44ae-924f-38cd87cdee52"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            Name = "Защитившиеся специалисты",
                            Number = 22,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("643f6133-3970-40ba-a3d1-9f3f11fb1973"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            Name = "Защитившиеся магистры",
                            Number = 23,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("94b4864a-3139-48cc-8888-e8fbef8c694a"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        },
                        new
                        {
                            Id = new Guid("740d3b1e-5dad-4264-9d24-2cac4161b49a"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            Name = "Защитившиеся доктора наук",
                            Number = 25,
                            Placeholder = "Введите количество",
                            Required = true,
                            ValueTypeId = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c654393-11f8-489a-9c75-954d31ff97cf"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa")
                        },
                        new
                        {
                            Id = new Guid("a74290a6-3854-4083-81b5-a7ae4e5738b2"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa")
                        },
                        new
                        {
                            Id = new Guid("2ab143b9-7d2f-4e91-ad44-d2b9fccc9d20"),
                            FieldId = new Guid("643f6133-3970-40ba-a3d1-9f3f11fb1973"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("fc91f625-0365-489e-a857-ac9b06e67b15"),
                            FieldId = new Guid("02b91a72-fe64-433b-8d83-7ff480e24db5"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("3441ae6a-75d4-4988-ac97-58c0da24e320"),
                            FieldId = new Guid("2c12554f-83b8-44a0-a63d-2ac23de401d5"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("e1ac3234-54a0-40ca-ade1-c83005733a95"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb")
                        },
                        new
                        {
                            Id = new Guid("0e37f100-5dc8-4887-bda0-d0ca71fd29c6"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962")
                        },
                        new
                        {
                            Id = new Guid("7b27b3f4-f22a-4bdf-95ba-97cb4814e945"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b")
                        },
                        new
                        {
                            Id = new Guid("480bdef2-8e88-44bc-8591-46b85a32fa21"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b")
                        },
                        new
                        {
                            Id = new Guid("80c201b3-7662-4ec5-a5c4-afac44c60eca"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b")
                        },
                        new
                        {
                            Id = new Guid("ef36d637-703a-4c39-bca4-726d0feef4c1"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b")
                        },
                        new
                        {
                            Id = new Guid("dad8d92d-1e15-4886-97cd-00ec5d0d373d"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("45354f6f-5e09-4726-b7b3-ad5a376442a3")
                        },
                        new
                        {
                            Id = new Guid("07ceb1be-0b03-4908-a90a-9c8a8cc94012"),
                            FieldId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("c5d3fa52-4dd2-4644-8900-b4f754e7f3d5"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73")
                        },
                        new
                        {
                            Id = new Guid("ac481082-2ad8-4311-8e64-b7e09f7cb69a"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793")
                        },
                        new
                        {
                            Id = new Guid("30d06184-48e6-437f-ab9f-f5ff0f984bc9"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c")
                        },
                        new
                        {
                            Id = new Guid("920b007d-83d2-4c3e-9a01-c98e7abf142f"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("18d6a359-f609-4ecb-866c-c35743400c8e"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("2ada0f24-03c9-408f-b2ca-48c11faf9594"),
                            FieldId = new Guid("94b4864a-3139-48cc-8888-e8fbef8c694a"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("f31387d1-100c-4e3e-904e-7c68b2d0cbd9"),
                            FieldId = new Guid("740d3b1e-5dad-4264-9d24-2cac4161b49a"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("0375eea8-d3d5-4102-93fb-85b58817829b"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72")
                        },
                        new
                        {
                            Id = new Guid("9e323af0-c75a-429b-9fc4-cacb9e74aaf7"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("da9e3386-452d-409e-860c-e65f06168e72")
                        },
                        new
                        {
                            Id = new Guid("931a3639-8c0c-4d2e-94d9-62dacee0b22b"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4")
                        },
                        new
                        {
                            Id = new Guid("338bc376-50dc-45aa-936e-1acefbc4212c"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc")
                        },
                        new
                        {
                            Id = new Guid("eacac388-49bb-4f6e-95cc-3b2877f99d1e"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("5b13e4ad-ec5d-4b0c-a5bb-aed8d4192b8f"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c76590a4-f07c-44e0-8ce8-ea2d0ececa2e"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("28738105-a8b0-424f-a769-212708c93b34"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("45a4ce7a-cfdd-41c1-890b-9763e91a71c8"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("92de5e8d-b107-4053-a25b-f7827f15a274"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("160dad1c-a11a-4fd2-9c2a-1752426f50f9"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c3d2e270-ed84-42ce-9c67-268f5239151f"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("6f60dbec-fc8d-4ae3-8db7-669f5e559b84"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d933de6-a850-4542-b639-2c992d4a140b"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("ab4c2736-cc14-4b7a-86e3-aeadb4a315de"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("0d822c64-1146-4580-82db-d298a54abbdd"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("06e7963e-9713-451c-9374-ff5498acd0b2"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("ef7518a0-dbdc-45eb-b80f-5f42c70e038f"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("99f2cc81-0c2d-480a-85e4-b3ad98ccb816"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        },
                        new
                        {
                            Id = new Guid("17a87551-141b-4080-9b38-32887639fcba"),
                            IsPrefilled = true,
                            TableId = new Guid("cbae38e1-a427-4873-b754-671c469a0304")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58e05290-58d9-4fd6-a23f-638bf56df0a0"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("0d09c1f1-c083-4ccf-bcce-0462ee6ff423"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "ТЕХНИКА И ТЕХНОЛОГИИ СТРОИТЕЛЬСТВА"
                        },
                        new
                        {
                            Id = new Guid("3042be61-22f2-4c59-87f2-d5b645a6d571"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "СТРОИТЕЛЬСТВО И АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("e4f261f2-5b8b-4efc-a992-c5b6b53e9e9d"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "ЭЛЕКТРО- И ТЕПЛОЭНЕРГЕТИКА"
                        },
                        new
                        {
                            Id = new Guid("abf28bc8-12b7-4f23-9882-399061198e75"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "ПРИКЛАДНАЯ ГЕОЛОГИЯ, ГОРНОЕ ДЕЛО, НЕФТЕГАЗОВОЕ ДЕЛО И ГЕОДЕЗИЯ"
                        },
                        new
                        {
                            Id = new Guid("73afb809-c4f6-4e4f-9b29-01a558ec49de"),
                            FieldId = new Guid("927ffbd5-710f-4532-b772-44db6aca2fc6"),
                            Value = "НЕДРОПОЛЬЗОВАНИЕ И ГОРНЫЕ НАУКИ"
                        },
                        new
                        {
                            Id = new Guid("a1cd04ff-2f5c-47e6-ad96-3e4caf7b8cdf"),
                            FieldId = new Guid("6d8d378a-005c-445c-934c-d0e9cc08faab"),
                            Value = "Аспиранты, адъюнкты, ординаторы, ассистенты-стажеры, не имеющие ученой степени"
                        },
                        new
                        {
                            Id = new Guid("509b4935-0af7-4526-90cf-2aa673af1299"),
                            FieldId = new Guid("6d8d378a-005c-445c-934c-d0e9cc08faab"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("cb79746e-2f60-4f25-9489-255a7ecbd3ed"),
                            FieldId = new Guid("6d8d378a-005c-445c-934c-d0e9cc08faab"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("749fdff9-c1f2-4d9b-90a4-8c4ff98c28e9"),
                            FieldId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("88b387aa-1deb-403c-a1d5-be1626fced5e"),
                            FieldId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("670e8424-1f4e-4cf0-9aa2-cf9ebeb73fc6"),
                            ColumnId = new Guid("85b3f8c3-6b6f-4278-8c09-a4ba822865f7"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("4e0d48ce-0f94-4a41-9c75-ba157bab7404"),
                            ColumnId = new Guid("85b3f8c3-6b6f-4278-8c09-a4ba822865f7"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("30b05e55-7612-431b-9600-d663e67a3979"),
                            ColumnId = new Guid("85b3f8c3-6b6f-4278-8c09-a4ba822865f7"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ea0cbd5b-9115-41ac-87a4-e08171eda557"),
                            ColumnId = new Guid("8abda747-e0fc-4637-8d8c-80a39596305c"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("249dcc9d-8146-4225-929e-f77246c5b7de"),
                            ColumnId = new Guid("8abda747-e0fc-4637-8d8c-80a39596305c"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("c4fabaec-de71-4548-9be4-593740406a42"),
                            ColumnId = new Guid("8abda747-e0fc-4637-8d8c-80a39596305c"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("3bca7368-af97-4df0-9782-14e76e50fa2b"),
                            ColumnId = new Guid("1a4fac46-afb5-4f7f-8b00-ac540b7986f7"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("7c6c4fc3-bc01-427a-9642-c8b56eae4be3"),
                            ColumnId = new Guid("1a4fac46-afb5-4f7f-8b00-ac540b7986f7"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("da567823-1736-4188-b0e8-92371b70d2d6"),
                            ColumnId = new Guid("9da25b3c-d28a-49d0-a2ba-7ad3522d8b16"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("b6512f85-56cf-4001-adcc-1dc3866e1958"),
                            ColumnId = new Guid("9da25b3c-d28a-49d0-a2ba-7ad3522d8b16"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("51e47e24-a096-45d6-b025-421d0b6e3a96"),
                            ColumnId = new Guid("44bdc9b8-5d61-4ab4-8fa1-2868dd252eae"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("a632f414-7880-451d-a130-205fbe2d5350"),
                            ColumnId = new Guid("44bdc9b8-5d61-4ab4-8fa1-2868dd252eae"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("775bd283-3fc5-42d8-a86c-5421fa248c81"),
                            ColumnId = new Guid("44bdc9b8-5d61-4ab4-8fa1-2868dd252eae"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("12b8fe00-8a77-4975-8330-73a9bef84ffa"),
                            ColumnId = new Guid("72d859c8-f484-4b45-acc6-5527802d7768"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("ee359eb3-df8b-4f56-9a85-56a52ef2c280"),
                            ColumnId = new Guid("72d859c8-f484-4b45-acc6-5527802d7768"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("3f3ad4c8-5360-4fb3-9dfb-34886263d9df"),
                            ColumnId = new Guid("72d859c8-f484-4b45-acc6-5527802d7768"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("ac334c95-625a-4991-b594-f1f437e0e239"),
                            FieldId = new Guid("d28a422a-d183-4017-b731-4c225fe451a5"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81d4437d-011f-4345-bc1a-b27b7251fe73"),
                            EditBlockId = new Guid("c90287a2-c0db-421c-b4a7-54b4f0ddac87"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("764adf61-1ed9-40f7-be6a-75e9f058a793"),
                            EditBlockId = new Guid("c90287a2-c0db-421c-b4a7-54b4f0ddac87"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("ebf9af55-ba4e-4469-8e3a-85c3fb1d22fa"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c73d162b-68b8-4f76-a738-6bfd04689efb"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f57f6826-4751-4400-ba99-451b5a1ed1e1"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("28f4cabc-4cee-4bcc-b204-3af754147e2b"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("45354f6f-5e09-4726-b7b3-ad5a376442a3"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("013c5276-a779-41ce-ae9b-3078f58b1962"),
                            EditBlockId = new Guid("0095665a-ba49-4d2a-a10b-e00c665c2ce4"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("002db9b0-1457-4875-9988-ab3c7cc79d4c"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("cbae38e1-a427-4873-b754-671c469a0304"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("da9e3386-452d-409e-860c-e65f06168e72"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("f9c3bf69-2aa3-49ec-9fbb-23c6563754f4"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("fd16f080-df0e-4c9f-b3de-4c829718aadc"),
                            EditBlockId = new Guid("6e4cf998-f78b-44c8-af41-5a483fd43c58"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbeb1cb4-353c-4b75-8598-ac3054d2de84"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("2e08cabf-740f-4722-8e3f-af2e2d52394a"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8679c8c8-300c-4735-80a4-70ab888a746c"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("2a4ed966-4725-4dcd-a838-1f938b920e7a"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4e9a55c-19fb-44a8-822c-0a0cae552994"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("a335b9a6-cb12-4c92-bc95-3d051f78fff4"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("0a082c69-7567-45cf-b95d-21a49bba091a"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("1731457d-afaf-4cc9-adf6-bbdfb13acee3"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
