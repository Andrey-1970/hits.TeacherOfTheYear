// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            EditBlocksId = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            EditBlocksId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            EditBlocksId = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            EditBlocksId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("54d9379a-1e90-4866-836a-332fade52b68"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("771bdf26-8012-4b92-9038-d40c93f75900"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("bfc4a2a6-25cf-451e-94df-e40464599886"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("b5a60246-f0fe-42fc-ba38-70cc9b9bd6b4"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("eef0dfa5-b008-4381-aa77-1cfb05e40de2"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("37e4b536-fdb3-48ec-b717-2378e41db4e1"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("442bfc14-07da-4cbf-9ad8-74186da039c8"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("ca63da51-da1d-4975-980f-8675086bfcfa"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("9229a6f8-c5fe-451f-81a8-9c386122b490"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("a8ada6af-69d3-457e-a606-bd67b4cdcbea"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("4008c6c0-70fa-4b32-adeb-5f24c7bd863b"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("c5e8f13e-0a5b-4d91-8e11-88c1f9127914"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("9eca51ec-e711-4687-8bbf-1d77a4340483"),
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e")
                        },
                        new
                        {
                            FieldsId = new Guid("13a010d2-0194-4bea-b73d-83d12cfba5f3"),
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851")
                        },
                        new
                        {
                            FieldsId = new Guid("0e43e37d-fe27-48b7-adcd-19c63711c9c9"),
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851")
                        },
                        new
                        {
                            FieldsId = new Guid("e22cd182-4c09-4c4a-b94f-652272e63a45"),
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851")
                        },
                        new
                        {
                            FieldsId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616")
                        },
                        new
                        {
                            FieldsId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319")
                        },
                        new
                        {
                            FieldsId = new Guid("a5e78675-927d-44e6-ae40-2b80144d79ea"),
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319")
                        },
                        new
                        {
                            FieldsId = new Guid("04ae92df-f39c-4545-b4bc-4539ca1817b8"),
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            TablesId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            TablesId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            TablesId = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            TablesId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            TablesId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            TablesId = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            TablesId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            TablesId = new Guid("f93caa09-221c-4832-986b-578b1150af43")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            TablesId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            TablesId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            TablesId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            TablesId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            TablesId = new Guid("f93caa09-221c-4832-986b-578b1150af43")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            TablesId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            TablesId = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            TablesId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            TracksId = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            TracksId = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("cee37f33-7f48-40e7-845a-53268864c2b1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("f8ed4435-30e0-4154-8a78-b9e2574b3506")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("067e74db-18ac-48a4-ba6d-70a5bc0cc761")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("b1b80404-ccf3-48eb-aeaa-d336c84948ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("bea4c66b-52a7-42a7-a052-2ae1ec11bddc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("70880503-c605-4696-95c5-8a1a7777326e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            MarksId = new Guid("25f08f47-eb9b-40db-99e7-31f592f59979")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            MarksId = new Guid("2551c876-f0ad-40d1-94f1-5259694bcd96")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            MarksId = new Guid("8216662a-334a-427d-8855-7d04bb9b1e4e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            MarksId = new Guid("7677ed3d-2750-4efa-af7e-2711a8f2d2a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            MarksId = new Guid("2d48fba1-5803-42bf-8142-44fea0a363dc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            MarksId = new Guid("501342d2-dce8-48b1-b92a-c3fafb1dea5c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            MarksId = new Guid("249a818c-4502-4145-b8be-ddcbff59ecdb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            MarksId = new Guid("6be3cfb6-da5f-460c-add7-234be47ad067")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            MarksId = new Guid("48589087-88ad-4e5f-a912-3b6e6ac23d90")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("249a818c-4502-4145-b8be-ddcbff59ecdb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("6be3cfb6-da5f-460c-add7-234be47ad067")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("47d39a17-bae1-4c3c-bcb3-d9cdb1b9e00c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("d75e98f7-8eee-4c76-8c03-43b578c4e2c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("bb574b0e-a79f-4a51-b726-d1bba2db4ad3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("34f0f5d8-c6f7-4824-8aed-53e54b2ade8f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            MarksId = new Guid("5ac12ab1-5a7d-47fb-949b-30f42a2523ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            MarksId = new Guid("48589087-88ad-4e5f-a912-3b6e6ac23d90")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            MarksId = new Guid("d38c3401-486d-41c0-8064-642afe3b2311")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            MarksId = new Guid("409f798a-a2c0-42d1-99ed-12fbe9ebef96")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            MarksId = new Guid("a7185d1c-28fc-42f6-aa49-288a85f770b1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            MarksId = new Guid("409cc7d2-59cb-42e8-b333-80ec25acf99b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2a8051e4-3bbf-4eb4-b865-d5d69a1c0fa4",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "2ef47e07-57c1-4d81-b689-9cb50feb2c66",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "578a6fa7-f734-4b99-8d43-ee7e3789093f",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "26b6b285-96c7-4af3-b9c6-ed326bbc2d84",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "9e2e1341-5967-4900-8d07-762776a43ca7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdd7d6b2-3d25-4ae2-852d-23bc077fc4da"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("07066821-01f4-40c1-a473-264f2742fe01"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("1399ac53-6e64-48bc-badb-1ee6f57736ef"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9f55fdd2-f776-4551-bbb8-7ac4e5907188"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("28d43109-a1cf-4a6c-b5a7-e4bdf5376adf"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("d88a5a85-fe36-471a-b9a5-842ca47d6626"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad20cbd5-2e8d-4d07-8444-e2b5d872db57"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a6d8a873-c393-4d1d-b93c-a44c71926c8d"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f6f75ce-688b-4fa0-85c4-635330b8869a"),
                            ColumnId = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ff497ad4-b2a1-482c-bd49-b3ff31f8d4ed"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("703b30d9-3e4a-424a-8b54-b8e96d5e66e7"),
                            ColumnId = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ff497ad4-b2a1-482c-bd49-b3ff31f8d4ed")
                        },
                        new
                        {
                            Id = new Guid("7f579cab-a325-46d0-a4d6-cb128f1291bf"),
                            ColumnId = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5b43189a-6ae4-4a04-ab35-c2f7e1b48ae4"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("88c46198-a13d-4d4c-bc99-a36c532dce87"),
                            ColumnId = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5b43189a-6ae4-4a04-ab35-c2f7e1b48ae4")
                        },
                        new
                        {
                            Id = new Guid("63102410-e73e-4770-980f-cf3425948257"),
                            ColumnId = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e6e1d79e-ffa1-4ac3-9d0c-796daeba6945"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("9a96e930-55f5-4983-a6c8-3821b77f8c59"),
                            ColumnId = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e6e1d79e-ffa1-4ac3-9d0c-796daeba6945")
                        },
                        new
                        {
                            Id = new Guid("7aca1d23-1bbf-4b13-84e4-f520527e5509"),
                            ColumnId = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2e041d14-33e1-4a96-b859-f6d518f6c9bd"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("0202aa67-2a4f-43b6-80fe-a19ccc625bc4"),
                            ColumnId = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2e041d14-33e1-4a96-b859-f6d518f6c9bd")
                        },
                        new
                        {
                            Id = new Guid("21380070-a2ba-428f-b0fe-2f6f2a6b8444"),
                            ColumnId = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ff337876-e3c5-483d-8093-5037ca47335c"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("50b992b0-0642-4ec5-89f3-6f3939780406"),
                            ColumnId = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ff337876-e3c5-483d-8093-5037ca47335c")
                        },
                        new
                        {
                            Id = new Guid("9eaf8174-88ab-4ec6-9a65-ce2348e822f6"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e3a7c2dd-170e-4a56-97a7-545081f300b1"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("fa6d756a-c2f5-4f10-b7ed-bb363091230b"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e3a7c2dd-170e-4a56-97a7-545081f300b1")
                        },
                        new
                        {
                            Id = new Guid("ced8936a-d1e8-4a84-81e3-9ed2cef7bd51"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b23c2b95-7ea6-47f6-ab95-a48c8fb6df94"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("b5aafea0-fe2d-4fba-adcd-474880297598"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b23c2b95-7ea6-47f6-ab95-a48c8fb6df94")
                        },
                        new
                        {
                            Id = new Guid("d265e94a-ca69-42f9-afa5-6ff11cfc0b3f"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4b6d62af-d767-4312-8c12-c591921b0ab5"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("2984c3fd-2bed-4792-93a8-a2b690f0b1b6"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4b6d62af-d767-4312-8c12-c591921b0ab5")
                        },
                        new
                        {
                            Id = new Guid("2f9c2a0a-eced-48f4-82e7-7fd04783f049"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2548654b-a46a-41ea-a2e0-e0e4c6a47260"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("29882060-ddb6-4a7a-a45a-f507e8994dec"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2548654b-a46a-41ea-a2e0-e0e4c6a47260")
                        },
                        new
                        {
                            Id = new Guid("347179a5-0a6b-44c1-9e50-1cc4634b6483"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("60283e44-8a05-4514-9c8c-7353cbbf48a3"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("ebb086d0-065e-4e03-98c4-3b7ec23587ec"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("60283e44-8a05-4514-9c8c-7353cbbf48a3")
                        },
                        new
                        {
                            Id = new Guid("2757bb4e-7342-4ecb-b852-fb80bcac365a"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c62f31b3-c680-4c0d-8acf-2ec23c584d61"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("191def59-4fe4-4084-95d2-c570574a0e19"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c62f31b3-c680-4c0d-8acf-2ec23c584d61")
                        },
                        new
                        {
                            Id = new Guid("3886914d-59f0-4d72-a977-e25258a351b2"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0b9cfe67-d425-40c0-bc27-8f50a82eaa1a"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("b3456b4d-ad59-4af4-b1ea-a408962cd45b"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0b9cfe67-d425-40c0-bc27-8f50a82eaa1a")
                        },
                        new
                        {
                            Id = new Guid("0209376b-95c0-4d40-97dc-6eee5b52d6fe"),
                            ColumnId = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("102944b8-994e-4260-aff2-dfc7e584c745"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("8a57c2a3-b77a-499c-9b59-1ecadd9836be"),
                            ColumnId = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("102944b8-994e-4260-aff2-dfc7e584c745")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56bcb8b1-c499-418f-a6ff-a889d44969f6"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("2af15c50-fac9-485d-a572-5159cf531df0"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("5705932e-0cf1-4165-a8ee-908f70112e2b"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("92f4cdc6-af93-4c65-9111-bd0551f501fa"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("a346e106-a5d9-4dc5-829e-e20695784e6a"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("85ba6c51-cba7-410b-8c6d-3ca133f9bf75"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("f93caa09-221c-4832-986b-578b1150af43"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("fbddfb17-2fe8-407f-b327-4119d8252d20"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("f93caa09-221c-4832-986b-578b1150af43"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("f52349c7-ec92-40a2-8fd2-e72bd6ab2796"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("8711d79c-7044-4dfd-8a46-6ba5f819876f"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("db060dfb-b9e6-47fa-9603-7ef4e8756a31"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("786e6be4-2712-40a8-9f5c-b917c2fa7325"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("be6a307c-3299-459f-bfd0-056db8a3b719"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("1209514c-8614-43d3-a917-f82f72fcf829"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("4e52930e-6ea2-47d8-8bc0-021a392e9445"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("5bcca80b-9b5a-49ea-ba79-7a4a2c284bfe"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("22c02550-a18c-4c1f-b608-e4a1e46fa931"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("d8850013-4f6c-437e-baf1-eb7aeb8ab65d"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("0afe1d39-29e9-4083-b821-ceeb1bedee42"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("e07457d5-70c7-4981-8023-e32dfa18dd93"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("8e1a60a5-1c31-4a7d-9866-774a4a0575a7"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("8923665c-34dc-4a30-b5cb-52718980cbd6"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("57371a47-b66a-4c72-8486-6e92e597740c"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("c9d55b16-8c35-4e87-a046-fe73b4124a76"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("d85f8db2-05e1-4dce-a82f-41d9f61d3255"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("87fd2fc8-894d-4432-9913-1b7c5845883a"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("5d21b112-5c5b-4a74-840e-048861d547c8"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("83b10d07-ce5d-401c-97d3-b91604307dba")
                        },
                        new
                        {
                            Id = new Guid("76db2383-48e6-4ac1-88c8-c68f1aaead3b"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("b1d1f184-80a6-4ed5-a33b-2e0b994fb86a"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("f3742dd7-5544-4fa1-b6c3-ecdb3a48c7b7"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("4e1c8a08-9b02-46f3-9fa7-b956eaf8887c"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("02e5ab3b-3fcf-4411-b16f-4d146db6155f"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("c949f875-ac30-4241-ba1e-8d209991da07"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("fa48c90a-69e0-47c9-ab29-dad596ae9c5c"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("3a2b5373-a76a-4082-90a1-ccd590fdbd09"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("60815c80-5ae4-4e03-a26b-5387d489abe7"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("b6392210-a6dd-4f11-9ae5-d7120d226427"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("fda44dfc-5dd3-4613-9fe8-afb329ad0f50"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("385fc350-be76-48dc-9e2f-e80f28410e36"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("e791a747-358e-404e-a046-3dd2fe48bc31"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("02a1e0b2-2a7d-4222-b05e-c0e0f173e6cc"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("78a0117f-334b-4b67-b6f0-27be38b34357"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("5db7661d-8a84-497d-8310-10361d37a893"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("37fe7f5d-1e2d-4864-8da7-192d9589c7c2"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("c73c0407-2c07-486c-bab6-975369710319"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("d11dfb2d-dfbd-4384-9004-ff8552930456"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("86588b53-ab08-4855-82f2-b5f8bbdbdaa3"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("18687b6a-34bf-448e-9527-1da29e1c9ecf"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("22d22328-d6fa-40ad-ac35-bdc508f6fdef"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("db4a6cc0-d29e-4d97-abb7-0bc99836f52c"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("645e4ceb-5034-40be-bbcb-99cf28b7b9ab"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("80335649-0c48-405f-86f5-9ad2da41cb48"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("ba816d0f-c432-476c-8660-6e1f599d4c64"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("a0fda36b-e3ee-40ac-886b-06cd19e39c3b"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("03d1d4e5-9ae2-45d8-ae64-4aea867ab3a6"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("2c57639b-450a-4a03-b24d-8e55c651d20e"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50"),
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("9fdf5079-6063-478f-b116-4e6538d91f09"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50"),
                            ValueTypeId = new Guid("6f6117c4-4811-42fd-af33-73f28a26752b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54d9379a-1e90-4866-836a-332fade52b68"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("771bdf26-8012-4b92-9038-d40c93f75900"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("ec42cc74-8dc0-4c99-93ca-52a837baeed0")
                        },
                        new
                        {
                            Id = new Guid("bfc4a2a6-25cf-451e-94df-e40464599886"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("b5a60246-f0fe-42fc-ba38-70cc9b9bd6b4"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("eef0dfa5-b008-4381-aa77-1cfb05e40de2"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("37e4b536-fdb3-48ec-b717-2378e41db4e1"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("442bfc14-07da-4cbf-9ad8-74186da039c8"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("ca63da51-da1d-4975-980f-8675086bfcfa"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("9229a6f8-c5fe-451f-81a8-9c386122b490"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("a8ada6af-69d3-457e-a606-bd67b4cdcbea"),
                            EditBlockId = new Guid("b12a0ded-6543-40c0-9b05-32ef6e5c7083"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("4008c6c0-70fa-4b32-adeb-5f24c7bd863b"),
                            EditBlockId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            EditBlockId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("c5e8f13e-0a5b-4d91-8e11-88c1f9127914"),
                            EditBlockId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("9eca51ec-e711-4687-8bbf-1d77a4340483"),
                            EditBlockId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd")
                        },
                        new
                        {
                            Id = new Guid("13a010d2-0194-4bea-b73d-83d12cfba5f3"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("0e43e37d-fe27-48b7-adcd-19c63711c9c9"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("e22cd182-4c09-4c4a-b94f-652272e63a45"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("a5e78675-927d-44e6-ae40-2b80144d79ea"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        },
                        new
                        {
                            Id = new Guid("04ae92df-f39c-4545-b4bc-4539ca1817b8"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cee37f33-7f48-40e7-845a-53268864c2b1"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb")
                        },
                        new
                        {
                            Id = new Guid("f8ed4435-30e0-4154-8a78-b9e2574b3506"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb")
                        },
                        new
                        {
                            Id = new Guid("067e74db-18ac-48a4-ba6d-70a5bc0cc761"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("e22cd182-4c09-4c4a-b94f-652272e63a45"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b1b80404-ccf3-48eb-aeaa-d336c84948ae"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("13a010d2-0194-4bea-b73d-83d12cfba5f3"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("bea4c66b-52a7-42a7-a052-2ae1ec11bddc"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("0e43e37d-fe27-48b7-adcd-19c63711c9c9"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("70880503-c605-4696-95c5-8a1a7777326e"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("c3966145-c530-48aa-9606-8be1663e92f0")
                        },
                        new
                        {
                            Id = new Guid("25f08f47-eb9b-40db-99e7-31f592f59979"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da")
                        },
                        new
                        {
                            Id = new Guid("2551c876-f0ad-40d1-94f1-5259694bcd96"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad")
                        },
                        new
                        {
                            Id = new Guid("8216662a-334a-427d-8855-7d04bb9b1e4e"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad")
                        },
                        new
                        {
                            Id = new Guid("7677ed3d-2750-4efa-af7e-2711a8f2d2a7"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad")
                        },
                        new
                        {
                            Id = new Guid("2d48fba1-5803-42bf-8142-44fea0a363dc"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("672551e0-43b3-4397-a6c4-b643610241ad")
                        },
                        new
                        {
                            Id = new Guid("501342d2-dce8-48b1-b92a-c3fafb1dea5c"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54")
                        },
                        new
                        {
                            Id = new Guid("249a818c-4502-4145-b8be-ddcbff59ecdb"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("6be3cfb6-da5f-460c-add7-234be47ad067"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76")
                        },
                        new
                        {
                            Id = new Guid("48589087-88ad-4e5f-a912-3b6e6ac23d90"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("f93caa09-221c-4832-986b-578b1150af43")
                        },
                        new
                        {
                            Id = new Guid("47d39a17-bae1-4c3c-bcb3-d9cdb1b9e00c"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f")
                        },
                        new
                        {
                            Id = new Guid("d75e98f7-8eee-4c76-8c03-43b578c4e2c9"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("a5e78675-927d-44e6-ae40-2b80144d79ea"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("bb574b0e-a79f-4a51-b726-d1bba2db4ad3"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("04ae92df-f39c-4545-b4bc-4539ca1817b8"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("34f0f5d8-c6f7-4824-8aed-53e54b2ade8f"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d")
                        },
                        new
                        {
                            Id = new Guid("5ac12ab1-5a7d-47fb-949b-30f42a2523ce"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("56de4558-e737-450f-9ecd-97f39da4440d")
                        },
                        new
                        {
                            Id = new Guid("d38c3401-486d-41c0-8064-642afe3b2311"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e")
                        },
                        new
                        {
                            Id = new Guid("409f798a-a2c0-42d1-99ed-12fbe9ebef96"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918")
                        },
                        new
                        {
                            Id = new Guid("a7185d1c-28fc-42f6-aa49-288a85f770b1"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("409cc7d2-59cb-42e8-b333-80ec25acf99b"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01202277-d0f5-44ac-949c-9a950dffde3e"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4518f58b-0795-47fa-9bcb-43be8d8e3851"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a09e2304-d6ab-4581-aac9-d46ba07ad3f5"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("6d29b694-3a81-48ac-9ff8-dd5061024616"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("04e13ea1-609d-4526-9cab-06e450b13319"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("868b5db0-fef1-4f47-a7f2-0617d9bd6096"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("8c78e1e0-c9bc-4a75-996e-801fe2c55297"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff497ad4-b2a1-482c-bd49-b3ff31f8d4ed"),
                            IsPrefilled = true,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            Id = new Guid("5b43189a-6ae4-4a04-ab35-c2f7e1b48ae4"),
                            IsPrefilled = true,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            Id = new Guid("e6e1d79e-ffa1-4ac3-9d0c-796daeba6945"),
                            IsPrefilled = true,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            Id = new Guid("2e041d14-33e1-4a96-b859-f6d518f6c9bd"),
                            IsPrefilled = true,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            Id = new Guid("ff337876-e3c5-483d-8093-5037ca47335c"),
                            IsPrefilled = true,
                            TableId = new Guid("e110805e-4351-4953-aa7e-fb381470039d")
                        },
                        new
                        {
                            Id = new Guid("e3a7c2dd-170e-4a56-97a7-545081f300b1"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("b23c2b95-7ea6-47f6-ab95-a48c8fb6df94"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("4b6d62af-d767-4312-8c12-c591921b0ab5"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("2548654b-a46a-41ea-a2e0-e0e4c6a47260"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("60283e44-8a05-4514-9c8c-7353cbbf48a3"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("c62f31b3-c680-4c0d-8acf-2ec23c584d61"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("0b9cfe67-d425-40c0-bc27-8f50a82eaa1a"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        },
                        new
                        {
                            Id = new Guid("102944b8-994e-4260-aff2-dfc7e584c745"),
                            IsPrefilled = true,
                            TableId = new Guid("52725f3e-e03c-4f17-abca-4418da928e50")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5072275d-2e8d-4f62-a13b-d548dca76fff"),
                            FieldId = new Guid("4008c6c0-70fa-4b32-adeb-5f24c7bd863b"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("06cac032-3df1-4510-8571-deb99a9f2e10"),
                            FieldId = new Guid("4008c6c0-70fa-4b32-adeb-5f24c7bd863b"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("1215e231-cce5-4ae6-868f-39c8a6eef839"),
                            FieldId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9a99f0e6-757d-4b5f-8b7a-2a8b56d3e7d3"),
                            FieldId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("d4e8457b-d93c-44f3-a7ba-5c12f326d1ad"),
                            FieldId = new Guid("26d608ae-27d1-4713-9f77-6f260eaae5b9"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("61e952ca-4015-45a2-9b43-eccb6d7ed60a"),
                            ColumnId = new Guid("5705932e-0cf1-4165-a8ee-908f70112e2b"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("88262112-c66e-474c-a4dd-5934a3c14fb8"),
                            ColumnId = new Guid("5705932e-0cf1-4165-a8ee-908f70112e2b"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("3410d731-bee2-469c-835d-c5f7af4061d1"),
                            ColumnId = new Guid("5705932e-0cf1-4165-a8ee-908f70112e2b"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("7d6e428c-f451-4c9b-9a4d-3456d4be3cc1"),
                            ColumnId = new Guid("57371a47-b66a-4c72-8486-6e92e597740c"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("d7631802-f11c-414f-a965-a37f555289a6"),
                            ColumnId = new Guid("57371a47-b66a-4c72-8486-6e92e597740c"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("6c5cfd9b-7a67-41b4-bbe0-17d5ad1937c6"),
                            ColumnId = new Guid("57371a47-b66a-4c72-8486-6e92e597740c"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("b0111bb1-53f5-45f0-b7e8-110e4059da9c"),
                            ColumnId = new Guid("02e5ab3b-3fcf-4411-b16f-4d146db6155f"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("f2288588-cd22-45e1-a0d4-6c31ecfb74cd"),
                            ColumnId = new Guid("02e5ab3b-3fcf-4411-b16f-4d146db6155f"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("1c0aea11-c7a2-4a18-9626-d6c3c6a1b917"),
                            ColumnId = new Guid("86588b53-ab08-4855-82f2-b5f8bbdbdaa3"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("ae0eac99-a109-4b9e-9c10-08e5970fcce7"),
                            ColumnId = new Guid("86588b53-ab08-4855-82f2-b5f8bbdbdaa3"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("0555afbc-3b40-4608-9a2d-6cf2a19f6757"),
                            ColumnId = new Guid("22d22328-d6fa-40ad-ac35-bdc508f6fdef"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("5159e68c-1b10-4710-b11e-8a8d04d07cb9"),
                            ColumnId = new Guid("22d22328-d6fa-40ad-ac35-bdc508f6fdef"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("4f6d0b2d-2d45-49d8-a735-65b3110f4fc1"),
                            ColumnId = new Guid("22d22328-d6fa-40ad-ac35-bdc508f6fdef"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("15b70529-0ddf-479b-b4ad-62eaa067f774"),
                            ColumnId = new Guid("ba816d0f-c432-476c-8660-6e1f599d4c64"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("1e7e62e9-0201-48fa-8211-47cec0333a6a"),
                            ColumnId = new Guid("ba816d0f-c432-476c-8660-6e1f599d4c64"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("f0ce8bfe-fd2c-496d-8f06-54db4751be6e"),
                            ColumnId = new Guid("ba816d0f-c432-476c-8660-6e1f599d4c64"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("aad263c5-6dca-4184-89a2-26f789dc0dfb"),
                            ColumnId = new Guid("d85f8db2-05e1-4dce-a82f-41d9f61d3255"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("5eaeb747-71e9-48a8-a9a5-0220a8894896"),
                            ColumnId = new Guid("d85f8db2-05e1-4dce-a82f-41d9f61d3255"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ac962be5-696f-4c33-960d-440abe452e84"),
                            ColumnId = new Guid("b1d1f184-80a6-4ed5-a33b-2e0b994fb86a"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("96664cb6-ffe3-47dd-b0ac-f81d0608af38"),
                            ColumnId = new Guid("b1d1f184-80a6-4ed5-a33b-2e0b994fb86a"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("d5e2f229-8bc9-4608-b226-4adc1f3e4fc1"),
                            ColumnId = new Guid("385fc350-be76-48dc-9e2f-e80f28410e36"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("a84366c5-d0da-4cf0-a22f-2360fb965225"),
                            ColumnId = new Guid("385fc350-be76-48dc-9e2f-e80f28410e36"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("f02d22cf-1298-4178-b0e4-4b99bebe7118"),
                            FieldId = new Guid("c5e8f13e-0a5b-4d91-8e11-88c1f9127914"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("b8af7379-f2b9-48ae-8a94-25d923623f65"),
                            FieldId = new Guid("c5e8f13e-0a5b-4d91-8e11-88c1f9127914"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4814fe86-adb2-4a1d-84a7-aeeb37e48e76"),
                            EditBlockId = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("f93caa09-221c-4832-986b-578b1150af43"),
                            EditBlockId = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("25390f13-f313-404e-b2be-64d3962c8ebb"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c3966145-c530-48aa-9606-8be1663e92f0"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("285f7db3-3a2b-47fb-9ec1-05b1e2b07e1b"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("672551e0-43b3-4397-a6c4-b643610241ad"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("130e6a34-1378-42f0-93f2-f357591a2f54"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("6f01a7ed-8f3f-4734-9200-63a6889954da"),
                            EditBlockId = new Guid("174c7600-fe2a-4abf-bb40-3d444cb20928"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("88ce76e2-e90d-454c-9da1-8884aaafb24f"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("e110805e-4351-4953-aa7e-fb381470039d"),
                            EditBlockId = new Guid("1f7527f0-c53d-44f8-9f49-1d5e6f50f445"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("56de4558-e737-450f-9ecd-97f39da4440d"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("9e6009de-28f7-48c3-8849-2ded2ac89d1e"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("6bd85eca-5bae-4bc7-b62c-d3454214f918"),
                            EditBlockId = new Guid("769665b0-2776-405a-a07a-091e271ca9a8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("52725f3e-e03c-4f17-abca-4418da928e50"),
                            EditBlockId = new Guid("e323d509-bb68-4543-95a0-5cacf5e8a5f6"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("feb5cd54-7803-4ac2-a6e5-64ee3c7c7a42"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b2d95364-cec2-49a7-b8c2-ac32cba8f6bf"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9933021f-ff9b-4f40-a05e-4c7fffc77d6b"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("cdda0e63-b198-41d0-ad48-013a9310c7fd"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("83b10d07-ce5d-401c-97d3-b91604307dba"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("ec42cc74-8dc0-4c99-93ca-52a837baeed0"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("6f6117c4-4811-42fd-af33-73f28a26752b"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
