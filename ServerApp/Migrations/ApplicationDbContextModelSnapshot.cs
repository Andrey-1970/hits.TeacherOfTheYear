// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            EditBlocksId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e60c1b17-53a8-41ef-bda6-c87150775f2f"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            EditBlocksId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e60c1b17-53a8-41ef-bda6-c87150775f2f"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            EditBlocksId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("8a04e363-a91e-49c2-87c9-539e92936adb"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("338fb84a-0c9e-4457-8635-ab9b849a1aca"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("f44aa3f5-cdd1-4d1d-adbb-b04cd848c85b"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("df9c1083-4fb5-40c2-a006-fb4c21d55033"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("73d6dacb-9f35-4ed0-81fd-13b65e2c7ae3"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("c46d4100-73af-4ad4-a593-72777efa2517"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("10a2b74a-c52e-4080-a130-babd45d12c1f"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("e9b198c3-ded0-4c8b-846d-9936704b3c70"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("e6b61874-067c-4ede-b640-e841f15175b4"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("2b9f5e91-75e0-4adc-aedc-b26d529d8e3c"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("83b13b96-3229-40c4-b8db-895bed68a045"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("6c2315cf-73b5-4b22-8419-c3f8d92a4b12"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("20549a44-39f4-4292-8da2-a758f1b5d1f0"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("47ba2af5-31ed-4853-8038-abed661880db"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("189c548e-f10d-4a96-9521-a953416596c5"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("d42900f5-c457-4a43-9c00-6326881d2a7c"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("0e178e7c-5da7-4216-8430-4b6e549bd828"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("89ea4bf9-a55b-4cb6-a9dc-22d1729d02fd"),
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558")
                        },
                        new
                        {
                            FieldsId = new Guid("4e94f172-9e1a-4dfe-b562-ecf9e1ca1711"),
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db")
                        },
                        new
                        {
                            FieldsId = new Guid("d6a018b6-e1a7-4c07-bb69-4e2a1ac764c2"),
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db")
                        },
                        new
                        {
                            FieldsId = new Guid("cb093415-e415-447f-a295-f600609c3caf"),
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db")
                        },
                        new
                        {
                            FieldsId = new Guid("1ebd60cb-a46d-432b-b600-0a3ed32928ce"),
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db")
                        },
                        new
                        {
                            FieldsId = new Guid("c26c4cbf-7180-48f1-88ef-b892a92ed550"),
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db")
                        },
                        new
                        {
                            FieldsId = new Guid("d42900f5-c457-4a43-9c00-6326881d2a7c"),
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7")
                        },
                        new
                        {
                            FieldsId = new Guid("d42900f5-c457-4a43-9c00-6326881d2a7c"),
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44")
                        },
                        new
                        {
                            FieldsId = new Guid("947fa01c-1120-4a54-93cb-678f78db3bf4"),
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44")
                        },
                        new
                        {
                            FieldsId = new Guid("b1579d57-0f2d-4dc8-b972-156b5d90f329"),
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            TablesId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            TablesId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            TablesId = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            TablesId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            TablesId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            TablesId = new Guid("7a1253ee-dfb2-4ea4-ad81-18554a50c679")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            TablesId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            TablesId = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            TablesId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            TablesId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            TablesId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            TablesId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            TablesId = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            TablesId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            TablesId = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("34a61449-cd30-4bed-8bfe-796c0c4cc5d8"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("575d385c-af86-4f3e-bdad-2f646b65416c"),
                            TracksId = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("34a61449-cd30-4bed-8bfe-796c0c4cc5d8"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("575d385c-af86-4f3e-bdad-2f646b65416c"),
                            TracksId = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("978e11ba-7d80-4b9a-87cc-457c8d9c2c5a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("5f68f803-2528-4fb2-8ac0-26f22ace5b48")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("bd327c8d-c694-4c4e-a750-41b703476ddd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("2011d9c2-74eb-4240-81e0-9a1ae49b35e2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("efdf30f8-02ac-4c99-bbec-b797700c4746")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("386c1780-054a-4859-8864-42338f4baf8c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            MarksId = new Guid("e28d09db-4872-43ee-aa5e-7a2d9a3d7739")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            MarksId = new Guid("20d6a93a-f88e-4295-abfd-74c30ee94d2c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            MarksId = new Guid("e9bf9dae-577b-4010-ab99-ebbbdc632f7c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            MarksId = new Guid("0eafbd43-731b-4fee-9ddb-bb48b241b815")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            MarksId = new Guid("adadb3e6-d06e-49fa-bfec-7b5b58836a08")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            MarksId = new Guid("65b94465-5dfd-4cba-956c-2e3d76132f4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            MarksId = new Guid("b492cced-66e1-4177-8e8f-ce87df130627")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            MarksId = new Guid("0600fca8-2eec-4cb9-8671-81b4303ef2fe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            MarksId = new Guid("f05aebfd-0b12-4972-9120-05bb36509c53")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("b492cced-66e1-4177-8e8f-ce87df130627")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("0600fca8-2eec-4cb9-8671-81b4303ef2fe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("aad21056-e149-4b3d-9796-e44393dea66d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("a6fc3cf8-4471-43f4-953d-f5b0e39bb277")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("9ec8ef4c-aa13-4e25-9068-a855be8a570b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("e73bf404-9609-4354-b7d5-b00ef1b6282b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("dfbe70b3-abbd-4cf3-8105-3bf0c00ae971")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("9d7955f9-4c28-4bea-90c7-8c1cbe8dc04a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            MarksId = new Guid("6c0f6fe7-e2ae-40fc-91d1-e98a3d3b1e8d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            MarksId = new Guid("f05aebfd-0b12-4972-9120-05bb36509c53")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            MarksId = new Guid("10b1ef00-7c69-453a-b84b-5c7e0b0b5189")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            MarksId = new Guid("d430b644-6b65-44c0-a7af-086f27aafd33")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            MarksId = new Guid("df25077f-32a3-4f45-be0d-2b55a63c3911")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            MarksId = new Guid("186d8fd9-237e-47d3-b6c9-3901c89718f1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f751ff89-4f46-42df-b831-bbc3c7ef6399"),
                            Name = "Год",
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("ad2fac7c-5f53-41bf-a0ec-8d59bd55f9fa"),
                            Name = "Название конкурса",
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("2029b445-7cd1-42d3-8bf5-64d46d8c5f53"),
                            Name = "Статус конкурса",
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("facd0262-d6d7-4600-ae7b-6242f7a4b1a9"),
                            Name = "Награда",
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("de768af3-2b13-442c-aa04-8c8cb611f44c"),
                            Name = "Ссылка",
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("d313024e-2b43-43ea-9f74-6607f6f8f96e"),
                            Name = "Название документа, реквизиты",
                            TableId = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f")
                        },
                        new
                        {
                            Id = new Guid("78e329ce-e5cb-4f8e-b49f-50d0606ca1a5"),
                            Name = "Год получения документа",
                            TableId = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f")
                        },
                        new
                        {
                            Id = new Guid("ac655514-7c70-4ee5-bf5f-dcc31a8f64fb"),
                            Name = "Наименование курса",
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("d9e59948-6a4b-46c1-a2e3-39a71267968f"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("33d0a8dd-2d93-4337-b986-316957883d76"),
                            Name = "Лекции (час.)",
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("98f8364f-e536-43a0-ad3a-317abbbdf82b"),
                            Name = "Практические занятия (час.)",
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("3942139e-556a-401a-9780-a847aabdd1ab"),
                            Name = "Итого (час.)",
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("9cd8302a-b9cd-4bf7-951a-46a447f14c76"),
                            Name = "ФИО",
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("29492011-6527-48b2-b9f8-fd2870e897e1"),
                            Name = "Название конкурса/премии",
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("afcbd092-75cf-4619-9f29-073e9fc96f94"),
                            Name = "Год",
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("f2037cc5-adbd-4d90-8939-9f76bd2a6dd1"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("a3254fa9-305b-419b-b0af-5ef89f946df3"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("18c5f23f-dbd1-4f8a-87b7-9201782ce3ba"),
                            Name = "Название организации/должность/ставка",
                            TableId = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e")
                        },
                        new
                        {
                            Id = new Guid("d36fb57c-6dc8-437a-be80-7b4a8013370e"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            TableId = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e")
                        },
                        new
                        {
                            Id = new Guid("b0707cde-32c2-413d-98db-c5692e2b78bb"),
                            Name = "Вид деятельности (преподавательская)",
                            TableId = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e")
                        },
                        new
                        {
                            Id = new Guid("fabfdb71-51cc-4236-9f9e-bba46e4fe746"),
                            Name = "Количество часов",
                            TableId = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e")
                        },
                        new
                        {
                            Id = new Guid("637ab11c-6adc-4c49-94a7-7a0e28bca6a2"),
                            Name = "Вид публикации",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("6cfbc568-a749-441f-8bf7-4284157b1793"),
                            Name = "Название",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("1284171a-01c5-449a-bfc9-a07a35996430"),
                            Name = "Соавторы",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("d6282df2-4787-4c0a-8d04-c42c2917b4d0"),
                            Name = "Количество печатных листов",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("74e26aea-aca5-4011-8e70-4ef53921deaf"),
                            Name = "Наличие грифа",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("7ab92f3c-6182-44ab-abd1-19fd52607008"),
                            Name = "Издательство, год",
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("c981029b-4d02-46bb-8e27-242a96837df3"),
                            Name = "Название дисциплины",
                            TableId = new Guid("7a1253ee-dfb2-4ea4-ad81-18554a50c679")
                        },
                        new
                        {
                            Id = new Guid("24b14436-b2a1-4433-90ca-0a08bd82340b"),
                            Name = "Вид (лекции, лабораторные)",
                            TableId = new Guid("7a1253ee-dfb2-4ea4-ad81-18554a50c679")
                        },
                        new
                        {
                            Id = new Guid("1e55df56-495f-41df-9c9b-42f992096176"),
                            Name = "Название курса",
                            TableId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            Id = new Guid("fc27587d-0c06-49a3-a450-29d0716038f9"),
                            Name = "Соавторы",
                            TableId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            Id = new Guid("eef7b277-8cf3-4441-9d7d-acb323843bbf"),
                            Name = "Ссылка на платформу",
                            TableId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            Id = new Guid("f2177310-3f85-49c7-a83f-ca3a48f66888"),
                            Name = "Год",
                            TableId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            Id = new Guid("75052542-c38d-46fe-867e-dade52b8ceb3"),
                            Name = "Название статьи",
                            TableId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            Id = new Guid("4a26a3eb-5b2e-4056-96fd-4794b3e782de"),
                            Name = "Соавторы",
                            TableId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            Id = new Guid("7456befe-9400-44c7-af9a-354160581d4a"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            TableId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            Id = new Guid("85df1818-fb84-458f-9105-b69dc1b0ed64"),
                            Name = "Издание, год",
                            TableId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            Id = new Guid("b14fa938-8ff0-4c03-8c02-fdb1a3fa652f"),
                            Name = "Тип идентификатора",
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("f44f75ee-c3b4-45eb-b40b-93c52f473ff5"),
                            Name = "Идентификатор",
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("1d64eb4c-b578-49f4-9434-5ad858672b08"),
                            Name = "Количество публикаций в БАЗЕ",
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("f1f6524d-1c24-41f2-9a9f-b303aaaa6d1e"),
                            Name = "Количество цитирований",
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("707b742b-f3a3-452d-a854-cecf1dd8df0b"),
                            Name = "Индекс Хирша (за все время)",
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("842c796f-7687-4cc6-a6b2-f42fc1c73fbe"),
                            Name = "Название НИР/НИОКР",
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("7245923b-ff5e-44ad-b391-ac50c08d77ac"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("a73edc8c-9dba-4645-8d42-68871ef6f2c0"),
                            Name = "Период выполнения",
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("24799812-c92c-4668-904c-f888e99ce85d"),
                            Name = "Статус (руководитель/исполнитель)",
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("37c29bb3-a969-44ef-9d6a-33766dc329c1"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("149017e9-7cb4-476a-a3f3-d192b40677f5"),
                            Name = "Вид",
                            TableId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            Id = new Guid("7afee4fc-dee8-4f67-95d3-297f2ce44047"),
                            Name = "Название",
                            TableId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            Id = new Guid("d01fda78-da38-4bc4-8c0f-c74ba4996780"),
                            Name = "ФИО соавторов",
                            TableId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            Id = new Guid("3b6c4f41-44a5-4b9e-a8f1-3b9be6b5b1d0"),
                            Name = "Номер РИД",
                            TableId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            Id = new Guid("f74cea98-3c00-47a9-a278-e8e742d98d8e"),
                            Name = "Вид",
                            TableId = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e")
                        },
                        new
                        {
                            Id = new Guid("968e1993-5705-480f-9fb6-0cb8e6c7812b"),
                            Name = "Название разработки",
                            TableId = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e")
                        },
                        new
                        {
                            Id = new Guid("a8020d42-10b7-49b9-b0b5-d98f285e992b"),
                            Name = "Название организации в которую внедрена разработка",
                            TableId = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("e60c1b17-53a8-41ef-bda6-c87150775f2f"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a04e363-a91e-49c2-87c9-539e92936adb"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Трек конкурса"
                        },
                        new
                        {
                            Id = new Guid("338fb84a-0c9e-4457-8635-ab9b849a1aca"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "ФИО"
                        },
                        new
                        {
                            Id = new Guid("f44aa3f5-cdd1-4d1d-adbb-b04cd848c85b"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Дата рождения"
                        },
                        new
                        {
                            Id = new Guid("df9c1083-4fb5-40c2-a006-fb4c21d55033"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Домашний адрес"
                        },
                        new
                        {
                            Id = new Guid("73d6dacb-9f35-4ed0-81fd-13b65e2c7ae3"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Контактный телефон"
                        },
                        new
                        {
                            Id = new Guid("c46d4100-73af-4ad4-a593-72777efa2517"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Электронная почта"
                        },
                        new
                        {
                            Id = new Guid("10a2b74a-c52e-4080-a130-babd45d12c1f"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Место работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("e9b198c3-ded0-4c8b-846d-9936704b3c70"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Адрес работы/учебы"
                        },
                        new
                        {
                            Id = new Guid("e6b61874-067c-4ede-b640-e841f15175b4"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Институт, факультет, кафедра, лаборатория"
                        },
                        new
                        {
                            Id = new Guid("2b9f5e91-75e0-4adc-aedc-b26d529d8e3c"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Должность"
                        },
                        new
                        {
                            Id = new Guid("83b13b96-3229-40c4-b8db-895bed68a045"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке"
                        },
                        new
                        {
                            Id = new Guid("6c2315cf-73b5-4b22-8419-c3f8d92a4b12"),
                            EditBlockId = new Guid("66e562ba-e327-4a6a-9ce1-9e24fd13e0d9"),
                            Name = "Дополнительная информация"
                        },
                        new
                        {
                            Id = new Guid("20549a44-39f4-4292-8da2-a758f1b5d1f0"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Направление конкурса"
                        },
                        new
                        {
                            Id = new Guid("47ba2af5-31ed-4853-8038-abed661880db"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Категория участника конкурса"
                        },
                        new
                        {
                            Id = new Guid("189c548e-f10d-4a96-9521-a953416596c5"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Название конкрусной работы"
                        },
                        new
                        {
                            Id = new Guid("d42900f5-c457-4a43-9c00-6326881d2a7c"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Ученое звание"
                        },
                        new
                        {
                            Id = new Guid("0e178e7c-5da7-4216-8430-4b6e549bd828"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Ученая степень"
                        },
                        new
                        {
                            Id = new Guid("89ea4bf9-a55b-4cb6-a9dc-22d1729d02fd"),
                            EditBlockId = new Guid("eb903dca-629d-4ca3-8273-d01c4092f507"),
                            Name = "Научная специальность (по классификации ВАК)"
                        },
                        new
                        {
                            Id = new Guid("4e94f172-9e1a-4dfe-b562-ecf9e1ca1711"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Защитившиеся кадидаты наук"
                        },
                        new
                        {
                            Id = new Guid("d6a018b6-e1a7-4c07-bb69-4e2a1ac764c2"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Защитившиеся доктора наук"
                        },
                        new
                        {
                            Id = new Guid("cb093415-e415-447f-a295-f600609c3caf"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Защитившиеся бакалавры"
                        },
                        new
                        {
                            Id = new Guid("1ebd60cb-a46d-432b-b600-0a3ed32928ce"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Защитившиеся специалисты"
                        },
                        new
                        {
                            Id = new Guid("c26c4cbf-7180-48f1-88ef-b892a92ed550"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Защитившиеся магистры"
                        },
                        new
                        {
                            Id = new Guid("947fa01c-1120-4a54-93cb-678f78db3bf4"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Защитившиеся кандидаты наук"
                        },
                        new
                        {
                            Id = new Guid("b1579d57-0f2d-4dc8-b972-156b5d90f329"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Защитившиеся доктора наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("978e11ba-7d80-4b9a-87cc-457c8d9c2c5a"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("5f68f803-2528-4fb2-8ac0-26f22ace5b48"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1")
                        },
                        new
                        {
                            Id = new Guid("bd327c8d-c694-4c4e-a750-41b703476ddd"),
                            FieldId = new Guid("c26c4cbf-7180-48f1-88ef-b892a92ed550"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2011d9c2-74eb-4240-81e0-9a1ae49b35e2"),
                            FieldId = new Guid("4e94f172-9e1a-4dfe-b562-ecf9e1ca1711"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("efdf30f8-02ac-4c99-bbec-b797700c4746"),
                            FieldId = new Guid("d6a018b6-e1a7-4c07-bb69-4e2a1ac764c2"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("386c1780-054a-4859-8864-42338f4baf8c"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608")
                        },
                        new
                        {
                            Id = new Guid("e28d09db-4872-43ee-aa5e-7a2d9a3d7739"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("da8ec277-522c-455d-8049-74161d372420")
                        },
                        new
                        {
                            Id = new Guid("20d6a93a-f88e-4295-abfd-74c30ee94d2c"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("e9bf9dae-577b-4010-ab99-ebbbdc632f7c"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("0eafbd43-731b-4fee-9ddb-bb48b241b815"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("adadb3e6-d06e-49fa-bfec-7b5b58836a08"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1")
                        },
                        new
                        {
                            Id = new Guid("65b94465-5dfd-4cba-956c-2e3d76132f4a"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("7a1253ee-dfb2-4ea4-ad81-18554a50c679")
                        },
                        new
                        {
                            Id = new Guid("b492cced-66e1-4177-8e8f-ce87df130627"),
                            FieldId = new Guid("d42900f5-c457-4a43-9c00-6326881d2a7c"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("0600fca8-2eec-4cb9-8671-81b4303ef2fe"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8")
                        },
                        new
                        {
                            Id = new Guid("f05aebfd-0b12-4972-9120-05bb36509c53"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f")
                        },
                        new
                        {
                            Id = new Guid("aad21056-e149-4b3d-9796-e44393dea66d"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee")
                        },
                        new
                        {
                            Id = new Guid("a6fc3cf8-4471-43f4-953d-f5b0e39bb277"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("9ec8ef4c-aa13-4e25-9068-a855be8a570b"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8")
                        },
                        new
                        {
                            Id = new Guid("e73bf404-9609-4354-b7d5-b00ef1b6282b"),
                            FieldId = new Guid("947fa01c-1120-4a54-93cb-678f78db3bf4"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("dfbe70b3-abbd-4cf3-8105-3bf0c00ae971"),
                            FieldId = new Guid("b1579d57-0f2d-4dc8-b972-156b5d90f329"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("9d7955f9-4c28-4bea-90c7-8c1cbe8dc04a"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("6c0f6fe7-e2ae-40fc-91d1-e98a3d3b1e8d"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff")
                        },
                        new
                        {
                            Id = new Guid("10b1ef00-7c69-453a-b84b-5c7e0b0b5189"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01")
                        },
                        new
                        {
                            Id = new Guid("d430b644-6b65-44c0-a7af-086f27aafd33"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e")
                        },
                        new
                        {
                            Id = new Guid("df25077f-32a3-4f45-be0d-2b55a63c3911"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("186d8fd9-237e-47d3-b6c9-3901c89718f1"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e859e4d-960b-454d-b9cc-cbabd7051558"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("2decad65-f50b-4f10-a808-1c84481bc2db"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a26be941-b582-4db4-8523-65e03ba599d6"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ffbc6ec1-8106-4b4d-9e2a-27de1b6511e7"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("fc5a8671-a825-4901-88c0-dce6fbb9da44"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("9251bf4f-33ec-48d8-9dc9-ba8ba583f18b"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("34a61449-cd30-4bed-8bfe-796c0c4cc5d8"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("575d385c-af86-4f3e-bdad-2f646b65416c"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d284f120-f032-43a0-a2a1-c822e85187d8"),
                            EditBlockId = new Guid("e60c1b17-53a8-41ef-bda6-c87150775f2f"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности"
                        },
                        new
                        {
                            Id = new Guid("ad33d55f-b245-48f1-83f5-8f6da86c430f"),
                            EditBlockId = new Guid("e60c1b17-53a8-41ef-bda6-c87150775f2f"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)"
                        },
                        new
                        {
                            Id = new Guid("4431fb00-3c12-4bbe-898d-89a7eb12f3a1"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)"
                        },
                        new
                        {
                            Id = new Guid("44a2645d-9f84-4e1f-b102-de3f56c88608"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание"
                        },
                        new
                        {
                            Id = new Guid("33628ce2-3249-44bc-908f-1f83073fcf0e"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год"
                        },
                        new
                        {
                            Id = new Guid("bc9ecde1-ca33-497e-a8cf-bd4d8ff51eb1"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("7a1253ee-dfb2-4ea4-ad81-18554a50c679"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("da8ec277-522c-455d-8049-74161d372420"),
                            EditBlockId = new Guid("c9e44221-8cc1-40c2-94ce-cf4cef8079bb"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("fcf0afb6-abea-4017-81ff-f0a0e13ff4ee"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Список научных публикаций за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("03f01a21-a1db-44d4-b626-3d4294e0dae8"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Персональные идентификаторы и показатели"
                        },
                        new
                        {
                            Id = new Guid("8f2a9d8a-d985-4933-9126-b32f30046fff"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет"
                        },
                        new
                        {
                            Id = new Guid("c7fbad2d-2251-4c30-abbe-dda700d0ed01"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)"
                        },
                        new
                        {
                            Id = new Guid("b17ab907-db9a-42ca-8256-061b9d54901e"),
                            EditBlockId = new Guid("be53a9b7-1077-45f2-a98a-519de649ba45"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4ea384a-471f-4889-836d-a8c07fbe6217"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4be0890b-3929-49d9-9ca9-54a3bfa5431d"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62aa620e-8503-4cc4-82db-636ba4a91cb6"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("492de33f-5ea2-45ee-b28c-35c958fe5d13"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
