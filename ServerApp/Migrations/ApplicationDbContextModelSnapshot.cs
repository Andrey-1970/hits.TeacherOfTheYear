// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43604bb4-bdf7-41da-a916-6e6a4829dd17"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43604bb4-bdf7-41da-a916-6e6a4829dd17"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("90b743bf-c333-44ee-9192-d7644c86fb64"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("d66ae91e-84c1-4493-a8ee-bef8ecc1ec33"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("44a3ce53-9e9f-49d8-bd5c-ddc4ef4c170a"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("661695d0-707f-462a-b63c-8dcf5ad23dd2"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("9136520d-aa85-4f9c-8e5b-7ffc2ee08ac2"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("f29dd457-b804-41ee-b246-638b7e042921"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("4d0a6b67-30d4-4f95-9e7e-e57e9df61b90"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("a0750fb2-09c4-4901-affc-dddac5f0a27f"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("92701b78-dd5c-4c46-bd20-5cd4edb9c768"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("3b041356-b886-442f-81ae-a9f259941685"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("b047af38-2820-4dda-bcda-1750c42d1fbb"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("22f84944-f547-4426-8581-10316e1fe684"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("20948ddc-ceb5-4a94-a061-b945653efdad"),
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b")
                        },
                        new
                        {
                            FieldsId = new Guid("9801c728-715d-4480-afcd-3b1347f093d5"),
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6")
                        },
                        new
                        {
                            FieldsId = new Guid("97b38f30-1d02-4f9e-971d-2009539f58a4"),
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6")
                        },
                        new
                        {
                            FieldsId = new Guid("2f8d2484-8325-466c-b59c-b1a9244d4e2e"),
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6")
                        },
                        new
                        {
                            FieldsId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059")
                        },
                        new
                        {
                            FieldsId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac")
                        },
                        new
                        {
                            FieldsId = new Guid("8b9095b4-2cdf-4586-a452-c29373037521"),
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac")
                        },
                        new
                        {
                            FieldsId = new Guid("c94b5a85-82e7-4c38-abcb-aafb76aef471"),
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            TablesId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            TablesId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            TablesId = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            TablesId = new Guid("b7895997-687b-4792-a362-9b8048154f0e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            TablesId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            TablesId = new Guid("08a6af70-0673-4046-9260-26c0e7228df7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            TablesId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            TablesId = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            TablesId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            TablesId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            TablesId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            TablesId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            TablesId = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            TablesId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            TablesId = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            TablesId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            TracksId = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4942f11-d20d-463d-b190-d3554179239b"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            TracksId = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("4fe87c9d-08c2-434e-b922-d9d0adb76812")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("74fc4f2e-e4c3-4401-9b2e-83e911ddc0db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("0313cada-818b-412a-b592-d6a12cf37b57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("c9e551ba-9e83-4f9b-b2de-e6fdb48ea69e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("35a4359e-a34f-4b1b-9dc4-65732f874564")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("1fe12f68-c19d-4296-9f32-627bf317989f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            MarksId = new Guid("64ce9d34-4fbf-425b-9890-d70a493e3c39")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            MarksId = new Guid("5f88246c-4b96-4a96-93b0-140d49bfe31b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            MarksId = new Guid("34c1b0ef-0ac9-4ee1-8e90-39e6e5868c3d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            MarksId = new Guid("d006b440-6e68-4cfd-b805-3d72aed23edb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            MarksId = new Guid("72d9fc34-9d93-4e62-ad68-d2c0309b6569")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            MarksId = new Guid("71e5f084-0335-45ae-9809-f3b111a71ee9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            MarksId = new Guid("940380c2-55c9-40d5-96de-aee296535b94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            MarksId = new Guid("6910a0d3-6c97-4ba4-bb60-31145c6d096c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            MarksId = new Guid("eab29e03-b0b2-4b04-9106-47b9d6b3e96c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("940380c2-55c9-40d5-96de-aee296535b94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("6910a0d3-6c97-4ba4-bb60-31145c6d096c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("a014dfc2-888c-4fc6-8e13-03002a093117")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("51b5f555-2f00-465f-9af5-8731021cc397")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("cfd109da-7f2f-4821-a61a-f65a08677221")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("6baa4feb-1b6b-457f-80f9-b33d98617804")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            MarksId = new Guid("61d2b720-93c3-4f02-b855-904bafbd7302")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            MarksId = new Guid("eab29e03-b0b2-4b04-9106-47b9d6b3e96c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            MarksId = new Guid("8b0e4ed1-6e50-406b-aad3-449acc0af49f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            MarksId = new Guid("0db6cbc2-fb54-4192-a88c-230846f9dfad")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            MarksId = new Guid("57dd6484-6fca-4101-8c86-6037aecad79c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            MarksId = new Guid("2e45397a-eccf-4ab5-a6a0-1d6fd512f1f2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d238a2b6-31b3-4176-953d-7656062b000c",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "c60d2e36-0152-4137-9dee-cb7e0591298e",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "e9193b25-20fa-435e-95d3-b40cd9ebd827",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "f1d6c110-691d-429f-b229-b11159a75f97",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "5ce74b37-4adb-4ac5-a267-c25155404bdd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c47ebfce-7595-42d0-b0e5-cf820b7301c4"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("b05d13e8-16e8-4607-afbb-dba248c86e08"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("af3a9062-e08f-4edf-a43a-295f60e18702"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("2611e3e7-be00-4424-b41f-0e429cf96fb5"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("cebda2d3-a4c5-4cbd-a0dd-40869c95a70d"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("5868674f-06c9-414f-a68b-6955c9f7bb9c"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffd5775c-f93e-4e22-b678-4744ebd394d0"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3bae6bbf-db58-477c-9430-13bb51764d9b"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98e6567d-8218-48fd-8d10-08de24243fd0"),
                            ColumnId = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("01a9ab91-6fe4-4747-a3ff-8ef923e1df71"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("6bce6c11-ce72-4928-b7f3-1c479fb24cde"),
                            ColumnId = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("01a9ab91-6fe4-4747-a3ff-8ef923e1df71")
                        },
                        new
                        {
                            Id = new Guid("638d05ac-f5b0-43d2-bc4a-b8e6ee64cc29"),
                            ColumnId = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("389b3b26-4f92-4fa2-ac47-0ba3cb86d82f"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("bcac04c9-8009-49f0-8d10-4f5bcdb66c97"),
                            ColumnId = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("389b3b26-4f92-4fa2-ac47-0ba3cb86d82f")
                        },
                        new
                        {
                            Id = new Guid("5252672e-ef8a-4936-90a6-e0ac3b66c9a2"),
                            ColumnId = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5fc3dd70-c2f8-4c58-8cf7-bf1cf43b412c"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("6b6f0f6a-d967-4142-9c30-f6a851bd3a66"),
                            ColumnId = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5fc3dd70-c2f8-4c58-8cf7-bf1cf43b412c")
                        },
                        new
                        {
                            Id = new Guid("3516d387-8823-401d-bb1c-5b1665f897d6"),
                            ColumnId = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("902ec2ed-d57a-46ac-ba04-91eb28c2225e"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("8ea55a92-8c2a-4ed7-aba3-2c667928dd26"),
                            ColumnId = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("902ec2ed-d57a-46ac-ba04-91eb28c2225e")
                        },
                        new
                        {
                            Id = new Guid("81b1e0f0-8cd2-4c8a-85c9-4dc7a82f88e5"),
                            ColumnId = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9633fbc6-c7d0-47fe-9c98-b157206e1a3a"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("9c215836-b208-44cf-97df-a6c4fef47d6a"),
                            ColumnId = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9633fbc6-c7d0-47fe-9c98-b157206e1a3a")
                        },
                        new
                        {
                            Id = new Guid("bd9876ad-3064-42bf-b376-ae96f233e4e1"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3df89dcc-86ac-439a-a1ea-34239e1242ec"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("f98c22e8-dbe0-48b2-956d-cd657ef5ec71"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3df89dcc-86ac-439a-a1ea-34239e1242ec")
                        },
                        new
                        {
                            Id = new Guid("3519ff58-9c5d-4af0-bea3-248fc2fdbcad"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("08ecb284-e85d-40f1-9238-215d079d2cdc"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("eb659c29-9f36-4c5d-ae9a-87167341345b"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("08ecb284-e85d-40f1-9238-215d079d2cdc")
                        },
                        new
                        {
                            Id = new Guid("1da060d0-189e-417b-aea1-c0d4d1b0a375"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("175f1ba2-cdea-4ee7-9acc-1773e8aaf9f4"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("d85157a4-36a1-44a6-94d3-1f96c6f94a75"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("175f1ba2-cdea-4ee7-9acc-1773e8aaf9f4")
                        },
                        new
                        {
                            Id = new Guid("baaf4258-ec28-4f0f-8dd5-a0deb70b1445"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("06d7203a-fae9-4223-8e89-b080cd0e06b8"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("22f0d04e-dc52-4a7c-9e36-0c1ff9cc1257"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06d7203a-fae9-4223-8e89-b080cd0e06b8")
                        },
                        new
                        {
                            Id = new Guid("3ba70bc7-4410-49a6-b7b9-c464d886db85"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("82b7ec84-2bde-4fc9-897c-b7acc9f67f9d"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("672362fb-fca7-46da-9b85-b72cc92f44f1"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("82b7ec84-2bde-4fc9-897c-b7acc9f67f9d")
                        },
                        new
                        {
                            Id = new Guid("4a004ca2-0254-4cb6-845c-3815b152ff43"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e21c5791-147c-4907-9ee9-557a4d902d30"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("b838d7f5-f074-4f2a-b3b0-2f6e8c1da9bf"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e21c5791-147c-4907-9ee9-557a4d902d30")
                        },
                        new
                        {
                            Id = new Guid("a748097a-f06f-46c9-9eed-b47c386cc3d0"),
                            ColumnId = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9c0bcd31-3fef-45ea-9404-c397a23b9d3e"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("6e33b28b-3dfe-4fe4-b713-f7438affd5fe"),
                            ColumnId = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9c0bcd31-3fef-45ea-9404-c397a23b9d3e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8441f2c1-57df-4294-a437-6e9330c37970"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("effbfc76-94fb-47e7-ade0-8b99051a6696"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("9767cdf2-235c-43eb-91f2-e9ccdb0d6639"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("691ad354-035c-4fbe-8173-0b998ee78eee"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("8bc3f629-8933-4362-82df-da517e55684f"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("ef7bb40f-21d4-48ae-8282-ed63a459d9c5"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("54055ebf-c2cf-42e6-bccc-8fb132187f48"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("287d7480-9cdd-4c54-9ff5-17253f1fab94"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("5cf8a2b0-4ba9-4047-9668-0420f29247fa"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("d792058b-6de9-4814-8dfe-d71e00ba9514"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("aa513860-db8e-4f39-ba50-e5697547353a"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("2714332c-5045-4344-b8ea-6e50b2042c71"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("ce2119a2-c711-4942-bfa2-adad8838d5e7"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("d5bc883f-8f2a-4914-8007-8c2d08b6b634"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("29143a74-2087-4de0-a22f-82761ae3e9eb"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("663346cf-3ba2-416e-b442-f75aaf6ff533"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("472b7f0a-37f8-4a9f-b0c8-604a4b3a2e09"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("c60150d4-badb-4da2-b6e2-a3a6c2cd433f"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("657c8bee-23f1-4a60-8706-45ec8ca55e65"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("bcb6289b-3d7a-463b-bebf-7a74b45985fe"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("51183e04-16d0-4414-8e99-ab71de21f67c"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("72ef5613-fa0a-462e-b85c-7ed57fa88b12"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("e9b210dd-354b-4cd1-82f3-2adf40e003c3"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("161f60d6-0fa1-4c79-afeb-77d2d7ce8500"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("3287311d-ae12-46a4-9f1b-ab9df5a0d8cf"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("ae120d73-4c11-4a27-be3a-d43b6ed38597"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("60b3d355-d660-4f61-b64b-193f97bf0279")
                        },
                        new
                        {
                            Id = new Guid("a42d03fd-c65f-4798-850d-f76791e44caf"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("eece0062-6915-476e-b6bc-28b68d9183a2"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("8618129b-8350-47f4-bbda-52ad5aec8f9f"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("1842819c-1135-4b47-8b93-153b615a7226"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("08a6af70-0673-4046-9260-26c0e7228df7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("a37eeedc-9e80-4b64-afa9-488fb62fd93c"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("08a6af70-0673-4046-9260-26c0e7228df7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("c174bd5e-5741-4fa5-813e-5a25fe48ef1e"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("08a6af70-0673-4046-9260-26c0e7228df7"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("01a5a3d5-8b5b-4502-9d53-800478393eea"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("b7895997-687b-4792-a362-9b8048154f0e"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("4827d9f9-8295-415c-962b-d89f3808163d"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("b7895997-687b-4792-a362-9b8048154f0e"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("14e94979-6dc0-449e-9d9c-e4b16e833a9c"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("b7895997-687b-4792-a362-9b8048154f0e"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("2bf71c70-5def-494c-acca-38cfd0685ae8"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("b7895997-687b-4792-a362-9b8048154f0e"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("e00edaec-16fd-4402-a553-272b49d477b8"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("2d4bf1a3-32b7-4e98-8358-bddfdddebe6f"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("a3c564b8-4434-4999-b6c1-caf237ceb8fa"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("6996d119-8489-4473-9d14-629ef8a2c417"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("cdcbdfaf-6813-48ed-877d-36875bbf957e"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("da552583-3d7d-4a3c-9fac-9a96239b3cf3"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("db3188ef-8c7c-4c0b-a136-399e6808fd59"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("0d57c9d9-5c6c-46c0-9576-199c4534cfe7"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("228cc0e9-db63-4e77-ad83-45ade9a9c72d"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("4062e4e9-d7d7-4231-96b0-8838319070b2"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("6b0cc757-e054-43e5-afa8-c38b8be3ed9c"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("51006453-d222-46e0-bd58-79aa18f59b41"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("3b1aa819-5d8b-4fe6-9d12-eee11a7f014e"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("716de2a1-5a57-4cac-a992-37b048df3401"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("3e4f5c27-e450-48e9-8092-aa49e800286f"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("8cb776be-fb61-45bb-b0e2-d3ce5a2744cb"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("ae92e203-5851-4075-9261-864d6dcdd632"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("1311b426-86a3-4916-a16a-380d16547064"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("a3511a48-e17d-4fcd-9393-9301396cbfca"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d"),
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("47adef9c-2ed9-4ad2-a7e1-a4a42e98089c"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d"),
                            ValueTypeId = new Guid("7c6df8dc-f1ea-4425-86a2-9ab2a08327a2")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("43604bb4-bdf7-41da-a916-6e6a4829dd17"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("90b743bf-c333-44ee-9192-d7644c86fb64"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("d66ae91e-84c1-4493-a8ee-bef8ecc1ec33"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("f2a8640c-1754-4995-9f2f-181b2c5ed5aa")
                        },
                        new
                        {
                            Id = new Guid("44a3ce53-9e9f-49d8-bd5c-ddc4ef4c170a"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("661695d0-707f-462a-b63c-8dcf5ad23dd2"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("9136520d-aa85-4f9c-8e5b-7ffc2ee08ac2"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("f29dd457-b804-41ee-b246-638b7e042921"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("4d0a6b67-30d4-4f95-9e7e-e57e9df61b90"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("a0750fb2-09c4-4901-affc-dddac5f0a27f"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("92701b78-dd5c-4c46-bd20-5cd4edb9c768"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("3b041356-b886-442f-81ae-a9f259941685"),
                            EditBlockId = new Guid("a090318f-0d7a-4cb6-9d4b-3fd46847790f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("b047af38-2820-4dda-bcda-1750c42d1fbb"),
                            EditBlockId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            EditBlockId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("22f84944-f547-4426-8581-10316e1fe684"),
                            EditBlockId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("20948ddc-ceb5-4a94-a061-b945653efdad"),
                            EditBlockId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb")
                        },
                        new
                        {
                            Id = new Guid("9801c728-715d-4480-afcd-3b1347f093d5"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("97b38f30-1d02-4f9e-971d-2009539f58a4"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("2f8d2484-8325-466c-b59c-b1a9244d4e2e"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("8b9095b4-2cdf-4586-a452-c29373037521"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        },
                        new
                        {
                            Id = new Guid("c94b5a85-82e7-4c38-abcb-aafb76aef471"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fe87c9d-08c2-434e-b922-d9d0adb76812"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b")
                        },
                        new
                        {
                            Id = new Guid("74fc4f2e-e4c3-4401-9b2e-83e911ddc0db"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b")
                        },
                        new
                        {
                            Id = new Guid("0313cada-818b-412a-b592-d6a12cf37b57"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("2f8d2484-8325-466c-b59c-b1a9244d4e2e"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c9e551ba-9e83-4f9b-b2de-e6fdb48ea69e"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("9801c728-715d-4480-afcd-3b1347f093d5"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("35a4359e-a34f-4b1b-9dc4-65732f874564"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("97b38f30-1d02-4f9e-971d-2009539f58a4"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("1fe12f68-c19d-4296-9f32-627bf317989f"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128")
                        },
                        new
                        {
                            Id = new Guid("64ce9d34-4fbf-425b-9890-d70a493e3c39"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("b7895997-687b-4792-a362-9b8048154f0e")
                        },
                        new
                        {
                            Id = new Guid("5f88246c-4b96-4a96-93b0-140d49bfe31b"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713")
                        },
                        new
                        {
                            Id = new Guid("34c1b0ef-0ac9-4ee1-8e90-39e6e5868c3d"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713")
                        },
                        new
                        {
                            Id = new Guid("d006b440-6e68-4cfd-b805-3d72aed23edb"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713")
                        },
                        new
                        {
                            Id = new Guid("72d9fc34-9d93-4e62-ad68-d2c0309b6569"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713")
                        },
                        new
                        {
                            Id = new Guid("71e5f084-0335-45ae-9809-f3b111a71ee9"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("08a6af70-0673-4046-9260-26c0e7228df7")
                        },
                        new
                        {
                            Id = new Guid("940380c2-55c9-40d5-96de-aee296535b94"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("6910a0d3-6c97-4ba4-bb60-31145c6d096c"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8")
                        },
                        new
                        {
                            Id = new Guid("eab29e03-b0b2-4b04-9106-47b9d6b3e96c"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e")
                        },
                        new
                        {
                            Id = new Guid("a014dfc2-888c-4fc6-8e13-03002a093117"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("1816654e-ceaa-4724-a550-dd3725794d41")
                        },
                        new
                        {
                            Id = new Guid("51b5f555-2f00-465f-9af5-8731021cc397"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("8b9095b4-2cdf-4586-a452-c29373037521"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("cfd109da-7f2f-4821-a61a-f65a08677221"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("c94b5a85-82e7-4c38-abcb-aafb76aef471"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("6baa4feb-1b6b-457f-80f9-b33d98617804"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2")
                        },
                        new
                        {
                            Id = new Guid("61d2b720-93c3-4f02-b855-904bafbd7302"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2")
                        },
                        new
                        {
                            Id = new Guid("8b0e4ed1-6e50-406b-aad3-449acc0af49f"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc")
                        },
                        new
                        {
                            Id = new Guid("0db6cbc2-fb54-4192-a88c-230846f9dfad"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358")
                        },
                        new
                        {
                            Id = new Guid("57dd6484-6fca-4101-8c86-6037aecad79c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("2e45397a-eccf-4ab5-a6a0-1d6fd512f1f2"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4942f11-d20d-463d-b190-d3554179239b"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cdc74695-ad7d-4fdf-a7b3-ff60d20ed1b6"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("15e717d1-f179-44d0-91c1-e924aa383eac"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ba8d3001-e9c9-415a-81ea-530fa885e059"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("df27bbd5-feb5-4e74-9710-c7e5adf3acac"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ddb1a07a-bc76-433f-be23-e29be7b7112d"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("fcee23d9-5155-4412-8ae7-da45187ac603"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01a9ab91-6fe4-4747-a3ff-8ef923e1df71"),
                            IsPrefilled = true,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            Id = new Guid("389b3b26-4f92-4fa2-ac47-0ba3cb86d82f"),
                            IsPrefilled = true,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            Id = new Guid("5fc3dd70-c2f8-4c58-8cf7-bf1cf43b412c"),
                            IsPrefilled = true,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            Id = new Guid("902ec2ed-d57a-46ac-ba04-91eb28c2225e"),
                            IsPrefilled = true,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            Id = new Guid("9633fbc6-c7d0-47fe-9c98-b157206e1a3a"),
                            IsPrefilled = true,
                            TableId = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521")
                        },
                        new
                        {
                            Id = new Guid("3df89dcc-86ac-439a-a1ea-34239e1242ec"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("08ecb284-e85d-40f1-9238-215d079d2cdc"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("175f1ba2-cdea-4ee7-9acc-1773e8aaf9f4"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("06d7203a-fae9-4223-8e89-b080cd0e06b8"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("82b7ec84-2bde-4fc9-897c-b7acc9f67f9d"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("e21c5791-147c-4907-9ee9-557a4d902d30"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        },
                        new
                        {
                            Id = new Guid("9c0bcd31-3fef-45ea-9404-c397a23b9d3e"),
                            IsPrefilled = true,
                            TableId = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("501b9e47-6be6-4e70-9688-4a5b20f3e6ce"),
                            FieldId = new Guid("b047af38-2820-4dda-bcda-1750c42d1fbb"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("ad28f7ae-a9c5-437f-9910-e21f0a54662f"),
                            FieldId = new Guid("b047af38-2820-4dda-bcda-1750c42d1fbb"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("51cca623-7852-4341-af80-75e9aa01ba57"),
                            FieldId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("a887c84d-0d04-4298-bb32-b4fa1e468e3d"),
                            FieldId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("af388352-a1ef-4d5e-b30c-3ed6503c2423"),
                            FieldId = new Guid("a5dd011a-3f16-4f02-be72-2ad782449968"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("65f82561-b734-4614-9ca5-491255b02b22"),
                            ColumnId = new Guid("9767cdf2-235c-43eb-91f2-e9ccdb0d6639"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("43e21c8c-83cf-4839-8df9-2bf4bc04fa26"),
                            ColumnId = new Guid("9767cdf2-235c-43eb-91f2-e9ccdb0d6639"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("1fc3da21-361f-4182-b1da-376547323610"),
                            ColumnId = new Guid("9767cdf2-235c-43eb-91f2-e9ccdb0d6639"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ddb20149-826a-473f-bdec-5d1e34523378"),
                            ColumnId = new Guid("72ef5613-fa0a-462e-b85c-7ed57fa88b12"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("7ba20932-3e5f-4649-b2cf-8ded03318e4e"),
                            ColumnId = new Guid("72ef5613-fa0a-462e-b85c-7ed57fa88b12"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("ff333572-18ec-4834-9b0a-096b3963258a"),
                            ColumnId = new Guid("72ef5613-fa0a-462e-b85c-7ed57fa88b12"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("e6ba8ce6-24e4-4fb6-aefe-3f437f555766"),
                            ColumnId = new Guid("a37eeedc-9e80-4b64-afa9-488fb62fd93c"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("5ae0b184-cf6d-4b4d-ac5a-fce9d3bc1183"),
                            ColumnId = new Guid("a37eeedc-9e80-4b64-afa9-488fb62fd93c"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("b1021213-a8aa-432c-b5e4-a5b28940d332"),
                            ColumnId = new Guid("4062e4e9-d7d7-4231-96b0-8838319070b2"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("20ad3bc7-05e9-4d62-82db-0c018b963c5c"),
                            ColumnId = new Guid("4062e4e9-d7d7-4231-96b0-8838319070b2"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("e37c454d-75da-4500-a142-559a528e178d"),
                            ColumnId = new Guid("51006453-d222-46e0-bd58-79aa18f59b41"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("7ccce403-46fd-4a62-819e-2b114d5a0e99"),
                            ColumnId = new Guid("51006453-d222-46e0-bd58-79aa18f59b41"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c3fd712b-db88-44ee-9d99-203ba05d6009"),
                            ColumnId = new Guid("51006453-d222-46e0-bd58-79aa18f59b41"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("0a845f1d-d498-473c-8aea-19440b157c6e"),
                            ColumnId = new Guid("8cb776be-fb61-45bb-b0e2-d3ce5a2744cb"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("10ffcfdb-8479-4628-9186-64d9509b37e1"),
                            ColumnId = new Guid("8cb776be-fb61-45bb-b0e2-d3ce5a2744cb"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("005c0222-1ed3-4e0c-aebf-27e419a4199f"),
                            ColumnId = new Guid("8cb776be-fb61-45bb-b0e2-d3ce5a2744cb"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("fa71c2f0-ffbb-47e6-95d6-ee7a01a02a69"),
                            ColumnId = new Guid("161f60d6-0fa1-4c79-afeb-77d2d7ce8500"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("737d89e3-b2e3-4eaf-80b1-aae370b5802f"),
                            ColumnId = new Guid("161f60d6-0fa1-4c79-afeb-77d2d7ce8500"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("b07b2a49-b065-48ff-aec3-b2711f002c19"),
                            ColumnId = new Guid("eece0062-6915-476e-b6bc-28b68d9183a2"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("7c335ac6-4456-4922-83db-1b22084c2db7"),
                            ColumnId = new Guid("eece0062-6915-476e-b6bc-28b68d9183a2"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("740fb31b-3dd5-4083-875f-68d70a0d40d8"),
                            EditBlockId = new Guid("43604bb4-bdf7-41da-a916-6e6a4829dd17"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("1d7806d2-6ceb-4a8b-b1ba-51f462256f4e"),
                            EditBlockId = new Guid("43604bb4-bdf7-41da-a916-6e6a4829dd17"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("0861098b-fa0b-4532-9880-b0d907f6268b"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0b872eb2-8a52-4ca1-af26-db9b41667128"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("efb87940-9025-4ef0-884e-b07e5ba323c7"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("9a095aa7-b6e6-460d-a37a-93b32d165713"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("08a6af70-0673-4046-9260-26c0e7228df7"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b7895997-687b-4792-a362-9b8048154f0e"),
                            EditBlockId = new Guid("4f0c8eda-27d4-4931-9512-4e485c75dd2c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("1816654e-ceaa-4724-a550-dd3725794d41"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("d233f740-8097-4dfc-8ffa-c88dc518b521"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("4fee1a60-b468-4399-a6e0-af098342aed2"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("4b0c0176-59f8-4034-8cc3-e57cdaac20cc"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("88cdc459-bfff-4549-b0c3-2fd1d04ac358"),
                            EditBlockId = new Guid("dfebf4da-7064-465b-a5d0-b2af2b5edf04"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("96143ff1-e724-4290-b28e-6cd9afa4dd1d"),
                            EditBlockId = new Guid("8db3dba8-fa09-45ee-85b6-47f7efe629db"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9687b89d-18b9-415d-a1ef-f9c2a47a9acb"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("99a7318c-bfc0-49f3-9bf8-6af400d591f6"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9ceb364-b12c-4147-ba21-381f81bf6d11"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("e5a7be3d-0a6d-4193-8df8-6b1e7edbc6eb"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("60b3d355-d660-4f61-b64b-193f97bf0279"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("f2a8640c-1754-4995-9f2f-181b2c5ed5aa"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("7c6df8dc-f1ea-4425-86a2-9ab2a08327a2"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
