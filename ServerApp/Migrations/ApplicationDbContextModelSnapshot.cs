// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("bf2cde37-b9de-4739-a0be-64dc3918a931"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("8493b7c8-1271-49c6-a2d2-0de79fb546ee"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("d54bc427-c324-4ab6-bf7e-95cdb900890d"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("a5b9c797-d3f0-4d6e-968b-d7d4bc0e8733"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("d5591869-90c6-45f8-bac6-355cf87d464d"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("f03af6b7-d3cf-49f8-b3ac-2e9691732a72"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("f9141d3f-66d7-4bea-9f75-d864eeaa0740"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("7cfd8f05-a1b7-499c-96bd-1773fbe67730"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("07a6a9b2-7916-4b40-ae2d-0d7f7a2cd59d"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("3d02e513-d5d4-4c4a-a74b-dae357c72389"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("2f7a7475-1d1e-4d54-96f4-e9183a910e0a"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("e13e9fff-3510-46ff-8329-17dfc7557161"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("8abdee5a-19e7-4ec0-af08-2c9d88844a46"),
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344")
                        },
                        new
                        {
                            FieldsId = new Guid("8833e2db-7bec-4ded-ba3d-0036b7529fa6"),
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046")
                        },
                        new
                        {
                            FieldsId = new Guid("b56c31f3-b126-4ce6-b7c0-3dcc22e1228d"),
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046")
                        },
                        new
                        {
                            FieldsId = new Guid("2acc2aeb-f5aa-41c6-9a86-99cb2eb3dc30"),
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046")
                        },
                        new
                        {
                            FieldsId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5")
                        },
                        new
                        {
                            FieldsId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888")
                        },
                        new
                        {
                            FieldsId = new Guid("630f78c8-5b67-401f-92bb-306848ac275f"),
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888")
                        },
                        new
                        {
                            FieldsId = new Guid("eba011c1-10f1-476d-b255-4eac986b3e05"),
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            TablesId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            TablesId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            TablesId = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            TablesId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            TablesId = new Guid("75874988-29ca-4b03-88dd-158483a577db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            TablesId = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            TablesId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            TablesId = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            TablesId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            TablesId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            TablesId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            TablesId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            TablesId = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            TablesId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            TablesId = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            TablesId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            TracksId = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            TracksId = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("8ff50261-392e-41d9-9d69-463e8239ad28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("b99e7ab7-885e-4b5f-b2cb-ed8f0fc73d56")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("5e778b0a-e542-4fc9-934c-c1491605ab4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("8cc17e88-0af5-4cd9-a09a-e44cb3c36fbe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("a56f8f52-0f47-4c69-957f-5718d914b997")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("0585fa7e-b6e4-4e6f-9431-4f51f4e522d8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            MarksId = new Guid("6be69bbe-386e-4de0-b3a1-9ec946b12084")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            MarksId = new Guid("b25c74c6-3ec6-47c8-9b84-81dd9ea73cd4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            MarksId = new Guid("90be141c-713e-43e9-8beb-e57ff5ae0b16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            MarksId = new Guid("119a19a7-4461-4cfe-9ec8-237f2bf25fca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            MarksId = new Guid("83ceb038-e468-4e0e-929b-35828fa36b44")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            MarksId = new Guid("96ab4539-ab00-4b53-9e97-7cf267b6b5dd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            MarksId = new Guid("d8e16c94-b7ab-453e-a85e-d06ac1630419")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            MarksId = new Guid("f6d35625-6a70-44f3-b5bd-ffb3514ca565")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            MarksId = new Guid("c58d97c0-1029-428a-9621-8da47274f281")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("d8e16c94-b7ab-453e-a85e-d06ac1630419")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("f6d35625-6a70-44f3-b5bd-ffb3514ca565")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("144a0329-f210-4d7a-8a9b-16d92535568c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("9bcb2f85-256e-42ab-85a3-513008fe1cd5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("3f961d75-415b-43c8-9f11-d572f0b2da4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("7811d080-77d7-42de-a38d-9c3b773f436d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            MarksId = new Guid("ab192631-b256-4a4e-92da-58c56d1fbdba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            MarksId = new Guid("c58d97c0-1029-428a-9621-8da47274f281")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            MarksId = new Guid("6e825c69-9014-4af7-9d3a-2d0be3d2f2fa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            MarksId = new Guid("31246acb-172f-43f1-b4cf-f58ef88e5a26")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            MarksId = new Guid("d8bc2bea-f0f8-4461-b432-6515da6a7024")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            MarksId = new Guid("1d491b50-943e-4227-9db7-b110a61a97e2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bad4ce07-aedb-490e-82b1-05bca1b0e5b2",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "641afc39-1942-4cef-bb5d-ab75ac721141",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "2c81beb7-93e1-4383-a48e-a2a101163102",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "69d549db-0c36-4962-905e-066e43654abf",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "0fd8dc40-17c5-419b-8742-9b8240b8c85c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c70ebf63-6f1d-439c-bcbd-e532f0f81893"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("90b4a42f-0a9e-43be-9380-ace4d439d5d4"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("db619d64-e526-40d9-bce5-b57f8e214c29"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("c7dd3a47-fc8f-42cf-85f4-2464f1f00192"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("850afdd2-71a3-45eb-9d35-ef1bd719174a"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("e07a5f0f-bfb7-4695-af5e-110ae85f5579"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ed06e45-4acd-4591-ac89-624434b778cd"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("943b5277-a85c-4bab-b8c0-c90ef0a036df"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18ba9055-9364-49e0-91b1-d49d8147ad99"),
                            ColumnId = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d1a5281f-03c2-4693-a322-8f4a1885c7ec"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("c92be2c0-d118-48de-a515-f10f69c16921"),
                            ColumnId = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d1a5281f-03c2-4693-a322-8f4a1885c7ec")
                        },
                        new
                        {
                            Id = new Guid("870d6735-2d7e-4e1e-804e-2cd1a8d92104"),
                            ColumnId = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4aa80564-5a89-4d62-bb31-e1e7b63430df"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("27d598c6-4129-4c93-9cc3-4239bb58ff74"),
                            ColumnId = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4aa80564-5a89-4d62-bb31-e1e7b63430df")
                        },
                        new
                        {
                            Id = new Guid("ed57bc2e-957e-478c-b583-4da1bdbcd01c"),
                            ColumnId = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e723aa6e-e639-42e6-a837-7a97fb530267"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("d9391137-055c-40ad-8190-030b7fda71a7"),
                            ColumnId = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e723aa6e-e639-42e6-a837-7a97fb530267")
                        },
                        new
                        {
                            Id = new Guid("299accfd-7ca7-4089-87ca-8c9904463f7d"),
                            ColumnId = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("afbf2e17-260c-4416-9891-31ba04c7815f"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("af326cdc-b8f7-4060-a315-df0f8f10e65b"),
                            ColumnId = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("afbf2e17-260c-4416-9891-31ba04c7815f")
                        },
                        new
                        {
                            Id = new Guid("2a2fa4a5-2387-49f2-97d2-5144869d8775"),
                            ColumnId = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0ff7c42b-6787-4160-8f94-178714889f7f"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("9f66ca31-e274-4a64-b60d-5a024604f560"),
                            ColumnId = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0ff7c42b-6787-4160-8f94-178714889f7f")
                        },
                        new
                        {
                            Id = new Guid("be7e0df5-5117-4dfd-8fd5-ca9c65cbdcad"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4a0ef3d4-3460-44ed-987e-7cb5d8420d6d"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("5c7321b9-0e94-42d0-90da-80414c266068"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4a0ef3d4-3460-44ed-987e-7cb5d8420d6d")
                        },
                        new
                        {
                            Id = new Guid("dee74c11-c5b0-42b3-b106-c7395c273b49"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("67a58556-790c-4f52-a967-1104653e5b61"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("3da5f10e-9d73-4ae0-9852-749e27e93e33"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("67a58556-790c-4f52-a967-1104653e5b61")
                        },
                        new
                        {
                            Id = new Guid("175a0612-b1ad-448b-81b9-75e19f50c6a7"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f43f2023-32f6-4442-abb1-1c8fb434abc7"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("7625816a-9cf0-4483-af3e-c149cb98f5d4"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f43f2023-32f6-4442-abb1-1c8fb434abc7")
                        },
                        new
                        {
                            Id = new Guid("0f2695eb-f76d-46e0-b40b-89e458a6bcb9"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("60138a17-4ccc-494f-8f87-e709b8ff4124"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("153eeafd-18fd-4006-916e-e36dc7299416"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("60138a17-4ccc-494f-8f87-e709b8ff4124")
                        },
                        new
                        {
                            Id = new Guid("fb3fbd26-a09a-469a-aa15-2a4613c86366"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2540adf5-9e7f-4c57-906c-fca05c612c99"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("2b396d89-d556-4c76-b32f-8468535e06ad"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2540adf5-9e7f-4c57-906c-fca05c612c99")
                        },
                        new
                        {
                            Id = new Guid("7e838f76-58c3-4fa0-945a-edb38c48add5"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3f3b7049-08e6-44c2-8a03-af6704723b4b"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("c3008741-4ff6-4bce-a817-4e8f921783ba"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3f3b7049-08e6-44c2-8a03-af6704723b4b")
                        },
                        new
                        {
                            Id = new Guid("6bc97190-bcba-430a-b1b1-a3cc48bcc496"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("92187743-ffa9-40a2-bd3c-c7ff87884b2d"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("d82c6796-c02a-4784-9108-47d1e9ead368"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("92187743-ffa9-40a2-bd3c-c7ff87884b2d")
                        },
                        new
                        {
                            Id = new Guid("c38ff011-5fdd-4231-9a1c-0da7aee0ae75"),
                            ColumnId = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5b370e40-3bbe-47d1-8fdd-9064988076d6"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("61b0cdf6-acc5-4881-8eb1-b85eccc2e0e0"),
                            ColumnId = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5b370e40-3bbe-47d1-8fdd-9064988076d6")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a674cf5-1414-41bc-94f2-23498bca4c8d"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("2d08a868-a1d4-4a47-8287-73e07e8fe725"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("3924ff7a-8d95-4821-9530-731823df2f42"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("9eb0f661-3095-4930-9391-ecab095056ab"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("acb3e833-f71d-4f83-8fbf-e3e08e5e329d"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("e4e44437-3cdf-4d34-b24e-7fec8c58e94e"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("43a83aa3-3ce0-40b0-8256-5b6fa582275d"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("25361e15-ecf7-4440-8004-165d785ceb6f"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("31f78f8d-7ff7-4a33-9563-358f77566ba1"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("66975f23-8763-46a6-b8af-1fed8d5eb2eb"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("06e8fc24-c5e3-43fe-90bc-0b5a63a9d342"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("86f3bf61-500e-4e5e-98a0-bfc8990e7bad"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("098ffa30-08db-429a-949c-6650cfcee0c8"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("0ea8ea89-88dd-45c4-be0b-3562d92b0dae"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("87e0ce90-2ff9-45ef-bce5-d3f899dfe06a"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("d4886012-5ddd-416e-9f57-572c199bd32e"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("017d3c14-9469-40e7-95a7-91be30de1244"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("1f7d8c90-c38d-43b6-8096-f757431d6411"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("f9ef3b3c-af5f-4bab-a469-43e166f432fd"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("696ce2c5-3b26-4d98-89f3-18c0ce60971a"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("062b7c5e-640d-424f-96ff-603084f24a9f"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("b62cc6a2-8945-4e91-a91c-ec0746a5ad2d"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("8b3bb22d-dde4-4ffe-a44b-54d48bb7fa90"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("01f1805a-48a2-41be-bf02-c1064628f4dd"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("aebf0d6e-00cc-4ab4-b4d1-3eedc8091e74"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("254540cf-c40a-4287-a992-5d9cd62b768a"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("2105dfd6-a71e-49f5-9da2-d84f47437b32")
                        },
                        new
                        {
                            Id = new Guid("5426197e-1323-4a8e-a68c-fa74e213a957"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("0ac06204-b76f-443f-8ea9-b42fc863d01b"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("c8dcc1b8-5a8a-4109-bd82-8557608fe2f7"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("9d4dc396-9d13-472b-a8cc-d3c07e9beedd"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("81be4f4b-1b66-4ded-a5e8-f7d228de38bb"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("f0f9933d-4a8b-4be7-9456-98bae8975b13"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("db55d553-4f31-4699-b4b8-bdcb6ebf62aa"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("b6b0facf-24ae-4f2d-a562-905281a79981"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("236f7e47-a803-4cde-bde7-4ce003d1d28b"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("4dbd095e-b611-4b8a-a1b5-135f5637bc98"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("76f0ed67-23f2-44df-b935-455977068b48"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("c7cabc5b-c8f9-4ed6-904a-e6ea24045b6a"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("12183f02-f501-4307-95b2-0dad60703163"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("49898a9a-4a23-4634-ac5a-e82de566125a"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("048c2e6a-8994-4af8-87b1-7b60d38c75f4"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("ba94d1fa-5428-495f-9549-4d611166fd09"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("47784eae-7851-48fc-8bb9-8ffe87d6af47"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("4fb52e6d-9395-4055-9ad8-d16f3e3a2525"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("0c587bda-abd4-4412-bc0c-268ebdaf4764"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("700fecb7-5ce7-477f-93aa-ca15e75133f2"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("857b7733-b0bc-412b-a6f0-82bddb1fe2c4"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("2bad6641-61a1-4102-8299-c46b993004dc"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("7fbe062c-ccc6-4a0e-b4fc-634cff98b3c8"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("bd9fdb21-6916-4c0a-8e03-d7300d245aeb"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("8a6780ea-5b63-48c7-bad1-72c52e558583"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("df18fa1e-1fcf-4073-8075-d7b1a62bbe6c"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("e4a18a7f-43e0-4adb-a3fd-3366d9c8991a"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("6134230f-32ac-460a-9444-01893e5d0b6c"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("34075954-39e0-41c0-abbd-ccfc4abff956"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad"),
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("f94f22f7-52b1-4350-9254-352a657b08df"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad"),
                            ValueTypeId = new Guid("f92cd2e7-5eed-4950-9949-f46c7729de92")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Checked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e8f2d62-0e2b-4aec-9647-4aa0d089b1e6"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf2cde37-b9de-4739-a0be-64dc3918a931"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("8493b7c8-1271-49c6-a2d2-0de79fb546ee"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("3bece2b8-5daa-456b-b664-e477e79615c6")
                        },
                        new
                        {
                            Id = new Guid("d54bc427-c324-4ab6-bf7e-95cdb900890d"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("a5b9c797-d3f0-4d6e-968b-d7d4bc0e8733"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("d5591869-90c6-45f8-bac6-355cf87d464d"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("f03af6b7-d3cf-49f8-b3ac-2e9691732a72"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("f9141d3f-66d7-4bea-9f75-d864eeaa0740"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("7cfd8f05-a1b7-499c-96bd-1773fbe67730"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("07a6a9b2-7916-4b40-ae2d-0d7f7a2cd59d"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("3d02e513-d5d4-4c4a-a74b-dae357c72389"),
                            EditBlockId = new Guid("d38aa548-7b1e-4448-a74f-595e2bb4a51e"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("2f7a7475-1d1e-4d54-96f4-e9183a910e0a"),
                            EditBlockId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            EditBlockId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("e13e9fff-3510-46ff-8329-17dfc7557161"),
                            EditBlockId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("8abdee5a-19e7-4ec0-af08-2c9d88844a46"),
                            EditBlockId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4")
                        },
                        new
                        {
                            Id = new Guid("8833e2db-7bec-4ded-ba3d-0036b7529fa6"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("b56c31f3-b126-4ce6-b7c0-3dcc22e1228d"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("2acc2aeb-f5aa-41c6-9a86-99cb2eb3dc30"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("630f78c8-5b67-401f-92bb-306848ac275f"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        },
                        new
                        {
                            Id = new Guid("eba011c1-10f1-476d-b255-4eac986b3e05"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ff50261-392e-41d9-9d69-463e8239ad28"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9")
                        },
                        new
                        {
                            Id = new Guid("b99e7ab7-885e-4b5f-b2cb-ed8f0fc73d56"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9")
                        },
                        new
                        {
                            Id = new Guid("5e778b0a-e542-4fc9-934c-c1491605ab4a"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("2acc2aeb-f5aa-41c6-9a86-99cb2eb3dc30"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8cc17e88-0af5-4cd9-a09a-e44cb3c36fbe"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("8833e2db-7bec-4ded-ba3d-0036b7529fa6"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a56f8f52-0f47-4c69-957f-5718d914b997"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("b56c31f3-b126-4ce6-b7c0-3dcc22e1228d"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("0585fa7e-b6e4-4e6f-9431-4f51f4e522d8"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd")
                        },
                        new
                        {
                            Id = new Guid("6be69bbe-386e-4de0-b3a1-9ec946b12084"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b")
                        },
                        new
                        {
                            Id = new Guid("b25c74c6-3ec6-47c8-9b84-81dd9ea73cd4"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db")
                        },
                        new
                        {
                            Id = new Guid("90be141c-713e-43e9-8beb-e57ff5ae0b16"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db")
                        },
                        new
                        {
                            Id = new Guid("119a19a7-4461-4cfe-9ec8-237f2bf25fca"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db")
                        },
                        new
                        {
                            Id = new Guid("83ceb038-e468-4e0e-929b-35828fa36b44"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("75874988-29ca-4b03-88dd-158483a577db")
                        },
                        new
                        {
                            Id = new Guid("96ab4539-ab00-4b53-9e97-7cf267b6b5dd"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f")
                        },
                        new
                        {
                            Id = new Guid("d8e16c94-b7ab-453e-a85e-d06ac1630419"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("f6d35625-6a70-44f3-b5bd-ffb3514ca565"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f")
                        },
                        new
                        {
                            Id = new Guid("c58d97c0-1029-428a-9621-8da47274f281"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d")
                        },
                        new
                        {
                            Id = new Guid("144a0329-f210-4d7a-8a9b-16d92535568c"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335")
                        },
                        new
                        {
                            Id = new Guid("9bcb2f85-256e-42ab-85a3-513008fe1cd5"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("630f78c8-5b67-401f-92bb-306848ac275f"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("3f961d75-415b-43c8-9f11-d572f0b2da4b"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("eba011c1-10f1-476d-b255-4eac986b3e05"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("7811d080-77d7-42de-a38d-9c3b773f436d"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352")
                        },
                        new
                        {
                            Id = new Guid("ab192631-b256-4a4e-92da-58c56d1fbdba"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352")
                        },
                        new
                        {
                            Id = new Guid("6e825c69-9014-4af7-9d3a-2d0be3d2f2fa"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd")
                        },
                        new
                        {
                            Id = new Guid("31246acb-172f-43f1-b4cf-f58ef88e5a26"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a")
                        },
                        new
                        {
                            Id = new Guid("d8bc2bea-f0f8-4461-b432-6515da6a7024"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("1d491b50-943e-4227-9db7-b110a61a97e2"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b42ba86d-b0d9-44ac-89f8-531e7caa0344"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("11bf2729-6ede-4a84-81c5-b84cd038a046"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("dc545ee8-4417-423d-b76b-6fb123570b15"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("cc8a9b5e-5e80-49bb-ada6-9f3e463dd5b5"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("27fb7a70-167c-40ff-86ba-9c5653124888"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b195cca1-47a6-4956-b40a-07709088a8eb"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("cb0db337-a7d1-472b-b0d0-017af20f9987"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1a5281f-03c2-4693-a322-8f4a1885c7ec"),
                            IsPrefilled = true,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            Id = new Guid("4aa80564-5a89-4d62-bb31-e1e7b63430df"),
                            IsPrefilled = true,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            Id = new Guid("e723aa6e-e639-42e6-a837-7a97fb530267"),
                            IsPrefilled = true,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            Id = new Guid("afbf2e17-260c-4416-9891-31ba04c7815f"),
                            IsPrefilled = true,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            Id = new Guid("0ff7c42b-6787-4160-8f94-178714889f7f"),
                            IsPrefilled = true,
                            TableId = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0")
                        },
                        new
                        {
                            Id = new Guid("4a0ef3d4-3460-44ed-987e-7cb5d8420d6d"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("67a58556-790c-4f52-a967-1104653e5b61"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("f43f2023-32f6-4442-abb1-1c8fb434abc7"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("60138a17-4ccc-494f-8f87-e709b8ff4124"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("2540adf5-9e7f-4c57-906c-fca05c612c99"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("3f3b7049-08e6-44c2-8a03-af6704723b4b"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("92187743-ffa9-40a2-bd3c-c7ff87884b2d"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        },
                        new
                        {
                            Id = new Guid("5b370e40-3bbe-47d1-8fdd-9064988076d6"),
                            IsPrefilled = true,
                            TableId = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0373a82c-78a9-4efd-8b2b-703a27561e62"),
                            FieldId = new Guid("2f7a7475-1d1e-4d54-96f4-e9183a910e0a"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("55dc3fa8-20d9-4405-9ad5-fee133fb31dc"),
                            FieldId = new Guid("2f7a7475-1d1e-4d54-96f4-e9183a910e0a"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("39f61ce5-008f-4ef2-88f4-fc73379e7ea9"),
                            FieldId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("6cae46de-7391-422e-bc82-30834d732bf3"),
                            FieldId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("beced41c-518c-41a2-b2e5-9144551db9b5"),
                            FieldId = new Guid("24f644b8-d2bb-48d2-9cbb-92881fab217e"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("586c5170-1e1b-4a53-812c-a080c64f3ad3"),
                            ColumnId = new Guid("3924ff7a-8d95-4821-9530-731823df2f42"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("69d09be3-60ef-4e1f-a712-7ccc35829a91"),
                            ColumnId = new Guid("3924ff7a-8d95-4821-9530-731823df2f42"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("1a991566-9682-4a74-8c77-d0b0cc7f400a"),
                            ColumnId = new Guid("3924ff7a-8d95-4821-9530-731823df2f42"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("8e04ade1-0cc0-457a-8106-b729a534665f"),
                            ColumnId = new Guid("b62cc6a2-8945-4e91-a91c-ec0746a5ad2d"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("897331ae-d236-47a0-958f-456b6a190f09"),
                            ColumnId = new Guid("b62cc6a2-8945-4e91-a91c-ec0746a5ad2d"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("24251d8a-67f7-4ed0-8567-a741caeeca4e"),
                            ColumnId = new Guid("b62cc6a2-8945-4e91-a91c-ec0746a5ad2d"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("7ef60be8-4ac3-47f9-b36b-7968fe0aa876"),
                            ColumnId = new Guid("81be4f4b-1b66-4ded-a5e8-f7d228de38bb"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("a8837484-f5a4-43db-8e21-9fe6c1cabeef"),
                            ColumnId = new Guid("81be4f4b-1b66-4ded-a5e8-f7d228de38bb"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("4891b7bf-a171-4bab-a3cb-882e705af9e2"),
                            ColumnId = new Guid("700fecb7-5ce7-477f-93aa-ca15e75133f2"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("a8906fa7-5706-4300-af9a-d13489bb6616"),
                            ColumnId = new Guid("700fecb7-5ce7-477f-93aa-ca15e75133f2"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("1641c800-e85a-4c79-a0b8-1dfc7f9b7361"),
                            ColumnId = new Guid("2bad6641-61a1-4102-8299-c46b993004dc"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("5cf56b23-a0c9-47be-918f-16ce0f14798a"),
                            ColumnId = new Guid("2bad6641-61a1-4102-8299-c46b993004dc"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("ec26aa03-5a78-4a14-a6ad-aa96d1979423"),
                            ColumnId = new Guid("2bad6641-61a1-4102-8299-c46b993004dc"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("448f7cd5-aff9-4d61-a8b6-c5502f49637d"),
                            ColumnId = new Guid("df18fa1e-1fcf-4073-8075-d7b1a62bbe6c"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("909b54b0-67f5-4820-a664-528b98f0c631"),
                            ColumnId = new Guid("df18fa1e-1fcf-4073-8075-d7b1a62bbe6c"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("d2eb4998-1fc1-4cee-ab17-cac0fefebfb9"),
                            ColumnId = new Guid("df18fa1e-1fcf-4073-8075-d7b1a62bbe6c"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("51f4f085-0fa1-42bd-b6da-5c0165995533"),
                            ColumnId = new Guid("01f1805a-48a2-41be-bf02-c1064628f4dd"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("496ca4b4-be42-4505-ab4b-4713cb6fe2dc"),
                            ColumnId = new Guid("01f1805a-48a2-41be-bf02-c1064628f4dd"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("8b455d0a-fe28-4fab-89ce-5ab62d96404e"),
                            ColumnId = new Guid("0ac06204-b76f-443f-8ea9-b42fc863d01b"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d967fa54-70dd-4bdd-953d-a69d22814236"),
                            ColumnId = new Guid("0ac06204-b76f-443f-8ea9-b42fc863d01b"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("00676f98-302f-4b72-b29d-87008f3ebc6d"),
                            ColumnId = new Guid("c7cabc5b-c8f9-4ed6-904a-e6ea24045b6a"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("fa1b459c-fe8e-4a1e-b6ca-7170d1984fe8"),
                            ColumnId = new Guid("c7cabc5b-c8f9-4ed6-904a-e6ea24045b6a"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("bf3f7e38-3dc5-4ca6-8e5c-7fe4baa46589"),
                            FieldId = new Guid("e13e9fff-3510-46ff-8329-17dfc7557161"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("823fd51a-0444-4f93-b98e-264bedb60900"),
                            FieldId = new Guid("e13e9fff-3510-46ff-8329-17dfc7557161"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f06867dc-a522-45c1-abb7-45d74c25e95f"),
                            EditBlockId = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("f60950f5-80de-4965-9905-4ac1bda2a81d"),
                            EditBlockId = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("96835141-e62f-4cea-ba74-6fcd7a2d14a9"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7954dce9-b3ab-4145-8700-93cbdba4b5cd"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c5f5a2de-f3be-47b5-910a-f3494d5c1a5f"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("75874988-29ca-4b03-88dd-158483a577db"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("8dc37210-6e69-4288-bfbe-4050c2d1164f"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("f0f1891a-72a8-4de5-87b5-33111e1aa16b"),
                            EditBlockId = new Guid("01612f4e-97fd-456c-82b0-27b44b54f565"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("a8202e6a-c89d-4631-98a5-7db5490a6335"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("ff874513-9b33-4942-95b5-ff6d15819dd0"),
                            EditBlockId = new Guid("bf7d61b0-6590-4959-810d-b7f30b49e996"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("21946e83-3c62-40a1-b724-e1f7e4cbf352"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("f47ea8f1-8d76-446e-995b-1d3e966d72cd"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("ebfd4a20-ae4f-4e29-8f56-71213dd1687a"),
                            EditBlockId = new Guid("fd99a8cd-69df-484a-b210-5fdfe8885820"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("02a509bb-6a9a-4982-93e0-9a1217da81ad"),
                            EditBlockId = new Guid("421b1845-5ad8-4b1f-a6c2-3a302e1f18a8"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27dd1a5a-f746-4388-9d7b-22b5ce691fc4"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7aa927cb-6012-4c7a-8ba9-6e745de64f2f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cda93755-14ea-4ed0-aa00-4bf00a1a99c8"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("c0d9912a-11ef-4fec-9a36-0b1ac95e18e4"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("2105dfd6-a71e-49f5-9da2-d84f47437b32"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("3bece2b8-5daa-456b-b664-e477e79615c6"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("f92cd2e7-5eed-4950-9949-f46c7729de92"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
