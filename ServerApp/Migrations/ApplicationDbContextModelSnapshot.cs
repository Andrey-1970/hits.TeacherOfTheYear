// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            EditBlocksId = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            EditBlocksId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            EditBlocksId = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            EditBlocksId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("dec7c50e-159c-4a33-8c10-6ae7eab9cef5"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("c3bc5252-b4a8-4770-8600-4fcc879f5931"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("3d261b2d-5712-47db-a982-d51b7eb76aa5"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("366e943f-f9fb-49b9-b97a-fd45785211d1"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("066c0316-8a53-4a63-966a-2fb92c5e6942"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("6972e48f-2e19-4003-a817-c19816093218"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("1aa3dd0a-d5c3-4707-8b76-bdd6f281608f"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("448191f3-500f-4fdf-8c94-4423da92a999"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("799a6c2c-a463-436b-8114-e74751db3567"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("c889e901-2a92-4870-b4d5-83cc7f768468"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("4dcd7230-b9b3-4386-9df7-8de1dc999e66"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("2f00c35b-196e-4220-8e05-e41f470b1faa"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("386b4d0c-415a-44ae-b0ff-96d0664208b9"),
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8")
                        },
                        new
                        {
                            FieldsId = new Guid("1e80c81a-0f98-4c6d-8c1b-366729adcadc"),
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4")
                        },
                        new
                        {
                            FieldsId = new Guid("790ab317-974a-4d72-92b6-1b7447853a8d"),
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4")
                        },
                        new
                        {
                            FieldsId = new Guid("c08ec9d8-54c3-4953-b8d8-83da6b84c391"),
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4")
                        },
                        new
                        {
                            FieldsId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b")
                        },
                        new
                        {
                            FieldsId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204")
                        },
                        new
                        {
                            FieldsId = new Guid("b82d32e4-78c1-4370-b6bc-1e986295b8b8"),
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204")
                        },
                        new
                        {
                            FieldsId = new Guid("ef5d92b2-3f99-4373-ae42-c332ada51e9d"),
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            TablesId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            TablesId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            TablesId = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            TablesId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            TablesId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            TablesId = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            TablesId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            TablesId = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            TablesId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            TablesId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            TablesId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            TablesId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            TablesId = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            TablesId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            TablesId = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            TablesId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            TracksId = new Guid("42490083-2b0a-4fb7-968e-783f3059e926")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            TracksId = new Guid("87208b10-2eba-4975-978e-1a8a3e929876")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("a84005eb-1779-4496-b7d4-79cf9d5c6f61")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("343d9e29-0c85-4efc-94b2-8ca5b22246b7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("9ffbda46-c558-416b-b41e-f8179139802b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("3ae5a79c-8f1e-41e2-a358-92778583be9d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("21242f99-fe94-4af7-909f-a90c3921121c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("482076aa-859b-45ee-a710-75848bacc3bc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            MarksId = new Guid("2ec4594f-fec6-4f64-94de-d4038be47b35")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            MarksId = new Guid("93be4bfe-bdf6-40ee-a84a-7880dde12772")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            MarksId = new Guid("f84c0231-2709-4501-bdc2-c6e5d92b5419")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            MarksId = new Guid("f1b03f4c-0ad4-4597-bbd5-a478c0fd57d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            MarksId = new Guid("1f6f6273-ee1f-4c21-8da2-7b278fe2d5a9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            MarksId = new Guid("cc67a686-d5ec-4242-8278-a28419fb8ea2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            MarksId = new Guid("266fe377-ffdb-4f3d-854d-727f25a38559")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            MarksId = new Guid("e01f2eb4-f5ec-4cf7-8509-8aa7fd324e89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            MarksId = new Guid("29d803f9-0c97-4ab3-9f96-d0956e0fd904")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("266fe377-ffdb-4f3d-854d-727f25a38559")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("e01f2eb4-f5ec-4cf7-8509-8aa7fd324e89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("c1a455df-a6ee-440d-9d80-1071af65f3a8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("fec459ca-d0c1-4164-b568-334999f414f3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("851f2eda-4b50-43e2-9a41-ea66aa408c84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("aa8b667b-6133-4c13-bda9-7e2e38230f8d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            MarksId = new Guid("1df82884-b2e3-4bef-8df6-3dfb6d256d38")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            MarksId = new Guid("29d803f9-0c97-4ab3-9f96-d0956e0fd904")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            MarksId = new Guid("052d7de8-84dc-4272-b11e-e175658c89ed")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            MarksId = new Guid("e447b18c-c592-46e1-94f6-352673750f42")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            MarksId = new Guid("97f01ee3-5f54-4f6b-aae2-721ddc4ff279")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            MarksId = new Guid("6e94f099-3820-4b80-82ec-748ad0907cef")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7bbf4c5e-1f09-4e7b-989e-38da706ae389",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "d412f2db-c470-48c4-af6b-48cb526c9a48",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "303798bc-123d-4d29-a90b-bd5e01894b35",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "97055bad-06da-498a-988e-7a75d1b09459",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "5b669d73-7508-4763-8cf0-32cd83eced24",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a76e94f-2546-4396-b736-22ebe111b88a"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("7b625e48-beee-4ee8-a506-10036a5e65a4"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9f4eb9c3-d6b5-4e95-99a6-65ca0e5f9797"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("5d765973-071c-40cc-8558-db10009b5024"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("40636cd6-e8ae-4b5b-bc06-f29adf1b30e3"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("59b23276-76d2-470b-9a4c-1cbb29e00d9d"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6cd1e44f-3e5a-4be7-bbbf-60efdb976454"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ca7e113b-0f70-4ea4-be0e-0c9ca7403f23"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0623258-1dab-468e-88a2-df5da04f3b9d"),
                            ColumnId = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4699176d-ee88-4d28-b760-36c41d0eaee9"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("cfbc7c4d-f3b2-4b2b-80d6-ee2f5342ca96"),
                            ColumnId = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4699176d-ee88-4d28-b760-36c41d0eaee9")
                        },
                        new
                        {
                            Id = new Guid("17154216-8e73-4516-9f09-9a7b82666033"),
                            ColumnId = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fd822556-7cce-4728-a1c6-2aeac15ae4d8"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("752c0c5a-1db2-49d7-81fa-d41ab8063d7c"),
                            ColumnId = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fd822556-7cce-4728-a1c6-2aeac15ae4d8")
                        },
                        new
                        {
                            Id = new Guid("9c5f8d33-c658-463d-b6f5-63e3c31dc371"),
                            ColumnId = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("cbad16e6-3792-48af-8cee-4266aa879caa"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("31337694-18a9-4ff1-901b-c20d16f6a0b3"),
                            ColumnId = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("cbad16e6-3792-48af-8cee-4266aa879caa")
                        },
                        new
                        {
                            Id = new Guid("0823127c-6cf8-4cbf-9edf-43ca0548ecb8"),
                            ColumnId = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("402b5da1-e546-48d3-a529-e5ae52f54d1e"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("ab3713ab-8cca-4472-953d-0d2c3d17b96a"),
                            ColumnId = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("402b5da1-e546-48d3-a529-e5ae52f54d1e")
                        },
                        new
                        {
                            Id = new Guid("f1dd36a4-36a6-4de7-80b9-548d42517ade"),
                            ColumnId = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ec9d3934-94a5-41a2-9469-558a9432d81f"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("145312c3-2335-40c2-b4e2-93512eaa0a58"),
                            ColumnId = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ec9d3934-94a5-41a2-9469-558a9432d81f")
                        },
                        new
                        {
                            Id = new Guid("fc9a44eb-4ac9-4457-bf2c-1b504911514f"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a07bf6ea-47c5-4705-b653-5b3dfc5386f5"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("0de192bd-d66d-476c-b6e2-14fd3e6d1153"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a07bf6ea-47c5-4705-b653-5b3dfc5386f5")
                        },
                        new
                        {
                            Id = new Guid("4dced5e1-f634-47fb-9915-c2384b601be1"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c82e5949-f6b4-4724-a1b3-b439d8a3c30c"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("ed38e704-3623-492c-8cb0-330b327c2061"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c82e5949-f6b4-4724-a1b3-b439d8a3c30c")
                        },
                        new
                        {
                            Id = new Guid("686c10d0-8b20-418b-80d1-99ce2ad0793d"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fcb9a4f1-c2cc-486c-9b48-c0378d9195a5"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("fd17168c-b333-4c6b-ab17-9ec732153d60"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fcb9a4f1-c2cc-486c-9b48-c0378d9195a5")
                        },
                        new
                        {
                            Id = new Guid("3aef29c7-eb81-4191-bd87-fbccf88c980f"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3c46ded4-d623-4ab9-9032-0a2e927b2dd7"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("569a3a77-374f-46e0-a942-564abf2cc540"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3c46ded4-d623-4ab9-9032-0a2e927b2dd7")
                        },
                        new
                        {
                            Id = new Guid("748f3d80-0a2b-4a7f-a5ba-0f47c487a73f"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("de535381-df07-407c-8503-99925e7b3ab2"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("d1bb0090-6057-456a-8e40-100a809dbb82"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("de535381-df07-407c-8503-99925e7b3ab2")
                        },
                        new
                        {
                            Id = new Guid("3219923e-bf00-491d-835d-508b2ce401e5"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4624369a-47bb-4e1c-8382-9af732c6b532"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("160fa53f-dae2-4905-921d-1c5c6692e901"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4624369a-47bb-4e1c-8382-9af732c6b532")
                        },
                        new
                        {
                            Id = new Guid("6b7bc4a4-4c1e-453f-a256-00dc08edf63c"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("40f22299-5c5a-49d9-8539-d0cfa4ec1a39"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("2cc6202d-319b-47f3-94d9-aec4462ae9cf"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("40f22299-5c5a-49d9-8539-d0cfa4ec1a39")
                        },
                        new
                        {
                            Id = new Guid("28bf6b08-0a44-458f-878d-8da31f0dcdf1"),
                            ColumnId = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8d600746-6328-4a27-82cc-9ad37258abbd"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("9288735c-170d-4a33-ba18-511f9801dcf0"),
                            ColumnId = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8d600746-6328-4a27-82cc-9ad37258abbd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b5c9022-009d-4e8b-9d4a-553e85790fa5"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("240fa670-91a1-4b1b-a71f-66dd6b4ebc6b"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("e5fffa64-1afd-47d9-84b2-8ec5a47a9688"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("979072dd-8e1d-452e-8b3d-87a8c478e7e8"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("5243d1f2-be6e-4f43-80a6-29050c4f9808"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("bba9c0f0-2ee6-41be-96dc-80c50873ab85"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("e781c0f9-4459-43cd-b13a-a72d9bb43576"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("d1326e90-55c8-46d7-b809-30121eb1cb22"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("32f68b52-be5b-42de-b475-d043649ba488"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("96c155df-ed12-4b6d-a564-62708cc9329e"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("2153a756-d463-437a-8dfd-76ab075286cf"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("78fef200-c2ff-4d2b-b6c7-3c0850d5f964"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("8dcf67f3-aa01-4887-a7a8-3b12f21397f3"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("78fe2232-f5d5-41af-a378-ab2b3f73dcf2"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("91dd13e5-e646-4d2f-af65-f950b458df83"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("17157ba7-4297-4555-8b70-369dc1cbae0d"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("d4ccb932-671c-4588-90fd-f1ccd9593652"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("5e61e78a-1f1e-4e19-bd2b-ee3c1bf7475a"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("031e4aef-7c11-4679-95a2-8df63f04f7cd"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("5a9b906e-d838-4a8a-8471-a7cda330bd69"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("76a011d8-6868-456e-96a0-09ac336e05e8"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("a14943c0-143b-4a26-b016-d49cbc0e0cb9"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("d59ef7db-7a0e-488e-87e2-7fe38857724d"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("b95d8c1e-4e59-47e7-ac2c-a3671fbc2982"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("d193ae17-9cd1-40de-8b5b-f697ceadc227"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("72a73d9b-5811-4bd4-a1e7-c904a4d492ca"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("7a248a1e-1a44-4c90-b761-a2354275ec1d")
                        },
                        new
                        {
                            Id = new Guid("cf485c92-7295-4e7e-8617-70560cc3392f"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("2ed3b8ec-4511-4365-8f17-077a01139d07"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("f937d905-7379-4d93-b5ba-cd1fd3eea41a"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("adbedf1d-84af-4e34-b7ea-21ebf778ea5b"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("992795f8-24a4-483a-b653-8fd8cfca517f"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("f6c16329-ae75-4aa9-bb1d-117e7d1e0d1f"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("7b176b10-1311-4c2b-999d-62ed097e2561"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("128244e6-a819-4c06-806c-b4848f14632c"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("2a163d1c-e900-4cc2-b6b5-46b011624792"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("092a8001-fa46-4812-967d-5326b445fce9"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("3c9ac657-94c1-4c30-9885-ecdf98e0ba18"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("d31b724c-f15a-4917-9338-a5fbf964e8cd"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("2fbc48b7-d5cc-4806-9d5d-8e926b131687"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("24f683dd-7f63-44cd-b1f0-fec5fb7de11e"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("58ad34d8-d732-42c3-8817-12d1f457f3d4"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("952cb942-7ba5-413e-97b4-0644607fd751"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("902428fa-53d4-4d97-9851-9aae0f3030a1"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("034cad1a-6e84-4801-a456-40f1f5efe2aa"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("d9c94ea9-1562-42e4-91ba-86aa694502b2"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("f5cb45c0-0a4b-45f8-9c09-097e8728b11f"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("0316691c-fdf3-428e-be02-b1d3744426d2"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("04b8e9a5-ef53-4481-80da-da0d8fae6cc6"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("9a844693-a658-4557-87ae-5db35af5fcfb"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("c3c72a8f-e6b2-47df-970e-8de5bf48b594"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("5d9bd5b9-1fce-4cc6-a35e-b73ad8238d89"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("ac3f6654-e276-460f-8041-f469adfdacd7"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("95ab4c33-5f49-4869-885f-ebaf8c716a8c"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("912b422e-3f21-4c14-bba9-3ada9287f8a4"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("3e5831b7-8cf0-4b52-be1f-56d148bf9065"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef"),
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("938cb110-a064-48dc-bdc4-165ec871d2b0"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef"),
                            ValueTypeId = new Guid("a29c10b5-e74c-454c-b284-4bb03e023da7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dec7c50e-159c-4a33-8c10-6ae7eab9cef5"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("c3bc5252-b4a8-4770-8600-4fcc879f5931"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("a3d4d7de-5d4a-4e2f-b7b4-47c1b320b38a")
                        },
                        new
                        {
                            Id = new Guid("3d261b2d-5712-47db-a982-d51b7eb76aa5"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("366e943f-f9fb-49b9-b97a-fd45785211d1"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("066c0316-8a53-4a63-966a-2fb92c5e6942"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("6972e48f-2e19-4003-a817-c19816093218"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("1aa3dd0a-d5c3-4707-8b76-bdd6f281608f"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("448191f3-500f-4fdf-8c94-4423da92a999"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("799a6c2c-a463-436b-8114-e74751db3567"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("c889e901-2a92-4870-b4d5-83cc7f768468"),
                            EditBlockId = new Guid("f84f1f1a-140d-4304-9c3c-2b18436f01f4"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("4dcd7230-b9b3-4386-9df7-8de1dc999e66"),
                            EditBlockId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            EditBlockId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("2f00c35b-196e-4220-8e05-e41f470b1faa"),
                            EditBlockId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("386b4d0c-415a-44ae-b0ff-96d0664208b9"),
                            EditBlockId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6")
                        },
                        new
                        {
                            Id = new Guid("1e80c81a-0f98-4c6d-8c1b-366729adcadc"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("790ab317-974a-4d72-92b6-1b7447853a8d"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("c08ec9d8-54c3-4953-b8d8-83da6b84c391"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("b82d32e4-78c1-4370-b6bc-1e986295b8b8"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        },
                        new
                        {
                            Id = new Guid("ef5d92b2-3f99-4373-ae42-c332ada51e9d"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a84005eb-1779-4496-b7d4-79cf9d5c6f61"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627")
                        },
                        new
                        {
                            Id = new Guid("343d9e29-0c85-4efc-94b2-8ca5b22246b7"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627")
                        },
                        new
                        {
                            Id = new Guid("9ffbda46-c558-416b-b41e-f8179139802b"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("c08ec9d8-54c3-4953-b8d8-83da6b84c391"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("3ae5a79c-8f1e-41e2-a358-92778583be9d"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("1e80c81a-0f98-4c6d-8c1b-366729adcadc"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("21242f99-fe94-4af7-909f-a90c3921121c"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("790ab317-974a-4d72-92b6-1b7447853a8d"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("482076aa-859b-45ee-a710-75848bacc3bc"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02")
                        },
                        new
                        {
                            Id = new Guid("2ec4594f-fec6-4f64-94de-d4038be47b35"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a")
                        },
                        new
                        {
                            Id = new Guid("93be4bfe-bdf6-40ee-a84a-7880dde12772"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033")
                        },
                        new
                        {
                            Id = new Guid("f84c0231-2709-4501-bdc2-c6e5d92b5419"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033")
                        },
                        new
                        {
                            Id = new Guid("f1b03f4c-0ad4-4597-bbd5-a478c0fd57d1"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033")
                        },
                        new
                        {
                            Id = new Guid("1f6f6273-ee1f-4c21-8da2-7b278fe2d5a9"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033")
                        },
                        new
                        {
                            Id = new Guid("cc67a686-d5ec-4242-8278-a28419fb8ea2"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02")
                        },
                        new
                        {
                            Id = new Guid("266fe377-ffdb-4f3d-854d-727f25a38559"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("e01f2eb4-f5ec-4cf7-8509-8aa7fd324e89"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0")
                        },
                        new
                        {
                            Id = new Guid("29d803f9-0c97-4ab3-9f96-d0956e0fd904"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a")
                        },
                        new
                        {
                            Id = new Guid("c1a455df-a6ee-440d-9d80-1071af65f3a8"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e")
                        },
                        new
                        {
                            Id = new Guid("fec459ca-d0c1-4164-b568-334999f414f3"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("b82d32e4-78c1-4370-b6bc-1e986295b8b8"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("851f2eda-4b50-43e2-9a41-ea66aa408c84"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("ef5d92b2-3f99-4373-ae42-c332ada51e9d"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("aa8b667b-6133-4c13-bda9-7e2e38230f8d"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6")
                        },
                        new
                        {
                            Id = new Guid("1df82884-b2e3-4bef-8df6-3dfb6d256d38"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6")
                        },
                        new
                        {
                            Id = new Guid("052d7de8-84dc-4272-b11e-e175658c89ed"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022")
                        },
                        new
                        {
                            Id = new Guid("e447b18c-c592-46e1-94f6-352673750f42"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b")
                        },
                        new
                        {
                            Id = new Guid("97f01ee3-5f54-4f6b-aae2-721ddc4ff279"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("6e94f099-3820-4b80-82ec-748ad0907cef"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f57699dc-f591-4c43-be17-bdb3e54407d8"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("018546a7-1999-4648-8494-cef7ae2a41a4"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b2c56947-3193-4a85-86c9-e4225acb6c13"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8c82806f-46ec-477c-b0c2-edec8f105c8b"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("42c01d27-3edd-4871-ac8c-dc10c05c9204"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b78d4cd3-c30d-4336-8b32-6db3b072b0a7"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("deb64947-8cca-4cc6-b2d7-aa068876d1f0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4699176d-ee88-4d28-b760-36c41d0eaee9"),
                            IsPrefilled = true,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            Id = new Guid("fd822556-7cce-4728-a1c6-2aeac15ae4d8"),
                            IsPrefilled = true,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            Id = new Guid("cbad16e6-3792-48af-8cee-4266aa879caa"),
                            IsPrefilled = true,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            Id = new Guid("402b5da1-e546-48d3-a529-e5ae52f54d1e"),
                            IsPrefilled = true,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            Id = new Guid("ec9d3934-94a5-41a2-9469-558a9432d81f"),
                            IsPrefilled = true,
                            TableId = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2")
                        },
                        new
                        {
                            Id = new Guid("a07bf6ea-47c5-4705-b653-5b3dfc5386f5"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("c82e5949-f6b4-4724-a1b3-b439d8a3c30c"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("fcb9a4f1-c2cc-486c-9b48-c0378d9195a5"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("3c46ded4-d623-4ab9-9032-0a2e927b2dd7"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("de535381-df07-407c-8503-99925e7b3ab2"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("4624369a-47bb-4e1c-8382-9af732c6b532"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("40f22299-5c5a-49d9-8539-d0cfa4ec1a39"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        },
                        new
                        {
                            Id = new Guid("8d600746-6328-4a27-82cc-9ad37258abbd"),
                            IsPrefilled = true,
                            TableId = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5103ad-ef50-4968-9ce6-f00864804e9f"),
                            FieldId = new Guid("4dcd7230-b9b3-4386-9df7-8de1dc999e66"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("719248d1-b720-41b8-98c5-73643a5245c5"),
                            FieldId = new Guid("4dcd7230-b9b3-4386-9df7-8de1dc999e66"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("e2db9f05-175c-42b8-a0c9-61479937bd10"),
                            FieldId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("644512d2-a8ac-4660-938b-799d381cf6d5"),
                            FieldId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("5b50eb8a-a674-41a2-814b-69d2b721b9c8"),
                            FieldId = new Guid("539522a2-3453-4500-94aa-74b66a9a6fca"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("1226f498-e3c9-412c-bdbc-86061a1a32cf"),
                            ColumnId = new Guid("e5fffa64-1afd-47d9-84b2-8ec5a47a9688"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("1244bfd3-4a41-459b-83ea-d5352a0977cb"),
                            ColumnId = new Guid("e5fffa64-1afd-47d9-84b2-8ec5a47a9688"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("269fe772-81ac-49e8-a107-38fa6abfef7e"),
                            ColumnId = new Guid("e5fffa64-1afd-47d9-84b2-8ec5a47a9688"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("c3f78573-bc54-4840-bd65-6d21c7cafbf8"),
                            ColumnId = new Guid("a14943c0-143b-4a26-b016-d49cbc0e0cb9"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("e55d1792-c1ce-419f-8309-9ba870c00f58"),
                            ColumnId = new Guid("a14943c0-143b-4a26-b016-d49cbc0e0cb9"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("997dbdb2-67bf-4230-8ab6-df441647257a"),
                            ColumnId = new Guid("a14943c0-143b-4a26-b016-d49cbc0e0cb9"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("2fc60c81-8213-49ff-8af4-30fc2234175d"),
                            ColumnId = new Guid("992795f8-24a4-483a-b653-8fd8cfca517f"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("2f58785f-6720-4758-a07e-3cb244723684"),
                            ColumnId = new Guid("992795f8-24a4-483a-b653-8fd8cfca517f"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("ab231df2-815f-4df6-9c62-c063651a98ce"),
                            ColumnId = new Guid("f5cb45c0-0a4b-45f8-9c09-097e8728b11f"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("981cfba2-68d2-440d-9b46-0a028f92f6de"),
                            ColumnId = new Guid("f5cb45c0-0a4b-45f8-9c09-097e8728b11f"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("3cf4b9a2-839e-4fbd-90bd-bae80d47ab49"),
                            ColumnId = new Guid("04b8e9a5-ef53-4481-80da-da0d8fae6cc6"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("b056f941-8b0f-4f09-9051-7fcb855ee381"),
                            ColumnId = new Guid("04b8e9a5-ef53-4481-80da-da0d8fae6cc6"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("8e6b696b-9243-462a-b782-2776d309b878"),
                            ColumnId = new Guid("04b8e9a5-ef53-4481-80da-da0d8fae6cc6"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("9a7e3d84-e2e1-4131-82b5-09c6d1f38665"),
                            ColumnId = new Guid("ac3f6654-e276-460f-8041-f469adfdacd7"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("4f2d61a3-7d9e-45ae-b3d0-0455b08780a0"),
                            ColumnId = new Guid("ac3f6654-e276-460f-8041-f469adfdacd7"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("97f6675c-70ef-4f7f-8a43-c6e6f406e788"),
                            ColumnId = new Guid("ac3f6654-e276-460f-8041-f469adfdacd7"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("a91ebddd-f383-4afc-9131-490228c233f8"),
                            ColumnId = new Guid("b95d8c1e-4e59-47e7-ac2c-a3671fbc2982"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("cd2e388d-ad86-44a1-a7a5-ca37b994673d"),
                            ColumnId = new Guid("b95d8c1e-4e59-47e7-ac2c-a3671fbc2982"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("fc570c34-1e1b-4863-813c-06a889fc8925"),
                            ColumnId = new Guid("2ed3b8ec-4511-4365-8f17-077a01139d07"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6a499123-640d-4682-bfca-8db3947858a6"),
                            ColumnId = new Guid("2ed3b8ec-4511-4365-8f17-077a01139d07"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("1faf2980-619c-4997-800d-45ffd81e2b86"),
                            ColumnId = new Guid("d31b724c-f15a-4917-9338-a5fbf964e8cd"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("956f58f4-61c6-4c7c-949e-3b89cc8cbb8b"),
                            ColumnId = new Guid("d31b724c-f15a-4917-9338-a5fbf964e8cd"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("a72fd8b6-b2df-4da7-9dc2-fcfde2672240"),
                            FieldId = new Guid("2f00c35b-196e-4220-8e05-e41f470b1faa"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("602aa267-1836-4fd2-a34a-07f042a12990"),
                            FieldId = new Guid("2f00c35b-196e-4220-8e05-e41f470b1faa"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d9ded89-cb5a-43fa-88ea-bf561c5bd0c0"),
                            EditBlockId = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cb4c120c-f010-4377-b1cf-09ce7154f04a"),
                            EditBlockId = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("56eba3e8-2e73-47dd-b9d2-673e4bde0627"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("383f5eaf-7fbf-4971-85cf-e62bd37dee02"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("d5a7193f-2d99-4116-bac2-8a1905c0765c"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("18f5e8e8-0edf-48f7-92f3-56e41b1a6033"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("9a259727-1e5a-4b2a-9d9f-a34ba39a3b02"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("a3a6fe17-71c2-406d-9b51-0f6164c4279a"),
                            EditBlockId = new Guid("912b46ce-2a54-4496-889c-92cf69749b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("a6bdfdf4-fe5f-47b1-93b3-a40e738c454e"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("6970f8e4-c3b2-4fe5-b90b-e5b9e07f3db2"),
                            EditBlockId = new Guid("75471bdc-c4f7-4c1a-bcfe-dcd552a66325"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("59308806-313b-4d9a-8e70-d99114b35bc6"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("2029b074-fd67-43de-b5a9-59e6c2777022"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("47455c8e-ff7c-457f-a3d0-56713242210b"),
                            EditBlockId = new Guid("2633d2f7-9d3e-42fc-997d-e102e0358ed7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("50a2302d-6a17-46fc-b8d4-ece0df6381ef"),
                            EditBlockId = new Guid("3261204d-6cee-47c7-8720-d0b1094ab99a"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42490083-2b0a-4fb7-968e-783f3059e926"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("87208b10-2eba-4975-978e-1a8a3e929876"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a52aabd5-9950-4fa3-8d6b-aa2d1e3cddfa"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("13c5141f-1803-4281-b7cf-2e06f7131ba6"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("7a248a1e-1a44-4c90-b761-a2354275ec1d"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("a3d4d7de-5d4a-4e2f-b7b4-47c1b320b38a"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("a29c10b5-e74c-454c-b284-4bb03e023da7"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
