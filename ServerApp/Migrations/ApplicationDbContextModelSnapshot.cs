// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fab9f7b9-7792-46f2-a31d-ab1f23632fb4"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            EditBlocksId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            EditBlocksId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fab9f7b9-7792-46f2-a31d-ab1f23632fb4"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("3397badb-655d-4aa0-9d29-86c1ca7a9781"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("4ae741c5-797e-42df-8bb8-801d4564946c"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("04f2e548-f489-4607-8049-8eaf3379de7d"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("bc2ff45a-9df8-4c7d-a18c-fd0277405258"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("c016ceac-b7bb-4741-b9ab-14233f1bbc01"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("1355e8cc-46bb-4e7b-b7c8-c076ead498ef"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("945fe82d-9f24-4edd-8fa0-e7f425760e9d"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("a96ceb7a-05ee-4a71-9034-30b305fbe95b"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("11badcb7-dcd2-4ce8-8fcb-331f993d0c6e"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("b7ccb597-ad18-402f-9b65-d5735a2810fc"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("3225dcc5-2a90-46f1-aba9-ae32c13545c7"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("e05e46c5-4c4c-4c5a-8f04-1ab86070c3ff"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("da15fef0-c15c-460e-b7d9-c86610cf24a9"),
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4")
                        },
                        new
                        {
                            FieldsId = new Guid("c87a13a1-3fc0-41b8-8cf3-e1871426a13b"),
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863")
                        },
                        new
                        {
                            FieldsId = new Guid("f2b3e7a0-ee71-40f6-ad13-c480e735a749"),
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863")
                        },
                        new
                        {
                            FieldsId = new Guid("f205b29a-9208-40a2-b95b-6192193e4782"),
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863")
                        },
                        new
                        {
                            FieldsId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f")
                        },
                        new
                        {
                            FieldsId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c")
                        },
                        new
                        {
                            FieldsId = new Guid("3f1ed0e4-604f-4c6e-b72d-fd5f90f3ef6f"),
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c")
                        },
                        new
                        {
                            FieldsId = new Guid("f53f7a40-c469-4d40-aebd-6ffc6b1e41bc"),
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            TablesId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            TablesId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            TablesId = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            TablesId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            TablesId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            TablesId = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            TablesId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            TablesId = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            TablesId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            TablesId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            TablesId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            TablesId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            TablesId = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            TablesId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            TablesId = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            TablesId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            TracksId = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            TracksId = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("6122976c-d164-498b-91b9-077b1825fd9d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("51f83077-5e1f-427e-a828-3923b851b857")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("a978471f-c1ed-43ea-9975-834543c6a903")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("d226ce08-6ea0-4702-bca7-c73831a8e9dd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("def20525-68cc-45e9-9679-c1bb60949ee5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("bf94bf1d-f6af-4e20-83f1-1357cf6e1502")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            MarksId = new Guid("c14b527e-2211-4b69-985b-1517c767a397")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            MarksId = new Guid("67cbf57e-ff45-41bb-96b8-35c4f9109cfa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            MarksId = new Guid("572940f8-ae68-4c00-b87c-898865f3d6e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            MarksId = new Guid("a6eca8ff-eccc-4259-bdc3-62035c774379")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            MarksId = new Guid("9f9b33a8-7d8d-49c3-96fa-f94a69ad53e6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            MarksId = new Guid("9ef02c34-be61-4dc3-a359-d65c3d9a63a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            MarksId = new Guid("f94ae375-4838-47a0-b327-99972f643f16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            MarksId = new Guid("94889238-daa4-472d-b980-04a79817326c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            MarksId = new Guid("0a9d4c9a-2464-4798-9125-b448441c078b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("f94ae375-4838-47a0-b327-99972f643f16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("94889238-daa4-472d-b980-04a79817326c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("321af304-c21f-49eb-b24d-bf82ba88ba3b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("260401eb-4ea3-404c-9160-1ea5701488ee")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("f0d843ff-4512-4979-b993-3313ea70b33f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("afea940d-8161-4a59-90d5-3d3273eae226")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            MarksId = new Guid("dae08794-bece-40a9-85eb-5d5606887217")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            MarksId = new Guid("0a9d4c9a-2464-4798-9125-b448441c078b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            MarksId = new Guid("5ddaa699-f280-4443-bf85-f005ddc85980")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            MarksId = new Guid("e52c11ae-7053-4688-88d3-51272f73375b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            MarksId = new Guid("c563667c-5c6f-41b8-9713-56100ddc70a3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            MarksId = new Guid("27cb1bb0-a577-44a2-ba02-cfccb0009266")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78bdcd1e-9ae6-42c6-b15d-6d0481f3f53e",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "fbb2e714-c91c-4690-bd81-45944552be6f",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "9924e6c8-c883-45b8-9667-78c8ab9da072",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "1781acee-0ef3-4468-884b-f972cfcc8d6e",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "642b3956-af97-4c27-8f01-41e7f3e77b8d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d89ddec7-facf-43fe-80b1-98fe3bbf7cf1"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("debd201c-a230-4ba0-b7d7-08bfcc63fce5"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("6e0c3a16-76f3-4e1b-8eb2-961519341635"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("738d80e8-b0ea-45ed-bea7-d57991bcdf9f"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("70bec53d-e0b9-40d3-ad5f-d80baeb7de15"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("5ff402d9-31bd-4e16-aceb-a59005a79b58"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("034f68d9-6583-452f-8b09-c28c83fd896c"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("88fc10bb-a144-44e8-9842-d64fbeecb544"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6549d6e1-69db-42c5-9a27-519b30a74150"),
                            ColumnId = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2477a277-c410-4972-8425-84206a8e4972"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("b48c86cc-e829-4ddf-bbbf-312a12a62473"),
                            ColumnId = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2477a277-c410-4972-8425-84206a8e4972")
                        },
                        new
                        {
                            Id = new Guid("0d19166a-79f2-46ae-ac03-512e9ec79202"),
                            ColumnId = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5d942bba-c237-4a34-b719-6e43c58cc2e1"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("d7f4ef26-d277-4312-b189-898450130cba"),
                            ColumnId = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5d942bba-c237-4a34-b719-6e43c58cc2e1")
                        },
                        new
                        {
                            Id = new Guid("2b0f1c72-1a82-473e-8b4c-80b28a96f384"),
                            ColumnId = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3f543eec-2f39-45c5-bed8-300038591367"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("1f12e963-266c-4c3d-a33a-694460d98e60"),
                            ColumnId = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3f543eec-2f39-45c5-bed8-300038591367")
                        },
                        new
                        {
                            Id = new Guid("55567e56-54ea-4832-b7f0-647bd4ffed94"),
                            ColumnId = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("733fdbf1-fc9b-46fe-ad3b-e660d6e0bc42"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("85682b3e-2f8d-42c4-98ab-3d5195d26dbb"),
                            ColumnId = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("733fdbf1-fc9b-46fe-ad3b-e660d6e0bc42")
                        },
                        new
                        {
                            Id = new Guid("79c897cf-ed37-4508-afc7-a7714d39059a"),
                            ColumnId = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ecd53b4b-f6cb-4d6c-a7dc-8d91a50d33c5"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("8283d590-42da-4f99-a5c1-49c2546f3fa7"),
                            ColumnId = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ecd53b4b-f6cb-4d6c-a7dc-8d91a50d33c5")
                        },
                        new
                        {
                            Id = new Guid("7410c62d-6ea8-4663-a4fc-8e4a3e585531"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("06d51838-6ad2-439e-a008-50844b44e350"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("b4f14743-c472-4311-b2fd-9b5162fb3893"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06d51838-6ad2-439e-a008-50844b44e350")
                        },
                        new
                        {
                            Id = new Guid("77f1c777-2f68-4434-9913-4b89e6364109"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3a865e1c-918d-4f15-93e9-480bff352593"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("04cf7078-36d7-4187-8cfb-b6cdb7bc4994"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3a865e1c-918d-4f15-93e9-480bff352593")
                        },
                        new
                        {
                            Id = new Guid("6ef01f94-a7d9-46c8-b002-1b95b7cd4d96"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a905fdb1-00ce-493f-8152-cf4030941cc4"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("267ebf71-7bc4-4429-b10b-2ad2ff6198e0"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a905fdb1-00ce-493f-8152-cf4030941cc4")
                        },
                        new
                        {
                            Id = new Guid("586dfb03-a66a-4715-aa9e-de190a77e5b4"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fc95b849-09aa-4ed0-a2e7-94b7d8bf6b96"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("b946e01e-01d9-4568-8a2c-ba439daca9bc"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fc95b849-09aa-4ed0-a2e7-94b7d8bf6b96")
                        },
                        new
                        {
                            Id = new Guid("730d4fb4-7138-491a-a954-f8de21aca718"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ce9e2dbf-23ae-4bac-aaf2-2d4ae6fcf257"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("9fd96613-d0f8-4242-82ad-5bc449217001"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ce9e2dbf-23ae-4bac-aaf2-2d4ae6fcf257")
                        },
                        new
                        {
                            Id = new Guid("544fda97-8ca6-4dd0-b10d-b96ef9df2616"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5d96caa5-59a6-40b6-9206-1e2ea53a9939"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("4fda8bdc-493b-4115-960a-0288b0557a27"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5d96caa5-59a6-40b6-9206-1e2ea53a9939")
                        },
                        new
                        {
                            Id = new Guid("3f30e9c1-e1aa-42a7-b3d9-e59adc69e3b3"),
                            ColumnId = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("51d45523-fb26-4cb7-b554-99afb2620a43"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("2f80e45d-a325-4af2-8015-da09059ec958"),
                            ColumnId = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("51d45523-fb26-4cb7-b554-99afb2620a43")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f485fb0-be67-4c6d-81ea-995ffba002f7"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("af841716-a5a8-466a-a585-040d8ec2bfb1"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("f0c907b5-272e-41c3-bb1b-91392e904ff2"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("37cf4ed3-0408-4319-9e35-9af9f25b750a"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("4d9a625e-83bf-4495-be76-7a54dd22511c"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("e441d6ce-8778-48ea-8093-469c3763e3d2"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("0be9d5b8-d5e8-4ee3-8963-239db934477e"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("fd687a79-58fe-48af-bbfe-96c82e9a8913"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("3a3fc91a-d767-4969-aca9-7b3d95e67bee"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("633c82c4-fb2b-4c25-92e6-d701730cd04d"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("acd29f0b-edbd-425b-9130-62736c1f4c47"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("789bb4e2-31ff-4523-8539-803d17d8e4e7"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("fd646c56-f15c-4860-a87d-40e6def4771a"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("3d578266-11a3-4724-ac20-08dd645b7910"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("08ed39ad-4737-43b1-a5a6-6326d1b3eaea"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("12f32ac6-2b42-4091-a5a1-b1c43eaa1fe3"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("f7c66d3c-9254-4d7e-b4c7-ba31f02a4896"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("a6b38eb6-d444-4158-835e-b3bfb00ecb3b"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("42578a79-84d3-4269-8925-0f3e36873234"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("07bbad16-7ade-4a1f-a2f7-4fe0b5d3aebb"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("3e4ade72-ff03-4189-a5af-714ebe55eff8"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("7d19e936-0e12-41b1-9793-edb091e85fc3"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("40884dae-ef12-4bbd-ad30-142bd837f057"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("eed2cd7c-4970-418a-9509-3bdb6e39ca27"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("70405f7b-ab64-4e1e-91aa-a0a5a6fabbff"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("aa86b8d4-5f1e-4985-8764-e2299e857dc9"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("5e19966b-b549-46f8-ae7a-d886affac3f5")
                        },
                        new
                        {
                            Id = new Guid("81f231c1-03a9-4885-abd1-1ecb001b89b5"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("6de112fe-8364-4bf0-bcb4-56207d88ddbb"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("fa5b3d56-a9fa-46bc-b032-dbd1e21159f5"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("58c037c3-229e-4fa2-a7f6-104dd8f1c7b3"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("172457ad-37f5-4a6f-9b27-0a6b267631cc"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("46067b9f-8151-46f5-9bd4-8b8e298eb36f"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("fc39e349-a7bc-43d0-b755-fc3363d6b016"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("152032c9-af7b-4489-8643-09087951b51a"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("f21f847e-e117-42c9-afd6-604e6a9e2735"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("9b31b545-77d9-429b-8b8f-889173fca59b"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("1c7d5cbf-563d-49cc-a00f-1f04cdd500a9"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("578950a3-1832-4d10-a753-1839d14af12e"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("6abce623-6a50-409e-ab4c-7376553e033a"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("db08cfac-b2ea-4cea-8b52-c1f085f21712"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("675ae90f-94d1-436b-b1da-d673498fae35"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("f30f38f5-a5c6-4972-9372-46885433ae7c"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("e26c5335-510c-40ec-8f22-8b17eb66314f"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("cea68bc0-2157-4481-8791-9d8bc1b7167a"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("6d051cec-b590-4c7b-b002-adf399d2fdfc"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("98825df4-3947-445c-99d6-8405836664fb"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("e1186afd-73c1-4baa-847e-448750459112"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("41cecd7e-7567-4c74-99a5-4e3c8407bdad"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("34dca0a9-cf94-4a6c-8123-ca4fcdd0027f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("20af9d5f-7f7d-44c0-8074-90f264697e9b"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("c6ee8fcc-1b06-414a-8e59-6575b3f6bfda"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("7068312c-4581-4f1c-8f88-000837824e5f"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("c3236aa9-9779-4a49-9865-c739d10b12e5"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("be06e5af-188f-4c2f-9636-e45abf248afa"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("0d710cf3-4cc4-4d56-9f3f-1072d99db8dd"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf"),
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("0f7762e0-fd89-4c7c-a4cd-9657b7e86589"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf"),
                            ValueTypeId = new Guid("e7d9d555-3729-4e24-a411-b60c9a1a6298")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("fab9f7b9-7792-46f2-a31d-ab1f23632fb4"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3397badb-655d-4aa0-9d29-86c1ca7a9781"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("4ae741c5-797e-42df-8bb8-801d4564946c"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("df2f793d-8c44-41f9-98fd-b3a826792623")
                        },
                        new
                        {
                            Id = new Guid("04f2e548-f489-4607-8049-8eaf3379de7d"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("bc2ff45a-9df8-4c7d-a18c-fd0277405258"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("c016ceac-b7bb-4741-b9ab-14233f1bbc01"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("1355e8cc-46bb-4e7b-b7c8-c076ead498ef"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("945fe82d-9f24-4edd-8fa0-e7f425760e9d"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("a96ceb7a-05ee-4a71-9034-30b305fbe95b"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("11badcb7-dcd2-4ce8-8fcb-331f993d0c6e"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("b7ccb597-ad18-402f-9b65-d5735a2810fc"),
                            EditBlockId = new Guid("36d259d4-ae95-498b-b648-ae33bec05ff1"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("3225dcc5-2a90-46f1-aba9-ae32c13545c7"),
                            EditBlockId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            EditBlockId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("e05e46c5-4c4c-4c5a-8f04-1ab86070c3ff"),
                            EditBlockId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("da15fef0-c15c-460e-b7d9-c86610cf24a9"),
                            EditBlockId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf")
                        },
                        new
                        {
                            Id = new Guid("c87a13a1-3fc0-41b8-8cf3-e1871426a13b"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("f2b3e7a0-ee71-40f6-ad13-c480e735a749"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("f205b29a-9208-40a2-b95b-6192193e4782"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("3f1ed0e4-604f-4c6e-b72d-fd5f90f3ef6f"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        },
                        new
                        {
                            Id = new Guid("f53f7a40-c469-4d40-aebd-6ffc6b1e41bc"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6122976c-d164-498b-91b9-077b1825fd9d"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c")
                        },
                        new
                        {
                            Id = new Guid("51f83077-5e1f-427e-a828-3923b851b857"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c")
                        },
                        new
                        {
                            Id = new Guid("a978471f-c1ed-43ea-9975-834543c6a903"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("f205b29a-9208-40a2-b95b-6192193e4782"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d226ce08-6ea0-4702-bca7-c73831a8e9dd"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("c87a13a1-3fc0-41b8-8cf3-e1871426a13b"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("def20525-68cc-45e9-9679-c1bb60949ee5"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("f2b3e7a0-ee71-40f6-ad13-c480e735a749"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("bf94bf1d-f6af-4e20-83f1-1357cf6e1502"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d")
                        },
                        new
                        {
                            Id = new Guid("c14b527e-2211-4b69-985b-1517c767a397"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9")
                        },
                        new
                        {
                            Id = new Guid("67cbf57e-ff45-41bb-96b8-35c4f9109cfa"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0")
                        },
                        new
                        {
                            Id = new Guid("572940f8-ae68-4c00-b87c-898865f3d6e9"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0")
                        },
                        new
                        {
                            Id = new Guid("a6eca8ff-eccc-4259-bdc3-62035c774379"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0")
                        },
                        new
                        {
                            Id = new Guid("9f9b33a8-7d8d-49c3-96fa-f94a69ad53e6"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0")
                        },
                        new
                        {
                            Id = new Guid("9ef02c34-be61-4dc3-a359-d65c3d9a63a1"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059")
                        },
                        new
                        {
                            Id = new Guid("f94ae375-4838-47a0-b327-99972f643f16"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("94889238-daa4-472d-b980-04a79817326c"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d")
                        },
                        new
                        {
                            Id = new Guid("0a9d4c9a-2464-4798-9125-b448441c078b"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2")
                        },
                        new
                        {
                            Id = new Guid("321af304-c21f-49eb-b24d-bf82ba88ba3b"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481")
                        },
                        new
                        {
                            Id = new Guid("260401eb-4ea3-404c-9160-1ea5701488ee"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("3f1ed0e4-604f-4c6e-b72d-fd5f90f3ef6f"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("f0d843ff-4512-4979-b993-3313ea70b33f"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("f53f7a40-c469-4d40-aebd-6ffc6b1e41bc"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("afea940d-8161-4a59-90d5-3d3273eae226"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb")
                        },
                        new
                        {
                            Id = new Guid("dae08794-bece-40a9-85eb-5d5606887217"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb")
                        },
                        new
                        {
                            Id = new Guid("5ddaa699-f280-4443-bf85-f005ddc85980"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80")
                        },
                        new
                        {
                            Id = new Guid("e52c11ae-7053-4688-88d3-51272f73375b"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453")
                        },
                        new
                        {
                            Id = new Guid("c563667c-5c6f-41b8-9713-56100ddc70a3"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("27cb1bb0-a577-44a2-ba02-cfccb0009266"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba1b7279-8651-40f2-ab82-a5333fc93dc4"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("73c4e5dd-55be-43ac-87a9-e15ee49aa863"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2fadb685-da85-43aa-91e7-59f3b4a2b27b"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("10f835c8-a341-4a2c-80ba-5c7eb3346b0f"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("3c50495c-7355-482f-8661-dc057d347c9c"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("405bae2d-7ef7-4df6-8c86-3d44e1e7bc20"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("1aecdbd8-8b25-4bdf-9dac-ea00183bf0a0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2477a277-c410-4972-8425-84206a8e4972"),
                            IsPrefilled = true,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            Id = new Guid("5d942bba-c237-4a34-b719-6e43c58cc2e1"),
                            IsPrefilled = true,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            Id = new Guid("3f543eec-2f39-45c5-bed8-300038591367"),
                            IsPrefilled = true,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            Id = new Guid("733fdbf1-fc9b-46fe-ad3b-e660d6e0bc42"),
                            IsPrefilled = true,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            Id = new Guid("ecd53b4b-f6cb-4d6c-a7dc-8d91a50d33c5"),
                            IsPrefilled = true,
                            TableId = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405")
                        },
                        new
                        {
                            Id = new Guid("06d51838-6ad2-439e-a008-50844b44e350"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("3a865e1c-918d-4f15-93e9-480bff352593"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("a905fdb1-00ce-493f-8152-cf4030941cc4"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("fc95b849-09aa-4ed0-a2e7-94b7d8bf6b96"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("ce9e2dbf-23ae-4bac-aaf2-2d4ae6fcf257"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("5d96caa5-59a6-40b6-9206-1e2ea53a9939"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        },
                        new
                        {
                            Id = new Guid("51d45523-fb26-4cb7-b554-99afb2620a43"),
                            IsPrefilled = true,
                            TableId = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c53b8878-fa76-4dbc-b603-781e89c73b17"),
                            FieldId = new Guid("3225dcc5-2a90-46f1-aba9-ae32c13545c7"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("2ecd077b-2f5f-4764-a796-bd38c802be9d"),
                            FieldId = new Guid("3225dcc5-2a90-46f1-aba9-ae32c13545c7"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("e90a7bcf-0189-435a-824a-48df7ffc0ebe"),
                            FieldId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("4d4d608b-70a1-4272-96df-5a4fd588a9bd"),
                            FieldId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("9e4c9b64-b030-4b79-ac3f-7734663af844"),
                            FieldId = new Guid("ad96da61-188f-499f-907c-c37f78f90c40"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("47d064eb-360d-4bc7-951c-455d19a37607"),
                            ColumnId = new Guid("f0c907b5-272e-41c3-bb1b-91392e904ff2"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("f4d2d19b-094a-4dbb-b0d6-b3f607fdfd6f"),
                            ColumnId = new Guid("f0c907b5-272e-41c3-bb1b-91392e904ff2"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("e6ef9d48-b22d-44b8-9159-5de9a2ba0254"),
                            ColumnId = new Guid("f0c907b5-272e-41c3-bb1b-91392e904ff2"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("4a37f2f6-e655-42d3-a277-6bcd03ecae3f"),
                            ColumnId = new Guid("7d19e936-0e12-41b1-9793-edb091e85fc3"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("9f9f3943-0ae5-4b55-ad66-732739832fb9"),
                            ColumnId = new Guid("7d19e936-0e12-41b1-9793-edb091e85fc3"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("5ce64f80-90ea-43e9-add7-65ae97294e1d"),
                            ColumnId = new Guid("7d19e936-0e12-41b1-9793-edb091e85fc3"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("e0a62dd2-e2a8-4965-a75a-801be5064d10"),
                            ColumnId = new Guid("172457ad-37f5-4a6f-9b27-0a6b267631cc"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("b26198e5-7651-4cda-a416-79ac26185863"),
                            ColumnId = new Guid("172457ad-37f5-4a6f-9b27-0a6b267631cc"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("c879b5b4-4ba3-45ce-b107-fb36811ac941"),
                            ColumnId = new Guid("98825df4-3947-445c-99d6-8405836664fb"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("07ecda91-6441-45e7-976b-231b69462d13"),
                            ColumnId = new Guid("98825df4-3947-445c-99d6-8405836664fb"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("c8697921-008c-4116-81d1-1bcdc17a5570"),
                            ColumnId = new Guid("41cecd7e-7567-4c74-99a5-4e3c8407bdad"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("4912a8d1-8142-4eec-ac92-e74fc0374d12"),
                            ColumnId = new Guid("41cecd7e-7567-4c74-99a5-4e3c8407bdad"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("1cd6c42d-3d31-45d6-acb4-44378b3a207c"),
                            ColumnId = new Guid("41cecd7e-7567-4c74-99a5-4e3c8407bdad"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("7a549a00-bda6-4e6c-9664-b58af202073f"),
                            ColumnId = new Guid("7068312c-4581-4f1c-8f88-000837824e5f"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("5a0bd16d-6a39-47b5-82c7-f7f6d89def76"),
                            ColumnId = new Guid("7068312c-4581-4f1c-8f88-000837824e5f"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("84333566-aebe-4b7b-a18f-c19a79869789"),
                            ColumnId = new Guid("7068312c-4581-4f1c-8f88-000837824e5f"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("239edaf9-9fec-44e3-9386-628a4ff32422"),
                            ColumnId = new Guid("eed2cd7c-4970-418a-9509-3bdb6e39ca27"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("081a6446-05ac-4ec6-b451-ac383868b587"),
                            ColumnId = new Guid("eed2cd7c-4970-418a-9509-3bdb6e39ca27"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("308f0ca3-46e5-4f6b-895d-e674de0e653c"),
                            ColumnId = new Guid("6de112fe-8364-4bf0-bcb4-56207d88ddbb"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("47b8e10f-6ed9-42cd-b1e6-7e2e01c53a36"),
                            ColumnId = new Guid("6de112fe-8364-4bf0-bcb4-56207d88ddbb"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed991030-ab8f-406b-a841-3b33ee33d91d"),
                            EditBlockId = new Guid("fab9f7b9-7792-46f2-a31d-ab1f23632fb4"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("e12813e0-604d-4fc2-a2f0-24ee6a81a9f2"),
                            EditBlockId = new Guid("fab9f7b9-7792-46f2-a31d-ab1f23632fb4"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("80e73dc7-8933-487a-a33b-b7dbaafe079c"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("b05bab3c-5a12-4222-a6bc-c2c75e4f2d3d"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("224b00ab-0ae6-4ceb-aef1-7b439788ecbb"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("eb2712f5-68d4-4587-af28-0cbe06a47fe0"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("2de50853-fb80-457c-b93c-bfa2a1176059"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("dcfcdc08-c26e-4fcd-b6b8-545b75d996b9"),
                            EditBlockId = new Guid("04c7506f-23c7-49a6-acc1-70264c3d82fa"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("c5f4882f-e8f0-42af-8651-1859320a8481"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("d178e5ad-e069-40eb-97fb-9d642be81405"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("0275c92d-1582-42dd-a06a-2b5b72a62cdb"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("cec6d0ab-2b11-42d6-94fe-ae0a6ea08f80"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("86e79826-8912-4e3b-baf5-5f171d0f8453"),
                            EditBlockId = new Guid("f19b21e5-65b0-42b1-8067-da36dbf67e15"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("77949a99-d744-4a1e-b658-4b1bf82751bf"),
                            EditBlockId = new Guid("f05e60e5-bc47-4c7d-81d5-687b205a1578"),
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14fc941e-94f3-4aa7-b736-aa4b8a587723"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6b1d7043-98a7-488f-b2bc-2934bc92da63"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e276cbdb-f82b-455d-a10b-57ab882458b7"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("7b5604ae-d1aa-44f2-9e45-cc7b5edb9adf"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("5e19966b-b549-46f8-ae7a-d886affac3f5"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("df2f793d-8c44-41f9-98fd-b3a826792623"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("e7d9d555-3729-4e24-a411-b60c9a1a6298"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
