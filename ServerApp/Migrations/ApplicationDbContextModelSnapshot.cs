// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            EditBlocksId = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a39ab3ef-84af-46d1-b28f-e07b54e17a5a"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            EditBlocksId = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a39ab3ef-84af-46d1-b28f-e07b54e17a5a"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            EditBlocksId = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("7eeb8b8b-5072-4703-872b-629a9c62959d"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("41ba9b21-4f7c-4db9-a7db-b5f7af80c8f8"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("82a2df51-8b93-496e-a8d3-f9334c44bdc8"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("b8069c39-16f4-4b9e-a795-8b5b9048b7ce"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("11040ad1-06fc-48e8-aaa9-c777b6cd5789"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("8d52aa9b-f9fe-4725-99d6-7728422aa376"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("c1c42a41-4717-45ad-b7b3-d7ccb98c08fa"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("f3d127ba-70ab-4eca-9d5f-0218c1cf74c8"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("295d0cce-037d-4aee-b532-394b0d2805ea"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("822dd4d6-34c9-4617-9f96-4745570d4c3a"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("3fca78b3-b712-43f2-b488-fd0e28358d48"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("268aa40e-d144-41e0-a8a1-2c3a10c8b851"),
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a")
                        },
                        new
                        {
                            FieldsId = new Guid("56278d07-eba2-44dd-ba78-1c423387d32f"),
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e")
                        },
                        new
                        {
                            FieldsId = new Guid("b7b2c736-4ef9-498f-9563-e977609b89e7"),
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e")
                        },
                        new
                        {
                            FieldsId = new Guid("1e521770-e605-47d0-8ac5-06dba254dbf9"),
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e")
                        },
                        new
                        {
                            FieldsId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8")
                        },
                        new
                        {
                            FieldsId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b")
                        },
                        new
                        {
                            FieldsId = new Guid("59c0f7ba-5952-4484-ade4-10dff9a71a5c"),
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b")
                        },
                        new
                        {
                            FieldsId = new Guid("3e5dd45f-d781-466f-90ec-3543b1610df9"),
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            TablesId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            TablesId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            TablesId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            TablesId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            TablesId = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            TablesId = new Guid("24931e37-1efa-468f-9169-b00e961eec55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            TablesId = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            TablesId = new Guid("24931e37-1efa-468f-9169-b00e961eec55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            TablesId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            TablesId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            TablesId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            TablesId = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            TablesId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            TablesId = new Guid("775495e2-d608-4ccf-9924-e8161a715d60")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            TablesId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            TracksId = new Guid("24e2503e-4776-4373-85c7-abacc3aba665")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            TracksId = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("9250ad25-788c-492f-b829-3b98d4460175")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("071c84dd-2c67-4859-82b5-ff1d660d2db6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("3a298f75-94a5-4c14-ab06-ebe6063c88fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("c9f363db-5ee6-4e8c-b408-0fe176cb1361")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("24699f9b-f5ed-40cd-82f9-8e686348e99e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("7cf274e9-7cbc-414c-beb6-859fbbbcfe72")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            MarksId = new Guid("d056dffa-6061-4b99-83ee-70abed7312d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            MarksId = new Guid("182255b2-da2b-4150-85b0-ff0346f72448")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            MarksId = new Guid("b5f076b1-3de4-4d99-b8ae-0104712bf357")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            MarksId = new Guid("e688f59f-6e7f-4658-90ed-ada4879fb9bd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            MarksId = new Guid("4ee162d2-4b00-4a5c-87c2-122222ac35b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            MarksId = new Guid("14e01340-4341-4d83-aa34-30bf441b8414")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            MarksId = new Guid("05670b43-87ab-4656-8d80-09646c3df98a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            MarksId = new Guid("85deb1ae-e8e1-4189-ba0b-e5d611e2b532")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            MarksId = new Guid("a5b18cc1-91d5-466d-81f1-faacfcd940ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("05670b43-87ab-4656-8d80-09646c3df98a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("85deb1ae-e8e1-4189-ba0b-e5d611e2b532")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("886bb636-ecbb-4e36-962c-11f7bff104b6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("6c3d4ed8-7617-441b-81c0-2a1a1acda9e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("5eaf9733-e011-433a-9cd3-18648efb010d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("ca04ea5d-88ea-4785-8f62-a8e9b0cb06b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            MarksId = new Guid("8aaa680b-692f-485d-97c3-39f3122a7174")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            MarksId = new Guid("a5b18cc1-91d5-466d-81f1-faacfcd940ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            MarksId = new Guid("8c65b718-9a94-427e-bae5-8d08691b1b1f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            MarksId = new Guid("3b523069-e3ba-4c62-8cda-d2f4138f6ac1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            MarksId = new Guid("0e1034b0-f523-4b4c-abe6-b398826650ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            MarksId = new Guid("e45a5816-5d7f-439e-a754-82ff0f8d1d3f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "86148448-664f-4cb6-8c2f-23954893243b",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "638c43b2-6f67-4d89-825c-d7f82fd18ce8",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "ccb0b6b5-cada-46c4-8203-c2fe33926803",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "50786817-3f9b-4244-bd05-3cd80f0e32d6",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "03638c46-2c07-4478-aa96-d79ed015cd9e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63620115-1ba1-43e5-a071-af8fcf616fea"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("b5bea991-81cf-4209-9bc6-552fb6ed7c83"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("59e4b44f-00ab-4266-bb2a-816eadd9eda0"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9667cb70-9c42-41a7-a45f-267b15cacc01"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("3a236626-7d44-4741-bff9-2ce213ffa2a4"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("838c6543-c663-4a77-b5c0-64bfa805b525"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffe043e0-d1a9-4e51-a287-1baf34b919b3"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("97481e99-56e0-4c21-bfbe-28d045e17873"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51fc55aa-9d31-46b5-aa03-03f1cb75e008"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6334b814-77b5-4acd-8b7b-763a9c0ed6f8"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("e5a59e42-0b64-4d84-9f3c-3e6f97f17d9d"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6334b814-77b5-4acd-8b7b-763a9c0ed6f8")
                        },
                        new
                        {
                            Id = new Guid("5c18ccbe-da19-4dfe-b364-e81c4feabf59"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("594efcca-ebaa-4257-b558-2c1df76d4241"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("aa298d52-74bf-42e6-a39a-06cd5171c504"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("594efcca-ebaa-4257-b558-2c1df76d4241")
                        },
                        new
                        {
                            Id = new Guid("309af6d9-3671-41bf-a79d-c1d66250498d"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1b644301-664e-444e-99a0-756058df5c92"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("031d6bb9-f630-4119-9cf2-18a7cc8d193a"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1b644301-664e-444e-99a0-756058df5c92")
                        },
                        new
                        {
                            Id = new Guid("8aa30fa4-1d43-4b9b-b1fe-7aa7c2e87905"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1c00ee0e-4c64-4831-9d92-d83dd75e34fa"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("726a460d-3ae9-422e-86c9-4903ed24ab56"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1c00ee0e-4c64-4831-9d92-d83dd75e34fa")
                        },
                        new
                        {
                            Id = new Guid("8294cdca-72a6-4cfa-9302-ae23c00af99e"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("79413976-037c-475d-ad8f-24e173a9073f"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("806c4f45-c5df-4a62-b172-46b6da2db8fb"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("79413976-037c-475d-ad8f-24e173a9073f")
                        },
                        new
                        {
                            Id = new Guid("ea85c9f2-41d8-4dc0-a5bb-e7050b143935"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("78515378-d696-45ac-9313-bba38ba54f5c"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("5f8df5ee-7ec0-46d6-994e-730729a08c1b"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("78515378-d696-45ac-9313-bba38ba54f5c")
                        },
                        new
                        {
                            Id = new Guid("76f9fe99-b784-4336-869d-2c401a7b0fa8"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7292bcde-590a-4daf-ade6-9865e588a806"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("2f36545e-422f-4176-b150-d840a540d8f6"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7292bcde-590a-4daf-ade6-9865e588a806")
                        },
                        new
                        {
                            Id = new Guid("cab97ae7-0e9d-47cd-84f0-48b7ebed8f72"),
                            ColumnId = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9bc1c644-a026-41fd-9eb6-1702883e1708"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("501c01d4-8b55-4f41-a635-46a9dd2b9a2d"),
                            ColumnId = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9bc1c644-a026-41fd-9eb6-1702883e1708")
                        },
                        new
                        {
                            Id = new Guid("b3925c3c-e1d9-4bf3-9064-318a5ab7554e"),
                            ColumnId = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c9f7a253-9919-4616-bd8e-140d09d4974e"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("d5a230c2-6b05-4b3a-8bdb-435c89576dfb"),
                            ColumnId = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c9f7a253-9919-4616-bd8e-140d09d4974e")
                        },
                        new
                        {
                            Id = new Guid("335a2ffe-4378-4cfc-b0c8-b0214fc38f74"),
                            ColumnId = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("85b6ff62-748f-4fe9-82ff-789d2c3e8c36"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("2892e8f4-07d5-4f66-a128-be678dea40e9"),
                            ColumnId = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("85b6ff62-748f-4fe9-82ff-789d2c3e8c36")
                        },
                        new
                        {
                            Id = new Guid("794c8923-e584-4fb7-a556-86f4964a84aa"),
                            ColumnId = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4ef2789b-c092-4099-8673-0de7671ecffc"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("94c7a24f-6e8b-4e36-8c57-27465c07058c"),
                            ColumnId = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4ef2789b-c092-4099-8673-0de7671ecffc")
                        },
                        new
                        {
                            Id = new Guid("814dec40-a12b-487b-87e8-4f94dfe378cc"),
                            ColumnId = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2c0dd453-a779-4892-99e4-9d886af7ad9b"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("2f6f9660-cb87-423c-80fc-99a9db228f33"),
                            ColumnId = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2c0dd453-a779-4892-99e4-9d886af7ad9b")
                        },
                        new
                        {
                            Id = new Guid("e1218caa-ef40-4f30-8712-548f488a5a09"),
                            ColumnId = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9047498b-e427-4b33-b6cb-79b129e377b0"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("ef6b4f6e-ebaf-4fa8-a2c6-38004370abb0"),
                            ColumnId = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9047498b-e427-4b33-b6cb-79b129e377b0")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("008a843e-06e2-4b6a-b728-82886fd45348"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("6bae0479-4c84-4e22-9908-4ed60d92bd52"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673"),
                            ValueTypeId = new Guid("dd408d1a-bbb0-4856-b47d-b017c7a7d095")
                        },
                        new
                        {
                            Id = new Guid("655ef715-0ee8-425d-9897-00b514519374"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("6c27fe52-fb0e-48b3-8e17-9f84d08ff2bc"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("4f1c9e92-3b66-4bb3-b671-4a870e931ea4"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("c45698d7-dbd7-4d9c-adb1-b4aef7df7b96"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("af67b1b5-ba30-4b75-8aba-ea1e584190b5"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("801d4203-f7b3-48ca-a873-455ba8060d90"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("efb409a5-3640-4d68-9de0-647c2909466a"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("5d0cf43f-0b8e-451f-8f86-6aa0260196e5"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("c477f924-3796-4d3b-bdf3-b845e71267c1"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("3b19e2ed-cf37-45d4-84c2-cfe70e19f7db"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("f3cb36fd-166b-4367-8ac0-4b64931816a3"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("f7d3c900-4525-4a9d-bae4-9cbf85f1aeb8"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("64477318-6098-4a4c-9f76-9b0655f1ac61"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("43091a1e-4909-448b-af1e-de85b8eec614"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("f1039475-4bb9-4029-b58a-6c5e838074ce"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("2c845d8e-5a83-417c-bd8e-02fc40d93968"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("b121297e-8c9b-4415-a735-48cdfb56df9b"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("75bfc55c-31a4-4fc5-a019-c6657ca32f3e"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("d46717ac-1223-45d6-998c-ffddab482e93"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("f29e802e-40b5-44a1-b6be-8fec0fb804ab"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("617da312-d437-414b-a70c-1998bcaeb045"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("988c9678-b13d-4aa3-bc5c-c0d69ea09703"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("75113c0f-7fff-453c-9151-2a103a9731ad"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("0040f722-bc93-4383-8e16-94524dd018ee"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("4ff2d227-7bcc-417a-8f04-0768d6d491bf")
                        },
                        new
                        {
                            Id = new Guid("91d50a87-d77f-48e7-b85b-ea78b9ae61ca"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("c631a458-58e3-4bae-b8ae-2dc2009fbfa5"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("3aac6b46-0172-432e-bddd-a31fcc4608a2"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("b1d8b9c5-8d3e-4888-bdad-f15eb3f7fa78"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("f448bd7e-0cd9-4bf8-ad74-23e91f8c5965"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("85c328bb-4e54-40ee-8c43-f9909eac723d"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("afa3a019-ce1a-41fd-99e4-6ca883d66f1c"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("b50cfab0-1039-4031-913e-54173cecec39"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("77d1dc24-a350-41c2-83be-fb65099286fa"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("1303b97c-2eff-437f-a03d-db2c8b192925"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("c6f54cfe-7af9-403d-a8da-51f4f0b70fe2"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("902ccb43-f5d4-4de3-85e9-9939099a032a"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("2275154a-236e-4b6c-9289-72ec88debe17"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("69cf72ce-5110-4d1a-8c96-586d0fe4bcee"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("13892676-848f-41f6-93ca-7d35114518ab"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("1ddff826-f388-4f88-a82b-324a15380eca"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("9a56553c-5f1b-4c71-9d05-b191b241da2d"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("15d29aed-84fd-41e6-9377-b63c61b6aa9f"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("4c87b2e4-719d-4fb4-b290-7c5f4c63a03b"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("781f1c17-82b3-4914-a14c-455faa693cc0"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("2d3b5978-5efa-4fb2-843c-b8149cc36188"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("97ee12eb-1967-4346-938c-3c27528b0a9e"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("3645dc1a-7f5a-40eb-a354-5332ccd255bc"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("32a01d96-d55c-4672-aa24-4158e6752caf"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("775495e2-d608-4ccf-9924-e8161a715d60"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("4372eb6b-2a2a-48a4-8537-51d1d38844f6"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("775495e2-d608-4ccf-9924-e8161a715d60"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("9c9de96d-7cf1-4046-abbb-455064a43dde"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("775495e2-d608-4ccf-9924-e8161a715d60"),
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("a39ab3ef-84af-46d1-b28f-e07b54e17a5a"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7eeb8b8b-5072-4703-872b-629a9c62959d"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("41ba9b21-4f7c-4db9-a7db-b5f7af80c8f8"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("52681f66-4c73-4a07-a98e-417cc6a367fd")
                        },
                        new
                        {
                            Id = new Guid("82a2df51-8b93-496e-a8d3-f9334c44bdc8"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("b8069c39-16f4-4b9e-a795-8b5b9048b7ce"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("11040ad1-06fc-48e8-aaa9-c777b6cd5789"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("8d52aa9b-f9fe-4725-99d6-7728422aa376"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("c1c42a41-4717-45ad-b7b3-d7ccb98c08fa"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("f3d127ba-70ab-4eca-9d5f-0218c1cf74c8"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("295d0cce-037d-4aee-b532-394b0d2805ea"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("822dd4d6-34c9-4617-9f96-4745570d4c3a"),
                            EditBlockId = new Guid("8b5a6559-a7bb-43ba-9d5d-d1b139922c37"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            EditBlockId = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("3fca78b3-b712-43f2-b488-fd0e28358d48"),
                            EditBlockId = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("268aa40e-d144-41e0-a8a1-2c3a10c8b851"),
                            EditBlockId = new Guid("eb8357c4-a96e-4ecd-9c4d-4ea2a9effc50"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("909032a2-1136-4d26-8727-5f97f54abf43")
                        },
                        new
                        {
                            Id = new Guid("56278d07-eba2-44dd-ba78-1c423387d32f"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("b7b2c736-4ef9-498f-9563-e977609b89e7"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("1e521770-e605-47d0-8ac5-06dba254dbf9"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("59c0f7ba-5952-4484-ade4-10dff9a71a5c"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        },
                        new
                        {
                            Id = new Guid("3e5dd45f-d781-466f-90ec-3543b1610df9"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("14af8ae1-6786-45ea-8325-873875b167ce")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9250ad25-788c-492f-b829-3b98d4460175"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8")
                        },
                        new
                        {
                            Id = new Guid("071c84dd-2c67-4859-82b5-ff1d660d2db6"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8")
                        },
                        new
                        {
                            Id = new Guid("3a298f75-94a5-4c14-ab06-ebe6063c88fc"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("1e521770-e605-47d0-8ac5-06dba254dbf9"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c9f363db-5ee6-4e8c-b408-0fe176cb1361"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("56278d07-eba2-44dd-ba78-1c423387d32f"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("24699f9b-f5ed-40cd-82f9-8e686348e99e"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("b7b2c736-4ef9-498f-9563-e977609b89e7"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("7cf274e9-7cbc-414c-beb6-859fbbbcfe72"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f")
                        },
                        new
                        {
                            Id = new Guid("d056dffa-6061-4b99-83ee-70abed7312d6"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2")
                        },
                        new
                        {
                            Id = new Guid("182255b2-da2b-4150-85b0-ff0346f72448"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218")
                        },
                        new
                        {
                            Id = new Guid("b5f076b1-3de4-4d99-b8ae-0104712bf357"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218")
                        },
                        new
                        {
                            Id = new Guid("e688f59f-6e7f-4658-90ed-ada4879fb9bd"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218")
                        },
                        new
                        {
                            Id = new Guid("4ee162d2-4b00-4a5c-87c2-122222ac35b2"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218")
                        },
                        new
                        {
                            Id = new Guid("14e01340-4341-4d83-aa34-30bf441b8414"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260")
                        },
                        new
                        {
                            Id = new Guid("05670b43-87ab-4656-8d80-09646c3df98a"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("85deb1ae-e8e1-4189-ba0b-e5d611e2b532"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("24931e37-1efa-468f-9169-b00e961eec55")
                        },
                        new
                        {
                            Id = new Guid("a5b18cc1-91d5-466d-81f1-faacfcd940ec"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec")
                        },
                        new
                        {
                            Id = new Guid("886bb636-ecbb-4e36-962c-11f7bff104b6"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("b3c9e804-7c50-4433-978a-492ce05db224")
                        },
                        new
                        {
                            Id = new Guid("6c3d4ed8-7617-441b-81c0-2a1a1acda9e0"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("59c0f7ba-5952-4484-ade4-10dff9a71a5c"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("5eaf9733-e011-433a-9cd3-18648efb010d"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("3e5dd45f-d781-466f-90ec-3543b1610df9"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("ca04ea5d-88ea-4785-8f62-a8e9b0cb06b2"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810")
                        },
                        new
                        {
                            Id = new Guid("8aaa680b-692f-485d-97c3-39f3122a7174"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810")
                        },
                        new
                        {
                            Id = new Guid("8c65b718-9a94-427e-bae5-8d08691b1b1f"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de")
                        },
                        new
                        {
                            Id = new Guid("3b523069-e3ba-4c62-8cda-d2f4138f6ac1"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("775495e2-d608-4ccf-9924-e8161a715d60")
                        },
                        new
                        {
                            Id = new Guid("0e1034b0-f523-4b4c-abe6-b398826650ae"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("e45a5816-5d7f-439e-a754-82ff0f8d1d3f"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("046bd92c-e6ca-4753-b8fa-9826b218723a"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("dbdc02fe-6af9-4c7e-852a-5e0aec7ad07e"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("4fff241c-0574-4184-ae1f-31c00fada8c0"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("08cddbff-ae00-46f0-8f22-8fd3151e25e8"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("6c3ad112-3041-4c70-89fb-3d4f4332df3b"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c0bbc94d-9e63-403f-9d60-b3755975531b"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("c761a92e-2268-4057-a880-1917e1325c41"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6334b814-77b5-4acd-8b7b-763a9c0ed6f8"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("594efcca-ebaa-4257-b558-2c1df76d4241"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("1b644301-664e-444e-99a0-756058df5c92"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("1c00ee0e-4c64-4831-9d92-d83dd75e34fa"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("79413976-037c-475d-ad8f-24e173a9073f"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("78515378-d696-45ac-9313-bba38ba54f5c"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("7292bcde-590a-4daf-ade6-9865e588a806"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("9bc1c644-a026-41fd-9eb6-1702883e1708"),
                            IsPrefilled = true,
                            TableId = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673")
                        },
                        new
                        {
                            Id = new Guid("c9f7a253-9919-4616-bd8e-140d09d4974e"),
                            IsPrefilled = true,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        },
                        new
                        {
                            Id = new Guid("85b6ff62-748f-4fe9-82ff-789d2c3e8c36"),
                            IsPrefilled = true,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        },
                        new
                        {
                            Id = new Guid("4ef2789b-c092-4099-8673-0de7671ecffc"),
                            IsPrefilled = true,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        },
                        new
                        {
                            Id = new Guid("2c0dd453-a779-4892-99e4-9d886af7ad9b"),
                            IsPrefilled = true,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        },
                        new
                        {
                            Id = new Guid("9047498b-e427-4b33-b6cb-79b129e377b0"),
                            IsPrefilled = true,
                            TableId = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01571add-cbe2-4c55-885e-d64a1d97cb0c"),
                            FieldId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("6c2e4097-a810-4639-9876-8fd52d3f8f8b"),
                            FieldId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("7b0c39ef-3fa6-49ed-8b9e-583308a6edd1"),
                            FieldId = new Guid("7c662cfa-811c-40fe-98ef-8f246c24dc10"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("5e708ec1-b260-4989-b692-85c268972eea"),
                            FieldId = new Guid("3fca78b3-b712-43f2-b488-fd0e28358d48"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("70f759c7-8edd-48e4-ad6e-e4b47f2869e0"),
                            FieldId = new Guid("3fca78b3-b712-43f2-b488-fd0e28358d48"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("0ce5b79b-d522-4f3d-9005-ee8c199d22fd"),
                            ColumnId = new Guid("4f1c9e92-3b66-4bb3-b671-4a870e931ea4"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("b45cd871-cd53-4bdd-92ba-e698bd701dcb"),
                            ColumnId = new Guid("4f1c9e92-3b66-4bb3-b671-4a870e931ea4"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("fa02d596-2cb7-420d-86d6-772fa73c71a5"),
                            ColumnId = new Guid("4f1c9e92-3b66-4bb3-b671-4a870e931ea4"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("47a0a5d7-f1b8-4b5e-bd0a-a5f6a5350f40"),
                            ColumnId = new Guid("f29e802e-40b5-44a1-b6be-8fec0fb804ab"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("3abeb7d5-b025-493b-b282-77730d2fb13e"),
                            ColumnId = new Guid("f29e802e-40b5-44a1-b6be-8fec0fb804ab"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("33832c39-4e59-4859-874c-ba1d236958a4"),
                            ColumnId = new Guid("f29e802e-40b5-44a1-b6be-8fec0fb804ab"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("beb86e2d-9bd8-4404-971b-6ff0464ccbce"),
                            ColumnId = new Guid("f448bd7e-0cd9-4bf8-ad74-23e91f8c5965"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("9b1f1412-5d5d-4f50-8188-51762fb3b976"),
                            ColumnId = new Guid("f448bd7e-0cd9-4bf8-ad74-23e91f8c5965"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("2b3d7572-782b-450b-86db-7037201dbf0a"),
                            ColumnId = new Guid("15d29aed-84fd-41e6-9377-b63c61b6aa9f"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("a7e91099-5989-4244-afa0-a0c66fdf1135"),
                            ColumnId = new Guid("15d29aed-84fd-41e6-9377-b63c61b6aa9f"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("1de0d575-bfe6-44d7-99a8-320144dcfedb"),
                            ColumnId = new Guid("781f1c17-82b3-4914-a14c-455faa693cc0"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("2e9f107c-112e-4811-b0a0-b337228223ba"),
                            ColumnId = new Guid("781f1c17-82b3-4914-a14c-455faa693cc0"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("fd299de6-7b76-4a39-8345-89ad67919f35"),
                            ColumnId = new Guid("781f1c17-82b3-4914-a14c-455faa693cc0"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("c03975e4-30a8-4e4e-86a8-9fab4b55e8b7"),
                            ColumnId = new Guid("781f1c17-82b3-4914-a14c-455faa693cc0"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("4fb0fd5b-91aa-4648-9c03-54196b79975e"),
                            ColumnId = new Guid("32a01d96-d55c-4672-aa24-4158e6752caf"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("dfde9d52-294a-4eab-a454-4e16b39709a2"),
                            ColumnId = new Guid("32a01d96-d55c-4672-aa24-4158e6752caf"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("7a697820-d839-46c8-8bad-3e020b3927fd"),
                            ColumnId = new Guid("32a01d96-d55c-4672-aa24-4158e6752caf"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("9ea95207-d421-4286-99b9-44cd37be9ace"),
                            ColumnId = new Guid("32a01d96-d55c-4672-aa24-4158e6752caf"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("30f87ed4-efdb-4c38-b6a0-3cc0af793874"),
                            ColumnId = new Guid("988c9678-b13d-4aa3-bc5c-c0d69ea09703"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("e43a98de-1d2b-46dc-8f20-a63fe32c9865"),
                            ColumnId = new Guid("988c9678-b13d-4aa3-bc5c-c0d69ea09703"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("79816a01-4550-4847-ab8e-71887271e440"),
                            ColumnId = new Guid("c631a458-58e3-4bae-b8ae-2dc2009fbfa5"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("9134954d-2002-4d87-a7aa-10d491d9cff0"),
                            ColumnId = new Guid("c631a458-58e3-4bae-b8ae-2dc2009fbfa5"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("c558dbca-e48f-4d74-b062-3cb16d6472fc"),
                            ColumnId = new Guid("902ccb43-f5d4-4de3-85e9-9939099a032a"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("f2c3c3ed-1582-4711-928d-ab1816b512b3"),
                            ColumnId = new Guid("902ccb43-f5d4-4de3-85e9-9939099a032a"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("db32655f-f77c-414c-aef1-c596b6fa994e"),
                            ColumnId = new Guid("2275154a-236e-4b6c-9289-72ec88debe17"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("3e7e6e17-603e-4f37-86dc-f807191ef6f0"),
                            ColumnId = new Guid("2275154a-236e-4b6c-9289-72ec88debe17"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("fd8e6b92-3a51-4d38-83c5-d0931e78ab2c"),
                            ColumnId = new Guid("2275154a-236e-4b6c-9289-72ec88debe17"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("fce0d72b-cd33-4261-a17b-a14eab59a9ed"),
                            ColumnId = new Guid("2275154a-236e-4b6c-9289-72ec88debe17"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("c0ccbf8c-bab4-4ef3-b64a-4baeda514b0e"),
                            ColumnId = new Guid("f3cb36fd-166b-4367-8ac0-4b64931816a3"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("d01eec62-50c6-466d-a71b-2f568f04fbc5"),
                            ColumnId = new Guid("f3cb36fd-166b-4367-8ac0-4b64931816a3"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("a417dbf5-ae68-4ca7-94af-5733f0bff198"),
                            ColumnId = new Guid("f3cb36fd-166b-4367-8ac0-4b64931816a3"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("8dffe43a-b997-4bba-b003-12ddd7e2c328"),
                            ColumnId = new Guid("0040f722-bc93-4383-8e16-94524dd018ee"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("d1ccc318-8738-4d92-9fbb-0a1245c1aa68"),
                            ColumnId = new Guid("0040f722-bc93-4383-8e16-94524dd018ee"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("365eb2fe-c983-4bae-965a-f4c5b8dbbd97"),
                            ColumnId = new Guid("b50cfab0-1039-4031-913e-54173cecec39"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("710b4e46-b909-445c-bc51-bf03ffeb7b27"),
                            ColumnId = new Guid("b50cfab0-1039-4031-913e-54173cecec39"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a90dbec-31aa-418a-a1f3-031b78829673"),
                            EditBlockId = new Guid("a39ab3ef-84af-46d1-b28f-e07b54e17a5a"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("24931e37-1efa-468f-9169-b00e961eec55"),
                            EditBlockId = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("4d1dfc00-c9a9-4f65-ae13-0d8dbcab2fec"),
                            EditBlockId = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2dfe1efd-361f-48e1-84c0-3079114de32d"),
                            EditBlockId = new Guid("ea9da32e-4ab7-4e7d-9677-576252138b26"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1bbcbc5b-b337-45bd-87e5-2e19fd5092c8"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("33b0124e-85c9-4527-9403-dfc57fe9654f"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("806b8266-770b-4a2d-9d02-252cd52bb218"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("594a6fc2-3bf1-4d0e-913d-8dc57ea1a260"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("4f04d524-8c6d-420f-869b-d0d704f6c1f2"),
                            EditBlockId = new Guid("43e5b1fe-fa32-4c5e-a60c-d9b6570c3308"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("b3c9e804-7c50-4433-978a-492ce05db224"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("9501cc09-1a05-44c7-9dbb-9983efd2d810"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("aa6b9511-d35a-4eb0-8d0e-6cdc2d3388de"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("775495e2-d608-4ccf-9924-e8161a715d60"),
                            EditBlockId = new Guid("4b9a9bb8-9bdd-47e5-a969-14a375f1e20e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24e2503e-4776-4373-85c7-abacc3aba665"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6d1858f1-6238-4767-97c0-9ae21b66ba59"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14af8ae1-6786-45ea-8325-873875b167ce"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("909032a2-1136-4d26-8727-5f97f54abf43"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("4ff2d227-7bcc-417a-8f04-0768d6d491bf"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("52681f66-4c73-4a07-a98e-417cc6a367fd"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("dd408d1a-bbb0-4856-b47d-b017c7a7d095"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
