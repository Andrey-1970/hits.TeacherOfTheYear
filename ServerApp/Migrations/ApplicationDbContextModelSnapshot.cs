// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            EditBlocksId = new Guid("92604528-93a4-4da7-87dc-0994b986fd1d"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            EditBlocksId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("92604528-93a4-4da7-87dc-0994b986fd1d"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("d17c9b0e-35f5-4c5e-8ac5-0ecb31bf26eb"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("76ac16dd-2b7f-4e7d-9fb0-f68c5dc592e0"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("f7b4bc3a-8aae-4701-acbf-f87ecd7c3029"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("ad023554-0e57-434a-8a91-f3d1cd528a09"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("3afdf237-9bf7-48da-86e6-8c14bd12bb7e"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("e0270bc1-1f27-488f-90ae-cc1334cc7fdf"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("3b87ddd6-c491-4aaf-91eb-cf280c219179"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("151544da-b9e2-44aa-9704-fb895aa940ca"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("f640ad32-3192-4856-ab02-ad0dc8674af5"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("f816f7e0-a764-414b-8827-cbf5cf0f0f7d"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("f33dce84-be2b-4663-975a-597df157d73c"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("445884e2-31fa-4f47-be1d-eabcef1c5e1c"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("0ed4fde5-f504-478b-990e-783b634aa2b8"),
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3")
                        },
                        new
                        {
                            FieldsId = new Guid("b875e9a9-f79f-40dd-b178-c05c36c4d27f"),
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3")
                        },
                        new
                        {
                            FieldsId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("93901780-7992-4324-ae0f-880a6f5d2f47"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("5813bae4-e7de-4cf6-804d-08f2d5463032"),
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5")
                        },
                        new
                        {
                            FieldsId = new Guid("50fe68a7-27f7-4228-9e27-3c5ccf682656"),
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3")
                        },
                        new
                        {
                            FieldsId = new Guid("69020fa3-26f4-4d08-81bf-4b23f40f56ee"),
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3")
                        },
                        new
                        {
                            FieldsId = new Guid("4207da50-f403-49eb-a5c6-7c8d2137ee12"),
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3")
                        },
                        new
                        {
                            FieldsId = new Guid("c1b7620b-2084-4f83-bd8c-377f0cecd5d4"),
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3")
                        },
                        new
                        {
                            FieldsId = new Guid("101ff47a-a556-435e-8394-1eaf1ea307c9"),
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3")
                        },
                        new
                        {
                            FieldsId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a")
                        },
                        new
                        {
                            FieldsId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43")
                        },
                        new
                        {
                            FieldsId = new Guid("477d1793-2e3f-4aab-b852-882820bdfdb2"),
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43")
                        },
                        new
                        {
                            FieldsId = new Guid("69a9d173-0a07-4437-8d36-d13acadc433e"),
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            TablesId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            TablesId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            TablesId = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            TablesId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            TablesId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            TablesId = new Guid("93ec5328-46e7-4e28-94cd-20e4326dc3d5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            TablesId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            TablesId = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            TablesId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            TablesId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            TablesId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            TablesId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            TablesId = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            TablesId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            TablesId = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3"),
                            TracksId = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3"),
                            TracksId = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("33636b7a-81f7-4289-88c5-579f9bda3860")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("2a360925-fcaf-4e0c-aad8-8c3f1013e457")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("b42d2dd4-273e-46a0-8d95-168281437e28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("33c49a6a-3817-4b42-8c45-c2f141bb976b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("c40ba701-d7bc-4095-b8be-6fa31a5cb723")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("fb7dfe0b-aedd-4568-82ea-a1efb9818c72")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            MarksId = new Guid("0baf9e83-9036-4bf2-b8d2-9c71884d154d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            MarksId = new Guid("31127a89-ff12-4b0c-8d1f-58c5dd91b980")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            MarksId = new Guid("b84e3bce-19c8-4435-a5e5-3e1c892900b6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            MarksId = new Guid("9e3b855b-8ac2-4dc3-b18d-80b601f0b365")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            MarksId = new Guid("ffe84b57-5a03-4fc1-8db5-144afccabf4c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            MarksId = new Guid("252d996d-3f45-4357-9611-29a60b26cbe4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            MarksId = new Guid("17803e33-8c2b-4528-98f6-13a2b0a84ad6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            MarksId = new Guid("c8011067-db53-4541-b1b1-7497a06ae04b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            MarksId = new Guid("9bcf27fd-0e4d-4d35-a763-72f71d842c11")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("17803e33-8c2b-4528-98f6-13a2b0a84ad6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("c8011067-db53-4541-b1b1-7497a06ae04b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("500d8ec1-ee23-4d5f-b74c-bfbc6016ecb0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("aeff2f6b-769f-4ac6-bb5f-c6cf29cb1906")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("c8ebaf8f-b323-4826-adae-77528245f238")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("c7a31900-20ab-4393-955c-a90514a1d9bc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("f31700e4-3d91-4f45-a935-de6bd9710611")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("6aae4601-567d-4cf5-be40-f52e05ac76da")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            MarksId = new Guid("7617c3ad-94c9-4ff5-99a4-9bb6006c8221")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            MarksId = new Guid("9bcf27fd-0e4d-4d35-a763-72f71d842c11")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            MarksId = new Guid("a6b6dc2a-922e-47a7-a462-8d0e9868929c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            MarksId = new Guid("5693b29c-0a9c-4634-a2c9-cd94983849ed")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3"),
                            MarksId = new Guid("70194d43-e4ae-4098-b9b9-f58d6f6be066")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3"),
                            MarksId = new Guid("739a496e-49cc-4471-9cb7-41181bd3ba41")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("137a5e2c-c6b4-4fe4-812d-3a3a21575362"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("9b40b5ce-691f-45b5-ab1c-88413cc57b37"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("c181eb35-9529-4d0c-bd62-e70528658e53"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("c128792d-4c06-4f8e-af45-a64ef519780b"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("dde2fa72-ef9a-4e4b-b81e-2cc0ba75efcf"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("8b7cfc2b-227a-4f01-864a-e05d0d16e5a1"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3ab0af1-6e66-4e9f-87f8-2e492ace625d"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("43ec8bb4-0483-4cc5-adc4-616d55cc5fb5"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0")
                        },
                        new
                        {
                            Id = new Guid("4d17e218-c6f6-4ba9-b0d9-c7ece5624797"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0")
                        },
                        new
                        {
                            Id = new Guid("568cfc80-bd9f-483b-802f-e51fa082ebbf"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0")
                        },
                        new
                        {
                            Id = new Guid("e68a2f91-ca34-4af6-9f7d-49eb1ce6a9f9"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0")
                        },
                        new
                        {
                            Id = new Guid("2f6b678e-e1c9-429d-a667-a4de23be51be"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("b07d8eaf-32c0-4476-96bf-f99460d1ef6b"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57")
                        },
                        new
                        {
                            Id = new Guid("5e3e5e90-9440-4d63-a6b6-1ae3fb23794a"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57")
                        },
                        new
                        {
                            Id = new Guid("3919c9d8-3398-47b8-a32f-0127298e3583"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57")
                        },
                        new
                        {
                            Id = new Guid("3e7ba431-b629-4933-95e2-1a8d14bcfe57"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57")
                        },
                        new
                        {
                            Id = new Guid("a8b4931b-c498-45c2-9e96-f1a61c2fe863"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("1bb0f41c-ddca-44a6-a67d-89a78fcca2c9"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002")
                        },
                        new
                        {
                            Id = new Guid("e5454521-b2ad-4e82-9ee7-53c70e778b26"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002")
                        },
                        new
                        {
                            Id = new Guid("1fdfc36d-3f37-446e-bb03-bf27570546e0"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002")
                        },
                        new
                        {
                            Id = new Guid("5a5596ae-a8e6-4a56-9a84-16cf23379202"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002")
                        },
                        new
                        {
                            Id = new Guid("033ed5d9-21a0-417a-b21d-9f97289ed97c"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("1884c579-720b-4787-89b6-fcc4d141e87a"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca")
                        },
                        new
                        {
                            Id = new Guid("4de83241-291b-4e98-a111-a507c1415649"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca")
                        },
                        new
                        {
                            Id = new Guid("aa48b464-6114-4c33-b3cf-cdd1ed3830b6"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca")
                        },
                        new
                        {
                            Id = new Guid("ed7e8765-aa56-4683-84d1-164fc483d854"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca")
                        },
                        new
                        {
                            Id = new Guid("4af78902-4426-4887-a6b1-f444f4bc3b7d"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("ebb5c393-bc1c-4d5f-af59-a1055d697afc"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb")
                        },
                        new
                        {
                            Id = new Guid("c3e40525-2e58-4696-9c63-a5fca88bff40"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb")
                        },
                        new
                        {
                            Id = new Guid("4d07c980-4181-49c1-ab50-14f1de2b55e8"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb")
                        },
                        new
                        {
                            Id = new Guid("d39b4cd2-3048-4ed7-9aba-594cc73a2c3f"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb")
                        },
                        new
                        {
                            Id = new Guid("290dec6f-81e1-483b-adfc-664e3740a55e"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd"),
                            Value = "Количество монографий/глав в монографии"
                        },
                        new
                        {
                            Id = new Guid("5ee6c37a-723a-44fb-91eb-be81714bd504"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd")
                        },
                        new
                        {
                            Id = new Guid("2d15f373-c72d-4a56-84e2-61e26d4e9f66"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd")
                        },
                        new
                        {
                            Id = new Guid("1552ba58-e764-44ab-8a39-7ed90aeba4ad"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd")
                        },
                        new
                        {
                            Id = new Guid("74830300-e7ce-405f-92b4-4822bf6b7db4"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd")
                        },
                        new
                        {
                            Id = new Guid("8417cee8-d676-4bdf-b97b-98b501ea5832"),
                            ColumnId = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff"),
                            Value = "Количество патентов"
                        },
                        new
                        {
                            Id = new Guid("a677fad9-c395-4eac-a639-4f8d970d1e19"),
                            ColumnId = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff")
                        },
                        new
                        {
                            Id = new Guid("0e271eef-145b-4780-9a0f-f6eb0870e5d1"),
                            ColumnId = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff")
                        },
                        new
                        {
                            Id = new Guid("8a75955d-e344-4ddb-b443-fb792270bb81"),
                            ColumnId = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff")
                        },
                        new
                        {
                            Id = new Guid("aae97e1e-7ccf-4617-8f7e-fa76fda31f05"),
                            ColumnId = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64c95133-b80f-427b-a4e9-60f351347a8c"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("db19f546-ab80-4f6c-a9e4-5be4dde60250"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("33c4a5f3-3731-4d4d-bbd5-7cfd4b551647"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("7f6b715f-8679-4c8f-b7ee-64e924aef0de"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("806323cb-5308-47db-9a83-f21f1591cfc8"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("88a70167-4ffb-4db9-894b-5d32104e85ce"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("41265bc0-13cb-4627-b372-d90724ee42dd"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("341217d0-5dee-4fc7-8783-7bed4f3d2a91"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("b752e3ba-8492-4cc4-88de-40b0046f7e06"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("ba89868f-f4cb-4a4d-8584-90ae0eceac89"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("fb71d8d3-490a-49da-9f7c-bf95bf2d3b9b"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("83b5b158-c291-43f6-bf72-35e4767709d8"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("7b6fc0c6-2dbe-4852-8b12-390040c253f5"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("f8f92e98-f906-4a39-be1c-d79685c530ab"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("122de54f-7402-483e-8d0c-cec94eceb021"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("25849ce2-029d-48ec-9133-31125b7ed7a1"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("e0c0caa3-0221-4720-8e55-366e47bdbf2c"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("170f068e-8435-482a-a82f-3b548a7f2dbd"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("5a1b2496-2c20-4309-9c01-363cabfce35b"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("942fc849-04ab-46cc-b6ac-970cdafd3cb5"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("e246a38f-59ec-4367-ad98-7baa0faa603d"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("b93ef985-406b-4944-9df0-6f70c802a643"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("f36b960f-7f10-4811-86df-ede261dce6c4"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("038a60b5-732c-4c83-aa37-e1e510dcb43d"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("925ad953-ea2c-44a6-a96b-c7bf07f415da"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("9a9d24a6-f390-4841-802e-107529fb6bc8"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("5b62fd88-5467-447f-8707-ad4e2254c62d")
                        },
                        new
                        {
                            Id = new Guid("300f1cba-7187-450e-9aeb-7e96fabb834a"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("308387c2-1959-43dc-9f51-c6e4cbfaa61c"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("93ec5328-46e7-4e28-94cd-20e4326dc3d5"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("05632b11-f8fa-4054-99ef-72565e446f80"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("93ec5328-46e7-4e28-94cd-20e4326dc3d5"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("7fe231c5-c678-4621-8c5b-3a8a6a5d69c4"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("414f9fdb-4b01-4290-b71b-5ef69a23eac0"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("30ee05e8-ab13-4cdc-a4bf-ef27a9f67226"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("e1dd6073-1847-4a36-9705-4253d722af58"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("bbbc9c35-c00e-4ea8-a3f7-941895b5d323"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("721d79ea-ebf3-4d18-9d45-6987933dd569"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("02e5cc48-6ff5-4273-b4b1-3b13009830ec"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("d56983c8-abf8-4a98-9665-9dac06bad60d"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("ddfbcc4d-136a-479f-af5e-61b5c3bf8b71"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("3850881e-5f56-43a7-9dc5-b9e48d1a9b48"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("b19e8530-f33f-415d-a5ee-b5a1297718c1"),
                            IsRequired = false,
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("581ee557-3db2-4231-8a9b-8bdf2d2afa05"),
                            IsRequired = false,
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("e7e472e1-c831-4f06-aeeb-70fab1082bee"),
                            IsRequired = false,
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("49d61aea-6def-487a-93d0-8bd51c808325"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("e9cd90e4-9427-467f-a93b-0948f62ddebe"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("dea2ce3a-b36e-4929-a2b6-185184e6a12c"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("428bab31-5ade-4442-a96f-81f0f4be720b"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("d639d925-5a37-4511-a2d0-dcc4aedae45c"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("0195a14e-d898-43a7-ac84-c619c77ede74"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("bd6f46e5-279a-4548-bcbf-289c82e3e807"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("f6ccddbd-01e2-42db-9f90-f276d2ceda5e"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("a8346dba-f318-4e36-aa72-0f5a2049ede1"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("3b2a5720-e278-4e22-ab45-f686c4b23660"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("a44567b0-4b58-4880-80f2-d68848c0e404"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("255e216d-9eb7-465d-834b-07a34bea975b"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1"),
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("92604528-93a4-4da7-87dc-0994b986fd1d"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17c9b0e-35f5-4c5e-8ac5-0ecb31bf26eb"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("76ac16dd-2b7f-4e7d-9fb0-f68c5dc592e0"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("3d876c9d-62dd-4294-ba68-8ab7322ee3b4")
                        },
                        new
                        {
                            Id = new Guid("f7b4bc3a-8aae-4701-acbf-f87ecd7c3029"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("ad023554-0e57-434a-8a91-f3d1cd528a09"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("3afdf237-9bf7-48da-86e6-8c14bd12bb7e"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("e0270bc1-1f27-488f-90ae-cc1334cc7fdf"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("3b87ddd6-c491-4aaf-91eb-cf280c219179"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("151544da-b9e2-44aa-9704-fb895aa940ca"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("f640ad32-3192-4856-ab02-ad0dc8674af5"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("f816f7e0-a764-414b-8827-cbf5cf0f0f7d"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("f33dce84-be2b-4663-975a-597df157d73c"),
                            EditBlockId = new Guid("bc88acd8-7e71-499c-83c0-e08e597a7ff6"),
                            IsRequired = true,
                            Name = "Дополнительная информация",
                            Number = 11,
                            Placeholder = "Пример",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Направление конкурса",
                            Number = 12,
                            Placeholder = "Выберите направление конкурса",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("445884e2-31fa-4f47-be1d-eabcef1c5e1c"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 13,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("0ed4fde5-f504-478b-990e-783b634aa2b8"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Название конкурсной работы",
                            Number = 14,
                            Placeholder = "Введите название своей конкурсной работы",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("b875e9a9-f79f-40dd-b178-c05c36c4d27f"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Ссылка на конкурсную работу",
                            Number = 15,
                            Placeholder = "Введите ссылку своей конкурсной работы",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 16,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("93901780-7992-4324-ae0f-880a6f5d2f47"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 17,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("5813bae4-e7de-4cf6-804d-08f2d5463032"),
                            EditBlockId = new Guid("a53608f1-ae73-4fc7-808d-58b423dab7c6"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162")
                        },
                        new
                        {
                            Id = new Guid("50fe68a7-27f7-4228-9e27-3c5ccf682656"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("69020fa3-26f4-4d08-81bf-4b23f40f56ee"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("4207da50-f403-49eb-a5c6-7c8d2137ee12"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("c1b7620b-2084-4f83-bd8c-377f0cecd5d4"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsRequired = true,
                            Name = "Защитившиеся специалисты",
                            Number = 22,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("101ff47a-a556-435e-8394-1eaf1ea307c9"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsRequired = true,
                            Name = "Защитившиеся магистры",
                            Number = 23,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("477d1793-2e3f-4aab-b852-882820bdfdb2"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        },
                        new
                        {
                            Id = new Guid("69a9d173-0a07-4437-8d36-d13acadc433e"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 25,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33636b7a-81f7-4289-88c5-579f9bda3860"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8")
                        },
                        new
                        {
                            Id = new Guid("2a360925-fcaf-4e0c-aad8-8c3f1013e457"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8")
                        },
                        new
                        {
                            Id = new Guid("b42d2dd4-273e-46a0-8d95-168281437e28"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("101ff47a-a556-435e-8394-1eaf1ea307c9"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("33c49a6a-3817-4b42-8c45-c2f141bb976b"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("50fe68a7-27f7-4228-9e27-3c5ccf682656"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c40ba701-d7bc-4095-b8be-6fa31a5cb723"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("69020fa3-26f4-4d08-81bf-4b23f40f56ee"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("fb7dfe0b-aedd-4568-82ea-a1efb9818c72"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1")
                        },
                        new
                        {
                            Id = new Guid("0baf9e83-9036-4bf2-b8d2-9c71884d154d"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14")
                        },
                        new
                        {
                            Id = new Guid("31127a89-ff12-4b0c-8d1f-58c5dd91b980"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50")
                        },
                        new
                        {
                            Id = new Guid("b84e3bce-19c8-4435-a5e5-3e1c892900b6"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50")
                        },
                        new
                        {
                            Id = new Guid("9e3b855b-8ac2-4dc3-b18d-80b601f0b365"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50")
                        },
                        new
                        {
                            Id = new Guid("ffe84b57-5a03-4fc1-8db5-144afccabf4c"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("f20d99eb-6325-420b-8f91-054d796bac50")
                        },
                        new
                        {
                            Id = new Guid("252d996d-3f45-4357-9611-29a60b26cbe4"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("93ec5328-46e7-4e28-94cd-20e4326dc3d5")
                        },
                        new
                        {
                            Id = new Guid("17803e33-8c2b-4528-98f6-13a2b0a84ad6"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("c8011067-db53-4541-b1b1-7497a06ae04b"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05")
                        },
                        new
                        {
                            Id = new Guid("9bcf27fd-0e4d-4d35-a763-72f71d842c11"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192")
                        },
                        new
                        {
                            Id = new Guid("500d8ec1-ee23-4d5f-b74c-bfbc6016ecb0"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14")
                        },
                        new
                        {
                            Id = new Guid("aeff2f6b-769f-4ac6-bb5f-c6cf29cb1906"),
                            EvaluationMethodName = "EvaluateMark17",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("c8ebaf8f-b323-4826-adae-77528245f238"),
                            EvaluationMethodName = "EvaluateMark18",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("c7a31900-20ab-4393-955c-a90514a1d9bc"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("477d1793-2e3f-4aab-b852-882820bdfdb2"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("f31700e4-3d91-4f45-a935-de6bd9710611"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("69a9d173-0a07-4437-8d36-d13acadc433e"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("6aae4601-567d-4cf5-be40-f52e05ac76da"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c")
                        },
                        new
                        {
                            Id = new Guid("7617c3ad-94c9-4ff5-99a4-9bb6006c8221"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c")
                        },
                        new
                        {
                            Id = new Guid("a6b6dc2a-922e-47a7-a462-8d0e9868929c"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322")
                        },
                        new
                        {
                            Id = new Guid("5693b29c-0a9c-4634-a2c9-cd94983849ed"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1")
                        },
                        new
                        {
                            Id = new Guid("70194d43-e4ae-4098-b9b9-f58d6f6be066"),
                            FieldId = new Guid("b875e9a9-f79f-40dd-b178-c05c36c4d27f"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("739a496e-49cc-4471-9cb7-41181bd3ba41"),
                            FieldId = new Guid("b875e9a9-f79f-40dd-b178-c05c36c4d27f"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dade1ccf-1ee6-4cc3-aaa1-e44d1f0c7ec5"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b716fc97-91d3-441a-8bce-59f9231a58f3"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b4a7bedd-e745-4b41-b8a1-447e2bd15985"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("a9314666-f107-4aea-b355-49b3b5b85a9a"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ff833618-5fad-4038-ad97-8019a654fc43"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("211fd89a-4ff7-4818-a3df-1193593e4a98"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("ae3a47b4-c552-4c5e-bd9e-888044fe1ed3"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae421b9d-8ee8-41db-ab4a-74e05bdc0fb0"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("797acf98-d2a3-4c48-ad8a-868e98235a57"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("b29e47d7-af7a-4461-92fd-bdca465da002"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("39548b71-f254-4b20-b9dd-02351c0d98ca"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("083a0f09-87c0-4739-b417-82c34aeb01eb"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("24be76c8-43cd-4ae2-ae3d-608ad67efddd"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        },
                        new
                        {
                            Id = new Guid("4a6328fa-97bc-408b-8ed5-7d6997ea28ff"),
                            IsPrefilled = true,
                            TableId = new Guid("075fff3c-a7ef-428b-b211-355038fb5646")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88404e7a-5b05-429d-a305-02da3b317dcc"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("9237aeb2-9f32-40ca-9719-edaaf312329f"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "ТЕХНИКА И ТЕХНОЛОГИИ СТРОИТЕЛЬСТВА"
                        },
                        new
                        {
                            Id = new Guid("40b2200e-a689-42eb-858c-92f28df299c6"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "СТРОИТЕЛЬСТВО И АРХИТЕКТУРА"
                        },
                        new
                        {
                            Id = new Guid("52cb6301-c4e4-4f21-9685-1d0b514d9cf6"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "ЭЛЕКТРО- И ТЕПЛОЭНЕРГЕТИКА"
                        },
                        new
                        {
                            Id = new Guid("b5f22941-b208-46c6-a994-c24050a168a0"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "ПРИКЛАДНАЯ ГЕОЛОГИЯ, ГОРНОЕ ДЕЛО, НЕФТЕГАЗОВОЕ ДЕЛО И ГЕОДЕЗИЯ"
                        },
                        new
                        {
                            Id = new Guid("fa9f85d8-815b-41f9-8bbf-7a74d31384e5"),
                            FieldId = new Guid("97a67a1f-1ba2-49c7-bc6d-8342f32e8cf3"),
                            Value = "НЕДРОПОЛЬЗОВАНИЕ И ГОРНЫЕ НАУКИ"
                        },
                        new
                        {
                            Id = new Guid("6c8e1829-d1af-4794-9afa-2c9863eac7d3"),
                            FieldId = new Guid("445884e2-31fa-4f47-be1d-eabcef1c5e1c"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("2e914115-59f3-48ab-a478-453b1421e9d9"),
                            FieldId = new Guid("445884e2-31fa-4f47-be1d-eabcef1c5e1c"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("29bc4e41-a0bb-4af1-8192-e2bb6293872c"),
                            FieldId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("774f557e-cc7a-43ed-8841-540947e36f70"),
                            FieldId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("9bc3a100-3ce6-4bc6-ba7b-dfc273b7001b"),
                            ColumnId = new Guid("33c4a5f3-3731-4d4d-bbd5-7cfd4b551647"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("7bbe59b1-1027-423c-b5de-bd873be5a8b9"),
                            ColumnId = new Guid("33c4a5f3-3731-4d4d-bbd5-7cfd4b551647"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("bdb9edc3-1042-46fb-bc42-492f98f3e0bb"),
                            ColumnId = new Guid("33c4a5f3-3731-4d4d-bbd5-7cfd4b551647"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("493f5cfb-638e-490c-813e-1191b982aef1"),
                            ColumnId = new Guid("b93ef985-406b-4944-9df0-6f70c802a643"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("43b06e1f-dbfa-489f-b9af-5f790a242c4e"),
                            ColumnId = new Guid("b93ef985-406b-4944-9df0-6f70c802a643"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("369ce779-d1f7-45ef-be26-f3e78d79e867"),
                            ColumnId = new Guid("b93ef985-406b-4944-9df0-6f70c802a643"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("be543eb2-a016-4f04-9c19-c0a0e20e1c61"),
                            ColumnId = new Guid("05632b11-f8fa-4054-99ef-72565e446f80"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("110e2456-c69b-4066-8c3c-174817cce245"),
                            ColumnId = new Guid("05632b11-f8fa-4054-99ef-72565e446f80"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("e62fe851-d3f3-45b5-84a5-4670e686fcd1"),
                            ColumnId = new Guid("428bab31-5ade-4442-a96f-81f0f4be720b"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("8cd8eeae-1e1d-4929-9228-a800c0e1387c"),
                            ColumnId = new Guid("428bab31-5ade-4442-a96f-81f0f4be720b"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("d0c95176-f836-469d-90ab-2e444a4e54fe"),
                            ColumnId = new Guid("0195a14e-d898-43a7-ac84-c619c77ede74"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("cf2720aa-4f3b-47c6-bd25-4971feaab307"),
                            ColumnId = new Guid("0195a14e-d898-43a7-ac84-c619c77ede74"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("a7a4a998-d6de-4519-bb14-4abce446944f"),
                            ColumnId = new Guid("0195a14e-d898-43a7-ac84-c619c77ede74"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("da19f358-2045-4bc6-8ccb-91cd27b787ee"),
                            ColumnId = new Guid("3b2a5720-e278-4e22-ab45-f686c4b23660"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("495ed871-9bb0-4f24-b1c5-9e1a3db8ae59"),
                            ColumnId = new Guid("3b2a5720-e278-4e22-ab45-f686c4b23660"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("9fbeedb8-535f-4e69-b74f-47a40d62acaf"),
                            ColumnId = new Guid("3b2a5720-e278-4e22-ab45-f686c4b23660"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("e7d9272d-b3b6-45d1-8476-535cf41826bd"),
                            FieldId = new Guid("30aac708-467d-4ec4-8b54-9b483fb71e47"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0b6d7c2-db9b-47d5-b6f1-cd7e57558c05"),
                            EditBlockId = new Guid("92604528-93a4-4da7-87dc-0994b986fd1d"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("92022fd9-e92e-46fd-9462-f69f76d86192"),
                            EditBlockId = new Guid("92604528-93a4-4da7-87dc-0994b986fd1d"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("509e5c49-cc9a-4a4b-9443-da813a84fbc8"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("57adaec2-aa81-4afd-8cbf-470fc58684b1"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f031480a-cd5f-4339-88ff-8a53cd78d5fc"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f20d99eb-6325-420b-8f91-054d796bac50"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("93ec5328-46e7-4e28-94cd-20e4326dc3d5"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("1acbf44b-5fa7-4ef8-99bc-5db4bc523a14"),
                            EditBlockId = new Guid("69c6c4d8-f0f8-40c8-9841-b8bba0b50bc8"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("2d90a9a6-f608-4de4-bac8-cbace44d6a14"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("075fff3c-a7ef-428b-b211-355038fb5646"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("5d1cd3f8-d0fc-4815-9502-0254d0a2127c"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("068b44e7-b1a4-465b-94ac-c4b311922322"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("1ce0c445-191e-42fa-989d-cc0f6259f8c1"),
                            EditBlockId = new Guid("87123e7d-5118-421f-b5a0-ccfde837584b"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f9dc60d-5b81-48a1-a515-5d0f9bc53eb7"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("b6a38484-db63-494c-bf61-84a82b230f8f"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19da035a-5700-41ce-afab-d0a43b7b4abe"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("e9932da7-4de9-427a-ad28-48466e4a726e"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67fd9dc2-131c-499f-85e4-cefdb4ae4927"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("a8702e10-213e-4871-96d5-a77fe88e1162"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("5b62fd88-5467-447f-8707-ad4e2254c62d"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("3d876c9d-62dd-4294-ba68-8ab7322ee3b4"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
