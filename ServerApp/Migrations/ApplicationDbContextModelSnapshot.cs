// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("898a2db3-681c-4193-9a3e-3365f8d407f6"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("5864f8c3-7ba5-4c48-8f9a-b5b86d4fcbaa"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("e6ac8fc4-f5e0-4798-90ea-9925ccb1fc80"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("1e3c8506-66bc-45e0-b6ac-e912b545d977"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("8f4abd5f-9e34-4341-b0f0-f4bd35750049"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("0bffacbf-65ea-47cc-894c-1e249115fc24"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("eea0b5e0-eb9f-43be-bd46-8d5d3acb28c8"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("22801f72-9a87-4419-9409-39880e9599ca"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("63e76f1d-3b8c-4f72-b1d8-8e52b2e60502"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("9d57e084-a977-4568-a2ed-fc87a40d7e2d"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("c4461c38-c066-4f87-8f94-2adccf0f7a89"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("befbfef1-efdc-45a5-81a5-71d44b039c05"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("5a10fb52-3c96-43dd-88dd-bdcdc23b9ff5"),
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400")
                        },
                        new
                        {
                            FieldsId = new Guid("18ae4c9f-36ad-4b3a-ac7e-bb98aff5a395"),
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6")
                        },
                        new
                        {
                            FieldsId = new Guid("f2679ff9-2d1e-4df1-af6a-54ab9ca0fedd"),
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6")
                        },
                        new
                        {
                            FieldsId = new Guid("bb28831b-8ce8-4533-8864-88ab1caa8d37"),
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6")
                        },
                        new
                        {
                            FieldsId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b")
                        },
                        new
                        {
                            FieldsId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf")
                        },
                        new
                        {
                            FieldsId = new Guid("836bd280-f79d-4660-881a-b9e4e360ecf8"),
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf")
                        },
                        new
                        {
                            FieldsId = new Guid("1d722891-12da-42be-9fb3-68e116345030"),
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            TablesId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            TablesId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            TablesId = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            TablesId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            TablesId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            TablesId = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            TablesId = new Guid("f6204212-69c2-41dd-b558-09241903005c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            TablesId = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            TablesId = new Guid("f6204212-69c2-41dd-b558-09241903005c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            TablesId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            TablesId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            TablesId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            TablesId = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            TablesId = new Guid("260c8053-2efc-436e-8ff2-35361200e680")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            TablesId = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            TablesId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            TracksId = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("51376444-9107-4688-81cb-e66a5fc0f400"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            TracksId = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("f072ad3c-ad1f-4d92-8e14-08f915fbb3dc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("f7e8cc74-2d10-4848-8d6d-291b4c2aa5f8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("81740971-23c2-482e-b9d7-195fd706c3f5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("fd77ba1c-f054-4800-9bbc-07f93dc9806b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("49474902-6651-4144-8aa7-3aeb5ecd0c7f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("07145293-58b0-4ab7-8abf-f1769e7f7153")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            MarksId = new Guid("4bc1f7eb-4b40-4078-ad99-c7e0eaf7e173")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            MarksId = new Guid("6a3368eb-b14c-4ffb-bd07-637d5f66807d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            MarksId = new Guid("15e8ef9b-917a-40b0-a486-d9e431f27389")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            MarksId = new Guid("b3a0f16e-5028-4bb4-b6f3-386780973e19")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            MarksId = new Guid("20dce4fb-6af6-44ff-9069-c33b9f8c2a62")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            MarksId = new Guid("31c3f9a9-fd1a-42d4-95ee-2fb79ccd925f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            MarksId = new Guid("df94ea15-4c38-45a6-b633-a2c413aa06f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            MarksId = new Guid("7270f593-b8e0-4a1c-a4c5-8f905cb01330")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            MarksId = new Guid("7470216a-1fd8-4d60-abd3-4b5b536431df")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("df94ea15-4c38-45a6-b633-a2c413aa06f2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("7270f593-b8e0-4a1c-a4c5-8f905cb01330")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("47c02924-102c-4e38-a2dc-7eb98bc0f15c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("5b7b5ecf-1433-4268-826c-2ed019014fb0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("8cda7aa4-7782-4268-b18b-2ae776a6f25e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("081b5017-bd6d-4c96-9c7f-19cb37408c6f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            MarksId = new Guid("bd52f4cf-770a-4c91-bf60-ce5740bd326b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            MarksId = new Guid("7470216a-1fd8-4d60-abd3-4b5b536431df")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            MarksId = new Guid("fa99fb83-0d00-48ad-8630-3c7ec6e554d9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            MarksId = new Guid("3e1ad5f5-78d7-4103-9975-143ce8ce93c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            MarksId = new Guid("41e5babc-c41d-4170-ab30-b8d1d066352a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            MarksId = new Guid("8f24493b-0796-4be2-b777-ee4f1d9faeda")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b57cc041-ce07-4659-ba2e-d418bbf66997",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "fcb35258-c969-4dcd-9678-292e28c056f7",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "16232178-31fa-4dfc-812e-00ab82c7c002",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "2342e401-c091-443d-84df-e6a9c0d8055e",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "767616eb-e0be-4dc6-983f-5e3eec96d643",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0882b3ea-6829-4173-a02b-a773b9ed32ed"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("2a9aff88-2aa8-472a-9cf3-745473a708fa"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("a449eaab-d1a0-4c65-a16f-eb802ea4ac36"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("33d307b3-75d2-4874-95e4-4daf69ea5264"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("bb6506bc-e37f-4ded-95b8-4bbf1cdf8840"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("2da8531b-1bfb-435f-90b9-669a788cebd8"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea0a9a58-74c6-4af2-b181-d96cb62922db"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("732ec941-5d82-4a0a-b0fc-14c305d67ba5"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ef28a58-b2eb-4762-908c-c66496cd2f54"),
                            ColumnId = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("cf00cc57-d26b-4518-b4b2-c50a65d47983"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("943b7983-f44c-43c6-946e-243057a4ba1b"),
                            ColumnId = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("cf00cc57-d26b-4518-b4b2-c50a65d47983")
                        },
                        new
                        {
                            Id = new Guid("a8848684-a14c-440f-b268-4ee82c1eb9c3"),
                            ColumnId = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f9ca7b43-df9b-4941-9adf-be68e0fba4ce"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("6aefdba8-2597-4b55-b324-958fb54a417b"),
                            ColumnId = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f9ca7b43-df9b-4941-9adf-be68e0fba4ce")
                        },
                        new
                        {
                            Id = new Guid("eb5ac0aa-1d8f-43f6-aa6b-95c605f4d3ac"),
                            ColumnId = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d738b5c9-6c05-414f-9b04-4b2b8e55f1e5"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("7e5a2576-4e60-465b-aa08-63667cf7bd79"),
                            ColumnId = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d738b5c9-6c05-414f-9b04-4b2b8e55f1e5")
                        },
                        new
                        {
                            Id = new Guid("a2212371-01f6-4347-a762-28cffb2ff68a"),
                            ColumnId = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4487f240-dcb8-4717-8c6b-adcc22ea7aa8"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("2637600d-6dc4-4722-91bc-b64480167b55"),
                            ColumnId = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4487f240-dcb8-4717-8c6b-adcc22ea7aa8")
                        },
                        new
                        {
                            Id = new Guid("a56276fd-9a33-445b-88f0-3c1be9bfdbf8"),
                            ColumnId = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0f28aa33-ef08-40f1-a61c-642e7d7f8f99"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("0a5b6c69-0b8f-4155-a381-4863d0cea299"),
                            ColumnId = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0f28aa33-ef08-40f1-a61c-642e7d7f8f99")
                        },
                        new
                        {
                            Id = new Guid("781b260e-12b4-43e4-ad37-5e9c3c0dacf2"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("90349177-ae64-4268-a651-4496ecf307dc"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("3d846116-f042-4df7-9e67-58cbfa57f590"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("90349177-ae64-4268-a651-4496ecf307dc")
                        },
                        new
                        {
                            Id = new Guid("7c585fb8-7547-438e-a914-a2fa71f36890"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("45409cb5-49dc-4664-8694-38d3c8925623"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("64378e9e-6ad8-417d-b300-c228b1d92da5"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("45409cb5-49dc-4664-8694-38d3c8925623")
                        },
                        new
                        {
                            Id = new Guid("3eea3937-1440-4e87-af8a-f8007e8b5e79"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0dcbdfbe-6986-48bc-820d-438b510eb625"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("8e8fd23a-5e2e-412b-9a64-c1e58995ecc5"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0dcbdfbe-6986-48bc-820d-438b510eb625")
                        },
                        new
                        {
                            Id = new Guid("7d7f69ab-48df-43b6-b2f6-b5454a339d92"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("67f206c5-997b-4d6b-8c0c-7cb64a2911e8"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("d7e7d4d6-63e6-4793-ba41-3d26d3cdaea1"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("67f206c5-997b-4d6b-8c0c-7cb64a2911e8")
                        },
                        new
                        {
                            Id = new Guid("79360276-d9e6-442b-adea-c1b268810be3"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9c30c47d-1a42-4820-9fa1-7daea5ef5845"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("82768df0-4644-400a-8bd7-ae50a86e1af8"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9c30c47d-1a42-4820-9fa1-7daea5ef5845")
                        },
                        new
                        {
                            Id = new Guid("cd562c6c-470d-4404-b827-d8a021a7b4bc"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("bb654504-d95c-464c-aa18-612162030041"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("7adb578d-65d4-436f-806a-2126e8c4c973"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("bb654504-d95c-464c-aa18-612162030041")
                        },
                        new
                        {
                            Id = new Guid("2993685b-bce3-448c-b1b9-2b8b9248231a"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("bf61107c-cc6d-4e00-829d-4f1588bd3ec9"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("ac5b9c67-c117-4881-aa5d-43cf54f4b400"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("bf61107c-cc6d-4e00-829d-4f1588bd3ec9")
                        },
                        new
                        {
                            Id = new Guid("31e89ba4-6e15-420a-a485-2a3bd16cdeac"),
                            ColumnId = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("db1d97aa-ff85-484d-aeb1-a6cc70e9df66"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("cbf30aff-9a85-4d84-adba-91e65c0b9661"),
                            ColumnId = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("db1d97aa-ff85-484d-aeb1-a6cc70e9df66")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b1ea5bc-4e96-4487-9937-44dbc448cd81"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("f6f1067f-f8b3-4102-8e73-66d02104d4dd"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("483f39aa-4ca6-44f3-a27a-8a083176d776"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("f4b651eb-cf2a-4c67-bd70-9d35893b1d0a"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("6c49491e-186e-4774-a7a9-74c4d174c0c7"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("1201c93c-c98b-49b4-85b1-39fe35f1c4c3"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("e19ca419-2d91-466c-9d67-8b8bfca56417"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("f341ec5b-06f4-4c7d-aec8-1f0a5c74d73b"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("05a8574a-7928-419f-a941-25cf4ca0e9c5"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("e1d86a41-a82f-4557-9eed-d37d56072c4c"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("393bb400-a0cd-4e13-8d3e-9d5eb014ff8a"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("89bc7aac-c1b2-4099-8077-bc7035a19528"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("d4162eb4-b55d-461d-80e2-610a35743073"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("625e8961-c708-4ac7-83e5-9bc880d8dd3d"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("abe2435f-49a8-4d7d-b513-51895adffb57"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("d12d2aa5-bc4e-4a81-9986-b8e20ab59667"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("7f635d66-290e-4d7b-bed7-dd2aa79dec5c"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("6aaf38ab-e08b-4f3a-ba8a-ec09a8ad2396"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("96aad0f5-de13-4b1b-a16d-43c005e382e8"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("8297da08-c73f-4c07-bb4e-2a4470842a56"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("8ca6dcb2-c3e2-424f-87ef-9d500d23acc5"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("792fd9dd-3b87-410d-acd7-b119c19b1513"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("536a10a7-a110-4d84-b48e-74301d72e959"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("c113883d-7e2c-4332-9979-3d56c964c87e"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("3a2d0007-b623-49f4-becf-2bafa9dd908e"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("9c4641e4-f727-4c4e-8b66-5e674465329d"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("960865fd-c214-4bf8-9509-799da5a74295")
                        },
                        new
                        {
                            Id = new Guid("45a83618-a23f-4c98-aa85-9d3ae094174f"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("73303f54-cb92-4225-af6f-db1510d7e7f5"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("b124ee57-d33d-4837-b88d-ccbedbd3938f"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("915d2262-0e2a-4aec-961e-b2ad7602099a"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("9563560f-e4f3-49a5-97aa-988b1474deb2"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("b2815ecd-c1b0-448b-ad9b-3d6cb5bf1e5c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("bf5bcd7f-144b-4c03-9d56-66f9c183ada0"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("78aff2c6-3f75-4eed-8d8f-88dc42abf31e"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("daf4a031-9f7c-4e43-9564-b6cabc2f7dbd"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("33a83c15-a624-472d-9211-cc755e7d8141"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("adf1a731-b853-4346-9765-88d8502f4c2b"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("c39f02c0-9ef0-41ee-9fdb-40a6fd550fbd"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("0bb55824-edbe-4b39-97f6-414183fcf347"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("e7442d83-9c9f-4f00-b9f5-47dee0036f02"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("c531f44e-65ac-41d0-b655-df2556cec160"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("35363b49-f8c3-4b14-b02f-29e1c6cf14aa"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("bd9f18ff-3f8c-491f-ba88-c5f7f50d1783"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("f5955f16-7335-4ab1-ba59-a2963907d6a4"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("05e05962-10a2-44a3-b736-14d71c2bc37b"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("78af95d0-9f9c-41d3-b8c9-429831d25659"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("a6c3e477-5688-4321-ad56-b7273e14d876"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("d09e1bbe-4d96-410c-8069-03dec5eca315"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("260c8053-2efc-436e-8ff2-35361200e680"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("54b42d1d-e7b7-4501-b43b-f55fe5cc3c63"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("260c8053-2efc-436e-8ff2-35361200e680"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("5d365cf8-710f-42a6-8be4-172a2288aab9"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("260c8053-2efc-436e-8ff2-35361200e680"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("d9f73c16-b268-485d-81e7-df5b95380bd8"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("260c8053-2efc-436e-8ff2-35361200e680"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("c6cfecc6-f25a-4f80-8dd1-a708af12f04a"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("d5466446-b5fd-4e9d-834a-00355dfd49c5"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("a8c9d0d4-ba4a-4948-9f60-553e16a43a88"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("2e4f65b0-b7a6-4d50-b282-3dddb8c6d655"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260"),
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("60f841bb-4ee1-40fb-949f-36cae61c4b97"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260"),
                            ValueTypeId = new Guid("65eecbf2-6bf0-4d64-9b11-26c0bb39728e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("898a2db3-681c-4193-9a3e-3365f8d407f6"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("5864f8c3-7ba5-4c48-8f9a-b5b86d4fcbaa"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("5669d9cf-0bf9-4078-82ec-a74c2c6bad16")
                        },
                        new
                        {
                            Id = new Guid("e6ac8fc4-f5e0-4798-90ea-9925ccb1fc80"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("1e3c8506-66bc-45e0-b6ac-e912b545d977"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("8f4abd5f-9e34-4341-b0f0-f4bd35750049"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("0bffacbf-65ea-47cc-894c-1e249115fc24"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("eea0b5e0-eb9f-43be-bd46-8d5d3acb28c8"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("22801f72-9a87-4419-9409-39880e9599ca"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("63e76f1d-3b8c-4f72-b1d8-8e52b2e60502"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("9d57e084-a977-4568-a2ed-fc87a40d7e2d"),
                            EditBlockId = new Guid("812ee785-2a26-4d6d-a9f4-3c22ec7c0a87"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("c4461c38-c066-4f87-8f94-2adccf0f7a89"),
                            EditBlockId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            EditBlockId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("befbfef1-efdc-45a5-81a5-71d44b039c05"),
                            EditBlockId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("5a10fb52-3c96-43dd-88dd-bdcdc23b9ff5"),
                            EditBlockId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7")
                        },
                        new
                        {
                            Id = new Guid("18ae4c9f-36ad-4b3a-ac7e-bb98aff5a395"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("f2679ff9-2d1e-4df1-af6a-54ab9ca0fedd"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("bb28831b-8ce8-4533-8864-88ab1caa8d37"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("836bd280-f79d-4660-881a-b9e4e360ecf8"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        },
                        new
                        {
                            Id = new Guid("1d722891-12da-42be-9fb3-68e116345030"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("772350f7-9382-44be-882d-91f217041310")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f072ad3c-ad1f-4d92-8e14-08f915fbb3dc"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099")
                        },
                        new
                        {
                            Id = new Guid("f7e8cc74-2d10-4848-8d6d-291b4c2aa5f8"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099")
                        },
                        new
                        {
                            Id = new Guid("81740971-23c2-482e-b9d7-195fd706c3f5"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("bb28831b-8ce8-4533-8864-88ab1caa8d37"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("fd77ba1c-f054-4800-9bbc-07f93dc9806b"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("18ae4c9f-36ad-4b3a-ac7e-bb98aff5a395"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("49474902-6651-4144-8aa7-3aeb5ecd0c7f"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("f2679ff9-2d1e-4df1-af6a-54ab9ca0fedd"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("07145293-58b0-4ab7-8abf-f1769e7f7153"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9")
                        },
                        new
                        {
                            Id = new Guid("4bc1f7eb-4b40-4078-ad99-c7e0eaf7e173"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905")
                        },
                        new
                        {
                            Id = new Guid("6a3368eb-b14c-4ffb-bd07-637d5f66807d"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488")
                        },
                        new
                        {
                            Id = new Guid("15e8ef9b-917a-40b0-a486-d9e431f27389"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488")
                        },
                        new
                        {
                            Id = new Guid("b3a0f16e-5028-4bb4-b6f3-386780973e19"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488")
                        },
                        new
                        {
                            Id = new Guid("20dce4fb-6af6-44ff-9069-c33b9f8c2a62"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488")
                        },
                        new
                        {
                            Id = new Guid("31c3f9a9-fd1a-42d4-95ee-2fb79ccd925f"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744")
                        },
                        new
                        {
                            Id = new Guid("df94ea15-4c38-45a6-b633-a2c413aa06f2"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("7270f593-b8e0-4a1c-a4c5-8f905cb01330"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("f6204212-69c2-41dd-b558-09241903005c")
                        },
                        new
                        {
                            Id = new Guid("7470216a-1fd8-4d60-abd3-4b5b536431df"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd")
                        },
                        new
                        {
                            Id = new Guid("47c02924-102c-4e38-a2dc-7eb98bc0f15c"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4")
                        },
                        new
                        {
                            Id = new Guid("5b7b5ecf-1433-4268-826c-2ed019014fb0"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("836bd280-f79d-4660-881a-b9e4e360ecf8"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("8cda7aa4-7782-4268-b18b-2ae776a6f25e"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("1d722891-12da-42be-9fb3-68e116345030"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("081b5017-bd6d-4c96-9c7f-19cb37408c6f"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16")
                        },
                        new
                        {
                            Id = new Guid("bd52f4cf-770a-4c91-bf60-ce5740bd326b"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16")
                        },
                        new
                        {
                            Id = new Guid("fa99fb83-0d00-48ad-8630-3c7ec6e554d9"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("260c8053-2efc-436e-8ff2-35361200e680")
                        },
                        new
                        {
                            Id = new Guid("3e1ad5f5-78d7-4103-9975-143ce8ce93c0"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9")
                        },
                        new
                        {
                            Id = new Guid("41e5babc-c41d-4170-ab30-b8d1d066352a"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("8f24493b-0796-4be2-b777-ee4f1d9faeda"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51376444-9107-4688-81cb-e66a5fc0f400"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("70afde2e-3c16-400d-abf2-335c8331d8b6"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("054f4e41-e63d-4adc-a2b6-adbc097e68d0"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("835b956b-8139-42f7-900b-30c864323f4b"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("37fdc656-142e-456e-aac9-a33969432caf"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c91dd742-f56a-4b9d-bf35-96ef66825392"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("53d36a87-2083-4385-b57b-cb2ef2979d7e"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf00cc57-d26b-4518-b4b2-c50a65d47983"),
                            IsPrefilled = true,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            Id = new Guid("f9ca7b43-df9b-4941-9adf-be68e0fba4ce"),
                            IsPrefilled = true,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            Id = new Guid("d738b5c9-6c05-414f-9b04-4b2b8e55f1e5"),
                            IsPrefilled = true,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            Id = new Guid("4487f240-dcb8-4717-8c6b-adcc22ea7aa8"),
                            IsPrefilled = true,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            Id = new Guid("0f28aa33-ef08-40f1-a61c-642e7d7f8f99"),
                            IsPrefilled = true,
                            TableId = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc")
                        },
                        new
                        {
                            Id = new Guid("90349177-ae64-4268-a651-4496ecf307dc"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("45409cb5-49dc-4664-8694-38d3c8925623"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("0dcbdfbe-6986-48bc-820d-438b510eb625"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("67f206c5-997b-4d6b-8c0c-7cb64a2911e8"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("9c30c47d-1a42-4820-9fa1-7daea5ef5845"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("bb654504-d95c-464c-aa18-612162030041"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("bf61107c-cc6d-4e00-829d-4f1588bd3ec9"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        },
                        new
                        {
                            Id = new Guid("db1d97aa-ff85-484d-aeb1-a6cc70e9df66"),
                            IsPrefilled = true,
                            TableId = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b53c94c-e173-4abf-8f2d-5be6f567ba81"),
                            FieldId = new Guid("c4461c38-c066-4f87-8f94-2adccf0f7a89"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("31e9f699-f2d4-4a80-956c-b723c1a8c90f"),
                            FieldId = new Guid("c4461c38-c066-4f87-8f94-2adccf0f7a89"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("be472dbd-ece9-4ef2-81a2-1896b6b6895a"),
                            FieldId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("0c74fcff-c546-4ad9-91ac-86a9fb83186d"),
                            FieldId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("a7302f55-bc56-4e81-be2c-e1e2151445d6"),
                            FieldId = new Guid("99144512-d4aa-4f51-ac5f-e482eede6896"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("b944c9d9-039c-465a-bbf6-b13cbc785e0f"),
                            ColumnId = new Guid("483f39aa-4ca6-44f3-a27a-8a083176d776"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("deb0fdea-167d-4c2e-afa7-85ab5d1fd292"),
                            ColumnId = new Guid("483f39aa-4ca6-44f3-a27a-8a083176d776"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("4a8aa0a2-2a5d-4dca-b53b-e2dc79508a40"),
                            ColumnId = new Guid("483f39aa-4ca6-44f3-a27a-8a083176d776"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("9cd144d5-9d9b-4fd9-9819-29a8277a6002"),
                            ColumnId = new Guid("792fd9dd-3b87-410d-acd7-b119c19b1513"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("f3b77a71-1350-454e-b3c0-33a5c6cdd5f8"),
                            ColumnId = new Guid("792fd9dd-3b87-410d-acd7-b119c19b1513"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("77e6acf5-7555-425b-8ac8-bbc8a5885d89"),
                            ColumnId = new Guid("792fd9dd-3b87-410d-acd7-b119c19b1513"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("6fa33691-9aac-4a5b-9e27-b89dfc608801"),
                            ColumnId = new Guid("9563560f-e4f3-49a5-97aa-988b1474deb2"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("86022f80-9b77-4f8a-a892-37e13dc2db3e"),
                            ColumnId = new Guid("9563560f-e4f3-49a5-97aa-988b1474deb2"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("a42baa43-437f-411c-957c-600f11b37f7a"),
                            ColumnId = new Guid("78af95d0-9f9c-41d3-b8c9-429831d25659"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("493bd1c7-3c0d-4dfd-9524-1cf8b98e7b45"),
                            ColumnId = new Guid("78af95d0-9f9c-41d3-b8c9-429831d25659"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("6aa413a8-71b4-45c5-bea6-059c2c0a237b"),
                            ColumnId = new Guid("d09e1bbe-4d96-410c-8069-03dec5eca315"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("3989408b-112f-49c6-b969-0c913c72e170"),
                            ColumnId = new Guid("d09e1bbe-4d96-410c-8069-03dec5eca315"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("aba509b5-f902-48b8-9048-89c1ee15dc39"),
                            ColumnId = new Guid("d09e1bbe-4d96-410c-8069-03dec5eca315"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("f0f7b705-be9d-4e12-956c-d81b161fad24"),
                            ColumnId = new Guid("c6cfecc6-f25a-4f80-8dd1-a708af12f04a"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("43262c07-64f0-42d9-b4f2-86cedc1e2dc7"),
                            ColumnId = new Guid("c6cfecc6-f25a-4f80-8dd1-a708af12f04a"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("cc927f20-cb1c-4338-b7ef-d8ac56ce95a4"),
                            ColumnId = new Guid("c6cfecc6-f25a-4f80-8dd1-a708af12f04a"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("92ecc025-83ec-41b8-8dd2-1eaee59f0856"),
                            ColumnId = new Guid("c113883d-7e2c-4332-9979-3d56c964c87e"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("59ae5bd6-cbac-402b-9e6b-9f815e2c80ca"),
                            ColumnId = new Guid("c113883d-7e2c-4332-9979-3d56c964c87e"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("85d6ebfc-b7fd-45e7-a424-cb6ed112da96"),
                            ColumnId = new Guid("73303f54-cb92-4225-af6f-db1510d7e7f5"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("e1b1cf57-4818-4da4-b10b-fb71eb84e1a8"),
                            ColumnId = new Guid("73303f54-cb92-4225-af6f-db1510d7e7f5"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("2dbf719d-64f9-4bbd-aec7-be201eb8bd05"),
                            ColumnId = new Guid("c39f02c0-9ef0-41ee-9fdb-40a6fd550fbd"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("71bdc85a-ce35-425e-951a-c3f659c75f64"),
                            ColumnId = new Guid("c39f02c0-9ef0-41ee-9fdb-40a6fd550fbd"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ed561361-4d7e-4600-a6b1-40ed7deac219"),
                            FieldId = new Guid("befbfef1-efdc-45a5-81a5-71d44b039c05"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("e017c871-5a0d-40e5-b739-213359da5513"),
                            FieldId = new Guid("befbfef1-efdc-45a5-81a5-71d44b039c05"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6204212-69c2-41dd-b558-09241903005c"),
                            EditBlockId = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("272d058b-cd07-43de-ab3b-19c61871d2dd"),
                            EditBlockId = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("79909edd-4f9c-4f39-b1cc-09d926e3f099"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("1da6169e-e333-4922-9a82-43cb090c09a9"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9adb1333-6989-45b3-99c9-83d5db0271e9"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("e1b52dc7-2233-43d7-97f3-7a514a9d2488"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("c4b39222-170e-4d9f-8f50-e22894e20744"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("a681e742-3991-4ae0-af1b-e4e8a1c88905"),
                            EditBlockId = new Guid("e29ced10-2857-4158-add1-a4b5b55382f1"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("81aca40a-a9a8-4fce-8615-0aae428b73c4"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("db2fa52c-818c-473d-bba0-d7c1c90d9fcc"),
                            EditBlockId = new Guid("8a8148a4-1cc4-4300-85ab-7a491cbc0ac8"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("a8d9263f-3cb5-4052-9165-b8bb59c32e16"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("260c8053-2efc-436e-8ff2-35361200e680"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("49e5f6ee-9d94-46ad-9ca4-de5e261fe0d9"),
                            EditBlockId = new Guid("863ea028-98f9-4a3a-aa86-7ce66f4e1de8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("2ecd855f-721a-415a-8e43-8ce14d4e3260"),
                            EditBlockId = new Guid("27147463-9aa0-4d88-8166-9846b170d606"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e2b2f35-e232-4767-a885-53f74129c2d4"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("9d8b53c2-6d1d-4c68-8d53-c9194e56e1d1"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("772350f7-9382-44be-882d-91f217041310"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("9840c2ea-9c6f-49ce-a99d-03b1bb27e5d7"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("960865fd-c214-4bf8-9509-799da5a74295"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("5669d9cf-0bf9-4078-82ec-a74c2c6bad16"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("65eecbf2-6bf0-4d64-9b11-26c0bb39728e"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationFormExpert", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
