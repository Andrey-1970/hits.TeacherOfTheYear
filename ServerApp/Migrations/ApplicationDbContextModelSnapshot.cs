// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FullPhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CropPhotoId")
                        .IsUnique();

                    b.HasIndex("FullPhotoId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b1be0116-6e19-4b25-adc7-0a183d275226"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b1be0116-6e19-4b25-adc7-0a183d275226"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("93f91c1c-1711-406b-b550-7bd6fe1b4923"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("bc15f554-ecf2-49a2-8a6c-a80090a62f4d"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("8272df20-4333-4737-af95-9bd909d142e6"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("ecd75cb7-ec2c-40ed-85dd-456e1c68ddf8"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("efb35c8b-68d6-447f-a5f4-2fadb1ede545"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("62118df7-e82e-45ac-8127-70ea0b124799"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("3e59dc62-6c9e-45a2-85f7-f53487b28399"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("0c67c72c-a795-4169-b57a-1dc9458950a1"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("7171d9c3-bbb7-486b-9a1a-72d9326b45b0"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("bfdbffde-23eb-4c26-ae16-7c8f240cd8f5"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("76c67ebc-ba53-4cdf-a8d6-993ac1e2ae75"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("26672c9c-853a-491d-b9ae-0e70a96c8df3"),
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b")
                        },
                        new
                        {
                            FieldsId = new Guid("d51e3b09-1071-44d1-be3a-15726cf76ad0"),
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd")
                        },
                        new
                        {
                            FieldsId = new Guid("22c3d8f8-5e95-49dc-a26b-7411e34b184e"),
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd")
                        },
                        new
                        {
                            FieldsId = new Guid("86fcc07a-8977-40c7-ad24-84d87e9b581a"),
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd")
                        },
                        new
                        {
                            FieldsId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8")
                        },
                        new
                        {
                            FieldsId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5")
                        },
                        new
                        {
                            FieldsId = new Guid("4bffa487-af2f-41e1-a8e5-77bb3e9dc4c8"),
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5")
                        },
                        new
                        {
                            FieldsId = new Guid("73e2e3a0-fd29-4120-907d-d10a3a134f46"),
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            TablesId = new Guid("4a3c03db-540b-4636-bc51-024a54606633")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            TablesId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            TablesId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            TablesId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            TablesId = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            TablesId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            TablesId = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            TablesId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            TablesId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            TablesId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b"),
                            TablesId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            TablesId = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            TablesId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            TablesId = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            TablesId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            TracksId = new Guid("02546362-2506-438d-bce8-9fba563c08c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            TracksId = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("ecf8870e-8ac9-4051-bce9-9d660ee12ca6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("22e26cf6-4d01-4e6d-a0af-b5a110f0679d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("52e53484-d91f-4eeb-ac60-949fe7e473d2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("57f5ab5d-5de5-48aa-b584-282f1f64e97c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("c98a58eb-4989-4785-8a9f-861f4266d7b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("d439fee0-8b9f-4be5-aa39-87f3d2947bac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            MarksId = new Guid("93660b1f-6705-41fa-84ee-b36ecae2145d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            MarksId = new Guid("c01bfee8-80a5-435a-a896-e032cb40f931")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            MarksId = new Guid("f5c3d414-0c52-4288-af7d-6b5c20a3cdd3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            MarksId = new Guid("6226987f-3812-41e1-95fc-86552af0838f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            MarksId = new Guid("f31caf46-91bd-4808-a1b5-7296b6e34e1e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            MarksId = new Guid("17ccbf23-5db5-41c1-99d1-b096338b3142")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            MarksId = new Guid("1efa9478-d824-4dd3-b4c1-9b90e44109cc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            MarksId = new Guid("96696db0-d3a2-4c56-ab64-dba760ed505c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            MarksId = new Guid("d240f796-d88e-439a-b715-589bbc806c75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("1efa9478-d824-4dd3-b4c1-9b90e44109cc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("96696db0-d3a2-4c56-ab64-dba760ed505c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("82ec164f-c08d-410b-9714-5c9ee17d9ddd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("bee4fd1d-4f0e-45eb-bb3c-943edd537c6e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("2abda31b-79b4-457b-bfbd-74c90201c78f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("31795f5d-481b-4261-9315-dee9abc06973")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            MarksId = new Guid("587aa02d-7f5f-485c-aac4-18e4bd68e01b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            MarksId = new Guid("d240f796-d88e-439a-b715-589bbc806c75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            MarksId = new Guid("8e2c0f76-1d05-4459-81fb-7527be90c212")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            MarksId = new Guid("4a78ad53-6a6d-4101-95ce-7e2a3b6ae542")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            MarksId = new Guid("3b4eba93-049b-4479-bb5a-2d25191c4207")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            MarksId = new Guid("816ad20d-9e70-4cfd-b023-028c13db7739")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "784c7da8-4c4c-4888-8ce0-a8a2b9650b70",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "6de0e578-f5b5-4f83-a7c7-6c81f386b91b",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "b5f31e62-48a5-4122-a449-2d35e75dcfa5",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "eb97ac3a-186a-4dad-8f4a-0723da32ad24",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "17ff8f16-2b5c-4a51-a4f8-9ee233d59c64",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e4ceeb-cb6a-4b00-ac81-9e5fd144581c"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("f751746c-d68a-4caf-b00f-260c4b66aa5c"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("15bdff09-2f41-4a33-8f42-008cf7f44323"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9090f7bd-fe04-4796-b916-b03971883737"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("70056a4a-d954-48ae-94e5-4dc604d714c2"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("c4888c38-4332-462a-9b1e-e8c1f5d28160"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06d3885b-99f3-4b0a-80ff-1e640c68dcb6"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("fbcadfbc-4174-4c15-b4cc-88643d9ce9fd"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c94162ee-beb6-4745-b924-9a03d6452540"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("69e85837-83ea-4325-8f78-e0ec5876b69a"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("0e92d2df-07db-4eba-8909-95eb5aa29a7b"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("69e85837-83ea-4325-8f78-e0ec5876b69a")
                        },
                        new
                        {
                            Id = new Guid("e09dcc2e-d98e-488b-a184-0d7fc0da2ae6"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2f397329-9682-4288-b4e3-e2dadb47fba4"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("30b142dc-a637-4dc8-b296-a17e17cb6c81"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2f397329-9682-4288-b4e3-e2dadb47fba4")
                        },
                        new
                        {
                            Id = new Guid("2cb6bc7c-4f9c-42f0-8b89-bf282cbbfc41"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("56ef4fa7-0e82-4c0e-aab3-aac968f7d6f2"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("859fdff1-6d07-4cdd-80b5-bc428d54a450"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("56ef4fa7-0e82-4c0e-aab3-aac968f7d6f2")
                        },
                        new
                        {
                            Id = new Guid("306e39ff-b1f4-46ad-94ca-73c0d6813795"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a324c1e5-f95e-43f5-8666-bca89c9c93af"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("8d113c40-0fe6-4557-b52d-8782eec407d7"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a324c1e5-f95e-43f5-8666-bca89c9c93af")
                        },
                        new
                        {
                            Id = new Guid("a3e33ea1-636d-4eda-b55c-f80a35a92704"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("958c35e7-9e28-41e4-aedc-ec8aeca82564"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("71173064-0ed3-42a2-9ef6-4b7dc5d9f16d"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("958c35e7-9e28-41e4-aedc-ec8aeca82564")
                        },
                        new
                        {
                            Id = new Guid("66e424e3-a257-442d-bf7f-a448d51e6b15"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b690efc5-ce08-4729-964b-de9b65441f2b"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("a195ba4a-d144-4402-a09d-788c43a386d2"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b690efc5-ce08-4729-964b-de9b65441f2b")
                        },
                        new
                        {
                            Id = new Guid("f88ab08d-e4d6-4191-a466-5144b20f1acf"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("88450214-83a9-4ae2-8e67-44e9bb0370ad"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("20484dc2-fd23-4c7e-8ed7-eda29f53a70a"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("88450214-83a9-4ae2-8e67-44e9bb0370ad")
                        },
                        new
                        {
                            Id = new Guid("5b755315-ca1f-4771-aa3a-4c2fd5147966"),
                            ColumnId = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7e150b90-a889-42cd-b307-528ca1cf16bf"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("21b93331-9dc0-4b0b-9e86-51086f965c4e"),
                            ColumnId = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7e150b90-a889-42cd-b307-528ca1cf16bf")
                        },
                        new
                        {
                            Id = new Guid("1b5f00ae-b4db-418f-9372-c05a174550d7"),
                            ColumnId = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0872c6d7-58d8-4fb3-8a0c-e0ef6425e04c"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("2f38b0b0-7594-49ee-91c1-aff79b2a0d6c"),
                            ColumnId = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0872c6d7-58d8-4fb3-8a0c-e0ef6425e04c")
                        },
                        new
                        {
                            Id = new Guid("22d3b55e-f0de-4a04-a7ad-68e5756c0ffa"),
                            ColumnId = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("75093c79-7dcb-4f4f-af57-66021c17ba19"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("4855e743-107f-4616-a393-ec9372ba1188"),
                            ColumnId = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("75093c79-7dcb-4f4f-af57-66021c17ba19")
                        },
                        new
                        {
                            Id = new Guid("c597d4a6-f14a-41e7-814e-94ce9e821220"),
                            ColumnId = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("512a09bd-de08-4e59-9cba-ed74598ccdb9"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("f8b0b039-22c1-4471-9bf7-e7b2a05b7351"),
                            ColumnId = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("512a09bd-de08-4e59-9cba-ed74598ccdb9")
                        },
                        new
                        {
                            Id = new Guid("fce61393-1296-4a50-abae-879236162e0f"),
                            ColumnId = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7e11f0a2-4847-4a04-a01d-8384b615979c"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("21a334e7-f8ef-45d0-b5f4-e9b0574c6b61"),
                            ColumnId = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7e11f0a2-4847-4a04-a01d-8384b615979c")
                        },
                        new
                        {
                            Id = new Guid("8f04d59d-a60f-4f1f-9274-4303cadb1c61"),
                            ColumnId = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("25b03951-6c96-4724-97e9-698a582ef2cc"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("636cd541-eff1-4aa5-979c-96444689aac8"),
                            ColumnId = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("25b03951-6c96-4724-97e9-698a582ef2cc")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cafa3fe1-658c-464b-8cc2-8b33a3e5c05f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("80b5f3a1-56e3-46e4-b835-05696280b2f2"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1"),
                            ValueTypeId = new Guid("f80fb147-79ba-46a4-bb2d-aa4fd594040a")
                        },
                        new
                        {
                            Id = new Guid("0744a374-4c90-4a50-9346-18513be1b14f"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("f5119515-db4e-425c-b94d-7ea5c258a023"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("59a77b87-32d0-4ffe-85f4-73b9655dc5b2"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("a9750f2f-2741-461b-b8d2-2c8b3460a9e3"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("4624d6fb-077b-41ba-a2de-cdc974ee9042"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("3aba2ba2-6e34-4798-9087-f7ee238f8391"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("187eabb1-d180-4562-a1d0-6f2daac4ab9a"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("3832ad10-eead-4c79-951f-79054b2e0969"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("be7a3184-bfe8-4bfb-8c32-7a4d1cd652a0"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("cf4c07fe-ebea-4b86-9a46-aa246d16ea51"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("97afb212-ba62-4e98-b181-5e4e32b21472"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("bb190a13-1183-4ca9-99cb-155b8829b8c3"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("23e71d55-64cf-431c-86ad-6b194c638a48"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("9597d8d2-d8fc-4b5b-aeec-b081e602f2a8"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("34de21ff-1e3c-436c-8738-818564feafe0"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("c7158909-8b4c-47c4-95b8-f8b44039ca0a"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("068f5b7f-fff8-4de3-88e8-454a39f32a52"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("777ba5dc-b8d3-4d80-a7a6-fd3407ffe25f"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("6a348dee-4548-4502-ba45-29b0da1e8c78"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("d312ea6c-3400-4cce-8651-ab9fa393c3e8"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("5871d657-6497-4afb-b32f-631d0009db88"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("002848da-02cc-47e8-b683-327bccc98f9b"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("e770e5ed-3f99-42a4-b8bf-57e2308e4ca3"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("17bc0fd8-8709-4fb8-b316-6c06c52ba300"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a6c33722-7baf-4f97-89b1-9dcb444a0f6d")
                        },
                        new
                        {
                            Id = new Guid("76bdd034-0594-4f67-bbed-81334bf69685"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("f7329cd5-e214-4c5a-b30b-a9f6f44d498d"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("a3ba5c3b-18f5-44f9-b4a6-144d6262d756"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("e926f4a4-6d10-4c8e-aae4-fa2fec0bd9a5"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("4b6a1c6a-32c8-486e-9e4a-a32b0ef12495"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("9fa986d5-108e-4238-9760-559fc90c76db"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("4b537736-6173-4dd3-bd12-c80c1fabb05e"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("c14012bc-9f08-4c2a-9d30-131809b78738"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("715fd35e-93c5-465c-ae08-fa50e1b1d15d"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("60bcb438-ec6d-419d-b838-41151f6044e4"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("bad58737-d443-48b2-91dd-aa731f41616d"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("e9b4b679-41c8-4820-beff-ac0fe937e4c7"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("1e0f600f-44c9-435f-b173-0a43b6597554"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("b6dd7724-2201-4539-8925-7f47b36052c7"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("8bd2fde0-ad7b-44b7-a078-92aa6ef4db36"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("242af49c-98cd-4013-bd1f-5ee2eba8be8e"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("aab4cd51-e476-48e9-9127-6dc6bd1e326c"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("c178187f-f7c9-44bb-967e-a7d3f460c012"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("0cc6cc71-f620-439b-bde1-eb7f8be536cb"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("85d04e6e-988b-4b3a-842d-d6f0de4f3c90"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("782f0b5a-82ec-4756-96fa-9d19cfc38692"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("c981d7a4-570a-4373-95f9-bedeaf19d91d"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("67854187-cf76-48a0-8c2b-10e18625d211"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("1c16d553-34ea-46e6-bdc1-8e3284e67e02"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("6077c4e6-2384-410a-8303-a6ae7dcaf3e0"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("69136a93-a5e9-48aa-a6c5-1d7efb72ef48"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d"),
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b1be0116-6e19-4b25-adc7-0a183d275226"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93f91c1c-1711-406b-b550-7bd6fe1b4923"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("bc15f554-ecf2-49a2-8a6c-a80090a62f4d"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("b2e84f3f-39d2-4095-8ba3-8f8081df77d2")
                        },
                        new
                        {
                            Id = new Guid("8272df20-4333-4737-af95-9bd909d142e6"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("ecd75cb7-ec2c-40ed-85dd-456e1c68ddf8"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("efb35c8b-68d6-447f-a5f4-2fadb1ede545"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("62118df7-e82e-45ac-8127-70ea0b124799"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("3e59dc62-6c9e-45a2-85f7-f53487b28399"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("0c67c72c-a795-4169-b57a-1dc9458950a1"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("7171d9c3-bbb7-486b-9a1a-72d9326b45b0"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("bfdbffde-23eb-4c26-ae16-7c8f240cd8f5"),
                            EditBlockId = new Guid("fdfaad8b-05bc-402c-99e2-045a59890d57"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            EditBlockId = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("76c67ebc-ba53-4cdf-a8d6-993ac1e2ae75"),
                            EditBlockId = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("26672c9c-853a-491d-b9ae-0e70a96c8df3"),
                            EditBlockId = new Guid("39185585-872e-48fd-8dfe-a730bcc00dfa"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e")
                        },
                        new
                        {
                            Id = new Guid("d51e3b09-1071-44d1-be3a-15726cf76ad0"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("22c3d8f8-5e95-49dc-a26b-7411e34b184e"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("86fcc07a-8977-40c7-ad24-84d87e9b581a"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("4bffa487-af2f-41e1-a8e5-77bb3e9dc4c8"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        },
                        new
                        {
                            Id = new Guid("73e2e3a0-fd29-4120-907d-d10a3a134f46"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecf8870e-8ac9-4051-bce9-9d660ee12ca6"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633")
                        },
                        new
                        {
                            Id = new Guid("22e26cf6-4d01-4e6d-a0af-b5a110f0679d"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("4a3c03db-540b-4636-bc51-024a54606633")
                        },
                        new
                        {
                            Id = new Guid("52e53484-d91f-4eeb-ac60-949fe7e473d2"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("86fcc07a-8977-40c7-ad24-84d87e9b581a"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("57f5ab5d-5de5-48aa-b584-282f1f64e97c"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("d51e3b09-1071-44d1-be3a-15726cf76ad0"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c98a58eb-4989-4785-8a9f-861f4266d7b2"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("22c3d8f8-5e95-49dc-a26b-7411e34b184e"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d439fee0-8b9f-4be5-aa39-87f3d2947bac"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19")
                        },
                        new
                        {
                            Id = new Guid("93660b1f-6705-41fa-84ee-b36ecae2145d"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe")
                        },
                        new
                        {
                            Id = new Guid("c01bfee8-80a5-435a-a896-e032cb40f931"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d")
                        },
                        new
                        {
                            Id = new Guid("f5c3d414-0c52-4288-af7d-6b5c20a3cdd3"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d")
                        },
                        new
                        {
                            Id = new Guid("6226987f-3812-41e1-95fc-86552af0838f"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d")
                        },
                        new
                        {
                            Id = new Guid("f31caf46-91bd-4808-a1b5-7296b6e34e1e"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d")
                        },
                        new
                        {
                            Id = new Guid("17ccbf23-5db5-41c1-99d1-b096338b3142"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7")
                        },
                        new
                        {
                            Id = new Guid("1efa9478-d824-4dd3-b4c1-9b90e44109cc"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("96696db0-d3a2-4c56-ab64-dba760ed505c"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103")
                        },
                        new
                        {
                            Id = new Guid("d240f796-d88e-439a-b715-589bbc806c75"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec")
                        },
                        new
                        {
                            Id = new Guid("82ec164f-c08d-410b-9714-5c9ee17d9ddd"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2")
                        },
                        new
                        {
                            Id = new Guid("bee4fd1d-4f0e-45eb-bb3c-943edd537c6e"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("4bffa487-af2f-41e1-a8e5-77bb3e9dc4c8"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("2abda31b-79b4-457b-bfbd-74c90201c78f"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("73e2e3a0-fd29-4120-907d-d10a3a134f46"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("31795f5d-481b-4261-9315-dee9abc06973"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597")
                        },
                        new
                        {
                            Id = new Guid("587aa02d-7f5f-485c-aac4-18e4bd68e01b"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597")
                        },
                        new
                        {
                            Id = new Guid("8e2c0f76-1d05-4459-81fb-7527be90c212"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19")
                        },
                        new
                        {
                            Id = new Guid("4a78ad53-6a6d-4101-95ce-7e2a3b6ae542"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d")
                        },
                        new
                        {
                            Id = new Guid("3b4eba93-049b-4479-bb5a-2d25191c4207"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("816ad20d-9e70-4cfd-b023-028c13db7739"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6d0473e-bba7-43da-a5ef-ea6a9c42d52b"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("48f0c93c-efc2-412a-8afa-f890944977cd"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("cd861041-c618-4eb5-b984-e26360308541"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("918d62e5-101a-4381-bc2b-6ba60963b6f8"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("ed8e34d0-b569-4e96-abb3-afce9ceea9c5"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("247a2faa-ca2f-49ea-9bea-bf8cf2ab5935"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("436dc71a-3c25-427b-b66e-199032819ff3"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69e85837-83ea-4325-8f78-e0ec5876b69a"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("2f397329-9682-4288-b4e3-e2dadb47fba4"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("56ef4fa7-0e82-4c0e-aab3-aac968f7d6f2"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("a324c1e5-f95e-43f5-8666-bca89c9c93af"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("958c35e7-9e28-41e4-aedc-ec8aeca82564"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("b690efc5-ce08-4729-964b-de9b65441f2b"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("88450214-83a9-4ae2-8e67-44e9bb0370ad"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("7e150b90-a889-42cd-b307-528ca1cf16bf"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1")
                        },
                        new
                        {
                            Id = new Guid("0872c6d7-58d8-4fb3-8a0c-e0ef6425e04c"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        },
                        new
                        {
                            Id = new Guid("75093c79-7dcb-4f4f-af57-66021c17ba19"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        },
                        new
                        {
                            Id = new Guid("512a09bd-de08-4e59-9cba-ed74598ccdb9"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        },
                        new
                        {
                            Id = new Guid("7e11f0a2-4847-4a04-a01d-8384b615979c"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        },
                        new
                        {
                            Id = new Guid("25b03951-6c96-4724-97e9-698a582ef2cc"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ce40fc6-f2aa-44b6-b023-c8c3e566d818"),
                            FieldId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("fe86445a-f893-49b9-96c5-e83ab75a92a0"),
                            FieldId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("e662a144-8876-4d51-8274-377d90694706"),
                            FieldId = new Guid("e82a3439-a8bb-4e76-b2dc-a6b38358c079"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("3515eb34-676a-4c14-adc1-b8ab35b53f5d"),
                            FieldId = new Guid("76c67ebc-ba53-4cdf-a8d6-993ac1e2ae75"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("b2c02d6b-d625-46bc-bcfd-a8b6ea91fc82"),
                            FieldId = new Guid("76c67ebc-ba53-4cdf-a8d6-993ac1e2ae75"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("7ea8c0c8-0606-47b8-baa1-c3c7e83ab4bc"),
                            ColumnId = new Guid("59a77b87-32d0-4ffe-85f4-73b9655dc5b2"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("5dae0be7-21c6-4072-b892-3d4ec5809137"),
                            ColumnId = new Guid("59a77b87-32d0-4ffe-85f4-73b9655dc5b2"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("fe94c197-6dfc-4615-bba7-10b5ba7b14ba"),
                            ColumnId = new Guid("59a77b87-32d0-4ffe-85f4-73b9655dc5b2"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ff6a9021-15e2-4d0b-89f3-a7d3c027ef24"),
                            ColumnId = new Guid("d312ea6c-3400-4cce-8651-ab9fa393c3e8"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("d64e5ff9-1a92-4937-8c40-503afb1cf95d"),
                            ColumnId = new Guid("d312ea6c-3400-4cce-8651-ab9fa393c3e8"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("41ff8d4d-2ac4-40ee-9599-8687e8383897"),
                            ColumnId = new Guid("d312ea6c-3400-4cce-8651-ab9fa393c3e8"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("a2c4376c-1764-4b46-8d26-749be72f05ea"),
                            ColumnId = new Guid("4b6a1c6a-32c8-486e-9e4a-a32b0ef12495"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("d455eaad-f149-4091-baf4-a519c55c4097"),
                            ColumnId = new Guid("4b6a1c6a-32c8-486e-9e4a-a32b0ef12495"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("30076e2f-9e64-4132-8fc4-c8f4ebf4e059"),
                            ColumnId = new Guid("c178187f-f7c9-44bb-967e-a7d3f460c012"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("af5eac1e-9398-4cdf-901b-f235d7ba139e"),
                            ColumnId = new Guid("c178187f-f7c9-44bb-967e-a7d3f460c012"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("b9cea93d-5e77-4c5b-80cd-ab79b6573298"),
                            ColumnId = new Guid("85d04e6e-988b-4b3a-842d-d6f0de4f3c90"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("7a2c9c14-83b9-44ff-b48d-5e10c65ada74"),
                            ColumnId = new Guid("85d04e6e-988b-4b3a-842d-d6f0de4f3c90"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("aa776088-4f91-427b-ad18-f8a1d6dbb7b9"),
                            ColumnId = new Guid("85d04e6e-988b-4b3a-842d-d6f0de4f3c90"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("0aa67e5b-1f88-484d-9cee-e32f4d887daa"),
                            ColumnId = new Guid("85d04e6e-988b-4b3a-842d-d6f0de4f3c90"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("a2028890-c2e0-4547-b006-1d3cfa5c387a"),
                            ColumnId = new Guid("1c16d553-34ea-46e6-bdc1-8e3284e67e02"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("1a03276d-8675-4b1f-92d1-4e7a46980396"),
                            ColumnId = new Guid("1c16d553-34ea-46e6-bdc1-8e3284e67e02"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("0b3e50fc-7fe9-4ae3-b3d2-c3766d1cf9d2"),
                            ColumnId = new Guid("1c16d553-34ea-46e6-bdc1-8e3284e67e02"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("3e18cbe4-2572-46ab-a2a0-7026fb97cf05"),
                            ColumnId = new Guid("1c16d553-34ea-46e6-bdc1-8e3284e67e02"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("a7c8e0ec-59fb-4ad0-9cae-e71b3d4f3607"),
                            ColumnId = new Guid("002848da-02cc-47e8-b683-327bccc98f9b"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("b51d650d-a05f-4eb1-bc52-e4575cd3af1f"),
                            ColumnId = new Guid("002848da-02cc-47e8-b683-327bccc98f9b"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("e9144639-19da-4ea2-a202-38692dcc07c8"),
                            ColumnId = new Guid("f7329cd5-e214-4c5a-b30b-a9f6f44d498d"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("f736ec3c-069b-4413-a3e6-a6d33a85d44e"),
                            ColumnId = new Guid("f7329cd5-e214-4c5a-b30b-a9f6f44d498d"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("49c3fdb8-54d4-4550-a863-8d9349f3dad1"),
                            ColumnId = new Guid("e9b4b679-41c8-4820-beff-ac0fe937e4c7"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("4cdba399-1e0d-4ee0-a99f-3864a178fb3c"),
                            ColumnId = new Guid("e9b4b679-41c8-4820-beff-ac0fe937e4c7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("a5168a43-384b-42dd-b22c-c38688cf523d"),
                            ColumnId = new Guid("1e0f600f-44c9-435f-b173-0a43b6597554"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("bf222500-2859-4176-a0cb-374055fa1b38"),
                            ColumnId = new Guid("1e0f600f-44c9-435f-b173-0a43b6597554"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("9845b955-b0c6-48f5-a44a-2aefb8d778b3"),
                            ColumnId = new Guid("1e0f600f-44c9-435f-b173-0a43b6597554"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("4f9c7e76-cc64-4a53-8c1f-1e2f785139b6"),
                            ColumnId = new Guid("1e0f600f-44c9-435f-b173-0a43b6597554"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("952704d2-575e-4621-90d3-09683a56533b"),
                            ColumnId = new Guid("97afb212-ba62-4e98-b181-5e4e32b21472"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("8cafd03b-364e-4b1d-9868-511ee929bfb0"),
                            ColumnId = new Guid("97afb212-ba62-4e98-b181-5e4e32b21472"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("4c0f931c-a78a-4c10-b23d-7009740a76c5"),
                            ColumnId = new Guid("97afb212-ba62-4e98-b181-5e4e32b21472"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("ebeac66b-ed52-45d0-92e6-95755021c5f7"),
                            ColumnId = new Guid("17bc0fd8-8709-4fb8-b316-6c06c52ba300"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("90eda8f9-a66d-49db-8d08-0a25ed4bcab8"),
                            ColumnId = new Guid("17bc0fd8-8709-4fb8-b316-6c06c52ba300"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("8188564b-e8a3-456d-bafc-0f8c68e9b62b"),
                            ColumnId = new Guid("c14012bc-9f08-4c2a-9d30-131809b78738"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("9acfb964-178d-4c09-baf1-13e3db06763f"),
                            ColumnId = new Guid("c14012bc-9f08-4c2a-9d30-131809b78738"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("345280cc-094d-46c7-829f-ae5108e3d2f1"),
                            EditBlockId = new Guid("b1be0116-6e19-4b25-adc7-0a183d275226"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("8c137232-6c6d-4d87-9205-837ac5f0c103"),
                            EditBlockId = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d93a808a-f3e7-4222-85fb-31b9b4e311ec"),
                            EditBlockId = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("c7d6ae9f-039b-4522-8032-2dc4b263423b"),
                            EditBlockId = new Guid("bbc87a89-806f-45c8-83fd-19ea450508f8"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4a3c03db-540b-4636-bc51-024a54606633"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("4e5fe5c4-8271-45ab-ad40-c1c213a4fa19"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("6fab2e71-a5ce-4a74-b0da-943afb911e9d"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("e50b6a76-57ac-48c8-9e41-440c76e247c7"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("176fa4a8-c768-4fe6-8c21-841ea8d460fe"),
                            EditBlockId = new Guid("f39c52a8-7af1-4429-b5b6-6027396f84a7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("2ed4d8d5-00c5-4f6d-a24d-d7e941191cc2"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("b4238c3b-2d21-4db7-be3d-823f7cf38597"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("8751e417-b50a-4c54-a8dd-6f7df5e30e19"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("845fadf7-ebed-49fc-9bf3-b89a623fe46d"),
                            EditBlockId = new Guid("5ae5d8f3-743c-4502-8926-fcab6e701868"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02546362-2506-438d-bce8-9fba563c08c1"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a0ed8f4c-525f-42d0-b804-fa4ca98108d6"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fda64a1e-40b8-4a48-9206-57eadcb8f58c"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("a0792259-8080-4d40-bda2-0a9fd8e5561e"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("a6c33722-7baf-4f97-89b1-9dcb444a0f6d"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("b2e84f3f-39d2-4095-8ba3-8f8081df77d2"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("f80fb147-79ba-46a4-bb2d-aa4fd594040a"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertCategoryId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.Photo", "CropPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "CropPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServerApp.Data.Entities.Photo", "FullPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "FullPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId");

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("CropPhoto");

                    b.Navigation("FullPhoto");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Photos")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Category", "ExpertCategory")
                        .WithMany("Experts")
                        .HasForeignKey("ExpertCategoryId");

                    b.Navigation("ExpertCategory");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Photos");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
