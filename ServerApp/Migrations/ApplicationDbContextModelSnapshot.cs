// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            EditBlocksId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            EditBlocksId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("b3c24491-c6da-47a4-801e-6398f01c84ea"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("c7a1cee9-5574-4bbd-a833-b19f8a1b94bb"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("b0a6b87c-4215-4ed7-b231-152768bebdfc"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("cd3e1045-03ac-4128-83ec-34a7f60b4c62"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("4b208a9b-de6c-45cd-a6d5-9c8a5c355be2"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("8b235541-dc33-416c-9ab8-f260552d0947"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("cbe0c196-6f27-4fd5-aa6d-e970a85ba15f"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("242fb983-7377-46f3-845c-854f8b0fc720"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("df63cce5-5401-428a-9d15-e52f99423e97"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("de30041f-7abf-443c-8cb2-92e4ada98059"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("ecfac8ee-c355-41cf-bf26-43a6d4f20b96"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("91cbc2dc-4ef6-4372-be9c-6a7e45d54815"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("54a90f7e-d306-4919-b31d-f738fb65f423"),
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd")
                        },
                        new
                        {
                            FieldsId = new Guid("b63cd50d-6925-4578-ae4c-9cc2c6348404"),
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a")
                        },
                        new
                        {
                            FieldsId = new Guid("4c0847d9-ed81-4df5-843f-d28fc4a47c61"),
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a")
                        },
                        new
                        {
                            FieldsId = new Guid("00278116-7f0d-409e-9224-011d419aeee4"),
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a")
                        },
                        new
                        {
                            FieldsId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365")
                        },
                        new
                        {
                            FieldsId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4")
                        },
                        new
                        {
                            FieldsId = new Guid("dc816470-261b-4762-bd58-82f2de72eff6"),
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4")
                        },
                        new
                        {
                            FieldsId = new Guid("9587a134-12ff-428c-a68b-071794f63518"),
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            TablesId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            TablesId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            TablesId = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            TablesId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            TablesId = new Guid("a501c362-4f48-4249-8267-096b76f2c610")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            TablesId = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            TablesId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            TablesId = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            TablesId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            TablesId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            TablesId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            TablesId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            TablesId = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            TablesId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            TablesId = new Guid("e327245f-83d9-4d92-bc26-976e89787346")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            TablesId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            TracksId = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            TracksId = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("de2122f4-91a8-4083-8b8f-f9c35ce80577")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("d919b2a6-2d33-4d63-94fc-20a51af0ae2b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("38c4eeae-6507-49f5-a42b-f2fd9ae21702")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("8cfc4838-95a5-423f-b167-3f2bcef111a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("143d8144-bffd-4ef8-b377-167a0865e107")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("721f1580-adef-450d-b41b-b62a27b47d5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            MarksId = new Guid("7c11f4a5-8793-46dc-acc7-1272205d3ae0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            MarksId = new Guid("cbe51dbd-0239-41ae-9acb-07453c8d6dd8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            MarksId = new Guid("d296679e-7f8b-47fb-9413-bf9ac9591ea1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            MarksId = new Guid("c26dc76b-4783-4814-8c6d-1c149ddcbf79")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            MarksId = new Guid("4a123172-fb20-4fa7-bceb-d2e61cdc9b35")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            MarksId = new Guid("95e9a5cd-d463-4c3f-adec-b532fb56b82d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            MarksId = new Guid("0cfd810b-133d-4777-9a88-90224b7d2769")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            MarksId = new Guid("0d691f9d-f668-4f4e-8edd-cd3f20165b89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            MarksId = new Guid("2403cc33-5b0b-4da5-b7c0-a4545cfdfb03")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("0cfd810b-133d-4777-9a88-90224b7d2769")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("0d691f9d-f668-4f4e-8edd-cd3f20165b89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("d9e5ca02-e409-4d74-a43a-fc80cbbc9aa3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("6b7515ae-2e4d-4d11-a3c9-0b4ff25b0268")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("d58844d3-5f44-444b-84a5-ed05b0ab3e12")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("4d786230-8090-466c-a526-afd082d59dfc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            MarksId = new Guid("dd2cb777-452b-4904-83fa-50c9b995134d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            MarksId = new Guid("2403cc33-5b0b-4da5-b7c0-a4545cfdfb03")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            MarksId = new Guid("de755bf0-6526-490a-a36d-d77504490cd5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            MarksId = new Guid("365af9cd-310a-48da-9eb9-53c90a33f648")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            MarksId = new Guid("dca77c1a-4f8d-48b5-a4f8-991903e1cdb1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            MarksId = new Guid("b19c307c-9abd-42c2-8d4c-4c2d13a7491c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f10f17e8-7fa9-45ac-b8af-79cf9d7a27d4",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "9aa9eb27-a79a-46a7-aea7-58201527530b",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "8d5061b5-6c95-4cda-b342-92d19111267d",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "7da0af8f-129c-41d6-b360-e04b35b3011e",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "4217d2f1-998d-4752-b6d2-42e5da244f2d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6d13736-e9bf-4f15-95ff-673088d020bf"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("ceb30454-02ed-45b6-b4e9-19ebbc57243e"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("2216f661-4a64-4270-8820-7f7306e4b274"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("b45b412a-ec4a-4a40-9d97-be280115582f"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("4e726fa7-9c0f-419e-9f47-daeb7e0ac931"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("a6bd44cb-fd0a-4fdb-a2d3-af0c814640f9"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("920f1ca6-d82b-49d4-9d82-21b1c6f19e65"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("568baf80-3319-4d7d-a515-668177549f45"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c41c499-a3c1-4f12-9f3e-5434eff6ca7c"),
                            ColumnId = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("70c4acb7-64aa-46d4-a25a-86c2556acc53"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("b5a05b0e-bfbe-4e6b-82f4-653440e38d75"),
                            ColumnId = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("70c4acb7-64aa-46d4-a25a-86c2556acc53")
                        },
                        new
                        {
                            Id = new Guid("d0394c59-119b-47a4-b305-c934ff4c0df9"),
                            ColumnId = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d29115dd-4a34-40f3-bbf1-52c46f909bb0"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("5bcf8be0-f008-4bc4-900f-4900514b6980"),
                            ColumnId = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d29115dd-4a34-40f3-bbf1-52c46f909bb0")
                        },
                        new
                        {
                            Id = new Guid("454a5133-0369-45bc-9f80-3301c32d9c46"),
                            ColumnId = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("372570d2-b8e5-4159-8cdd-7dc5d07566b1"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("f6f54e7a-fb4f-4251-b1d0-f24bdb0acb68"),
                            ColumnId = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("372570d2-b8e5-4159-8cdd-7dc5d07566b1")
                        },
                        new
                        {
                            Id = new Guid("2b66fa5f-21f2-444d-98f7-51aa73ed76cd"),
                            ColumnId = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ba54e270-9203-43a9-889f-a5eac891d7bb"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("ac6a20d0-4dd4-459c-842d-e27fe4669480"),
                            ColumnId = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ba54e270-9203-43a9-889f-a5eac891d7bb")
                        },
                        new
                        {
                            Id = new Guid("fc93729b-81a1-408f-bc5e-a17258b9e44c"),
                            ColumnId = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7c6d7fbc-b1e2-4832-9751-6971c818b00c"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("f40dc752-9dc9-4694-9e31-76aad68921fa"),
                            ColumnId = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7c6d7fbc-b1e2-4832-9751-6971c818b00c")
                        },
                        new
                        {
                            Id = new Guid("dd1d259d-9458-4446-ab0d-bb35b27d2f91"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a8d839a5-3fae-420e-8189-bb174f043de0"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("9fac8f23-8802-4fdf-8dbe-8e7a13aa9774"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a8d839a5-3fae-420e-8189-bb174f043de0")
                        },
                        new
                        {
                            Id = new Guid("7c21e6fe-15ba-49fe-931f-9c47aed3d4c0"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4c9d50e7-881f-460d-8515-9f160a5fde97"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("4edbdfdc-5a02-48f3-8231-99cafd61b60f"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4c9d50e7-881f-460d-8515-9f160a5fde97")
                        },
                        new
                        {
                            Id = new Guid("2f133f64-436e-4cfa-a402-4533217dbfef"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9c22e8f5-d94d-48b1-8cdb-f4eec9bf18b4"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("6dfbd7e8-b76a-42c7-8929-9407e41ec132"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9c22e8f5-d94d-48b1-8cdb-f4eec9bf18b4")
                        },
                        new
                        {
                            Id = new Guid("bc52d03f-7313-421f-afea-f98ece8ebb52"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7d6f738d-17c8-47da-8a0b-661bfb43b403"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("36fbc6bd-7a81-499d-b3f4-2ec4d9888682"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7d6f738d-17c8-47da-8a0b-661bfb43b403")
                        },
                        new
                        {
                            Id = new Guid("745b3a88-73f3-470b-9aae-756c1e327603"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("97b9e443-147d-480c-8d03-d5a6c92d4754"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("659b1d61-564b-4b17-965f-b47cc697a595"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("97b9e443-147d-480c-8d03-d5a6c92d4754")
                        },
                        new
                        {
                            Id = new Guid("611c7996-ffa7-4d44-a1f6-cd3f07c7ed2a"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c60d4623-8597-4192-8aa6-fa4368fb23c0"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("c00b6315-c494-462e-b8e7-587cd1263b17"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c60d4623-8597-4192-8aa6-fa4368fb23c0")
                        },
                        new
                        {
                            Id = new Guid("7da728f1-aa25-475a-b707-ebf38052b009"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fef86462-e1e6-40a2-8ddc-f5ec0a955980"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("9f888cba-0cb8-4590-9b09-33900f9949ba"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fef86462-e1e6-40a2-8ddc-f5ec0a955980")
                        },
                        new
                        {
                            Id = new Guid("687dbd80-115c-452a-9020-dc982a8ab0d6"),
                            ColumnId = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ce6bce24-b73d-4401-9530-1eada73b5848"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("c4ba6d6a-b067-40cf-8a0b-f49c7621c0c8"),
                            ColumnId = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ce6bce24-b73d-4401-9530-1eada73b5848")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49c32f41-9ec5-4b4b-8b20-ff5c8c4544cf"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("2bd78dce-11fe-4106-8e02-daa0a3de2514"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("d312793d-7ef3-440a-90b3-72453cd162bb"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("c0526bcf-884d-4f29-9a62-273cf926e971"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("fbc2e568-9967-4f43-9706-161cf0b0080f"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("3f23956e-4bee-4aa2-a3e1-a2eb0e8956e5"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("4cb0fe81-61ba-452e-9892-ff1716714a33"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("0bf6ef1b-f80c-4180-bf47-be5fa8762742"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("44eed77f-df38-4a15-b8d6-014bcdf2a2e1"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("878e322f-7920-4d57-8abc-719a756204ea"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("f32f424b-8546-43a0-af0a-c5ac05c20b19"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("c95613c7-0480-4dbc-9c56-2b0f35a91195"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("0648314a-2a7a-4634-9f5c-b6a3a1082452"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("e4e706c4-2212-46e9-ab13-3636eeecd89b"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("ef2f3e49-1bee-4073-b703-398f6aae7e96"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("bce42912-1f1d-4f42-b628-72ae36fe5372"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("e619707f-4602-4e4d-9436-f5db6cf543a8"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f2932e62-b3ec-4728-931f-ca02a5197438"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("23e24f62-083e-44aa-8086-08e39a3c3524"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("01af0b95-c8ac-4283-888f-32885d698f19"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("3b498ed4-db28-4f2e-a8a8-6c24d6306b1a"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("6067a92a-f1f5-49c2-87cf-6398f02d70f0"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("efa744a3-dd97-4a21-b376-8820c280bfe0"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("a88d23ed-8218-462f-afda-9f63ba18309b"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("b012df17-8f98-4624-b267-1ed0255fe3ea"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("7c7c9464-5a86-4bf7-9e6e-2fcc59bdfa86"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("81080d62-7250-4988-b9ec-a11b725fbb87")
                        },
                        new
                        {
                            Id = new Guid("54800d50-ef14-4a1c-89f5-9d4597adcd79"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("ad4d8d8f-f352-44bd-a978-ff125f382e05"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f5d5f9db-bc73-4035-8afc-71d6250fe9d2"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("238100db-3b59-4086-8676-042df260119c"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("4d5a1ee6-1d8e-4ccd-ae31-19b18e7fb27e"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("2844155e-d3bd-424e-a441-fefe911f1742"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("46f7bb9e-db2c-464e-85f7-73189d08ed34"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("b846e140-bd1d-4d87-9f1a-83b9b34d7411"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("01cfae13-8314-4129-84b4-795e2e4ba417"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("0031aabf-61f8-4d86-a532-eb6d7a895518"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("1a247c93-6bec-4b7f-8998-2b09f36529ce"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("8d0dfd78-6d16-4694-8a85-244a5df64cea"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("cc2c9b55-c9e5-42cf-94cc-2dfd048ccd81"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f6016f7d-5517-4cfe-9f23-240bfa4842c0"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("71bd793f-ef40-43fd-849d-69085af368ab"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f38bec2d-365d-40a9-9c57-5813542bd52b"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("924077c5-d525-405d-b1b0-0ce31f90ddb3"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f6af7299-51e5-41b7-9526-6d21cd6fb4ee"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("b02e467a-3bb7-425c-886b-20bacfd3af29"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("6bb0bfcb-68c8-433a-84b5-787b88d7f3e3"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("f291d87a-5d2b-4813-b150-6722a777b830"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("3d6fddbb-d927-41b3-9a8d-da9adbc9485e"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("4319d9ad-7b06-4878-89a3-54a049394780"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("23095a63-29d1-4d34-af39-60ee1c2e4f2a"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("43a411f6-1aa7-4cd9-b512-f39a98e4fd31"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("cf55f509-4e78-4851-ae09-4537e15492b7"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("e327245f-83d9-4d92-bc26-976e89787346"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("7d4902cc-1c4b-49aa-8061-c3aee68c065d"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("e327245f-83d9-4d92-bc26-976e89787346"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("a1d18b38-c387-4f57-bc37-ef4ec1f73997"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("e327245f-83d9-4d92-bc26-976e89787346"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("bd72b4f7-ee00-44cb-8bd5-64618469531e"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8"),
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("2870b9ca-de48-4859-b49d-768c66bd24a0"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8"),
                            ValueTypeId = new Guid("6b3b21b6-b770-4df0-be24-07617a3f5c4d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3c24491-c6da-47a4-801e-6398f01c84ea"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("c7a1cee9-5574-4bbd-a833-b19f8a1b94bb"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("9a6b5e74-b4f1-42e1-8b86-195c4381d181")
                        },
                        new
                        {
                            Id = new Guid("b0a6b87c-4215-4ed7-b231-152768bebdfc"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("cd3e1045-03ac-4128-83ec-34a7f60b4c62"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("4b208a9b-de6c-45cd-a6d5-9c8a5c355be2"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("8b235541-dc33-416c-9ab8-f260552d0947"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("cbe0c196-6f27-4fd5-aa6d-e970a85ba15f"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("242fb983-7377-46f3-845c-854f8b0fc720"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("df63cce5-5401-428a-9d15-e52f99423e97"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("de30041f-7abf-443c-8cb2-92e4ada98059"),
                            EditBlockId = new Guid("78e24469-91a6-4129-8d74-f8470bdbdaaf"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("ecfac8ee-c355-41cf-bf26-43a6d4f20b96"),
                            EditBlockId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            EditBlockId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("91cbc2dc-4ef6-4372-be9c-6a7e45d54815"),
                            EditBlockId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("54a90f7e-d306-4919-b31d-f738fb65f423"),
                            EditBlockId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49")
                        },
                        new
                        {
                            Id = new Guid("b63cd50d-6925-4578-ae4c-9cc2c6348404"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("4c0847d9-ed81-4df5-843f-d28fc4a47c61"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("00278116-7f0d-409e-9224-011d419aeee4"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("dc816470-261b-4762-bd58-82f2de72eff6"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        },
                        new
                        {
                            Id = new Guid("9587a134-12ff-428c-a68b-071794f63518"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de2122f4-91a8-4083-8b8f-f9c35ce80577"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce")
                        },
                        new
                        {
                            Id = new Guid("d919b2a6-2d33-4d63-94fc-20a51af0ae2b"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce")
                        },
                        new
                        {
                            Id = new Guid("38c4eeae-6507-49f5-a42b-f2fd9ae21702"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("00278116-7f0d-409e-9224-011d419aeee4"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8cfc4838-95a5-423f-b167-3f2bcef111a1"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("b63cd50d-6925-4578-ae4c-9cc2c6348404"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("143d8144-bffd-4ef8-b377-167a0865e107"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("4c0847d9-ed81-4df5-843f-d28fc4a47c61"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("721f1580-adef-450d-b41b-b62a27b47d5e"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c")
                        },
                        new
                        {
                            Id = new Guid("7c11f4a5-8793-46dc-acc7-1272205d3ae0"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9")
                        },
                        new
                        {
                            Id = new Guid("cbe51dbd-0239-41ae-9acb-07453c8d6dd8"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610")
                        },
                        new
                        {
                            Id = new Guid("d296679e-7f8b-47fb-9413-bf9ac9591ea1"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610")
                        },
                        new
                        {
                            Id = new Guid("c26dc76b-4783-4814-8c6d-1c149ddcbf79"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610")
                        },
                        new
                        {
                            Id = new Guid("4a123172-fb20-4fa7-bceb-d2e61cdc9b35"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("a501c362-4f48-4249-8267-096b76f2c610")
                        },
                        new
                        {
                            Id = new Guid("95e9a5cd-d463-4c3f-adec-b532fb56b82d"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392")
                        },
                        new
                        {
                            Id = new Guid("0cfd810b-133d-4777-9a88-90224b7d2769"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("0d691f9d-f668-4f4e-8edd-cd3f20165b89"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("fd988499-732b-4255-8f66-93fcef93c48d")
                        },
                        new
                        {
                            Id = new Guid("2403cc33-5b0b-4da5-b7c0-a4545cfdfb03"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7")
                        },
                        new
                        {
                            Id = new Guid("d9e5ca02-e409-4d74-a43a-fc80cbbc9aa3"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114")
                        },
                        new
                        {
                            Id = new Guid("6b7515ae-2e4d-4d11-a3c9-0b4ff25b0268"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("dc816470-261b-4762-bd58-82f2de72eff6"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("d58844d3-5f44-444b-84a5-ed05b0ab3e12"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("9587a134-12ff-428c-a68b-071794f63518"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("4d786230-8090-466c-a526-afd082d59dfc"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e")
                        },
                        new
                        {
                            Id = new Guid("dd2cb777-452b-4904-83fa-50c9b995134d"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e")
                        },
                        new
                        {
                            Id = new Guid("de755bf0-6526-490a-a36d-d77504490cd5"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16")
                        },
                        new
                        {
                            Id = new Guid("365af9cd-310a-48da-9eb9-53c90a33f648"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("e327245f-83d9-4d92-bc26-976e89787346")
                        },
                        new
                        {
                            Id = new Guid("dca77c1a-4f8d-48b5-a4f8-991903e1cdb1"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("b19c307c-9abd-42c2-8d4c-4c2d13a7491c"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d327318-1b95-4429-a3f4-9b2d27fc8bdd"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("2a36b144-e5c9-4afc-abca-3f5da981af6a"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("da4d938d-4ef2-47a3-ae08-f202d78e3ee5"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("9a89ec8e-b4cc-4825-bc5a-724ef14a3365"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9bdb2739-4a91-4292-bb2b-7d406b75f8f4"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("0c2d5754-2636-48ca-8218-8c367b15a23d"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("3fabed82-4b6b-4cdd-8f7d-3a7db418756d"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70c4acb7-64aa-46d4-a25a-86c2556acc53"),
                            IsPrefilled = true,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            Id = new Guid("d29115dd-4a34-40f3-bbf1-52c46f909bb0"),
                            IsPrefilled = true,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            Id = new Guid("372570d2-b8e5-4159-8cdd-7dc5d07566b1"),
                            IsPrefilled = true,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            Id = new Guid("ba54e270-9203-43a9-889f-a5eac891d7bb"),
                            IsPrefilled = true,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            Id = new Guid("7c6d7fbc-b1e2-4832-9751-6971c818b00c"),
                            IsPrefilled = true,
                            TableId = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4")
                        },
                        new
                        {
                            Id = new Guid("a8d839a5-3fae-420e-8189-bb174f043de0"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("4c9d50e7-881f-460d-8515-9f160a5fde97"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("9c22e8f5-d94d-48b1-8cdb-f4eec9bf18b4"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("7d6f738d-17c8-47da-8a0b-661bfb43b403"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("97b9e443-147d-480c-8d03-d5a6c92d4754"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("c60d4623-8597-4192-8aa6-fa4368fb23c0"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("fef86462-e1e6-40a2-8ddc-f5ec0a955980"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        },
                        new
                        {
                            Id = new Guid("ce6bce24-b73d-4401-9530-1eada73b5848"),
                            IsPrefilled = true,
                            TableId = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c26eddd-f712-4bf5-8195-1d2af2107c9e"),
                            FieldId = new Guid("ecfac8ee-c355-41cf-bf26-43a6d4f20b96"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("9eff6fb1-aa97-43fe-90e0-7584672a3207"),
                            FieldId = new Guid("ecfac8ee-c355-41cf-bf26-43a6d4f20b96"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("c6b81e81-f48c-4d0d-b7d1-6027330348db"),
                            FieldId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("8146a6dd-8323-4caa-b88c-e73960c9ba63"),
                            FieldId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("24999737-c581-4a0c-9000-ee1be2f1cfa2"),
                            FieldId = new Guid("1f0d2214-3e26-4e1c-943f-c40d1ec31802"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("2c7dc8c5-0f1e-48bc-9dd2-c38da0c4f671"),
                            ColumnId = new Guid("d312793d-7ef3-440a-90b3-72453cd162bb"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("57eb10d9-3e91-44f3-b811-4abe44f2aee4"),
                            ColumnId = new Guid("d312793d-7ef3-440a-90b3-72453cd162bb"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("b8e52c70-c088-450b-a47a-d78a58ed8365"),
                            ColumnId = new Guid("d312793d-7ef3-440a-90b3-72453cd162bb"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("39f56909-0d09-4702-8355-345797345aa0"),
                            ColumnId = new Guid("6067a92a-f1f5-49c2-87cf-6398f02d70f0"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("64faab79-616d-49df-9f25-e36f0e302cd9"),
                            ColumnId = new Guid("6067a92a-f1f5-49c2-87cf-6398f02d70f0"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("8cf7f295-5c3c-4810-a5d4-72af7e2fc56f"),
                            ColumnId = new Guid("6067a92a-f1f5-49c2-87cf-6398f02d70f0"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("26c9a4ad-4331-418a-9878-fe82e713875f"),
                            ColumnId = new Guid("4d5a1ee6-1d8e-4ccd-ae31-19b18e7fb27e"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("bce51400-9029-4c6c-bfd6-7534a6165344"),
                            ColumnId = new Guid("4d5a1ee6-1d8e-4ccd-ae31-19b18e7fb27e"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("2dbe2414-04b2-42fa-890e-22fb7ba30b5c"),
                            ColumnId = new Guid("6bb0bfcb-68c8-433a-84b5-787b88d7f3e3"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("78778756-0229-40b8-a868-5584dfb3f2e9"),
                            ColumnId = new Guid("6bb0bfcb-68c8-433a-84b5-787b88d7f3e3"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("032b0c8e-572a-4b3e-9060-984c1d845f7a"),
                            ColumnId = new Guid("3d6fddbb-d927-41b3-9a8d-da9adbc9485e"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("9231e843-4e41-456f-b2a2-f8fc25ccc3ff"),
                            ColumnId = new Guid("3d6fddbb-d927-41b3-9a8d-da9adbc9485e"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("6f7e1b16-748b-46f2-94d0-31c19cd2474e"),
                            ColumnId = new Guid("3d6fddbb-d927-41b3-9a8d-da9adbc9485e"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("88d31a88-576f-4d23-805f-b083e3746a83"),
                            ColumnId = new Guid("cf55f509-4e78-4851-ae09-4537e15492b7"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("bf3129b3-b3de-4e24-b007-824148dc5789"),
                            ColumnId = new Guid("cf55f509-4e78-4851-ae09-4537e15492b7"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c336672d-1f14-43f7-9d01-ddd49f92ab4b"),
                            ColumnId = new Guid("cf55f509-4e78-4851-ae09-4537e15492b7"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("cff66a2b-b90a-406d-9ab0-236df0468d19"),
                            ColumnId = new Guid("a88d23ed-8218-462f-afda-9f63ba18309b"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("5276f96b-d20b-4bef-bbd0-33527eea201c"),
                            ColumnId = new Guid("a88d23ed-8218-462f-afda-9f63ba18309b"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9caf07e2-5f1e-49dc-9dea-eba0e909c234"),
                            ColumnId = new Guid("ad4d8d8f-f352-44bd-a978-ff125f382e05"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("251415d7-752c-4371-aef8-b4ff248c2ea0"),
                            ColumnId = new Guid("ad4d8d8f-f352-44bd-a978-ff125f382e05"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd988499-732b-4255-8f66-93fcef93c48d"),
                            EditBlockId = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c21c755f-bdad-4091-a5bc-3f5205e416a7"),
                            EditBlockId = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("77eb614a-c11a-47aa-b75e-5e7d9c3fb2ce"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("106b5ae5-8850-495b-952e-205e1ca9090c"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("af53b5bc-75a4-4187-b58f-09676075c5cf"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("a501c362-4f48-4249-8267-096b76f2c610"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("2b0a98e0-7704-485b-897e-fc6d44d8f392"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("a398c8e1-fe9a-44ae-b231-1822a68a00a9"),
                            EditBlockId = new Guid("bc171149-d853-46ab-bb9c-aea1409de2e8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("9d8e029d-4e19-4240-918a-7bf33e1c1114"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("2cce40ae-a066-4c90-b72d-06d947900dd4"),
                            EditBlockId = new Guid("e3601379-49ff-4ac7-ab2f-7aa5b61f67f2"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("fe0bcf0c-159a-4213-88d2-99cce9df0f4e"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("4661b87f-6714-4861-85d8-00c252fa8a16"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("e327245f-83d9-4d92-bc26-976e89787346"),
                            EditBlockId = new Guid("0e80f5a3-de17-4a37-8f0c-7160a0778d9e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("420df18e-d092-4ae4-87f5-0cd26fe06cb8"),
                            EditBlockId = new Guid("0e495b14-627a-4d15-97cd-ef4c1b9c2bdb"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bcc7087-f4a2-41be-abf2-2d862a870269"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6ebbbbb7-c487-4c7f-84d3-2e7155362fc8"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65f857a3-5bc0-4204-aa6c-9fc07e8662cc"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("b01ac1b2-814a-4e67-86d6-0f1d6288cc49"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("81080d62-7250-4988-b9ec-a11b725fbb87"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("9a6b5e74-b4f1-42e1-8b86-195c4381d181"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("6b3b21b6-b770-4df0-be24-07617a3f5c4d"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
