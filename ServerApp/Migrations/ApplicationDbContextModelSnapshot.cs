// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            EditBlocksId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            EditBlocksId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            EditBlocksId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("537065c7-27d4-4bde-908e-23f428f560a4"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("47732a36-9141-42e1-b25e-996798b5f347"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("336e9356-f0f1-4e7b-b7ed-af24077b1363"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("a66f660c-fd15-4819-9b4a-569645152dfa"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("ba8943b9-9f29-4cbc-a623-d9f94f5982b8"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("cac36c3b-9293-400f-af39-8500237408f1"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("6adc8d97-ad3d-430d-a3f2-e94e45cc5895"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("80bbfa9d-c374-4e27-b9f8-449c9a10c18b"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("508fe299-5354-49cb-b745-a898be9fa040"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("4e730b60-1742-45d0-8c45-f48214b99366"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("8162a2db-0dcb-48ef-91cd-44a06c48ff10"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("e3e87448-b8f6-45cf-860d-919b22adfca6"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("6fb39dd0-63c0-4a74-bb06-28b2805d816e"),
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50")
                        },
                        new
                        {
                            FieldsId = new Guid("074df861-a9cd-41fd-a164-5533df0aaa0a"),
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97")
                        },
                        new
                        {
                            FieldsId = new Guid("7a592818-f3cd-47e6-9aad-9fb3686f7fd1"),
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97")
                        },
                        new
                        {
                            FieldsId = new Guid("74862a25-aff3-420e-a728-819d6f4105d7"),
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97")
                        },
                        new
                        {
                            FieldsId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b")
                        },
                        new
                        {
                            FieldsId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610")
                        },
                        new
                        {
                            FieldsId = new Guid("37c5bafe-13d7-402d-ad75-e608d8b04fe7"),
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610")
                        },
                        new
                        {
                            FieldsId = new Guid("78c1ac8f-07c5-46d8-b122-f6c103e9c513"),
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            TablesId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            TablesId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            TablesId = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            TablesId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            TablesId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            TablesId = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            TablesId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            TablesId = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            TablesId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            TablesId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            TablesId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            TablesId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            TablesId = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            TablesId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            TablesId = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            TablesId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            TracksId = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            TracksId = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("60324c92-a384-44cc-bf63-1e9db345aa26")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("1c20cda1-5b28-4bc4-a23c-2521acb6d74a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("94c639f7-3673-4feb-9aa5-572fc11be281")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("f6d59b23-c41e-4507-b2c0-0ac9f41791a1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("3e57b08c-d369-4328-bbe6-d5f0e7bbced6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("bffbb198-9509-43e4-96b5-a69213e59834")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            MarksId = new Guid("0272b968-e658-4e61-b1f0-78e5f9dd24cd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            MarksId = new Guid("2594c842-261a-4150-9b6f-0eae9c7ae9be")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            MarksId = new Guid("ddcbe07c-4623-40f5-aaeb-84d36fec4a9e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            MarksId = new Guid("8efca974-729e-4481-9e2a-86ef50175540")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            MarksId = new Guid("0802f9d8-2837-46d4-a1f4-995328efb84b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            MarksId = new Guid("25df9158-d365-4f57-b5a8-cfeb561baf9a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            MarksId = new Guid("1749c00f-3f36-4a70-8d6b-f36e7619a0af")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            MarksId = new Guid("1421fe0b-e97c-49c5-ba11-1d6757bd90bb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            MarksId = new Guid("867d5007-422b-4f71-a5aa-340c1b87377e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("1749c00f-3f36-4a70-8d6b-f36e7619a0af")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("1421fe0b-e97c-49c5-ba11-1d6757bd90bb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("7b250abe-5148-4669-88e5-816ba53eab94")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("2d88a35c-eaba-4dcd-af08-324c71685fdd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("0345ae82-893e-432c-a4d2-f0388ba59fc0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("97b2b8c1-362b-4d8a-861b-67803988b51a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            MarksId = new Guid("1fd8d5f1-ed52-49de-be43-18c33cb9b387")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            MarksId = new Guid("867d5007-422b-4f71-a5aa-340c1b87377e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            MarksId = new Guid("7e5e75c0-45e0-4e4d-8436-2c7d63dacfba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            MarksId = new Guid("01bbf21e-3ccc-4929-95b9-ca04dfd08935")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            MarksId = new Guid("3bf95287-7f14-45a6-a010-037753bc7bf5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            MarksId = new Guid("fae828ea-79d9-422d-81ae-a9b6560d6bfc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29cf82aa-678c-454b-9232-8ad370607753",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "dc3f6eb3-0b0b-41fd-81db-af651b75863c",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "aa68f334-5d24-41d5-938b-f89bc0a44863",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "cf9c7f65-a5d3-4fae-b7ef-a0d69f1f391d",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "4a4269c8-30a0-446f-bd23-772927c451d6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c85dd3da-ccb1-49eb-8acc-43242b725966"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("dd27b52e-c7c2-414c-94d7-c1536508ada4"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("a08df53b-ede7-4406-b4e2-b7a8376389a3"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("9a380552-79d6-460a-8f7e-cbaff796031e"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("91a46fd3-6f15-4240-956f-c5c93a8c7b62"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("763c91d5-5170-4993-a808-0e05e25095ea"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("043fdecf-1ccd-49b6-ab7b-beb1ebb7fb5e"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d7a00c2c-cbe8-46fe-84e8-6694941dcac9"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa6e34d6-4dad-423a-8ce6-d966621d61b4"),
                            ColumnId = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c4f0099b-b722-4c41-a75c-5137014d74ec"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("c7072641-52b1-4590-b517-21e9c184ad4f"),
                            ColumnId = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c4f0099b-b722-4c41-a75c-5137014d74ec")
                        },
                        new
                        {
                            Id = new Guid("577bb7c4-2b8b-4e0c-957b-d58443004f31"),
                            ColumnId = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("373bc101-f394-4f92-916e-35058d2cbfe9"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("8a6fcfd7-bc04-42b9-95a9-8aa12a43c8a9"),
                            ColumnId = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("373bc101-f394-4f92-916e-35058d2cbfe9")
                        },
                        new
                        {
                            Id = new Guid("b72abb30-5e4d-4cd1-95d6-eb9bb899aa4e"),
                            ColumnId = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c0d3e6f6-36a5-4bbd-be30-1e14205ca885"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("96af8c42-9964-424e-be94-e112440bc5e7"),
                            ColumnId = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c0d3e6f6-36a5-4bbd-be30-1e14205ca885")
                        },
                        new
                        {
                            Id = new Guid("1b8c83af-a447-42b6-aa20-217adef67f5c"),
                            ColumnId = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("150ca833-3135-45ba-bed8-41031d45b0a2"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("18a9bafb-29cb-4e72-a25c-8f8e9f2f2584"),
                            ColumnId = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("150ca833-3135-45ba-bed8-41031d45b0a2")
                        },
                        new
                        {
                            Id = new Guid("2eab2bf9-f304-4a5d-ae31-b988e7c43433"),
                            ColumnId = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d18f9d9b-9ac7-450e-88e9-d7df5306656d"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("dd3f684f-a63c-4f93-a901-a663f942ee08"),
                            ColumnId = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d18f9d9b-9ac7-450e-88e9-d7df5306656d")
                        },
                        new
                        {
                            Id = new Guid("534ec84f-4c63-41ca-b38f-7adbd3b087d9"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8b6a09b3-922d-4178-a95e-603f3d8068d2"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("720364d5-0e27-421d-b71c-a20b3645c2ac"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8b6a09b3-922d-4178-a95e-603f3d8068d2")
                        },
                        new
                        {
                            Id = new Guid("8d2e763f-49d7-42d7-a73f-479326662883"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("dc018d05-76c6-4f38-8d80-1accbb432e91"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("61374143-7485-4408-8c29-6911c04dde7a"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("dc018d05-76c6-4f38-8d80-1accbb432e91")
                        },
                        new
                        {
                            Id = new Guid("7af8d2f9-1120-4627-a701-a1706eb09359"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b8095343-64d7-4123-b60c-f4295c2fbbbc"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("73fff3d5-080b-44dd-907a-55f2f10228fb"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b8095343-64d7-4123-b60c-f4295c2fbbbc")
                        },
                        new
                        {
                            Id = new Guid("27692865-a6c0-4b27-bbf1-233cdd558a7d"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("deb09daa-2723-42df-87f7-6acb8e3e397b"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("2ae45eaf-9664-4210-a42f-65b842c40794"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("deb09daa-2723-42df-87f7-6acb8e3e397b")
                        },
                        new
                        {
                            Id = new Guid("90d65b5b-5ddc-4774-bc7a-694e06e5fda1"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("df9affe9-6fa9-438d-ba2c-0cb5fc635a51"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("cc645f74-a2cf-41dc-bf59-04afc957e990"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("df9affe9-6fa9-438d-ba2c-0cb5fc635a51")
                        },
                        new
                        {
                            Id = new Guid("8aaa41c7-e0dc-4ddd-a96e-1a63d0681eb3"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9412f364-aaa0-4a76-9265-29059f80a62d"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("b81d7c03-3b89-4d9d-94d4-4305e8fac0bc"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9412f364-aaa0-4a76-9265-29059f80a62d")
                        },
                        new
                        {
                            Id = new Guid("3d835654-b3fc-45f4-884b-f3e9f32c11f5"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2a26168c-d7d8-4ca4-a7f9-f6ed3477dd73"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("7b57b27d-8c74-4cf2-9627-fda359412df3"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2a26168c-d7d8-4ca4-a7f9-f6ed3477dd73")
                        },
                        new
                        {
                            Id = new Guid("f9d3459c-b179-42d9-9140-f3d5af9c2d4a"),
                            ColumnId = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("60c5f960-76eb-474e-98a4-49189c59f75b"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("5eb11ee1-ad73-41af-9e46-639aec8b3781"),
                            ColumnId = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("60c5f960-76eb-474e-98a4-49189c59f75b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b101b42c-e7b7-4219-abd7-7e34d5900c40"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("2434659b-84b9-44fb-ae5c-1cad68b45298"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("407de471-b115-4fc7-afcf-1eebbbc50ccc"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("a3552d49-e27a-49aa-bc8d-1a616fc3fd81"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("074b3d60-fad5-4dbd-bfc2-ec52c8206207"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("0c6e1120-cf40-4eb8-96a1-147aa8b656ec"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("f1252f30-f609-4c76-b385-56f4db03751d"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("d734fc73-d621-4127-a6b3-1c5a7bda30e5"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("10718df9-9212-4e7f-b42f-ff381ea25a00"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("2d9781ed-ab87-48c6-a987-24b642ff2455"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("c5a410e0-0cbc-4ec3-90f8-ce2cc8719955"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("19792ed9-dcb1-4dd7-801a-ea95fe017ba4"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("8c6b1e2d-01e7-4ecb-9f2a-55d4138b3d4e"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("5ec6478e-69fa-4d04-8c9f-eed8f1adb7b7"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("917f13cf-6ad7-49dd-b475-e9ce2d6ea83e"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("03aa6739-2d0e-44d0-a0c6-42da7eba61ab"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("c9e40233-8aef-4ebe-bc59-33638f7d69d1"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("fc8f093e-9b1b-432c-9977-e1345a9ea691"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("b074fe3e-6eec-4a1d-b552-2640df2f15a4"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("3eea53b3-24d1-4f4e-b58e-5a46f765baf5"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("c153963b-76bc-428e-8812-457cd01f1f17"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("a5ca8989-c34b-4ba4-944a-389f64b9dbad"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("8d6e9774-97e6-43c8-84af-e71b4e42aeb3"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("450f5256-9c33-4918-8959-c60e94357438"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("fcefe5db-b0da-4c8b-b045-ef7cc311b904"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("06f61383-f3e4-4f0f-a617-9c150ff48d8a"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("3f41b224-f1f3-4974-9918-f1b1ae01bb7f")
                        },
                        new
                        {
                            Id = new Guid("abd5a7b5-c4d5-4130-a8f8-24067d0518a4"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("2ea85b16-14db-4d2d-b9f4-04529460fda8"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("8231bb93-4b85-4fc7-a273-d54bc12517d9"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("d22c0559-e2e5-4004-96b5-83da1bc09baf"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("584b2242-bb7e-4a01-af0d-cc8337e36d91"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("81b78d95-74f1-4bcd-8193-ad36c79e58c2"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("4eefd998-e860-4003-a7da-241175fb7050"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6ed255c7-6b54-4ef3-9b5a-de2dba93303c"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("2382b68b-256e-429d-ba42-83ce265b32ed"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("12e0c50e-fc25-4742-a55e-e4b1233997c3"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("63a7469c-c918-48be-a0e7-848017210e41"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("66542c9c-552c-4757-8227-080a1749fec3"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("3f4cf052-602b-4c36-9042-ad2d19e44108"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("dd3b9098-3b79-4a35-88b9-3a5d704733f6"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("9cab5080-c412-458c-84d8-2617596bbaf2"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("26309fea-b73f-4dc2-8b42-03abe7038651"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("7346fc39-102d-4b23-9ce8-4c6cee883fde"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("c37d67eb-e47d-4467-b1c3-5ec3a5f55114"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("51636793-9144-4c8a-879a-c47cafb55cf8"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("c1c87e5e-20aa-4e95-9ca2-c7b0b3a689eb"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("429d0495-3e9f-422e-8948-4c30ae30bf21"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("c93b34d8-c773-4bfd-a412-517dad90a56d"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("2af68382-93d7-493a-86a8-ce235b478609"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6426dfb1-2b0c-40e3-9a90-dac93a339287"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("cb3b2fca-221e-4e32-b5e0-f5440bb73dd1"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("8d02551b-9b6e-411e-b53b-9310fbe188ba"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("afed5fd8-b5cd-4541-a85c-fd80e4217238"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("ea630bec-7958-406a-be0c-b2184521fc8d"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("055e4bbb-18ef-4970-8a24-67bef88a21f4"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8"),
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6294d2c9-0843-40cc-9f84-82ec07a7b5fb"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8"),
                            ValueTypeId = new Guid("8e2c2417-6852-4aae-868f-bc2435dde3bd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Checked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b677dac2-3034-4f03-8492-a41a16e7054f"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("537065c7-27d4-4bde-908e-23f428f560a4"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("47732a36-9141-42e1-b25e-996798b5f347"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("c1976735-c3e6-4435-910a-4295b0275b0c")
                        },
                        new
                        {
                            Id = new Guid("336e9356-f0f1-4e7b-b7ed-af24077b1363"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("a66f660c-fd15-4819-9b4a-569645152dfa"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("ba8943b9-9f29-4cbc-a623-d9f94f5982b8"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("cac36c3b-9293-400f-af39-8500237408f1"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6adc8d97-ad3d-430d-a3f2-e94e45cc5895"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("80bbfa9d-c374-4e27-b9f8-449c9a10c18b"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("508fe299-5354-49cb-b745-a898be9fa040"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("4e730b60-1742-45d0-8c45-f48214b99366"),
                            EditBlockId = new Guid("bfb97334-a908-4ee5-8d09-846b11bce78d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("8162a2db-0dcb-48ef-91cd-44a06c48ff10"),
                            EditBlockId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            EditBlockId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("e3e87448-b8f6-45cf-860d-919b22adfca6"),
                            EditBlockId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("6fb39dd0-63c0-4a74-bb06-28b2805d816e"),
                            EditBlockId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974")
                        },
                        new
                        {
                            Id = new Guid("074df861-a9cd-41fd-a164-5533df0aaa0a"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("7a592818-f3cd-47e6-9aad-9fb3686f7fd1"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("74862a25-aff3-420e-a728-819d6f4105d7"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("37c5bafe-13d7-402d-ad75-e608d8b04fe7"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        },
                        new
                        {
                            Id = new Guid("78c1ac8f-07c5-46d8-b122-f6c103e9c513"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60324c92-a384-44cc-bf63-1e9db345aa26"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de")
                        },
                        new
                        {
                            Id = new Guid("1c20cda1-5b28-4bc4-a23c-2521acb6d74a"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("21e24349-b464-4a5c-8769-b5483dca18de")
                        },
                        new
                        {
                            Id = new Guid("94c639f7-3673-4feb-9aa5-572fc11be281"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("74862a25-aff3-420e-a728-819d6f4105d7"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("f6d59b23-c41e-4507-b2c0-0ac9f41791a1"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("074df861-a9cd-41fd-a164-5533df0aaa0a"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("3e57b08c-d369-4328-bbe6-d5f0e7bbced6"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("7a592818-f3cd-47e6-9aad-9fb3686f7fd1"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("bffbb198-9509-43e4-96b5-a69213e59834"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841")
                        },
                        new
                        {
                            Id = new Guid("0272b968-e658-4e61-b1f0-78e5f9dd24cd"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57")
                        },
                        new
                        {
                            Id = new Guid("2594c842-261a-4150-9b6f-0eae9c7ae9be"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866")
                        },
                        new
                        {
                            Id = new Guid("ddcbe07c-4623-40f5-aaeb-84d36fec4a9e"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866")
                        },
                        new
                        {
                            Id = new Guid("8efca974-729e-4481-9e2a-86ef50175540"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866")
                        },
                        new
                        {
                            Id = new Guid("0802f9d8-2837-46d4-a1f4-995328efb84b"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866")
                        },
                        new
                        {
                            Id = new Guid("25df9158-d365-4f57-b5a8-cfeb561baf9a"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd")
                        },
                        new
                        {
                            Id = new Guid("1749c00f-3f36-4a70-8d6b-f36e7619a0af"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("1421fe0b-e97c-49c5-ba11-1d6757bd90bb"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233")
                        },
                        new
                        {
                            Id = new Guid("867d5007-422b-4f71-a5aa-340c1b87377e"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e")
                        },
                        new
                        {
                            Id = new Guid("7b250abe-5148-4669-88e5-816ba53eab94"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d")
                        },
                        new
                        {
                            Id = new Guid("2d88a35c-eaba-4dcd-af08-324c71685fdd"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("37c5bafe-13d7-402d-ad75-e608d8b04fe7"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("0345ae82-893e-432c-a4d2-f0388ba59fc0"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("78c1ac8f-07c5-46d8-b122-f6c103e9c513"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("97b2b8c1-362b-4d8a-861b-67803988b51a"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94")
                        },
                        new
                        {
                            Id = new Guid("1fd8d5f1-ed52-49de-be43-18c33cb9b387"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94")
                        },
                        new
                        {
                            Id = new Guid("7e5e75c0-45e0-4e4d-8436-2c7d63dacfba"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("da96f661-bcac-4675-a4e8-026850997ce2")
                        },
                        new
                        {
                            Id = new Guid("01bbf21e-3ccc-4929-95b9-ca04dfd08935"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d")
                        },
                        new
                        {
                            Id = new Guid("3bf95287-7f14-45a6-a010-037753bc7bf5"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("fae828ea-79d9-422d-81ae-a9b6560d6bfc"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe9e3510-c049-4e21-a261-6a0fe2849b50"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3c3a9fb0-92e4-4456-8b3e-be81c2556d97"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("0e304fda-a8f9-4b6e-91d7-1002062cf9ef"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("0fd2fa3a-e9cb-4164-8820-6d7cb5cc8a1b"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9bf9c4b9-9519-41c1-8c44-9c9cfdd1b610"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("66bb6b2d-1842-4456-b543-4ece86abff5d"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("56ceacab-2883-4fc3-956e-7f673ac44cd0"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4f0099b-b722-4c41-a75c-5137014d74ec"),
                            IsPrefilled = true,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            Id = new Guid("373bc101-f394-4f92-916e-35058d2cbfe9"),
                            IsPrefilled = true,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            Id = new Guid("c0d3e6f6-36a5-4bbd-be30-1e14205ca885"),
                            IsPrefilled = true,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            Id = new Guid("150ca833-3135-45ba-bed8-41031d45b0a2"),
                            IsPrefilled = true,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            Id = new Guid("d18f9d9b-9ac7-450e-88e9-d7df5306656d"),
                            IsPrefilled = true,
                            TableId = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0")
                        },
                        new
                        {
                            Id = new Guid("8b6a09b3-922d-4178-a95e-603f3d8068d2"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("dc018d05-76c6-4f38-8d80-1accbb432e91"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("b8095343-64d7-4123-b60c-f4295c2fbbbc"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("deb09daa-2723-42df-87f7-6acb8e3e397b"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("df9affe9-6fa9-438d-ba2c-0cb5fc635a51"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("9412f364-aaa0-4a76-9265-29059f80a62d"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("2a26168c-d7d8-4ca4-a7f9-f6ed3477dd73"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        },
                        new
                        {
                            Id = new Guid("60c5f960-76eb-474e-98a4-49189c59f75b"),
                            IsPrefilled = true,
                            TableId = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6d07739-7dcc-4549-95c8-efc2fc19a903"),
                            FieldId = new Guid("8162a2db-0dcb-48ef-91cd-44a06c48ff10"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("1021c6de-fb7e-47aa-b953-a7cf51121746"),
                            FieldId = new Guid("8162a2db-0dcb-48ef-91cd-44a06c48ff10"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("96b51ffe-fc78-40ef-8a7f-c85c37dc7ae3"),
                            FieldId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("7690410e-f53f-48e3-999e-ccba7f5c8e36"),
                            FieldId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("f68a7fdb-3392-4385-bd75-d6b1df28f6c2"),
                            FieldId = new Guid("6bdbbe3a-325b-4ea9-a66c-c545fa063b77"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("acb0c902-87f1-4db4-bdb3-d944321ada0c"),
                            ColumnId = new Guid("407de471-b115-4fc7-afcf-1eebbbc50ccc"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("bfe4ab52-90da-40f6-9532-0f8870a7254a"),
                            ColumnId = new Guid("407de471-b115-4fc7-afcf-1eebbbc50ccc"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("851bc4dd-46b6-46a3-80cd-132d73a93206"),
                            ColumnId = new Guid("407de471-b115-4fc7-afcf-1eebbbc50ccc"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("9b7be950-b393-4730-9a6d-eba518f9a9b0"),
                            ColumnId = new Guid("a5ca8989-c34b-4ba4-944a-389f64b9dbad"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("df11c7c2-507c-4f41-b448-9c19785f74ff"),
                            ColumnId = new Guid("a5ca8989-c34b-4ba4-944a-389f64b9dbad"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("5fe64cc9-db6c-4f08-a482-963bfb836e2e"),
                            ColumnId = new Guid("a5ca8989-c34b-4ba4-944a-389f64b9dbad"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("936b040f-985e-4164-953b-96a8ef0078ef"),
                            ColumnId = new Guid("584b2242-bb7e-4a01-af0d-cc8337e36d91"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("d3b7042e-08db-4d21-b029-02fbb96f801f"),
                            ColumnId = new Guid("584b2242-bb7e-4a01-af0d-cc8337e36d91"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("5f820427-5e26-4798-8848-bebd888f2289"),
                            ColumnId = new Guid("c1c87e5e-20aa-4e95-9ca2-c7b0b3a689eb"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("b04423fb-0553-4485-860d-cf3ac1a044ae"),
                            ColumnId = new Guid("c1c87e5e-20aa-4e95-9ca2-c7b0b3a689eb"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("bb87a063-dd57-43d2-8a0f-795b6bd17ef2"),
                            ColumnId = new Guid("c93b34d8-c773-4bfd-a412-517dad90a56d"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("1d1616cb-5f2f-4a49-9e02-ec2c604b3b8f"),
                            ColumnId = new Guid("c93b34d8-c773-4bfd-a412-517dad90a56d"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("f5074f24-dad1-45a4-bdbe-f65e78435928"),
                            ColumnId = new Guid("c93b34d8-c773-4bfd-a412-517dad90a56d"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("a36a303b-3d5e-4ba9-b86e-80ac697dbabd"),
                            ColumnId = new Guid("8d02551b-9b6e-411e-b53b-9310fbe188ba"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("f4b6f581-6c9b-4a2a-84d1-2e399271302d"),
                            ColumnId = new Guid("8d02551b-9b6e-411e-b53b-9310fbe188ba"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("52c7cf3a-1614-430c-aa4a-f3f33a56d6ff"),
                            ColumnId = new Guid("8d02551b-9b6e-411e-b53b-9310fbe188ba"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("53bf9861-064b-4741-8c33-cc1f13d8b521"),
                            ColumnId = new Guid("450f5256-9c33-4918-8959-c60e94357438"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("7a43fc2d-156f-4f67-bded-f24fbe92107c"),
                            ColumnId = new Guid("450f5256-9c33-4918-8959-c60e94357438"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("5c3237cf-46ce-4476-a473-8594b16d59aa"),
                            ColumnId = new Guid("2ea85b16-14db-4d2d-b9f4-04529460fda8"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("485af0f2-2394-4959-a933-a9c52ec7b4c1"),
                            ColumnId = new Guid("2ea85b16-14db-4d2d-b9f4-04529460fda8"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("5fc3c772-44d6-4944-a56c-678c43cc2bae"),
                            ColumnId = new Guid("66542c9c-552c-4757-8227-080a1749fec3"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("6f8e2892-e9a4-4b77-b53d-4e53897ea086"),
                            ColumnId = new Guid("66542c9c-552c-4757-8227-080a1749fec3"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("7c484fc9-d76e-4141-9033-895893fa26b5"),
                            FieldId = new Guid("e3e87448-b8f6-45cf-860d-919b22adfca6"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("05f2eda3-7bda-49b7-b756-83958836a266"),
                            FieldId = new Guid("e3e87448-b8f6-45cf-860d-919b22adfca6"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72905683-dc41-40a5-9f5a-31bd7f886233"),
                            EditBlockId = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4290dd6c-dda7-448f-a81b-23520c0f537e"),
                            EditBlockId = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("21e24349-b464-4a5c-8769-b5483dca18de"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("3ecf8f09-f631-4f8a-a253-7cebcede2841"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f4c48e64-99c1-4c7b-b865-8296a92effe5"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("fda8662c-7296-416d-8fe5-ea6b072de866"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("5c527445-b8db-40cd-afce-2d09a162b9fd"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("6a3b6c8b-8444-48c6-bf23-aa908deb8a57"),
                            EditBlockId = new Guid("57106eb0-28a8-425b-ac3b-f6a18db32f4f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("3c81647b-c961-4610-b7b6-0afe68cbcc1d"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("cafabf11-5d3d-4993-a410-eb3a400659f0"),
                            EditBlockId = new Guid("5561bcf2-ba9e-4d96-bc5d-2ec98f6fd179"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("daf56fe3-0da6-4e61-a4b0-65fae73b0a94"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("da96f661-bcac-4675-a4e8-026850997ce2"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("d3301d1f-b164-4a6e-9096-cf4ac233c52d"),
                            EditBlockId = new Guid("358cd0e4-b37b-4d4d-b686-312b25340a02"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("8a3b5a87-1ecc-48f2-b5de-e2b85ed735c8"),
                            EditBlockId = new Guid("9ab5e9a9-6df6-4fee-93d0-aca1f11b0714"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4becdfb-e28c-484d-86fc-268e5171cb30"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("35dfe5ef-82a7-418a-8724-71f5ba108805"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48dc1a17-68d8-41e0-9273-39b43318710b"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("80481c6d-8ba4-4c78-82e9-3885e0821974"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("3f41b224-f1f3-4974-9918-f1b1ae01bb7f"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("c1976735-c3e6-4435-910a-4295b0275b0c"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("8e2c2417-6852-4aae-868f-bc2435dde3bd"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("ApplicationFormId");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Feedbacks");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
