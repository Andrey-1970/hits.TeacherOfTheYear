// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            EditBlocksId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            EditBlocksId = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            EditBlocksId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            EditBlocksId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            EditBlocksId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            EditBlocksId = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            EditBlocksId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("2ae2973a-a96c-4bed-af10-10b05e9efa34"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("6ae3891d-3d4c-4fe1-b5a0-120f523a9c0e"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("fa8a9bff-8017-43c4-8b7d-270ff2b7a833"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("f686c0b1-5882-427a-bf39-276d3b7070a0"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("454b4c90-1f06-42c0-b679-13d204741811"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("95ea6168-eae7-4d12-b9dd-93e6e3a807b3"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("f509fbd0-9751-45f8-8c7f-eaf247952374"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("978829c2-9a1a-4c1c-84ea-af8445c19905"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("b5ad2e26-10d0-483f-9696-38de82e2e341"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("ff9a90cc-640a-48bd-a9a9-fc6e135b0de2"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("7e0f49bf-2323-4c69-b176-e9d4c9da6734"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("1c4f7db3-cfbb-4fb7-8836-9b71e108f6e6"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("c0e1a548-4d40-4a03-9c7c-47bceb78cc08"),
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab")
                        },
                        new
                        {
                            FieldsId = new Guid("78cf487f-c6d9-4bf3-a3f7-2c2528aac0ba"),
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe")
                        },
                        new
                        {
                            FieldsId = new Guid("ccd24fd6-bc99-4369-babc-f6c3fce4b2fb"),
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe")
                        },
                        new
                        {
                            FieldsId = new Guid("5f85073f-0d5b-468e-abdd-d14b29182ad1"),
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe")
                        },
                        new
                        {
                            FieldsId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34")
                        },
                        new
                        {
                            FieldsId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd")
                        },
                        new
                        {
                            FieldsId = new Guid("f175752f-5475-4005-ae0e-71c9e2dd8c33"),
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd")
                        },
                        new
                        {
                            FieldsId = new Guid("d66f7dd0-88ad-43d0-af74-d2d86c18efca"),
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            TablesId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            TablesId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            TablesId = new Guid("a4648860-1193-4dcd-b84a-563d822482d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            TablesId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            TablesId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            TablesId = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            TablesId = new Guid("75b85878-3db2-448b-b455-638032865ae8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            TablesId = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            TablesId = new Guid("75b85878-3db2-448b-b455-638032865ae8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            TablesId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            TablesId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            TablesId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            TablesId = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            TablesId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            TablesId = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            TablesId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            TracksId = new Guid("6c793e27-24db-4c22-8988-89394cee6d64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            TracksId = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("fe4fb102-79f2-4709-9f18-70cfda7e6a2d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("7d64ca03-d780-40ca-a699-2a270a4a4b79")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("72325da9-618f-43d4-af51-d0c5f3fa89a6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("48e29102-221c-4b52-bba9-34e5656aadc6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("f023b3bc-bae6-4b30-8958-f4aada53e510")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("d7f5ae69-5ca4-4537-9219-311495c5bff2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            MarksId = new Guid("50664347-e2b9-4750-a5d5-7265bd861968")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            MarksId = new Guid("d968229b-2eea-4437-915a-320b9f1a0a85")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            MarksId = new Guid("d9c1d523-2ffd-476f-ba6e-b855f583a410")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            MarksId = new Guid("85ac2bb1-56c0-4bef-9d30-44daa935485e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            MarksId = new Guid("a88d8086-7fc8-4d56-99ac-54ff26be15d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            MarksId = new Guid("47e79cf8-5bb5-4132-8a92-128f20fe1156")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            MarksId = new Guid("c2f9b2fc-2497-45a3-9195-a5d94cddbc68")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            MarksId = new Guid("4ecb0a00-7df3-4170-b0da-20dbe7dd1636")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            MarksId = new Guid("e39cc744-f383-46c2-972d-01363423c1ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("c2f9b2fc-2497-45a3-9195-a5d94cddbc68")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("4ecb0a00-7df3-4170-b0da-20dbe7dd1636")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("78281c78-5f32-4f25-b560-d0de55a78505")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("2f87d206-17d1-4e9d-b5c7-f209b142a0a5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("59a9121b-f45d-4657-9b74-64c8f5e09e17")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("f2446805-9694-466e-a806-12408a42b7c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            MarksId = new Guid("4d720371-31b5-4def-8564-1c9a94e70e43")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            MarksId = new Guid("e39cc744-f383-46c2-972d-01363423c1ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            MarksId = new Guid("1113c9e0-da52-43b3-8b96-8aecb26dc48c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            MarksId = new Guid("04c9e1d3-b337-4d2d-b05d-21826839fad0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            MarksId = new Guid("9eff9cd7-f1a2-490d-bb2d-4085bea3ebdf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            MarksId = new Guid("20a318ee-ae30-4c5c-bab6-839d30a2e2a2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "36506423-4967-40a1-8ab2-a172cca314b4",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "3cb27a85-0f83-4177-a649-f86debbd1952",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "a11ec3f3-0c12-42a4-8f58-1acdd15ac8f3",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "7b6d371e-26fc-450f-9f31-9539f8101126",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "1d6fdc85-1fd0-49e9-88f5-12239e733a51",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6fb5915-53ba-4838-970a-f7869a83d5f8"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("82a325ad-39c4-4714-9428-0fd57d69d4b7"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("a639b1b7-c845-4234-9ba6-0a153c6e6b22"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("5b511bd2-3eee-4625-ba0f-690aec29e8b9"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("59e8877b-0e1d-4a7c-b18c-c83c89734c60"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("f41ccc49-7fe2-4c75-af70-494896bafd80"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c62bcd9-4845-4041-96b6-27c93b6016a4"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("4170fbdf-4682-44df-9e44-91fd966cfbe5"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bbcb9f0-d961-43fe-b581-e7212e29e111"),
                            ColumnId = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3fa9474e-6ad9-42fd-8dd2-3832a7e311d2"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("09566cce-7c25-4089-b433-cef602b21e4e"),
                            ColumnId = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3fa9474e-6ad9-42fd-8dd2-3832a7e311d2")
                        },
                        new
                        {
                            Id = new Guid("55abfd6a-f53c-47de-a812-d2cf354bf062"),
                            ColumnId = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("44e520d2-70fd-452c-ad40-d17b4184c086"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("f2cf28c1-b3e2-4f2b-a355-44a7b6ef7ba4"),
                            ColumnId = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("44e520d2-70fd-452c-ad40-d17b4184c086")
                        },
                        new
                        {
                            Id = new Guid("c71561f6-1508-4156-9f09-29720c23fe16"),
                            ColumnId = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a04ab0d9-ef70-4c43-a74f-cff52c5347f5"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("6ebdeef6-f8a1-4bbc-861f-35ac7a278361"),
                            ColumnId = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a04ab0d9-ef70-4c43-a74f-cff52c5347f5")
                        },
                        new
                        {
                            Id = new Guid("a7945baa-71c8-43df-ab3d-44cc77583957"),
                            ColumnId = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("440e4656-ee68-498e-8b4e-84be6fff5c2f"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("e282a2e6-4168-43fa-84e7-655b65c1092a"),
                            ColumnId = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("440e4656-ee68-498e-8b4e-84be6fff5c2f")
                        },
                        new
                        {
                            Id = new Guid("df4cfd39-f3d0-4c34-9400-6864bc846c9e"),
                            ColumnId = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3b44f356-e3a0-4724-aee4-a9c49a34a2d4"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("f1f68a89-e154-4ef0-a889-f6cff223337a"),
                            ColumnId = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3b44f356-e3a0-4724-aee4-a9c49a34a2d4")
                        },
                        new
                        {
                            Id = new Guid("420879ec-0bac-4936-8acf-4e82c97355cd"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ab1109a0-2cfe-4669-bfb8-86960b6c1546"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("7a997345-909f-470b-9ad9-d056a0a5267f"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ab1109a0-2cfe-4669-bfb8-86960b6c1546")
                        },
                        new
                        {
                            Id = new Guid("b2826d19-676d-41c8-a973-af736a5774fe"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("119cfeb3-e036-4887-ba1b-515b00ed9155"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("5e83f58d-cb32-4c20-8575-80020de2c2ba"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("119cfeb3-e036-4887-ba1b-515b00ed9155")
                        },
                        new
                        {
                            Id = new Guid("3971f7a4-2986-40d5-a001-7c354658c12c"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3954f53b-e37e-48c5-923c-06438df6bad4"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("4a50faae-b73f-4c2c-9200-37b0bbb719bf"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3954f53b-e37e-48c5-923c-06438df6bad4")
                        },
                        new
                        {
                            Id = new Guid("99609bc6-bcc0-4383-9aa9-cb937d7bfeb0"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2404c47c-0f97-42ba-8a16-32a0f3679b65"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("4e4bf5e0-18ea-4d40-adfc-edfdbe3afceb"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2404c47c-0f97-42ba-8a16-32a0f3679b65")
                        },
                        new
                        {
                            Id = new Guid("b931670b-0278-4be0-8484-293738297099"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("eeb6e700-0d51-4c82-8eb7-73e6573af974"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("04655cec-f8aa-4d90-9edb-e963edfd8ef6"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("eeb6e700-0d51-4c82-8eb7-73e6573af974")
                        },
                        new
                        {
                            Id = new Guid("d6ae2f55-dd80-4bf1-afcc-e28abe6d15d7"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("760c0c32-366e-4715-a86a-89d7c2c67be5"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("ae1c3883-74f9-4109-b991-d409d5f9cf9a"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("760c0c32-366e-4715-a86a-89d7c2c67be5")
                        },
                        new
                        {
                            Id = new Guid("5c83feb3-7045-416f-a945-c3fb49e7eeaf"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("39cd01ba-fee1-45d7-b375-e1d79d212195"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("d08ce785-fceb-44fd-933c-f2086f3c0f01"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("39cd01ba-fee1-45d7-b375-e1d79d212195")
                        },
                        new
                        {
                            Id = new Guid("92268e7d-ccd8-4f83-99a8-2968caea6fb6"),
                            ColumnId = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1496eda8-cd84-4579-b594-d66b20da567c"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("e74728b0-35aa-4826-bca5-3d6047809494"),
                            ColumnId = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1496eda8-cd84-4579-b594-d66b20da567c")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4a93999-8162-42c1-a76f-f8a01a49261b"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("09985786-f2b4-4b7d-a646-533c8f72e529"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("c2b6d712-0b2e-49ff-905d-817c69011853"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("1612562f-003b-4c57-a1bc-fb9566d3cf8a"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("0fcbb692-b5f5-4b6c-966d-b1aed2ba3838"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("6ab3c556-5362-46b3-bb39-e6b6004e9816"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("dab92c53-cce6-42e9-b50e-142bd49ccb58"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("e312fa0a-71a5-4e1c-92d5-62fa7745a1a2"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("dd1a00f1-8341-4c64-be40-52a5916c4317"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("753baec6-0329-43ca-bf73-ddd99b7fe83e"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("d371f43a-e661-44e9-bca9-81ff7bba328e"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("b7043035-7daa-45dd-b449-33ef610793ba"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("a992f9a0-27d4-4a65-be9e-958977b1aaa2"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("b3117a95-6da6-4557-aebb-f0e0148a6485"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("46870f0a-dfd7-4ce2-96ad-ac73193df803"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("9093ce8f-f009-4125-9728-feee371859c3"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("4adb6a74-07fb-4fec-b410-189864828f41"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("5d531bf8-82f8-4da4-93f2-c47dfc62dcd5"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("a4648860-1193-4dcd-b84a-563d822482d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("78b523cc-4790-4dbd-adf8-58fa91498ce5"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("a4648860-1193-4dcd-b84a-563d822482d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("1bb85474-fd6e-4753-8dea-09cbddd79996"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("a4648860-1193-4dcd-b84a-563d822482d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("c436c54c-3b7c-4f36-b92a-27f85027909b"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("a4648860-1193-4dcd-b84a-563d822482d3"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("6e729703-7cf9-4d13-9666-d405461a6af9"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("4025d0fd-60df-497b-8440-6d8a618a09dd"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("3b68ff15-4d54-4f3d-a08a-9320032fe682"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("c15fbf43-4aac-403e-acba-1a997b47b697"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("b10c4610-2d65-482e-82d0-e9e4bb1a4c1a"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("80a48873-43f8-4c09-869b-3689105ea1d0")
                        },
                        new
                        {
                            Id = new Guid("76250b4f-7a2b-4d60-acff-f8339f5ccf10"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("7b94b4a3-9582-4641-a8c6-70d33ae8625f"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("f5a83853-0645-40f1-a5f1-238f82bff08e"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("8752d00b-6000-49fa-af6f-0312e2a8b0f3"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("bdbc1cc8-e481-4ea9-b9fb-fb5d024e779a"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("f18ecfbb-724c-4e17-939a-52d873ad3273"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("58ed95ab-4656-4222-9ea1-be07bea84989"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("dce1b57d-95b1-4421-9ec7-571a03d43da0"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("b97d7b98-a7e2-47f9-b8aa-7f19febbb4f3"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("03137e2a-f423-4a48-8266-ad9d782c6c84"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("2d0e194a-e942-4429-853e-1f1ca81c1e0e"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("40c7f5ff-6bdd-4d6e-8add-5c562726c080"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("c22150b6-02ad-4c5b-8a96-7dc2a3f9ad4a"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("9f230d27-9a6f-4c8c-9c0d-5cdbed3f8d1d"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("d18b498c-a26f-4ead-afdd-4579ef5ef82f"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("a815baf3-ca3e-440c-b0d7-b6cddd5d5bcb"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("32533c81-e263-4e6c-bc44-9fd4a27f0082"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("fb0ee871-596f-4c83-855d-1a5931074f0f"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("1576e1aa-b186-4a2e-a8ea-fca4e48c1857"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("156d5898-8e76-4788-8c60-c4e41396f194"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("1d801d3c-4f9f-419c-98d5-592b5026a95d"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("42f60115-e1f5-4a6d-b6f5-282737626664"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("d045d4e2-988e-4ace-a455-63c386a0ad1b"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("83810f7d-d771-4e70-936f-d32243f3b441"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("3a7aee5d-0fc4-4561-a929-64ebbb5bb63b"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("7b345523-597b-43bd-ae4a-e8bd059b9088"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("84112e12-03d5-4619-8c91-5d9ab3effd20"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("14b8d1b2-1f40-4a96-ac8d-acdf8e23944e"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("7e1a32b8-a08a-4a90-9eb1-c3a028782902"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250"),
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("d22cd13c-e051-4095-a4ab-1d4ebe3fd4aa"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250"),
                            ValueTypeId = new Guid("649f9dd0-1a6a-40ea-84b5-193538e74046")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae2973a-a96c-4bed-af10-10b05e9efa34"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("6ae3891d-3d4c-4fe1-b5a0-120f523a9c0e"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("400db9ab-8cbf-42e6-bb92-20263b48ecd0")
                        },
                        new
                        {
                            Id = new Guid("fa8a9bff-8017-43c4-8b7d-270ff2b7a833"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("f686c0b1-5882-427a-bf39-276d3b7070a0"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("454b4c90-1f06-42c0-b679-13d204741811"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("95ea6168-eae7-4d12-b9dd-93e6e3a807b3"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("f509fbd0-9751-45f8-8c7f-eaf247952374"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("978829c2-9a1a-4c1c-84ea-af8445c19905"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("b5ad2e26-10d0-483f-9696-38de82e2e341"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("ff9a90cc-640a-48bd-a9a9-fc6e135b0de2"),
                            EditBlockId = new Guid("87363af2-d58f-4421-8be2-91f8cea77f66"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("7e0f49bf-2323-4c69-b176-e9d4c9da6734"),
                            EditBlockId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            EditBlockId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("1c4f7db3-cfbb-4fb7-8836-9b71e108f6e6"),
                            EditBlockId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("c0e1a548-4d40-4a03-9c7c-47bceb78cc08"),
                            EditBlockId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7")
                        },
                        new
                        {
                            Id = new Guid("78cf487f-c6d9-4bf3-a3f7-2c2528aac0ba"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("ccd24fd6-bc99-4369-babc-f6c3fce4b2fb"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("5f85073f-0d5b-468e-abdd-d14b29182ad1"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("f175752f-5475-4005-ae0e-71c9e2dd8c33"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        },
                        new
                        {
                            Id = new Guid("d66f7dd0-88ad-43d0-af74-d2d86c18efca"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe4fb102-79f2-4709-9f18-70cfda7e6a2d"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9")
                        },
                        new
                        {
                            Id = new Guid("7d64ca03-d780-40ca-a699-2a270a4a4b79"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9")
                        },
                        new
                        {
                            Id = new Guid("72325da9-618f-43d4-af51-d0c5f3fa89a6"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("5f85073f-0d5b-468e-abdd-d14b29182ad1"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("48e29102-221c-4b52-bba9-34e5656aadc6"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("78cf487f-c6d9-4bf3-a3f7-2c2528aac0ba"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f023b3bc-bae6-4b30-8958-f4aada53e510"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("ccd24fd6-bc99-4369-babc-f6c3fce4b2fb"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("d7f5ae69-5ca4-4537-9219-311495c5bff2"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20")
                        },
                        new
                        {
                            Id = new Guid("50664347-e2b9-4750-a5d5-7265bd861968"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3")
                        },
                        new
                        {
                            Id = new Guid("d968229b-2eea-4437-915a-320b9f1a0a85"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603")
                        },
                        new
                        {
                            Id = new Guid("d9c1d523-2ffd-476f-ba6e-b855f583a410"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603")
                        },
                        new
                        {
                            Id = new Guid("85ac2bb1-56c0-4bef-9d30-44daa935485e"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603")
                        },
                        new
                        {
                            Id = new Guid("a88d8086-7fc8-4d56-99ac-54ff26be15d3"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603")
                        },
                        new
                        {
                            Id = new Guid("47e79cf8-5bb5-4132-8a92-128f20fe1156"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f")
                        },
                        new
                        {
                            Id = new Guid("c2f9b2fc-2497-45a3-9195-a5d94cddbc68"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("4ecb0a00-7df3-4170-b0da-20dbe7dd1636"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("75b85878-3db2-448b-b455-638032865ae8")
                        },
                        new
                        {
                            Id = new Guid("e39cc744-f383-46c2-972d-01363423c1ce"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92")
                        },
                        new
                        {
                            Id = new Guid("78281c78-5f32-4f25-b560-d0de55a78505"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d")
                        },
                        new
                        {
                            Id = new Guid("2f87d206-17d1-4e9d-b5c7-f209b142a0a5"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("f175752f-5475-4005-ae0e-71c9e2dd8c33"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("59a9121b-f45d-4657-9b74-64c8f5e09e17"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("d66f7dd0-88ad-43d0-af74-d2d86c18efca"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("f2446805-9694-466e-a806-12408a42b7c9"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158")
                        },
                        new
                        {
                            Id = new Guid("4d720371-31b5-4def-8564-1c9a94e70e43"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158")
                        },
                        new
                        {
                            Id = new Guid("1113c9e0-da52-43b3-8b96-8aecb26dc48c"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599")
                        },
                        new
                        {
                            Id = new Guid("04c9e1d3-b337-4d2d-b05d-21826839fad0"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3")
                        },
                        new
                        {
                            Id = new Guid("9eff9cd7-f1a2-490d-bb2d-4085bea3ebdf"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("20a318ee-ae30-4c5c-bab6-839d30a2e2a2"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a21ec4c-ac34-4634-9ed8-e04f6e267aab"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d341d6fd-e5d5-4787-a192-b753fb85fcfe"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("557f2197-b9cd-4ddb-bfb1-6c129e2797a4"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("43ace87c-f3af-4b04-89ea-35bafa0a5d34"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("2de08fe2-e010-499b-9c7d-1dfa6e9bb5bd"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ea2413d9-7d54-4eea-9cf2-1e7a42727d22"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("afbb4ba1-2323-4c76-9d4b-81ed5f7934cf"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa9474e-6ad9-42fd-8dd2-3832a7e311d2"),
                            IsPrefilled = true,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            Id = new Guid("44e520d2-70fd-452c-ad40-d17b4184c086"),
                            IsPrefilled = true,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            Id = new Guid("a04ab0d9-ef70-4c43-a74f-cff52c5347f5"),
                            IsPrefilled = true,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            Id = new Guid("440e4656-ee68-498e-8b4e-84be6fff5c2f"),
                            IsPrefilled = true,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            Id = new Guid("3b44f356-e3a0-4724-aee4-a9c49a34a2d4"),
                            IsPrefilled = true,
                            TableId = new Guid("a530871b-cddd-4d2f-8480-20721be466af")
                        },
                        new
                        {
                            Id = new Guid("ab1109a0-2cfe-4669-bfb8-86960b6c1546"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("119cfeb3-e036-4887-ba1b-515b00ed9155"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("3954f53b-e37e-48c5-923c-06438df6bad4"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("2404c47c-0f97-42ba-8a16-32a0f3679b65"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("eeb6e700-0d51-4c82-8eb7-73e6573af974"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("760c0c32-366e-4715-a86a-89d7c2c67be5"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("39cd01ba-fee1-45d7-b375-e1d79d212195"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        },
                        new
                        {
                            Id = new Guid("1496eda8-cd84-4579-b594-d66b20da567c"),
                            IsPrefilled = true,
                            TableId = new Guid("7076770b-3688-4245-96b2-602116b20250")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cbdce2e-f2aa-4d40-bd01-2f86a40a8ea0"),
                            FieldId = new Guid("7e0f49bf-2323-4c69-b176-e9d4c9da6734"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("c1ebb57a-59cd-43be-bc7d-d7618869bd45"),
                            FieldId = new Guid("7e0f49bf-2323-4c69-b176-e9d4c9da6734"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("d12e7cc7-d46e-41bb-b685-5cb6cc7a2017"),
                            FieldId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("87170df3-86ee-45cf-8250-770b9e6672a3"),
                            FieldId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("0b3c30eb-a489-43c3-95de-fad7c9f33b0f"),
                            FieldId = new Guid("3b1925e6-01a7-484b-8e36-06298fe51b78"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("64fa9212-82ff-452d-8991-3a4661e2ea52"),
                            ColumnId = new Guid("c2b6d712-0b2e-49ff-905d-817c69011853"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("e4ddc422-95b7-40e2-af32-10d8c6773170"),
                            ColumnId = new Guid("c2b6d712-0b2e-49ff-905d-817c69011853"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("7cbb5949-a89a-439a-b773-b9935c0b7525"),
                            ColumnId = new Guid("c2b6d712-0b2e-49ff-905d-817c69011853"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("dc0bd31c-8396-45a1-8c6d-1805f3271c73"),
                            ColumnId = new Guid("6e729703-7cf9-4d13-9666-d405461a6af9"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("dffc6423-1ebc-4f8b-8aa2-b695e3c2880d"),
                            ColumnId = new Guid("6e729703-7cf9-4d13-9666-d405461a6af9"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("c1668d94-0d35-441b-bf32-7155ff3246c9"),
                            ColumnId = new Guid("6e729703-7cf9-4d13-9666-d405461a6af9"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("cd0a4e0c-0e74-4bee-b70b-ed0581ce0a1d"),
                            ColumnId = new Guid("bdbc1cc8-e481-4ea9-b9fb-fb5d024e779a"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("76fd2a64-ce3e-49be-92fe-6de4cea63f65"),
                            ColumnId = new Guid("bdbc1cc8-e481-4ea9-b9fb-fb5d024e779a"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("2850755c-3807-4aa8-b3f8-758beccf4322"),
                            ColumnId = new Guid("156d5898-8e76-4788-8c60-c4e41396f194"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("5745bddc-16bc-4875-a725-c0293d5bb0ca"),
                            ColumnId = new Guid("156d5898-8e76-4788-8c60-c4e41396f194"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("91b88c2d-d89b-4a05-9875-bb710d327fea"),
                            ColumnId = new Guid("42f60115-e1f5-4a6d-b6f5-282737626664"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("824d318f-bedc-43cd-9eea-9d94791fcba1"),
                            ColumnId = new Guid("42f60115-e1f5-4a6d-b6f5-282737626664"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("20adc31b-1391-43f5-9c2d-2ea5446823ba"),
                            ColumnId = new Guid("42f60115-e1f5-4a6d-b6f5-282737626664"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("4467ceaa-4bb6-4cd4-91c8-4bf836d12066"),
                            ColumnId = new Guid("7b345523-597b-43bd-ae4a-e8bd059b9088"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("786b2ef5-321e-400b-8ec1-12cb5d7a8e52"),
                            ColumnId = new Guid("7b345523-597b-43bd-ae4a-e8bd059b9088"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("a4a1b100-1312-4f72-86b9-0b0116e186a7"),
                            ColumnId = new Guid("7b345523-597b-43bd-ae4a-e8bd059b9088"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("00603b2e-1b2d-4a07-8071-152dcd6578c2"),
                            ColumnId = new Guid("3b68ff15-4d54-4f3d-a08a-9320032fe682"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("fe0adfdd-0a4c-42c5-9ce8-9c4693a15b94"),
                            ColumnId = new Guid("3b68ff15-4d54-4f3d-a08a-9320032fe682"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("bcdfba04-7a2e-41f9-aa17-d3d5e8ab186d"),
                            ColumnId = new Guid("7b94b4a3-9582-4641-a8c6-70d33ae8625f"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("99fdba75-991f-4407-9e9e-8c4f1e76ebc2"),
                            ColumnId = new Guid("7b94b4a3-9582-4641-a8c6-70d33ae8625f"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("371971f9-650f-4daa-a1d0-ffe635846a7e"),
                            ColumnId = new Guid("40c7f5ff-6bdd-4d6e-8add-5c562726c080"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("f64c5553-f2e8-4828-8f01-b6840b1da1c3"),
                            ColumnId = new Guid("40c7f5ff-6bdd-4d6e-8add-5c562726c080"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("69013177-22ce-4932-837b-ce5f8d60aefa"),
                            FieldId = new Guid("1c4f7db3-cfbb-4fb7-8836-9b71e108f6e6"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("d862adcb-bb6d-461b-8754-de8e55b005e1"),
                            FieldId = new Guid("1c4f7db3-cfbb-4fb7-8836-9b71e108f6e6"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75b85878-3db2-448b-b455-638032865ae8"),
                            EditBlockId = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a67f58d6-8828-49a8-8466-898030b2bf92"),
                            EditBlockId = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("615e6ee8-5487-43d0-acbb-82eb07534fe9"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("e958e17c-bcc5-41d6-a73c-040fcafd9c20"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a4648860-1193-4dcd-b84a-563d822482d3"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("ea55b18f-6d99-4696-83d5-11b6202c7603"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("02c80668-3187-4ed9-bc61-3844ac66963f"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("22f1d4f4-f36c-4b06-9875-ca0e34ba54d3"),
                            EditBlockId = new Guid("791808b8-c1a3-4ec5-b6b8-b2db1d38b7f2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("128817a6-fdb7-44e8-b7c8-0beeb52f207d"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("a530871b-cddd-4d2f-8480-20721be466af"),
                            EditBlockId = new Guid("274c34c4-3be6-4189-881f-3955667edacb"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("c13e6c4f-be7f-4316-855c-706d5b791158"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("ddb04cf1-e3e5-45c6-ab42-590a01c88599"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("e32c50e6-6379-471e-9a00-a3c2c2b240c3"),
                            EditBlockId = new Guid("66c4c2b8-083e-4879-8be8-e55654441048"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("7076770b-3688-4245-96b2-602116b20250"),
                            EditBlockId = new Guid("97c0bc37-8697-42b9-98af-0957ce4b5a88"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c793e27-24db-4c22-8988-89394cee6d64"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d0be49ea-1207-4f64-ba87-4a0497d0fb97"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d969886-fc1f-40ed-8a1e-2014fec7c01e"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("64fdf9f3-ee4a-4c7a-b022-7425f656abc7"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("80a48873-43f8-4c09-869b-3689105ea1d0"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("400db9ab-8cbf-42e6-bb92-20263b48ecd0"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("649f9dd0-1a6a-40ea-84b5-193538e74046"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
