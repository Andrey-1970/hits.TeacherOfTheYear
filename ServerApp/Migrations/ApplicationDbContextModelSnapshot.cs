// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            EditBlocksId = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            EditBlocksId = new Guid("94eb0624-5f60-40ac-bc8b-847b1d4ceb4a"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            EditBlocksId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("94eb0624-5f60-40ac-bc8b-847b1d4ceb4a"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("edb93efb-2c55-41d6-aa21-55afa8c451da"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("67fba31d-0df8-45ad-9314-29d34b9ffe48"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("d33cf67b-81ea-473a-b4a3-052a2058ad1f"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("540751a6-d2cd-4204-8e97-c55f42d1ab79"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("9c1e3452-6966-482f-8c32-40e559141597"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("90d55918-29e9-46fa-98e0-770829596012"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("f77b26a8-8403-4e45-bf94-c175557fe24c"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("32af627a-0d5f-465e-9c03-2e56b719a8b5"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("2c9d93e1-630b-4558-8a99-cd0be39b9e88"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("5fab7f36-eaee-462d-8a67-d5514a08f011"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("8c9f32b6-aed1-42b9-9502-909bb1d4d525"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("73c24ae3-f2e1-4b1e-8573-a6d4a2aa6b39"),
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530")
                        },
                        new
                        {
                            FieldsId = new Guid("062bbd3b-d472-469e-bad1-c3f6217e213e"),
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95")
                        },
                        new
                        {
                            FieldsId = new Guid("8ce0ad01-253b-478b-b871-e8092151ad6e"),
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95")
                        },
                        new
                        {
                            FieldsId = new Guid("978d822c-318f-417c-89d8-87d4ab3ef3c3"),
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95")
                        },
                        new
                        {
                            FieldsId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a")
                        },
                        new
                        {
                            FieldsId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece")
                        },
                        new
                        {
                            FieldsId = new Guid("23e8ac12-fd55-40dc-9872-5af0803fce03"),
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece")
                        },
                        new
                        {
                            FieldsId = new Guid("a4814248-c1e2-4b0b-844d-4c3590a45d64"),
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            TablesId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            TablesId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            TablesId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            TablesId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            TablesId = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            TablesId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            TablesId = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            TablesId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            TablesId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            TablesId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530"),
                            TablesId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            TablesId = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            TablesId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            TablesId = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            TablesId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            TracksId = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            TracksId = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("a72731a1-13b4-481f-94d3-8afb32ce99b5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("ed36ab02-2d46-440e-9840-5700fbdeeb5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("ed149db4-f73f-4c11-a70a-fa1779e41b0f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("38196c5c-df6d-4054-b543-712e62a47412")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("78b3475c-5dab-4458-91d7-fb8213e410f6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("aeddc5c5-562a-4307-b06d-e7a9ae44d9a2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            MarksId = new Guid("bc26b653-2376-47af-b966-ad8f5252d3c1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            MarksId = new Guid("f56a01cd-d822-453c-bac8-e683caee27e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            MarksId = new Guid("b4d64fcb-566c-494e-8555-781295e82bfa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            MarksId = new Guid("9c13b820-473a-479f-ba6b-0e777c2fe879")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            MarksId = new Guid("0c979de4-9264-495e-a210-175c248391b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            MarksId = new Guid("83d75a73-ce43-4420-a9df-fbf4302d6e1c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            MarksId = new Guid("9b0add5a-7682-4e12-8590-bdcf0054b63f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            MarksId = new Guid("6c255637-8b1c-49e5-80ee-646c043f67a5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            MarksId = new Guid("e7f3c769-f55d-4d41-a76d-a848f4ef14c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("9b0add5a-7682-4e12-8590-bdcf0054b63f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("6c255637-8b1c-49e5-80ee-646c043f67a5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("dd63ec0e-676f-471a-ad04-454a17ec2ab8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("6dc42050-ba7b-42ad-a757-c1de3214e4fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("60c607a8-cea3-48fa-9b64-000f742f58f8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("bc4e77b1-d9ab-46dd-8b61-fbe967dd77e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            MarksId = new Guid("805e0170-6032-4bdf-9025-ff3ea3849b2d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            MarksId = new Guid("e7f3c769-f55d-4d41-a76d-a848f4ef14c9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            MarksId = new Guid("58739f5b-ddd0-4fbe-b938-c0b5289dac4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            MarksId = new Guid("4626f6d0-257b-4d6b-aa65-50e3847129e1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            MarksId = new Guid("a55ba1e5-e4c1-4cac-a820-597e817b0b00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            MarksId = new Guid("ef73e298-5f4d-4f49-8b1c-8dfc553c1a73")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e514dd22-6925-4fa6-abee-cf464c6ab24a",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "ba2cb4fc-bf80-42f2-acdd-82403edbe705",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "a1aeeccb-9c93-404a-850e-3d6f12a6307f",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "7fe320a3-68d8-4df4-a9c7-d7cf458b4143",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "5999c2a8-b8a7-4867-a0ad-d74e9fd967d4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33cd5935-eef2-46c1-a10b-2da8c49400fa"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("6a61382a-c4b6-49fe-86d0-2fcde02770c4"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("5892eb0e-19e5-4929-b799-504a12dfb8d4"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("f1e05304-0a38-46e2-b5c2-66f64acdd10a"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("54ff3451-e17d-4679-9c77-976093dd6852"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("957067d3-4f24-4f10-a664-11059810b257"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7815e237-b0a2-4875-a194-a71c52325fa2"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5baa151f-563d-46fa-bc67-2f5c54bc92b1"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("486fb2a4-cdf5-431c-bd4b-5433efa29701"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("400f9681-84b9-4ef6-9255-346b481919d4"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("b2fd9de9-cd2f-4536-982e-ce3e3f184e6f"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("400f9681-84b9-4ef6-9255-346b481919d4")
                        },
                        new
                        {
                            Id = new Guid("8eb975ce-99ca-491d-a929-dddbffe1632a"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("70cfd505-3cb1-40f7-9b59-23b35e5a0115"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("d0c59a59-ae5a-45d4-b44e-282194e9d0b3"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("70cfd505-3cb1-40f7-9b59-23b35e5a0115")
                        },
                        new
                        {
                            Id = new Guid("19f3eee6-67a3-4868-b789-e9a7b33fcdb4"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b01444b6-f673-4234-adb0-c1127252a980"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("bd43c327-388c-40d7-b085-7d5624a0ab2b"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b01444b6-f673-4234-adb0-c1127252a980")
                        },
                        new
                        {
                            Id = new Guid("e7c56802-d81d-4a9c-aba4-d983e62821b6"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5977097c-e4cb-4761-8550-97f7659cd82b"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("bcca9956-6924-4d0b-a0ee-8c62ed1af82c"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5977097c-e4cb-4761-8550-97f7659cd82b")
                        },
                        new
                        {
                            Id = new Guid("b4054f9d-30d6-49dc-8e37-135f984ef243"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f2bf0c55-9292-4c0a-838f-d70becd8322a"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("e4be338e-4832-4346-884d-de7040802b7e"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f2bf0c55-9292-4c0a-838f-d70becd8322a")
                        },
                        new
                        {
                            Id = new Guid("f17ab962-02c3-4b8a-add8-ac92565a2a6c"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("07a996d7-5f11-4764-8984-0ea6827702d9"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("55e817a2-c17c-43eb-b9b6-e3aef72de046"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("07a996d7-5f11-4764-8984-0ea6827702d9")
                        },
                        new
                        {
                            Id = new Guid("52420acd-0033-419d-af46-ae1880081017"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("48fc52fd-d0be-42d9-b838-200bbea9d89e"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("df05107d-971a-447c-90a6-5576335b28e7"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("48fc52fd-d0be-42d9-b838-200bbea9d89e")
                        },
                        new
                        {
                            Id = new Guid("e528fb42-c58a-4e46-b2ca-5a05b272aaf3"),
                            ColumnId = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("78b403ee-413d-4730-8bf6-f97a4cfd6997"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("76553758-da78-4dde-8b6f-b118d46521f0"),
                            ColumnId = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("78b403ee-413d-4730-8bf6-f97a4cfd6997")
                        },
                        new
                        {
                            Id = new Guid("9578deae-a450-413e-9c73-bb0b0ec91420"),
                            ColumnId = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("27ac0db2-0300-48cd-ac76-31eff4cd0105"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("c1a25179-4bd6-4b9b-aa4d-f8eb370c1e45"),
                            ColumnId = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("27ac0db2-0300-48cd-ac76-31eff4cd0105")
                        },
                        new
                        {
                            Id = new Guid("b4e5f820-5887-402e-8cab-661c3030b65e"),
                            ColumnId = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d18e7f08-9011-4ce0-a290-c9ed070ea853"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("e08dd749-94eb-4621-a2f4-a87cbc576687"),
                            ColumnId = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d18e7f08-9011-4ce0-a290-c9ed070ea853")
                        },
                        new
                        {
                            Id = new Guid("524db9aa-3242-4b22-a3bc-91f4b3133e2e"),
                            ColumnId = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c013d404-1774-41b4-9e67-f9ef94163e24"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("d059f01c-e13c-4a46-abe8-26f81c1a4e5a"),
                            ColumnId = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c013d404-1774-41b4-9e67-f9ef94163e24")
                        },
                        new
                        {
                            Id = new Guid("2fa52a42-3ed0-4a00-821e-7f0d1105b989"),
                            ColumnId = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ecd9a803-fd14-46af-b45e-21dbbb1e9cbe"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("33534c4e-285b-432b-8e5c-1d414ecc347f"),
                            ColumnId = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ecd9a803-fd14-46af-b45e-21dbbb1e9cbe")
                        },
                        new
                        {
                            Id = new Guid("a7348ac0-0f43-4a50-bd59-65a2f181a69d"),
                            ColumnId = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2ca86695-17c3-476c-a6e2-0f69133bb273"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("1e72bc2b-9bb4-48df-859b-1450ef4ea394"),
                            ColumnId = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2ca86695-17c3-476c-a6e2-0f69133bb273")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6b5c2ce-a94e-4b15-b176-53df25850f0b"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("5d826a50-3ce8-4af0-a1f4-f8eaefb4462c"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab"),
                            ValueTypeId = new Guid("24213510-fa0d-4ff1-9e91-bc7af5fc6eae")
                        },
                        new
                        {
                            Id = new Guid("6606ca30-2b99-4745-b7a1-610916d74baf"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("9dee20e3-a898-478b-b9d9-a58596c20a45"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("013cc657-4fdd-4720-994c-69f277afe681"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("6a7fe71f-de03-4e9d-b12a-4bcfb6506832"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("2e198dee-e915-42aa-9681-0f225d4bba3e"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("df321de7-1126-4078-8f42-852956fe4490"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("5e591f43-f545-4a17-ac93-add0b2a5ef01"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("53543a77-4609-4e15-b611-9bed5c29f6d9"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("adf75450-0e51-49e7-ae98-5fd48dfa870c"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("20ea88b2-d774-4121-8148-e4a3d49a7eac"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("75695e3c-ca9a-4c75-a0a7-b4e3c67b7f06"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("638715f4-267e-4e55-bab5-486eb13c16af"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("9d3c3bec-839d-4ba2-878e-cf27d82fd430"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("03ea927d-d02e-42e1-b02d-2c3acefd9c92"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("68ddb9e0-1bfb-4fcc-8dad-b4df247543c9"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("3ce9ec74-6872-47d4-ba0d-71507e5609c0"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("bb385730-bbcb-4ef8-a92d-27bb93825960"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("d05ca181-0b67-4e27-ad6e-3d29ff8596ef"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("a8629439-c3c9-49a6-bb6a-1c89f08ea375"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("f16ef60d-4084-4370-ae24-b29dd3f2f82e"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("5a37f496-3ad7-44d5-b057-b89ed7f30538"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("370683de-7169-4a81-9062-43c0875f638f"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("cee14586-3622-4641-aa49-24aeecff3279"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("baa6b31e-23a0-4734-b093-b3f039905f8c"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("229b3628-60fe-4f18-9582-6b0de5c60430")
                        },
                        new
                        {
                            Id = new Guid("0dcaa1ae-1401-41d1-9590-034906b1c2c8"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("fa66da60-7c59-46d8-bc6d-4f72297f3c66"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("3a15b877-318f-4378-a9cb-3714953105a3"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("a50600c0-a952-4cfa-9ced-827634961d49"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("211d83ec-afbe-43e4-a508-5c6bee300db1"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("9052f944-f565-4fb7-a12b-a579b40b7c91"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("b85368b1-e2b7-48ae-b76e-a6b324a667d7"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("cefbd786-e1d2-44af-aeb4-c01c65133146"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("7b6b5498-afc5-4ef5-84c5-c0fd0da42710"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("c935dea4-a11b-4f52-b90d-7dfac4297b2a"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("ca546e81-01e8-4742-a471-5820ee5792e1"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("82123e42-5720-499e-8658-9886e25695b7"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("f00ced91-bd14-409e-ae4c-abe040ffdafa"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("722b6c9a-f6dc-45c8-afd3-a246101335dc"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("dda4ccfd-3c36-4711-993f-2f2645b34e45"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("81196c6a-6e88-4f23-b7ae-c94fd6786b36"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("a3919ddc-1058-4243-9f3e-eca06dac8f51"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("6b5dc773-2a09-46cc-86fb-1a8ff0210f58"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("a771c893-5ff1-46d4-aadd-495108b5f1dc"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("7facc820-363d-408a-9852-8779b03f7a6b"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("6612e0f6-c2d8-48e8-affb-1b619c00f485"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("c5d01a20-ad1b-4726-979b-4943655b6f05"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("2e30cca8-85e3-4536-ae20-515b275c52cf"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("9485e94f-28e5-41f6-b034-436ea6943f68"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("b58fb33f-6c26-4e37-850c-61775890b26c"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("a98ff166-20e5-427e-bd59-be26bb552114"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac"),
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("94eb0624-5f60-40ac-bc8b-847b1d4ceb4a"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d005403-ebae-4bdb-89be-a994c922a6ad"),
                            Checked = false,
                            Email = "system@system.ru",
                            Message = "Test Message for System",
                            Name = "SYSTEM"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edb93efb-2c55-41d6-aa21-55afa8c451da"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("67fba31d-0df8-45ad-9314-29d34b9ffe48"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("ecc37f13-7be2-4fe3-8cf2-c021e035b6de")
                        },
                        new
                        {
                            Id = new Guid("d33cf67b-81ea-473a-b4a3-052a2058ad1f"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("540751a6-d2cd-4204-8e97-c55f42d1ab79"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("9c1e3452-6966-482f-8c32-40e559141597"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("90d55918-29e9-46fa-98e0-770829596012"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("f77b26a8-8403-4e45-bf94-c175557fe24c"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("32af627a-0d5f-465e-9c03-2e56b719a8b5"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("2c9d93e1-630b-4558-8a99-cd0be39b9e88"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("5fab7f36-eaee-462d-8a67-d5514a08f011"),
                            EditBlockId = new Guid("94e75c97-8884-4f03-ae94-b3a736ecb8e3"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            EditBlockId = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("8c9f32b6-aed1-42b9-9502-909bb1d4d525"),
                            EditBlockId = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("73c24ae3-f2e1-4b1e-8573-a6d4a2aa6b39"),
                            EditBlockId = new Guid("7d770e45-2d3a-4dac-8435-c82980888ae7"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd")
                        },
                        new
                        {
                            Id = new Guid("062bbd3b-d472-469e-bad1-c3f6217e213e"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("8ce0ad01-253b-478b-b871-e8092151ad6e"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("978d822c-318f-417c-89d8-87d4ab3ef3c3"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("23e8ac12-fd55-40dc-9872-5af0803fce03"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        },
                        new
                        {
                            Id = new Guid("a4814248-c1e2-4b0b-844d-4c3590a45d64"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("0f74a774-3a94-47f9-baf4-255231845633")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a72731a1-13b4-481f-94d3-8afb32ce99b5"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1")
                        },
                        new
                        {
                            Id = new Guid("ed36ab02-2d46-440e-9840-5700fbdeeb5e"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1")
                        },
                        new
                        {
                            Id = new Guid("ed149db4-f73f-4c11-a70a-fa1779e41b0f"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("978d822c-318f-417c-89d8-87d4ab3ef3c3"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("38196c5c-df6d-4054-b543-712e62a47412"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("062bbd3b-d472-469e-bad1-c3f6217e213e"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("78b3475c-5dab-4458-91d7-fb8213e410f6"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("8ce0ad01-253b-478b-b871-e8092151ad6e"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("aeddc5c5-562a-4307-b06d-e7a9ae44d9a2"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008")
                        },
                        new
                        {
                            Id = new Guid("bc26b653-2376-47af-b966-ad8f5252d3c1"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34")
                        },
                        new
                        {
                            Id = new Guid("f56a01cd-d822-453c-bac8-e683caee27e0"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf")
                        },
                        new
                        {
                            Id = new Guid("b4d64fcb-566c-494e-8555-781295e82bfa"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf")
                        },
                        new
                        {
                            Id = new Guid("9c13b820-473a-479f-ba6b-0e777c2fe879"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf")
                        },
                        new
                        {
                            Id = new Guid("0c979de4-9264-495e-a210-175c248391b2"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf")
                        },
                        new
                        {
                            Id = new Guid("83d75a73-ce43-4420-a9df-fbf4302d6e1c"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03")
                        },
                        new
                        {
                            Id = new Guid("9b0add5a-7682-4e12-8590-bdcf0054b63f"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("6c255637-8b1c-49e5-80ee-646c043f67a5"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e")
                        },
                        new
                        {
                            Id = new Guid("e7f3c769-f55d-4d41-a76d-a848f4ef14c9"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc")
                        },
                        new
                        {
                            Id = new Guid("dd63ec0e-676f-471a-ad04-454a17ec2ab8"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1")
                        },
                        new
                        {
                            Id = new Guid("6dc42050-ba7b-42ad-a757-c1de3214e4fc"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("23e8ac12-fd55-40dc-9872-5af0803fce03"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("60c607a8-cea3-48fa-9b64-000f742f58f8"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("a4814248-c1e2-4b0b-844d-4c3590a45d64"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("bc4e77b1-d9ab-46dd-8b61-fbe967dd77e4"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1")
                        },
                        new
                        {
                            Id = new Guid("805e0170-6032-4bdf-9025-ff3ea3849b2d"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1")
                        },
                        new
                        {
                            Id = new Guid("58739f5b-ddd0-4fbe-b938-c0b5289dac4a"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135")
                        },
                        new
                        {
                            Id = new Guid("4626f6d0-257b-4d6b-aa65-50e3847129e1"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac")
                        },
                        new
                        {
                            Id = new Guid("a55ba1e5-e4c1-4cac-a820-597e817b0b00"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("ef73e298-5f4d-4f49-8b1c-8dfc553c1a73"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2debb27a-e14c-4fba-b226-b44ab3c06530"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ce282a77-5393-470f-86e0-fd9eb9e26c95"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("4c859c29-5b1d-44bb-bcd1-f2ce8b27a79c"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("ad5493a5-e709-4394-a0d3-efc41faff48a"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("5632df00-cf9e-4b7b-8781-ef3d6e7bcece"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("5c77b42b-11e6-460a-950a-0363aef8816c"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("85eab800-f947-4795-bc7a-5334c7e116ac"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("400f9681-84b9-4ef6-9255-346b481919d4"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("70cfd505-3cb1-40f7-9b59-23b35e5a0115"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("b01444b6-f673-4234-adb0-c1127252a980"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("5977097c-e4cb-4761-8550-97f7659cd82b"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("f2bf0c55-9292-4c0a-838f-d70becd8322a"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("07a996d7-5f11-4764-8984-0ea6827702d9"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("48fc52fd-d0be-42d9-b838-200bbea9d89e"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("78b403ee-413d-4730-8bf6-f97a4cfd6997"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("491aead3-711a-4e43-96e7-b82e18975cab")
                        },
                        new
                        {
                            Id = new Guid("27ac0db2-0300-48cd-ac76-31eff4cd0105"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        },
                        new
                        {
                            Id = new Guid("d18e7f08-9011-4ce0-a290-c9ed070ea853"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        },
                        new
                        {
                            Id = new Guid("c013d404-1774-41b4-9e67-f9ef94163e24"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        },
                        new
                        {
                            Id = new Guid("ecd9a803-fd14-46af-b45e-21dbbb1e9cbe"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        },
                        new
                        {
                            Id = new Guid("2ca86695-17c3-476c-a6e2-0f69133bb273"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4ccc75e-5bde-474a-acc3-2853b04ab4d8"),
                            FieldId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("f6c51737-2153-438c-b233-b965efc7abd0"),
                            FieldId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("92b9775e-e07c-4cb1-a6ae-01960d6b51fb"),
                            FieldId = new Guid("f7349b05-7f38-470a-ab95-51fe36029365"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("6094ffdb-4ab2-4c0d-8234-5bbb1afe7473"),
                            FieldId = new Guid("8c9f32b6-aed1-42b9-9502-909bb1d4d525"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("c26550af-4127-4de6-9e26-22931d945dc9"),
                            FieldId = new Guid("8c9f32b6-aed1-42b9-9502-909bb1d4d525"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("b075d198-4367-4670-8796-0ebaa34f5e71"),
                            ColumnId = new Guid("013cc657-4fdd-4720-994c-69f277afe681"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("4a982ecf-5119-4c7a-a941-8fd483e7b0dd"),
                            ColumnId = new Guid("013cc657-4fdd-4720-994c-69f277afe681"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("f9f61304-26ad-4ac3-b983-3283a6b3ca90"),
                            ColumnId = new Guid("013cc657-4fdd-4720-994c-69f277afe681"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("754d720b-e063-43ff-a022-e641bd2e4bd1"),
                            ColumnId = new Guid("f16ef60d-4084-4370-ae24-b29dd3f2f82e"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("c5b99423-8997-47b2-8ceb-ce45fe44a614"),
                            ColumnId = new Guid("f16ef60d-4084-4370-ae24-b29dd3f2f82e"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("3716441e-ab04-4609-a549-a52302e77b37"),
                            ColumnId = new Guid("f16ef60d-4084-4370-ae24-b29dd3f2f82e"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("e0cd448b-1432-47dc-bf5b-9a68cc6cec4f"),
                            ColumnId = new Guid("211d83ec-afbe-43e4-a508-5c6bee300db1"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("9c20627f-eac7-4201-917f-0f6b79004e15"),
                            ColumnId = new Guid("211d83ec-afbe-43e4-a508-5c6bee300db1"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("82fe58b3-2ae9-4cec-bc7a-bddd510ee3df"),
                            ColumnId = new Guid("6b5dc773-2a09-46cc-86fb-1a8ff0210f58"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("fe8ffc97-8dfa-4c17-8229-3f7efe9cc6bd"),
                            ColumnId = new Guid("6b5dc773-2a09-46cc-86fb-1a8ff0210f58"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("4a72cebc-9cc8-4b8e-87ea-debbeff1c393"),
                            ColumnId = new Guid("7facc820-363d-408a-9852-8779b03f7a6b"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("77e70016-7f1c-4687-a0c2-1d6989f1049f"),
                            ColumnId = new Guid("7facc820-363d-408a-9852-8779b03f7a6b"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("bc605777-44a4-4c15-b321-b6cab55fc148"),
                            ColumnId = new Guid("7facc820-363d-408a-9852-8779b03f7a6b"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("d0c75117-4e2f-475e-9d6d-e2ba049fdd31"),
                            ColumnId = new Guid("7facc820-363d-408a-9852-8779b03f7a6b"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("07430ce8-54c5-4e72-8a9f-44ac97f57175"),
                            ColumnId = new Guid("9485e94f-28e5-41f6-b034-436ea6943f68"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("96afd799-f118-4a6f-8201-249af3e48d79"),
                            ColumnId = new Guid("9485e94f-28e5-41f6-b034-436ea6943f68"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c6afa740-fd26-419e-95cd-5f71af6dbc6a"),
                            ColumnId = new Guid("9485e94f-28e5-41f6-b034-436ea6943f68"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("40f61fc6-ed4c-4369-8519-d74abcacbe3a"),
                            ColumnId = new Guid("9485e94f-28e5-41f6-b034-436ea6943f68"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("1c78ffc8-fed1-499f-a080-d71783f01e51"),
                            ColumnId = new Guid("370683de-7169-4a81-9062-43c0875f638f"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("b8f3beed-05b2-4d61-99f1-e7c152117103"),
                            ColumnId = new Guid("370683de-7169-4a81-9062-43c0875f638f"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("5b9cf9ec-9232-4daf-92a6-8a6fe5893bee"),
                            ColumnId = new Guid("fa66da60-7c59-46d8-bc6d-4f72297f3c66"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("dd6ae91c-c1e3-4882-a3ea-87abddbc9030"),
                            ColumnId = new Guid("fa66da60-7c59-46d8-bc6d-4f72297f3c66"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("984f4c2d-e50f-453f-b132-4bc733e1c4f1"),
                            ColumnId = new Guid("82123e42-5720-499e-8658-9886e25695b7"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("12ffda8d-ef5d-4710-a0fa-6f9a37007951"),
                            ColumnId = new Guid("82123e42-5720-499e-8658-9886e25695b7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9790e609-9be5-4a90-929d-cf9d3e5924d8"),
                            ColumnId = new Guid("f00ced91-bd14-409e-ae4c-abe040ffdafa"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("00fdf39b-41a7-47da-ae84-d6d2cad67974"),
                            ColumnId = new Guid("f00ced91-bd14-409e-ae4c-abe040ffdafa"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("3d50fbcf-582a-4e67-bacc-6992e0a0a0d4"),
                            ColumnId = new Guid("f00ced91-bd14-409e-ae4c-abe040ffdafa"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("5c21d97b-e816-44c7-a07e-151358e62d6b"),
                            ColumnId = new Guid("f00ced91-bd14-409e-ae4c-abe040ffdafa"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("778678fc-e12a-4726-a95e-cfc12ebbe2ca"),
                            ColumnId = new Guid("75695e3c-ca9a-4c75-a0a7-b4e3c67b7f06"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("efca642c-cdc0-4446-ae1a-c0b3faa5feb8"),
                            ColumnId = new Guid("75695e3c-ca9a-4c75-a0a7-b4e3c67b7f06"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("1d9559b6-11a1-4ab3-8aec-e2f6eb0e9afa"),
                            ColumnId = new Guid("75695e3c-ca9a-4c75-a0a7-b4e3c67b7f06"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("d692b605-bbf5-455e-bdcb-16a4f0cc6b0d"),
                            ColumnId = new Guid("baa6b31e-23a0-4734-b093-b3f039905f8c"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("79befd2e-90f9-4d76-b50b-f2078341ae61"),
                            ColumnId = new Guid("baa6b31e-23a0-4734-b093-b3f039905f8c"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("eeb81c59-0753-4fc8-b723-fa252a264b0a"),
                            ColumnId = new Guid("cefbd786-e1d2-44af-aeb4-c01c65133146"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("07eda62f-e73b-4693-ad41-6f6fbb265a33"),
                            ColumnId = new Guid("cefbd786-e1d2-44af-aeb4-c01c65133146"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("491aead3-711a-4e43-96e7-b82e18975cab"),
                            EditBlockId = new Guid("94eb0624-5f60-40ac-bc8b-847b1d4ceb4a"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("093fa10c-aaaa-4c78-bee7-11d2199cac9e"),
                            EditBlockId = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("80d1908a-1bb8-4d0f-b325-4a8ed1172edc"),
                            EditBlockId = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d07328bd-deef-4cdf-9c66-dec9743ad3ab"),
                            EditBlockId = new Guid("fb72555f-b0db-4e7e-ae27-973382879bd2"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("00244921-5d52-425e-be0c-ff9d63a853b1"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("1f97c629-09fa-4759-b2a8-d07eb156e008"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("9cb40e91-738c-48f7-a055-25e71123aecf"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("9f505b13-4bc8-4b11-8939-60e6f2653b03"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("a845d50e-2ba4-44cb-9a6f-ae8cd2f0fe34"),
                            EditBlockId = new Guid("f6813dac-a557-4483-88a2-237e6959f73a"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("35290cbf-0be4-41b5-bc6b-84a0b7695ee1"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("f3dc6209-888a-4ee2-ae2d-975da26710c1"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("c331f324-efb5-4907-aa37-7c24cacbc135"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("a4714062-674a-49d7-91d7-1a0c4d0a1fac"),
                            EditBlockId = new Guid("c9227d56-6fbf-4260-a82f-01cbfc2a9b39"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0ca7077-f88f-4863-ac35-53647c928f75"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("8a0598c6-6157-482f-ae5b-1c57258649b0"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f74a774-3a94-47f9-baf4-255231845633"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("a987edbb-f4b7-4a44-ae6a-34d2412f3fdd"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("229b3628-60fe-4f18-9582-6b0de5c60430"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("ecc37f13-7be2-4fe3-8cf2-c021e035b6de"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("24213510-fa0d-4ff1-9e91-bc7af5fc6eae"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
