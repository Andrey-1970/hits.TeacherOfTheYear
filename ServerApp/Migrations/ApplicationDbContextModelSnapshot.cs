// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("29e7c879-4cf4-402f-b5ef-b1216608c66b"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            EditBlocksId = new Guid("29e7c879-4cf4-402f-b5ef-b1216608c66b"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            EditBlocksId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("10dca74a-6f33-41d3-abb1-5c7b1f57e69b"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("0ad91db4-05ed-4721-b3f2-0c76acb0d1e5"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("a3411054-66c1-426c-893c-071b04ee470c"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("24201caf-3b53-42d4-9479-fe6e2c4ff779"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("81167086-9122-423f-a6d0-9dd9fd7a89c0"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("80956ea4-f9a0-4161-beba-f6c40fdac773"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("343788de-62ee-4e5f-9e73-42c97f29c1f9"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("631b243d-cac9-4af6-955f-97cd2840e1db"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("1f4c3124-3a47-477f-a1b0-e25db1b29f01"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("9fa3f2ae-fd00-48bc-829f-2c67170ecfc7"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("9f7ff670-ec8b-4308-8381-4601db0457dc"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("a1ae16dc-349c-40df-a91c-ec2750df573b"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("9ff22936-3848-4c05-a2e7-ac8a44c4792c"),
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a")
                        },
                        new
                        {
                            FieldsId = new Guid("91537e73-d1c4-4791-ad69-ec451d32c4fc"),
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf")
                        },
                        new
                        {
                            FieldsId = new Guid("8702e8c5-303d-47d3-b472-ad5b45786985"),
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf")
                        },
                        new
                        {
                            FieldsId = new Guid("ecf5fba8-8c18-4001-a8b1-253eeab96053"),
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf")
                        },
                        new
                        {
                            FieldsId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3")
                        },
                        new
                        {
                            FieldsId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9")
                        },
                        new
                        {
                            FieldsId = new Guid("8df1c6e3-379f-43bd-bbed-8fa7dc047f2a"),
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9")
                        },
                        new
                        {
                            FieldsId = new Guid("a48a3022-773b-409d-b5b7-a9dce98746fe"),
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            TablesId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            TablesId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            TablesId = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            TablesId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            TablesId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            TablesId = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            TablesId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            TablesId = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            TablesId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            TablesId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            TablesId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            TablesId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            TablesId = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            TablesId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            TablesId = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            TablesId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            TracksId = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            TracksId = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("b154476b-480b-4145-8104-2d8e9fb97bbc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("3306a9ba-7d2b-4e4f-b588-75c5ed44eead")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("85a3522f-24a7-438c-908a-105ad6b70eea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("53216d16-e0d4-449b-9766-308c062639f9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("293ad3c4-dee0-472e-b51f-e91681114a49")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("09db73df-e9a1-4b32-a090-29664580a431")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            MarksId = new Guid("31478264-5c85-483b-b16f-67aa286222df")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            MarksId = new Guid("e0315d40-6406-49af-8553-cb9955f6416a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            MarksId = new Guid("e0773e70-6f4f-42ba-8423-45e5685e0258")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            MarksId = new Guid("be855681-20b7-4b0c-90c5-904c40b739af")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            MarksId = new Guid("246fce9f-144a-493f-9a52-bbb36e568ed4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            MarksId = new Guid("59842114-ef9c-4197-b94c-2128552d914a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            MarksId = new Guid("c2714bb9-444b-452b-821f-5985b925332f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            MarksId = new Guid("e6a7fbb9-4f23-4124-811e-d75721c23571")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            MarksId = new Guid("fac08a25-afad-4143-a5c1-dd9a9804f34a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("c2714bb9-444b-452b-821f-5985b925332f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("e6a7fbb9-4f23-4124-811e-d75721c23571")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("6fca925d-1f50-45f6-a8d1-503338f9a8f1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("97abd78d-4cfe-49f9-bc37-3e137a297220")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("2e3abe88-033b-4390-a768-07c7f52cf3ab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("b947a1e6-afff-4da2-af17-29671729f71a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            MarksId = new Guid("61b06b2c-de4f-4a19-9793-9046536ebc9c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            MarksId = new Guid("fac08a25-afad-4143-a5c1-dd9a9804f34a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            MarksId = new Guid("3670ebf9-2c0e-4404-adb0-08c50df117d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            MarksId = new Guid("385e4268-d3cb-44df-8eac-067ee9d730a8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            MarksId = new Guid("145ab529-7b6f-4b98-9ff5-5d5fa00330e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            MarksId = new Guid("0f7de586-1492-4fef-94fd-b16414ea8929")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "17872699-4e88-4b12-bfb5-6f77780b0b1c",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "f2dc6fcc-8041-4b52-bd80-d9ffd46ffc87",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "246a632b-fbc8-409a-abfb-5543889f31fd",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "f683300c-64c7-4b6b-9704-74c582ab1cdb",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "b8efe516-ac2c-4807-9b4b-86b9796f93ff",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88acf778-130a-4f13-908e-71df1f683a45"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("bf304131-55e2-4f94-8798-534b0f7a3c71"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("1a20b7a9-cefd-4cb6-b2af-12bdaeeb4159"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("32d73456-85ee-4b30-9931-2bd556a2332d"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("f06fa74e-750f-4f97-af6a-c5083b95917c"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("ff017a4f-5dab-408b-bf74-deef89cb18d7"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4819eef1-7e41-4f4e-8b23-e510582a84e4"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("37227023-e899-460e-9f26-6270d1eb2138"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75103712-dc4d-4553-bed5-52b15342df7a"),
                            ColumnId = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("860f812d-45f3-488b-a348-e8e3acf6ac0e"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("3aa9eaab-8ece-4b0a-bc99-4b6ba96dc592"),
                            ColumnId = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("860f812d-45f3-488b-a348-e8e3acf6ac0e")
                        },
                        new
                        {
                            Id = new Guid("cec23e68-1fa4-41af-95ad-3336c00a8f91"),
                            ColumnId = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6f38fc13-6cbb-434d-8491-26e2b8130689"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("d80084c5-8a2e-4d1a-8e70-5ada0815562c"),
                            ColumnId = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6f38fc13-6cbb-434d-8491-26e2b8130689")
                        },
                        new
                        {
                            Id = new Guid("121b8ffa-3f6f-404d-a985-c336dca642eb"),
                            ColumnId = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d141c8ed-da89-454d-941e-af4dc68866af"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("e56a25a1-abfd-4522-bb9d-4e713b3fad33"),
                            ColumnId = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d141c8ed-da89-454d-941e-af4dc68866af")
                        },
                        new
                        {
                            Id = new Guid("e3eaa56f-da65-4300-9888-4dea9a1d8fe3"),
                            ColumnId = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("59fb410d-0db2-47e8-b1de-cc13291599b6"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("515d6537-7b37-471d-a782-9a4edc45cf6f"),
                            ColumnId = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("59fb410d-0db2-47e8-b1de-cc13291599b6")
                        },
                        new
                        {
                            Id = new Guid("c92d376f-e07a-436e-962e-d9fa46920ed1"),
                            ColumnId = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b8fbbd52-f28a-4b7d-827e-b357b48a8c35"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("b48782a4-0a00-4cc5-9f74-070dba9ef884"),
                            ColumnId = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b8fbbd52-f28a-4b7d-827e-b357b48a8c35")
                        },
                        new
                        {
                            Id = new Guid("4a4452d3-5ff0-4d0f-b636-db9dfabea659"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b3f9a55d-f59e-4195-b4d9-f241774b56a7"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("ad5fedf7-ad40-4868-8081-a8004dc9b8fa"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b3f9a55d-f59e-4195-b4d9-f241774b56a7")
                        },
                        new
                        {
                            Id = new Guid("720f5f0a-0acf-47bd-83c5-52666ab317c3"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ed5c9c10-912d-401c-975b-61b17aa65ed9"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("92b8d278-cbc1-449e-bb84-69a47183ec9b"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ed5c9c10-912d-401c-975b-61b17aa65ed9")
                        },
                        new
                        {
                            Id = new Guid("4ac286de-ee94-4287-9f8b-eb0edca51bf4"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("06c1e3ce-e8bb-4364-b212-95f0e6ece200"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("5a1ae7f9-d75b-438c-a892-9ef468bd6a44"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("06c1e3ce-e8bb-4364-b212-95f0e6ece200")
                        },
                        new
                        {
                            Id = new Guid("68771169-8f53-4912-a862-c9eeeb0a9df6"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ac6ff4fe-0f69-4e35-8e65-c1bb5d4fee14"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("5a871c97-5464-405e-b1ab-849366d9982c"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ac6ff4fe-0f69-4e35-8e65-c1bb5d4fee14")
                        },
                        new
                        {
                            Id = new Guid("c906abc8-737b-449d-87ac-61b30191a9fe"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("12b696bc-de1d-41be-9387-ee671a364d46"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("5a979841-1a05-4453-aa5d-5cc1e055ac0b"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("12b696bc-de1d-41be-9387-ee671a364d46")
                        },
                        new
                        {
                            Id = new Guid("e60cc376-cbb3-449d-80c5-9831f05ef452"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("708da983-125f-41ef-979b-f0fb1a4d2872"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("557b25a3-17c5-43a7-aa9c-32c79acf2d0a"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("708da983-125f-41ef-979b-f0fb1a4d2872")
                        },
                        new
                        {
                            Id = new Guid("27527fd7-91aa-4705-a44e-1cf25e6368ef"),
                            ColumnId = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("21179f12-c30f-4a57-9608-a4ac9c15d530"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("30a9022d-c6e5-4a71-8377-10d9cabfada3"),
                            ColumnId = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("21179f12-c30f-4a57-9608-a4ac9c15d530")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c90cdf9c-7a8d-41b5-903b-f68e3a84ae54"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("731c1d49-ae16-4806-8ccb-a1743b6a2e10"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("06ab7e3e-1cac-41c5-9d68-7bf28d9b0c98"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("d00cac5f-6df6-4f23-9efc-3a41827da24e"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("b922ea0f-b4b5-4c8f-9e79-e6e12f437da8"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("cb9c6ed2-3dac-4b73-8d7e-133ad3338275"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("43d73009-c27c-4daf-8f10-6cbd26dca600"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("cb64be59-2a67-44c5-8f7d-f37cb1ee4796"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("f274a888-24ad-40e8-9b10-2730632c9a6d"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("6fe8ea0b-8b70-47c2-bb21-579a53d0fe4b"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("7d09cc1d-e2ef-4d5e-acd1-c8678aeb8357"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("04ea0a9d-c6d1-452a-bfd1-0177c1586377"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("0162d752-f759-422b-9836-5fa1ece0e955"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("083f2975-339e-4ab4-8c5a-52a4fe9d6152"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("3ce465ae-7bfe-4345-a46c-9bca7270b41a"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("dccfc750-4c78-41c1-bd4e-80e7573caf4b"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("c34414d5-f248-4e9e-869f-ae2d7bb878e0"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("cce4bd69-5046-4ed5-9731-68911c3f2b65"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("432291e5-d58b-4bcb-8c33-8380eb25abda"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("1f36c50d-51bb-474a-90f2-85bfd5403200"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("30dfb60c-1689-4989-83d8-13b56efb466b"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("e9967d7c-aa33-42a3-bed2-0aa4a5196aa9"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("4c3e7468-780f-4160-a865-fc76f0484273"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("9100ab93-b749-46ed-86c5-83d7353a4612"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("4abc5d78-7f9a-4d10-8e33-a16301c497fc"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("3ccb7929-b8fd-401f-a15e-b664c3e060fa"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de202e33-9eec-411e-bcdc-99a95229d952")
                        },
                        new
                        {
                            Id = new Guid("b2a00a88-62cd-4450-b997-f086a35306a4"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("aea56f79-bec4-4b0e-a5a2-88e8fecbd385"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("bea0ee24-ca2b-4f87-89af-4cc93f434cde"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("79460182-9379-47f9-94e0-db61069e0f1c"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("8535fd25-7560-4b4f-b8e7-322872c8d902"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("526ecdf6-85f5-431d-923e-4492c087d29b"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("af3402ef-4fc5-4b1e-b97e-0039739fb5a4"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("cf42064e-b1ed-478e-af8d-b64452ad4655"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("fb99dcc5-aab5-4d2b-b603-a47e8faa2748"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("c93433bc-ad30-4a60-8cc6-96ae8d9f463f"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("6494ba3d-50b4-41f8-9307-c48c6f27b78c"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("364cebd8-1e7d-4e08-80fa-f67612937be4"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("a70f4642-914c-4b8f-a2ba-596b7528c79e"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("0932c219-fabf-4f35-a997-53241d64086f"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("4595c0aa-30e2-4dd6-a428-1df2d656023d"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("9af716f3-8d04-4326-880b-dfbc158b0e24"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("5c9543bd-89da-4133-ad0f-8b655473b790"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("9ce5dcf0-8689-4155-aa58-b62184538abf"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("637fed84-6b66-444a-bab6-8167070aae61"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("f2031781-1a63-4cde-b1e7-24755e77176f"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("25cb9032-32b2-4ae4-a446-0324b8fd2de0"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("8b7645a4-acbf-43f6-ad80-d4e4484000a6"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("b55170ca-eed5-47ee-9437-e2a11988fe98"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("42d9106d-f5e9-45dd-a639-5b6861fc00f7"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("c6e5c26b-c6aa-471e-b9c8-7040333e0c66"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("7660fae2-9ca0-401e-bb57-03e4b4d90123"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("fd2f5362-db1f-4d54-818c-a2b759ed47f2"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("4c66a2fd-5468-4029-af16-e65161dd3716"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("f6acb423-8d8c-4a75-a741-0e38a5b30a56"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea"),
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("090421ec-ca5c-461d-b673-b4250c9c0e3d"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea"),
                            ValueTypeId = new Guid("cc96e880-450f-4516-8c0e-ff8b89ffaa8d")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("29e7c879-4cf4-402f-b5ef-b1216608c66b"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10dca74a-6f33-41d3-abb1-5c7b1f57e69b"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("0ad91db4-05ed-4721-b3f2-0c76acb0d1e5"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("bd396c8f-144c-4f7b-a7aa-f253e902002b")
                        },
                        new
                        {
                            Id = new Guid("a3411054-66c1-426c-893c-071b04ee470c"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("24201caf-3b53-42d4-9479-fe6e2c4ff779"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("81167086-9122-423f-a6d0-9dd9fd7a89c0"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("80956ea4-f9a0-4161-beba-f6c40fdac773"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("343788de-62ee-4e5f-9e73-42c97f29c1f9"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("631b243d-cac9-4af6-955f-97cd2840e1db"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("1f4c3124-3a47-477f-a1b0-e25db1b29f01"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("9fa3f2ae-fd00-48bc-829f-2c67170ecfc7"),
                            EditBlockId = new Guid("c112de76-1b07-49e7-92c3-718ec1ddf9ab"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("9f7ff670-ec8b-4308-8381-4601db0457dc"),
                            EditBlockId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            EditBlockId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("a1ae16dc-349c-40df-a91c-ec2750df573b"),
                            EditBlockId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("9ff22936-3848-4c05-a2e7-ac8a44c4792c"),
                            EditBlockId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd")
                        },
                        new
                        {
                            Id = new Guid("91537e73-d1c4-4791-ad69-ec451d32c4fc"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("8702e8c5-303d-47d3-b472-ad5b45786985"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("ecf5fba8-8c18-4001-a8b1-253eeab96053"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("8df1c6e3-379f-43bd-bbed-8fa7dc047f2a"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        },
                        new
                        {
                            Id = new Guid("a48a3022-773b-409d-b5b7-a9dce98746fe"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b154476b-480b-4145-8104-2d8e9fb97bbc"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b")
                        },
                        new
                        {
                            Id = new Guid("3306a9ba-7d2b-4e4f-b588-75c5ed44eead"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b")
                        },
                        new
                        {
                            Id = new Guid("85a3522f-24a7-438c-908a-105ad6b70eea"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("ecf5fba8-8c18-4001-a8b1-253eeab96053"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("53216d16-e0d4-449b-9766-308c062639f9"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("91537e73-d1c4-4791-ad69-ec451d32c4fc"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("293ad3c4-dee0-472e-b51f-e91681114a49"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("8702e8c5-303d-47d3-b472-ad5b45786985"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("09db73df-e9a1-4b32-a090-29664580a431"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8")
                        },
                        new
                        {
                            Id = new Guid("31478264-5c85-483b-b16f-67aa286222df"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754")
                        },
                        new
                        {
                            Id = new Guid("e0315d40-6406-49af-8553-cb9955f6416a"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc")
                        },
                        new
                        {
                            Id = new Guid("e0773e70-6f4f-42ba-8423-45e5685e0258"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc")
                        },
                        new
                        {
                            Id = new Guid("be855681-20b7-4b0c-90c5-904c40b739af"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc")
                        },
                        new
                        {
                            Id = new Guid("246fce9f-144a-493f-9a52-bbb36e568ed4"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc")
                        },
                        new
                        {
                            Id = new Guid("59842114-ef9c-4197-b94c-2128552d914a"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a")
                        },
                        new
                        {
                            Id = new Guid("c2714bb9-444b-452b-821f-5985b925332f"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("e6a7fbb9-4f23-4124-811e-d75721c23571"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6")
                        },
                        new
                        {
                            Id = new Guid("fac08a25-afad-4143-a5c1-dd9a9804f34a"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a")
                        },
                        new
                        {
                            Id = new Guid("6fca925d-1f50-45f6-a8d1-503338f9a8f1"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d")
                        },
                        new
                        {
                            Id = new Guid("97abd78d-4cfe-49f9-bc37-3e137a297220"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("8df1c6e3-379f-43bd-bbed-8fa7dc047f2a"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("2e3abe88-033b-4390-a768-07c7f52cf3ab"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("a48a3022-773b-409d-b5b7-a9dce98746fe"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("b947a1e6-afff-4da2-af17-29671729f71a"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3")
                        },
                        new
                        {
                            Id = new Guid("61b06b2c-de4f-4a19-9793-9046536ebc9c"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3")
                        },
                        new
                        {
                            Id = new Guid("3670ebf9-2c0e-4404-adb0-08c50df117d4"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed")
                        },
                        new
                        {
                            Id = new Guid("385e4268-d3cb-44df-8eac-067ee9d730a8"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6")
                        },
                        new
                        {
                            Id = new Guid("145ab529-7b6f-4b98-9ff5-5d5fa00330e0"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("0f7de586-1492-4fef-94fd-b16414ea8929"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e55ceac2-1dda-43a3-a45a-2a0c27af587a"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("46b1f31c-020a-46e7-b190-b906a3bf5caf"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("fb29b0be-05e6-4de1-a1ff-6a188b40208a"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("2b175ac0-1680-4f62-9867-b0f2e6a374d3"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("191b9022-9bc1-4f5a-b156-3bb16e5adae9"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8f99002a-9475-4e3a-a642-36cfe3658fd2"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("0fdb1541-18ce-4b40-a2ba-de1bd23dc989"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("860f812d-45f3-488b-a348-e8e3acf6ac0e"),
                            IsPrefilled = true,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            Id = new Guid("6f38fc13-6cbb-434d-8491-26e2b8130689"),
                            IsPrefilled = true,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            Id = new Guid("d141c8ed-da89-454d-941e-af4dc68866af"),
                            IsPrefilled = true,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            Id = new Guid("59fb410d-0db2-47e8-b1de-cc13291599b6"),
                            IsPrefilled = true,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            Id = new Guid("b8fbbd52-f28a-4b7d-827e-b357b48a8c35"),
                            IsPrefilled = true,
                            TableId = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07")
                        },
                        new
                        {
                            Id = new Guid("b3f9a55d-f59e-4195-b4d9-f241774b56a7"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("ed5c9c10-912d-401c-975b-61b17aa65ed9"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("06c1e3ce-e8bb-4364-b212-95f0e6ece200"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("ac6ff4fe-0f69-4e35-8e65-c1bb5d4fee14"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("12b696bc-de1d-41be-9387-ee671a364d46"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("708da983-125f-41ef-979b-f0fb1a4d2872"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        },
                        new
                        {
                            Id = new Guid("21179f12-c30f-4a57-9608-a4ac9c15d530"),
                            IsPrefilled = true,
                            TableId = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9c68634-8805-416d-a95e-47256199a931"),
                            FieldId = new Guid("9f7ff670-ec8b-4308-8381-4601db0457dc"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("f441d79b-7f16-485b-b9f3-2db4d3b91d98"),
                            FieldId = new Guid("9f7ff670-ec8b-4308-8381-4601db0457dc"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("80481ac9-3232-4699-84b0-0a506e9f5d3d"),
                            FieldId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("2bd3d3a9-b76e-4b5b-a99e-f9d14345343f"),
                            FieldId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("0ce88541-0057-4f0d-8036-7ba8e3781f05"),
                            FieldId = new Guid("037ffe69-2f4f-4102-ac86-01d22617e018"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("4f71bcd4-4ec5-4196-8ecb-a0cba4bdecc2"),
                            ColumnId = new Guid("06ab7e3e-1cac-41c5-9d68-7bf28d9b0c98"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("31b3b631-5138-4fa7-bfb4-8ba451a8ad97"),
                            ColumnId = new Guid("06ab7e3e-1cac-41c5-9d68-7bf28d9b0c98"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("6a7792e3-65d7-4017-a76f-e833abe5e24f"),
                            ColumnId = new Guid("06ab7e3e-1cac-41c5-9d68-7bf28d9b0c98"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("ca46f6a6-010b-41b1-8ac6-07b1dee9785e"),
                            ColumnId = new Guid("e9967d7c-aa33-42a3-bed2-0aa4a5196aa9"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("98751118-624f-4ab2-a7a3-b1192821d268"),
                            ColumnId = new Guid("e9967d7c-aa33-42a3-bed2-0aa4a5196aa9"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("5ce0423e-4a7f-46d0-ad38-9d030c141f07"),
                            ColumnId = new Guid("e9967d7c-aa33-42a3-bed2-0aa4a5196aa9"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("8201e6b9-bbf0-46f3-854e-2c8be60a4b70"),
                            ColumnId = new Guid("8535fd25-7560-4b4f-b8e7-322872c8d902"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("45fb8917-ceed-4910-b0e4-36a99c286045"),
                            ColumnId = new Guid("8535fd25-7560-4b4f-b8e7-322872c8d902"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("def0853b-4452-4850-97ca-4c793a579d23"),
                            ColumnId = new Guid("f2031781-1a63-4cde-b1e7-24755e77176f"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("7a66dcfb-dfaf-4ccc-9ce9-d7d83dffb949"),
                            ColumnId = new Guid("f2031781-1a63-4cde-b1e7-24755e77176f"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("b13af4cd-f623-4c02-8593-c187bfe56f1e"),
                            ColumnId = new Guid("8b7645a4-acbf-43f6-ad80-d4e4484000a6"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("5b65582c-7aa2-4b29-9e5b-4d33f753985f"),
                            ColumnId = new Guid("8b7645a4-acbf-43f6-ad80-d4e4484000a6"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c8646a79-52a9-4900-bdaf-18f774190ee5"),
                            ColumnId = new Guid("8b7645a4-acbf-43f6-ad80-d4e4484000a6"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("f44a7451-65a4-4ae8-af8c-ef002fcfd96a"),
                            ColumnId = new Guid("7660fae2-9ca0-401e-bb57-03e4b4d90123"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("d0f5a4c0-2186-4a80-8d7c-2b03a4387218"),
                            ColumnId = new Guid("7660fae2-9ca0-401e-bb57-03e4b4d90123"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("2f933710-66aa-4886-af65-4adbbf2f9f11"),
                            ColumnId = new Guid("7660fae2-9ca0-401e-bb57-03e4b4d90123"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("5eba9f06-b970-472b-8cba-cb0a64f0063a"),
                            ColumnId = new Guid("9100ab93-b749-46ed-86c5-83d7353a4612"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("27381c58-9e79-45a3-9e8a-bc19a8fa4b45"),
                            ColumnId = new Guid("9100ab93-b749-46ed-86c5-83d7353a4612"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("c5ef229e-9656-4214-9e3a-65478e84d451"),
                            ColumnId = new Guid("aea56f79-bec4-4b0e-a5a2-88e8fecbd385"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6d13bbcb-7a4b-4704-9db8-63949a6dd6f1"),
                            ColumnId = new Guid("aea56f79-bec4-4b0e-a5a2-88e8fecbd385"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a190894-ccb9-4292-a556-a17002bbcea6"),
                            EditBlockId = new Guid("29e7c879-4cf4-402f-b5ef-b1216608c66b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cb9b85f3-3913-4cec-a586-8af4eef7428a"),
                            EditBlockId = new Guid("29e7c879-4cf4-402f-b5ef-b1216608c66b"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2028a2fc-2e91-48d1-acb4-7c6416e8cf6b"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("cd4cc8f0-0f03-4267-9670-6c3cbf2edac8"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("4e6d348a-a320-4db1-893f-5701a4daa06a"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("aca2a3db-13ad-45e0-9aa4-4291eefe90fc"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("e2018f08-fc66-4580-b66c-a42a0a76557a"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("4c073d33-8a67-4342-a41e-5fb8c8a5b754"),
                            EditBlockId = new Guid("064bbf25-b565-42e5-8853-2c7166494c3f"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("9fb4d7e3-8f53-4c28-af80-c43b3626345d"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("4ac48d76-f89c-4514-ac20-14723b9a1e07"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("d0f2183b-695c-4624-b8c3-9ee58349cca3"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("03b2ad2d-3556-4939-b65c-d860d3e9f9ed"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("1052665c-8548-4a6c-8b07-e6ecd2ea45d6"),
                            EditBlockId = new Guid("c1f2b89b-9a29-4b35-85a5-e009de96169e"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("9e1a2e19-f54b-4bfe-aac2-ce2b597133ea"),
                            EditBlockId = new Guid("5fa162dd-d5c0-4d64-8f61-545f4130b86f"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef3dad55-17e2-4f71-b47e-3060123ddb4a"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("d573d72e-b3f0-4cc1-8d1d-91e965469bea"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81e6eda1-1efe-4661-a269-07bfdb719f84"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("de69ea2a-076a-489a-9ff9-275d8a6ee0cd"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("de202e33-9eec-411e-bcdc-99a95229d952"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("bd396c8f-144c-4f7b-a7aa-f253e902002b"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("cc96e880-450f-4516-8c0e-ff8b89ffaa8d"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
