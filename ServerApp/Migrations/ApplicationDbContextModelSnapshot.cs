// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            EditBlocksId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("9a5d24cb-8be4-47ea-9989-adfb592f239f"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("f98b9454-1a09-4252-8d5d-567a17cd0ecf"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("a8d74ae8-6d4f-4514-9d6b-c8e29d4caf4c"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("c8f71dcf-acd5-4c3c-8e02-47411d41b7f8"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("2b96bdc7-71ca-495b-b44b-8d2d690c9dba"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("3e0dd756-51c2-43d9-9271-5b3efdde9b4a"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("2a617a6c-ab3c-416e-9d01-fd96bfea7a23"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("3023a517-d6a2-4f60-94ff-97a925c97c20"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("42810a5e-7a0d-49e5-b087-41ca4c036791"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("a81bc556-05d9-4eae-b2f0-ac8d61769482"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("26caaa30-b721-45e5-8da9-ccc30c3a378f"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("81fc6d01-1086-42ae-ad69-40330c0c4785"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("8edb16ec-8be3-467b-977b-6f2c46cfbea7"),
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5")
                        },
                        new
                        {
                            FieldsId = new Guid("da67a285-18ec-436a-8676-9061b077b47d"),
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153")
                        },
                        new
                        {
                            FieldsId = new Guid("10e99707-96b4-4dae-8256-286180aaa5f2"),
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153")
                        },
                        new
                        {
                            FieldsId = new Guid("3151b733-50c8-4719-a8b9-a791209265ef"),
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153")
                        },
                        new
                        {
                            FieldsId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2")
                        },
                        new
                        {
                            FieldsId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594")
                        },
                        new
                        {
                            FieldsId = new Guid("0ea4b40d-0b82-41bc-8f2c-25663e91fb23"),
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594")
                        },
                        new
                        {
                            FieldsId = new Guid("e8af3900-4a55-4326-85fb-e02c3fe81209"),
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            TablesId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            TablesId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            TablesId = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            TablesId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            TablesId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            TablesId = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            TablesId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            TablesId = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            TablesId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            TablesId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            TablesId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            TablesId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            TablesId = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            TablesId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            TablesId = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            TablesId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            TracksId = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            TracksId = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("8bc9db0c-87a4-40cd-a862-67bbb1ace5c3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("2854c5b8-4d6a-4159-9d93-acef804f8e46")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("9be73cfc-661e-4901-a0df-1917e4f71a89")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("97959ed8-8885-4af4-8ab9-ad5cef291dc3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("41a028a4-6883-4216-a568-c51c2f897e99")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("33a86126-6d9b-45b8-ae8d-8a41d08f16a3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            MarksId = new Guid("92487515-b375-45c6-9a23-dbbc8d4cefb7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            MarksId = new Guid("17f19ccc-7a3b-4da5-8517-525b9f00d815")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            MarksId = new Guid("7c7b7474-73d8-47d4-8a12-fc1bc4e1ecdc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            MarksId = new Guid("c609a41b-dffb-4fa8-90dc-00bdf654340c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            MarksId = new Guid("f1ca61e6-ffa6-4bf9-8841-339f5056d5ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            MarksId = new Guid("661e8681-3991-417c-8be7-f2fdbe6f407f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            MarksId = new Guid("52eecfa3-539f-4438-9583-38f1baa5560f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            MarksId = new Guid("616c7d58-d833-4829-a162-23a1d29e537d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            MarksId = new Guid("8274dcf9-dba3-4715-82c8-06e10bd7262c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("52eecfa3-539f-4438-9583-38f1baa5560f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("616c7d58-d833-4829-a162-23a1d29e537d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("6ca0ecc6-068b-4fa6-928d-2037f39960b7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("3e8911ee-5332-4ace-be08-43dca7840b07")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("e282f4ad-d602-495f-9c15-3a66cbe5059b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("9fa37be4-160a-45f0-87f8-bf3e6514a650")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            MarksId = new Guid("33964e1c-bd82-4378-ad91-097e26abb67b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            MarksId = new Guid("8274dcf9-dba3-4715-82c8-06e10bd7262c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            MarksId = new Guid("423559d5-1f3e-41f2-97f4-7e27432c5504")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            MarksId = new Guid("8fcaa24b-0593-47db-abf7-c8ca3de899e2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            MarksId = new Guid("27f848f8-7931-4a25-8c44-edf8e5227eea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            MarksId = new Guid("05d26786-3b03-4af9-9bdf-a30ab85ca6a7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0b45d484-52a5-4bb0-990a-7a041bfb4939",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "8b484d24-249e-4faf-b244-a6eafcfa1fe3",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "0dd07067-0937-4611-8331-65a826236f35",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "d9cd8638-4c27-4d5c-88b4-80adad8f08b7",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "c36b9c06-e0a7-48ed-9316-6d394974f58f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("504571af-a710-4da7-bfa9-7560d37d6511"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("f8dcd398-6eb8-4ea3-a138-0c2e83d1613d"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("baa1639f-fce8-469f-a4b2-33de27bc8786"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("92d4cb1e-1dc3-4cc2-8b74-f1e229f83552"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("6c2e652c-25a4-4f6b-881e-5401d2944a14"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("034854a7-e73b-46f3-a6c8-ffd65fc2d540"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11c2f625-8df9-4cc2-ac16-5b44c2b56857"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("6a5b6735-8b5f-4fed-b40c-14194056b6a5"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6ed5331-119f-484d-8d1a-8af9ad2f2256"),
                            ColumnId = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("899bef44-fcee-4c0d-ab93-ef8a0fde2ffc"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("1df793f1-d1d1-4ecc-8651-de449d487810"),
                            ColumnId = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("899bef44-fcee-4c0d-ab93-ef8a0fde2ffc")
                        },
                        new
                        {
                            Id = new Guid("5436645b-1202-4a75-865c-314556c633e9"),
                            ColumnId = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("606f130d-3bfa-423a-b8be-3a1983679a98"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("63608ebf-c9ec-4438-b92d-8b42493666ba"),
                            ColumnId = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("606f130d-3bfa-423a-b8be-3a1983679a98")
                        },
                        new
                        {
                            Id = new Guid("690f5023-2c7f-4d1e-9bfe-bf3b9c5e9771"),
                            ColumnId = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("b27e7614-a7f6-4ffb-b52b-77e6d7108f64"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("37be2e4b-fb86-4353-a5a7-508b76ee359b"),
                            ColumnId = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("b27e7614-a7f6-4ffb-b52b-77e6d7108f64")
                        },
                        new
                        {
                            Id = new Guid("c311844f-6df9-4612-a657-c1eb7f20f256"),
                            ColumnId = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("17bf9bbb-0c98-43f6-95db-259b9892d561"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("88dc6b43-3894-478d-ae2e-d1d1467cd91a"),
                            ColumnId = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("17bf9bbb-0c98-43f6-95db-259b9892d561")
                        },
                        new
                        {
                            Id = new Guid("5382617f-26a4-4962-b2fd-d29bb4fefa58"),
                            ColumnId = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0cf5ebac-beb6-4ff5-ba48-0897cf628a9b"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("61fec6cd-997d-46d9-a97e-30ff2bf1c65e"),
                            ColumnId = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0cf5ebac-beb6-4ff5-ba48-0897cf628a9b")
                        },
                        new
                        {
                            Id = new Guid("9511272d-f4f8-487a-b8ed-4ebd1929df4f"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("180ecf96-e2e8-4b97-8548-1090cac7cf43"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("6d44a6de-483b-4d35-a246-d34b54d4c731"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("180ecf96-e2e8-4b97-8548-1090cac7cf43")
                        },
                        new
                        {
                            Id = new Guid("bd594049-817c-48af-8dc7-de4e34a8a0a5"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3543d745-0307-48a1-ae0a-ff4586d3a905"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("7c7e3cb0-4293-4006-ad21-3973aeab03b5"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3543d745-0307-48a1-ae0a-ff4586d3a905")
                        },
                        new
                        {
                            Id = new Guid("cbd73d4e-57ce-4a84-9ae1-e99ca8f9a1f5"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("08def21a-cb79-45f2-bf5d-9e508dd094fa"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("aac61cbe-b79f-4c5d-8073-ddbc55933775"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("08def21a-cb79-45f2-bf5d-9e508dd094fa")
                        },
                        new
                        {
                            Id = new Guid("f77b603d-ed6f-4083-8d29-ca6c967a1d17"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7679d547-07d1-4764-a109-2ee6d64b54f5"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("7c657730-af6d-4c5f-a2e1-b7d0a8438034"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7679d547-07d1-4764-a109-2ee6d64b54f5")
                        },
                        new
                        {
                            Id = new Guid("bdbc30e7-e35b-4a89-a19f-271e3736db91"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("70b20af9-4c3d-4c47-aac8-9cda4119be56"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("aa03ebe9-b679-4ace-99d4-becb80c2bf40"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("70b20af9-4c3d-4c47-aac8-9cda4119be56")
                        },
                        new
                        {
                            Id = new Guid("9d9b037f-8f72-43e6-a014-7efcbb1f707f"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("6f9afd44-6e79-4fe6-add4-cdeb72870acb"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("714dda9a-1594-4fb8-8a1c-61e7470c321a"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("6f9afd44-6e79-4fe6-add4-cdeb72870acb")
                        },
                        new
                        {
                            Id = new Guid("2aaae959-dcf5-436c-abe8-1de15501baa4"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2e2fe64b-5250-4d6c-938e-9bb9789f06ce"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("a455a0cc-640a-4226-8ede-5b0bef51bb45"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2e2fe64b-5250-4d6c-938e-9bb9789f06ce")
                        },
                        new
                        {
                            Id = new Guid("ced92356-1108-4023-9039-062a568afb94"),
                            ColumnId = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a82bf3f2-59cb-4768-8821-a768e269f55a"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("b2834281-0da9-4591-95d3-53f652a89660"),
                            ColumnId = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a82bf3f2-59cb-4768-8821-a768e269f55a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ad811ec-d12c-4c48-9494-1a840fdf7e05"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("22a64286-e01e-4e4d-973d-a936203bdf3f"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("ec539051-fff8-4694-b633-916c0ddb1170"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("dc07ba29-2f72-4f3e-8689-cc1a6821233b"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("e96539b7-c002-43c8-85d5-823f9057d2c5"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("e7acd63c-5190-4ad1-a32b-b7e3fb0dc39d"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("3fb172a3-89e4-4761-8f82-98d24b6dea1b"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("7ccd6136-7a49-4be8-bf1f-c4026e49de60"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("691ce3c0-3751-4ecb-abe0-2e62610036e1"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("5fa27250-f48e-45fe-b210-92a2fe0170f9"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("cec3ef98-6f33-41d2-8dd1-0a976d405098"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("1fc0a286-f2e4-49da-add2-d9e5b0f79bbe"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("77f42af4-4ad8-4828-b5ec-e9c4871ad4f7"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("cceaac28-6690-4d39-b2e7-b6d3fd96ebd7"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("333f91d9-39c8-4865-a710-0a33fd0af6a0"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("d8c69bdf-3b32-4fb6-b1b0-b7fc11099b99"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("9be8f5d5-b926-4941-ba12-581ca42b058a"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("ef7c7b94-8a40-4871-8c66-d357d8f25c61"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("121f3f60-2c74-4598-ad27-8b8da361c89b"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("1eff6572-230a-4160-9167-3a92e4f6c1b6"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("fe1aa457-33dc-4a8b-a8fc-59272bfc243b"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("f129a86c-981e-4b6d-8789-37e175c6fb3e"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("5550e311-29d5-44c4-a286-97e9f4b46fe2"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("e28b5666-9538-4e41-84b1-a8f36521d34d"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("a0e2bb2b-2433-4875-a099-168ce9ac7fd4"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("b0e928f1-46bb-4c89-919f-ead46a1c20cd"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("39a17edb-6b5d-4e6a-a4ab-4ef3c73ea556")
                        },
                        new
                        {
                            Id = new Guid("5632a9a4-c69d-4393-9004-e64e6d2b1e70"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("c6566db2-748a-4efd-9044-941368404c0e"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("af571f38-0463-4305-ab6e-5b68c3809cf1"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("858af379-45f6-440e-839c-8761901e830f"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("8fd60b4b-bd06-4e32-acdc-a20e3d3816d8"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("e2c47ed4-b75d-4d40-aaed-e6dbd1cd3e6c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("73e7e1f7-e625-434c-922e-d1c6bd14c50f"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("b47e1c4e-7497-4469-9fb5-cf0d5c5bb4bb"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("4c2924da-932a-417f-94e2-e4bf94ddb171"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("6a267958-ccb4-4f0f-a91f-5a1f22ee84c1"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("315d946e-7964-437c-b43a-627ccf24b056"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("5171f04a-b8ef-4236-b89f-93a3b276f270"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("dd4dd0ed-a655-41d1-b0b3-1f766a3e0d42"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("bd1db414-deec-4474-8503-d7420d6f74ff"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("8d94f97c-7d6a-49fc-a8e3-0676318f6f5f"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("f082c104-a553-4f38-b069-d2a3537f6a4d"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("96553f66-32e8-4681-88d0-63a87e327d63"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("39fe62bc-b4d7-4f8b-876f-b52ad916a7c1"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("52d0c1b9-adad-46b2-80b9-48c39fdceedc"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("958a9e39-ea52-42a4-bc04-ff14314abc3a"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("0904eb72-2d1d-43c3-a6b8-8faf69dc44b8"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("73b86c2f-f3c5-460b-a149-9d70f7337970"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("1eeae8c8-2243-4d6d-87a2-b8eb0b4a98c7"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("9553b74a-b6d0-4911-9615-b9459516f49c"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("23259ef3-13de-4fa7-b329-4957ca418e25"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("29180656-91ab-4746-b1da-0c6d50a8feb8"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("fb9cd531-1150-4e39-bee4-dccbe42f16e1"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("ed26cde1-9a31-4c61-819b-f484c6c6b49b"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("ffa8d448-ad2c-4ed5-8a9d-34c9d721b775"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633"),
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("8b09847d-9743-4405-b204-951d55216a6f"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633"),
                            ValueTypeId = new Guid("785b8c4d-0c17-4623-b23a-fffcf1ac8b9a")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a5d24cb-8be4-47ea-9989-adfb592f239f"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("f98b9454-1a09-4252-8d5d-567a17cd0ecf"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("87454fc4-a606-46a6-a0fb-87420b4efe7e")
                        },
                        new
                        {
                            Id = new Guid("a8d74ae8-6d4f-4514-9d6b-c8e29d4caf4c"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("c8f71dcf-acd5-4c3c-8e02-47411d41b7f8"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("2b96bdc7-71ca-495b-b44b-8d2d690c9dba"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("3e0dd756-51c2-43d9-9271-5b3efdde9b4a"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("2a617a6c-ab3c-416e-9d01-fd96bfea7a23"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("3023a517-d6a2-4f60-94ff-97a925c97c20"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("42810a5e-7a0d-49e5-b087-41ca4c036791"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("a81bc556-05d9-4eae-b2f0-ac8d61769482"),
                            EditBlockId = new Guid("9a608d88-8028-4ce2-af36-2e4d0c676419"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("26caaa30-b721-45e5-8da9-ccc30c3a378f"),
                            EditBlockId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            EditBlockId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("81fc6d01-1086-42ae-ad69-40330c0c4785"),
                            EditBlockId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("8edb16ec-8be3-467b-977b-6f2c46cfbea7"),
                            EditBlockId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a")
                        },
                        new
                        {
                            Id = new Guid("da67a285-18ec-436a-8676-9061b077b47d"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("10e99707-96b4-4dae-8256-286180aaa5f2"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("3151b733-50c8-4719-a8b9-a791209265ef"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("0ea4b40d-0b82-41bc-8f2c-25663e91fb23"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        },
                        new
                        {
                            Id = new Guid("e8af3900-4a55-4326-85fb-e02c3fe81209"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bc9db0c-87a4-40cd-a862-67bbb1ace5c3"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb")
                        },
                        new
                        {
                            Id = new Guid("2854c5b8-4d6a-4159-9d93-acef804f8e46"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("78a4e826-d224-4442-a991-f6042723b2cb")
                        },
                        new
                        {
                            Id = new Guid("9be73cfc-661e-4901-a0df-1917e4f71a89"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("3151b733-50c8-4719-a8b9-a791209265ef"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("97959ed8-8885-4af4-8ab9-ad5cef291dc3"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("da67a285-18ec-436a-8676-9061b077b47d"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("41a028a4-6883-4216-a568-c51c2f897e99"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("10e99707-96b4-4dae-8256-286180aaa5f2"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("33a86126-6d9b-45b8-ae8d-8a41d08f16a3"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d")
                        },
                        new
                        {
                            Id = new Guid("92487515-b375-45c6-9a23-dbbc8d4cefb7"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee")
                        },
                        new
                        {
                            Id = new Guid("17f19ccc-7a3b-4da5-8517-525b9f00d815"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582")
                        },
                        new
                        {
                            Id = new Guid("7c7b7474-73d8-47d4-8a12-fc1bc4e1ecdc"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582")
                        },
                        new
                        {
                            Id = new Guid("c609a41b-dffb-4fa8-90dc-00bdf654340c"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582")
                        },
                        new
                        {
                            Id = new Guid("f1ca61e6-ffa6-4bf9-8841-339f5056d5ba"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582")
                        },
                        new
                        {
                            Id = new Guid("661e8681-3991-417c-8be7-f2fdbe6f407f"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d")
                        },
                        new
                        {
                            Id = new Guid("52eecfa3-539f-4438-9583-38f1baa5560f"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("616c7d58-d833-4829-a162-23a1d29e537d"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c")
                        },
                        new
                        {
                            Id = new Guid("8274dcf9-dba3-4715-82c8-06e10bd7262c"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1")
                        },
                        new
                        {
                            Id = new Guid("6ca0ecc6-068b-4fa6-928d-2037f39960b7"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133")
                        },
                        new
                        {
                            Id = new Guid("3e8911ee-5332-4ace-be08-43dca7840b07"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("0ea4b40d-0b82-41bc-8f2c-25663e91fb23"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("e282f4ad-d602-495f-9c15-3a66cbe5059b"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("e8af3900-4a55-4326-85fb-e02c3fe81209"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("9fa37be4-160a-45f0-87f8-bf3e6514a650"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762")
                        },
                        new
                        {
                            Id = new Guid("33964e1c-bd82-4378-ad91-097e26abb67b"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762")
                        },
                        new
                        {
                            Id = new Guid("423559d5-1f3e-41f2-97f4-7e27432c5504"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141")
                        },
                        new
                        {
                            Id = new Guid("8fcaa24b-0593-47db-abf7-c8ca3de899e2"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07")
                        },
                        new
                        {
                            Id = new Guid("27f848f8-7931-4a25-8c44-edf8e5227eea"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("05d26786-3b03-4af9-9bdf-a30ab85ca6a7"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("480b1d6b-ee39-4866-b931-645828c7a2b5"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0137bf53-a562-4790-a273-d957811bc153"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("5279c445-d4e7-43bc-b2d9-ae324c20e033"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("758b0730-4897-478f-aafb-adb7798593d2"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("932eb737-4b3f-4c5e-a00c-b0b5025a1594"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("412694d0-d783-43c8-ba24-d51b705d9e0b"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("8d433fd2-6058-4a77-84a0-da3078bfb45d"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("899bef44-fcee-4c0d-ab93-ef8a0fde2ffc"),
                            IsPrefilled = true,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            Id = new Guid("606f130d-3bfa-423a-b8be-3a1983679a98"),
                            IsPrefilled = true,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            Id = new Guid("b27e7614-a7f6-4ffb-b52b-77e6d7108f64"),
                            IsPrefilled = true,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            Id = new Guid("17bf9bbb-0c98-43f6-95db-259b9892d561"),
                            IsPrefilled = true,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            Id = new Guid("0cf5ebac-beb6-4ff5-ba48-0897cf628a9b"),
                            IsPrefilled = true,
                            TableId = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf")
                        },
                        new
                        {
                            Id = new Guid("180ecf96-e2e8-4b97-8548-1090cac7cf43"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("3543d745-0307-48a1-ae0a-ff4586d3a905"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("08def21a-cb79-45f2-bf5d-9e508dd094fa"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("7679d547-07d1-4764-a109-2ee6d64b54f5"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("70b20af9-4c3d-4c47-aac8-9cda4119be56"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("6f9afd44-6e79-4fe6-add4-cdeb72870acb"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("2e2fe64b-5250-4d6c-938e-9bb9789f06ce"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        },
                        new
                        {
                            Id = new Guid("a82bf3f2-59cb-4768-8821-a768e269f55a"),
                            IsPrefilled = true,
                            TableId = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a30e298d-8d14-4445-b7fc-b84eb0859e2c"),
                            FieldId = new Guid("26caaa30-b721-45e5-8da9-ccc30c3a378f"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("8fd50876-715b-422b-964a-2d3004be5c04"),
                            FieldId = new Guid("26caaa30-b721-45e5-8da9-ccc30c3a378f"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("2659f5ff-15bf-416f-8d77-6a2108ff3f59"),
                            FieldId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("46f2c81b-9705-4773-89e2-0d76ca70f49d"),
                            FieldId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("373b1c4b-6427-4ee6-baf0-727b5436fd8d"),
                            FieldId = new Guid("702d3167-7a61-44f8-b51c-9c4cb1bda1c5"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("5d5bfc01-efd4-4bb3-886a-1dd7a9511a26"),
                            ColumnId = new Guid("ec539051-fff8-4694-b633-916c0ddb1170"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("aa1cdcde-bd78-4f24-9b6e-cc8cdb9523e6"),
                            ColumnId = new Guid("ec539051-fff8-4694-b633-916c0ddb1170"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("0c236527-1819-4a0b-9093-5563e96e2e66"),
                            ColumnId = new Guid("ec539051-fff8-4694-b633-916c0ddb1170"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("3520b16e-c2ec-47a6-898d-fef18a77d327"),
                            ColumnId = new Guid("f129a86c-981e-4b6d-8789-37e175c6fb3e"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("e9339380-4daa-4cb9-9870-a6fddda6affc"),
                            ColumnId = new Guid("f129a86c-981e-4b6d-8789-37e175c6fb3e"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("6cdfa267-427c-465c-a810-a3f039d8ece0"),
                            ColumnId = new Guid("f129a86c-981e-4b6d-8789-37e175c6fb3e"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("02eabe6d-6328-4b93-a6c9-5b0b824f63b2"),
                            ColumnId = new Guid("8fd60b4b-bd06-4e32-acdc-a20e3d3816d8"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("7551a615-d199-4871-867a-06770c85dc2e"),
                            ColumnId = new Guid("8fd60b4b-bd06-4e32-acdc-a20e3d3816d8"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("2e9495f0-7ea0-41b5-a492-10d61ba3f0ff"),
                            ColumnId = new Guid("958a9e39-ea52-42a4-bc04-ff14314abc3a"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("66f33a14-ab21-4b8c-b369-2d82fcabf46d"),
                            ColumnId = new Guid("958a9e39-ea52-42a4-bc04-ff14314abc3a"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("42d6b249-fe0f-44fa-a65e-8be9901a43c8"),
                            ColumnId = new Guid("73b86c2f-f3c5-460b-a149-9d70f7337970"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("0a1d7158-6e87-43d2-b839-931e20f481a9"),
                            ColumnId = new Guid("73b86c2f-f3c5-460b-a149-9d70f7337970"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("8497963e-e565-4abb-a278-eb351a7a79cf"),
                            ColumnId = new Guid("73b86c2f-f3c5-460b-a149-9d70f7337970"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("817db17d-a7fc-4054-a0de-f435b6038c50"),
                            ColumnId = new Guid("29180656-91ab-4746-b1da-0c6d50a8feb8"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("f41282b5-f7ab-4995-91e3-a31537981b88"),
                            ColumnId = new Guid("29180656-91ab-4746-b1da-0c6d50a8feb8"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("ef37fa1b-ad1c-4b7d-99bc-db707090679a"),
                            ColumnId = new Guid("29180656-91ab-4746-b1da-0c6d50a8feb8"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("50b9cbe0-23e2-4ee7-b669-d163bdc3e65a"),
                            ColumnId = new Guid("e28b5666-9538-4e41-84b1-a8f36521d34d"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("6cc2309f-a8be-4573-ac2d-cc1ca9f0f138"),
                            ColumnId = new Guid("e28b5666-9538-4e41-84b1-a8f36521d34d"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("7a3424f3-dbcc-4ab8-9647-80d877d5f131"),
                            ColumnId = new Guid("c6566db2-748a-4efd-9044-941368404c0e"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("306a1f35-14ad-4e26-bfa7-b09265b1c629"),
                            ColumnId = new Guid("c6566db2-748a-4efd-9044-941368404c0e"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("28386ef1-996e-4ad3-acd0-e2c6c922a677"),
                            ColumnId = new Guid("5171f04a-b8ef-4236-b89f-93a3b276f270"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("eeb92ad7-0773-492f-abff-464831de6fa3"),
                            ColumnId = new Guid("5171f04a-b8ef-4236-b89f-93a3b276f270"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("941a4d07-7d9b-41b9-9e4c-7633fd546ddf"),
                            FieldId = new Guid("81fc6d01-1086-42ae-ad69-40330c0c4785"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("f3a4f2c5-82b7-4a44-afb1-bf5bb36f87f7"),
                            FieldId = new Guid("81fc6d01-1086-42ae-ad69-40330c0c4785"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbae62d7-3185-45ea-b30a-54decb78e98c"),
                            EditBlockId = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("85f1d02e-c890-43db-9417-dee0d1f29ea1"),
                            EditBlockId = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("78a4e826-d224-4442-a991-f6042723b2cb"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("6096dfb3-673e-4c35-bb17-164fb906a07d"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("066a3c17-3841-4249-8fa8-3b0c4f18bd89"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("8697ef9f-8082-4975-b498-a0f4526d4582"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("e6518245-cb2e-429e-bc8c-416bc1fc628d"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("eaa731fb-84f7-4603-83a9-71e162b963ee"),
                            EditBlockId = new Guid("58297e9d-2d7a-407d-84be-c0f904d8cff0"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("ec666138-f2c9-4f63-b7ed-b123ccd59133"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("b8644a5c-9024-45c6-823e-d263de9c54bf"),
                            EditBlockId = new Guid("d29c86fa-214a-41c7-b469-90430c7d0b9c"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("19a8e937-e52e-434e-888c-48bbd71f1762"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("95b1059f-d5bc-45ae-a9ee-23718df65141"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("d37f7c77-2bb1-4a85-94d2-ca6780fe6a07"),
                            EditBlockId = new Guid("f28b8094-39cd-49f7-98b0-6d781dda9fc3"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("57f8ccfe-a25a-4387-84c8-dc891f739633"),
                            EditBlockId = new Guid("e0de0de8-225e-4632-94d0-91e83de256a2"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2871d460-84fb-483f-84a9-7c5e82d88ac4"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("bf66823e-76fc-4535-82cc-268b62d3c845"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c480031d-3fdc-4290-b112-f56fb31cbb15"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("550d6f40-6270-4caf-be45-8a1d4557b00a"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("39a17edb-6b5d-4e6a-a4ab-4ef3c73ea556"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("87454fc4-a606-46a6-a0fb-87420b4efe7e"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("785b8c4d-0c17-4623-b23a-fffcf1ac8b9a"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
