// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("26e08253-d156-4a0c-b4e5-dca9de906494"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            EditBlocksId = new Guid("26e08253-d156-4a0c-b4e5-dca9de906494"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            EditBlocksId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("1f4c398f-28a4-47a1-99cc-7b8386496566"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("77bcb6a4-1369-462a-8d4c-95940ea3bd3c"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("7d2e8571-2577-4700-9414-35259b71ebe3"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("29b4a310-1c37-49a0-aae8-bcca502b500f"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("91950ec9-87d6-4703-a946-f455d72f3b01"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("f0ba2f58-c0a5-4c87-8564-5fc268aebb79"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("65bad0b0-2995-4791-a324-42e237cac770"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("b5167228-45a8-451b-9cc2-1c30b022bcfd"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("a3ef526f-1673-4b63-ac72-1df74c31814d"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("ae9e053b-4cc0-48be-9a24-553c1496a5de"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("1a314c1b-e926-45b3-a695-12df1d237c13"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("c1d31301-3bab-4a61-95c9-891ed5a64a3d"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("e0bff50a-5bff-4269-9f45-a717534ac494"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("ff104d50-51bd-4444-a669-7fc71ba38d56"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("e3fba1a3-b4ae-4fd2-87ec-7dfd67221a6e"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("1db89be5-fc68-4a04-973d-62676f453550"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("58d6543a-ec3e-4687-8012-a1dee0156099"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("7fe544e0-a5a0-427c-8cd4-c4fdc84fad98"),
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac")
                        },
                        new
                        {
                            FieldsId = new Guid("60fcb60f-5c1f-4a16-a20e-fd71ee25ae54"),
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e")
                        },
                        new
                        {
                            FieldsId = new Guid("a59fd96f-1665-44f7-b2f5-c5f6561ceb79"),
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e")
                        },
                        new
                        {
                            FieldsId = new Guid("a1bfc8a0-654c-4299-b49c-432c5a3b3dbb"),
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e")
                        },
                        new
                        {
                            FieldsId = new Guid("c3a9285d-e143-4843-9a96-23a4621f24d5"),
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e")
                        },
                        new
                        {
                            FieldsId = new Guid("5c16da5c-b9f1-4f40-ad5b-9d0548c793ae"),
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e")
                        },
                        new
                        {
                            FieldsId = new Guid("1db89be5-fc68-4a04-973d-62676f453550"),
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc")
                        },
                        new
                        {
                            FieldsId = new Guid("1db89be5-fc68-4a04-973d-62676f453550"),
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1")
                        },
                        new
                        {
                            FieldsId = new Guid("eeba3031-853c-4b79-9fdf-dcee4d7a1e42"),
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1")
                        },
                        new
                        {
                            FieldsId = new Guid("04568b26-f758-497c-b895-f0c8dd2e0a7d"),
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            TablesId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            TablesId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            TablesId = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            TablesId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            TablesId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            TablesId = new Guid("1c4ee49f-2575-4f6e-8528-f0c080ea3ee5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            TablesId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            TablesId = new Guid("0df3f623-601b-462e-95cc-e3a97331980f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            TablesId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            TablesId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            TablesId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            TablesId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            TablesId = new Guid("0df3f623-601b-462e-95cc-e3a97331980f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            TablesId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            TablesId = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("388e85bd-736c-498c-94b8-9b3d6e11a7de"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b7584824-418e-40c0-88e0-4ed980b399f9"),
                            TracksId = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("388e85bd-736c-498c-94b8-9b3d6e11a7de"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b7584824-418e-40c0-88e0-4ed980b399f9"),
                            TracksId = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("478d4edb-5631-4296-af48-955ee92749ed")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("def93b42-eb98-4596-9bf9-10c70aac7b21")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("6c623e6e-d8d9-45bd-b95d-a04e2fbdac4a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("cfee6e78-e588-48d5-bcc9-e708c50a1534")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("2b89e38f-a6db-4eb5-bc68-d3f6375006ba")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("a284a176-3d0b-40be-8dc1-c0d718811574")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            MarksId = new Guid("3667af7f-87f2-493e-818a-3ee0103984e0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            MarksId = new Guid("1c7255a6-9e14-48e3-976a-1fd048d5e73d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            MarksId = new Guid("7b842512-e5c7-4c79-88e1-8c3025663096")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            MarksId = new Guid("9c16c3a0-d558-427b-922b-d1ccb9939d86")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            MarksId = new Guid("4ac61d6d-1de4-435e-82c8-1a657bb758ce")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            MarksId = new Guid("3cffba1c-8a5c-49c1-8611-2f6f86677c28")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            MarksId = new Guid("072fd708-17a2-4267-9b0c-2e79881183db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            MarksId = new Guid("84899ed4-d549-47db-ae70-00830e77b8c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            MarksId = new Guid("95be84b8-f5ea-4119-bb37-932bdd0d1ffb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("072fd708-17a2-4267-9b0c-2e79881183db")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("84899ed4-d549-47db-ae70-00830e77b8c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("65e73d56-85dc-47cd-bfbf-ae24d2391a3d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("4db083e9-2f21-4fc3-8ca6-bf681ad19f24")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("0d35de47-af7b-4d2d-ba80-d4fb9e76ac5d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("d5ab3d0d-fd2d-4334-b79d-72ed7652bf2d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("b937d80d-d771-48bd-944a-c8cb93d09164")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("86388cb9-b085-4af8-b0e1-39f61598b069")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            MarksId = new Guid("d5976d72-53d9-4b61-8ffd-f1beeafed95d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            MarksId = new Guid("95be84b8-f5ea-4119-bb37-932bdd0d1ffb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            MarksId = new Guid("a6b495c6-2356-40ac-8698-7535cb0ed159")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            MarksId = new Guid("8441675f-951a-4e89-99ee-52904e717c9a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            MarksId = new Guid("0fa3b22a-2843-4f4f-9a40-f12baa75cdb1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            MarksId = new Guid("b25a66eb-1107-47df-93b3-b1400e408604")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdd06ce4-b090-4735-894a-f69805c4c869"),
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("7ed38b13-8eca-4c6c-93e5-dcef7e5e6dbd"),
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("3932ef7e-f8fa-4a0d-913a-6efc17d3b2ab"),
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("b063b4eb-1c3b-45bf-a3ea-a631676a7d56"),
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("29eb8b6f-f5a2-48db-92fb-4ce8313fd2e5"),
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("82b30a0b-dc8e-412a-a80e-26c9c64f36b0"),
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("0df3f623-601b-462e-95cc-e3a97331980f")
                        },
                        new
                        {
                            Id = new Guid("cf2b6266-0514-40df-aea5-97306f466a66"),
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("0df3f623-601b-462e-95cc-e3a97331980f")
                        },
                        new
                        {
                            Id = new Guid("d33ce737-8f32-419e-b51f-47dc36676d3f"),
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("6aec5847-a436-43bd-9095-f1171dda83cb"),
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("0e1d6643-b26c-442a-8faf-74b9c9dac015"),
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("4ebd5c20-bc78-40fd-ba28-db5d174e623a"),
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("0989382c-6c72-4336-b84d-601087a4b8eb"),
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("635d6106-2673-488a-ab4c-a16b52a88049"),
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("e4869870-81cb-46ae-97c5-c36c5f75a063"),
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("68a4b69f-18de-4cb1-a62d-078e4da05da2"),
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("8ce6e5b3-72ad-4104-a7f1-4fc4a1588b55"),
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("5b4f839f-3946-4f19-9d95-e8c0b362ed9f"),
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("1767b7a7-ad27-4b5f-827b-59267d878098"),
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53")
                        },
                        new
                        {
                            Id = new Guid("5cc93d19-a99e-4350-ac89-b7b258ebabb3"),
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53")
                        },
                        new
                        {
                            Id = new Guid("13e3d5cc-e8a6-4eca-ba56-c475324526ec"),
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53")
                        },
                        new
                        {
                            Id = new Guid("2a71ae63-fd8f-4eb3-a40c-e049a3bb6b87"),
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53")
                        },
                        new
                        {
                            Id = new Guid("f5ce9be2-40a7-4b72-89b6-27dfad1adad9"),
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("b252c831-7818-4e8b-89a1-1cf8c27bc061"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("b198f0d8-3124-456e-8495-a3d393f7bfb9"),
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("ebbb99f4-e9a7-4458-84fd-d22d64722681"),
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("0d9d1b18-4bee-4ac4-b780-6e6656a62a49"),
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("be21ad6a-d994-4307-9fec-9ba7651f402f"),
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("d2902769-c82a-4d09-a091-3c3777dcc3a7"),
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("1c4ee49f-2575-4f6e-8528-f0c080ea3ee5")
                        },
                        new
                        {
                            Id = new Guid("d69bbe14-7714-4fc4-8019-06282590c1ff"),
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("1c4ee49f-2575-4f6e-8528-f0c080ea3ee5")
                        },
                        new
                        {
                            Id = new Guid("353ac2df-efad-4e9c-87b4-cab920c8c15b"),
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            Id = new Guid("ca350c21-b0c3-4567-b160-25274cd9d3cb"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            Id = new Guid("b260b800-89b9-4c5b-a9a8-bddb9da7de77"),
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            Id = new Guid("47dbe4d7-bda8-414f-9a45-605b1b5502e4"),
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            Id = new Guid("bbf9e407-f8ea-4efc-9adf-f0f54862ee90"),
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            Id = new Guid("0dcd6a56-c71a-40e9-ba72-1a692f1eea31"),
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            Id = new Guid("bbc0ec5a-348d-4f34-b92a-7f46b89a26b2"),
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            Id = new Guid("31b2b5d8-664b-4cff-b658-02fef41e54ae"),
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            Id = new Guid("34cfc20c-ba18-478a-bb81-1fddf5d42ca3"),
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("c6b90966-e1e9-450a-9747-608f9d191e21"),
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("3d1faed3-3514-40df-86e2-8e59fc1d48fd"),
                            Name = "Количество публикаций в БАЗЕ",
                            Number = 3,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("bc85ada5-7774-4d62-9918-ae06c94d1d11"),
                            Name = "Количество цитирований",
                            Number = 4,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("86a1d5b6-afdf-4f17-b3a7-02225e22afcc"),
                            Name = "Индекс Хирша (за все время)",
                            Number = 5,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("e22ac476-b5dc-4145-96ed-e3afa961e3bb"),
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("1491c1ba-d713-4496-a3c1-33ac81e1a5f7"),
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("8a25a044-0f11-4f1b-ad4b-db63da70aa63"),
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("923cc5e0-5209-4db7-937e-b313b2663828"),
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("cc35f93d-d936-4fbb-a965-3683714e9bd7"),
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("73e7b72e-f5fb-4afa-a7fe-1bd595f5cbec"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            Id = new Guid("4c737a51-855a-44ab-9aee-303dc3e8cf8f"),
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            Id = new Guid("489585d7-006e-433f-b642-76fd114b5413"),
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            Id = new Guid("10844b2f-52dd-4f90-a8eb-f4289297c7f1"),
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            Id = new Guid("8045022e-b21e-466e-bb10-f8af1a6610fb"),
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06")
                        },
                        new
                        {
                            Id = new Guid("6398ec69-b42f-4bdb-b743-4193d6fdd826"),
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06")
                        },
                        new
                        {
                            Id = new Guid("054f88ca-bfdf-487c-a3eb-4074a2f729c2"),
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("26e08253-d156-4a0c-b4e5-dca9de906494"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f4c398f-28a4-47a1-99cc-7b8386496566"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Трек конкурса",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("77bcb6a4-1369-462a-8d4c-95940ea3bd3c"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "ФИО",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("7d2e8571-2577-4700-9414-35259b71ebe3"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Дата рождения",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("29b4a310-1c37-49a0-aae8-bcca502b500f"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Домашний адрес",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("91950ec9-87d6-4703-a946-f455d72f3b01"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Контактный телефон",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f0ba2f58-c0a5-4c87-8564-5fc268aebb79"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Электронная почта",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("65bad0b0-2995-4791-a324-42e237cac770"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Место работы/учебы",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b5167228-45a8-451b-9cc2-1c30b022bcfd"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Адрес работы/учебы",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("a3ef526f-1673-4b63-ac72-1df74c31814d"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("ae9e053b-4cc0-48be-9a24-553c1496a5de"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Должность",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("1a314c1b-e926-45b3-a695-12df1d237c13"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("c1d31301-3bab-4a61-95c9-891ed5a64a3d"),
                            EditBlockId = new Guid("a3e3ede1-5e43-4d61-91fe-c408f808cfef"),
                            Name = "Дополнительная информация",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("e0bff50a-5bff-4269-9f45-a717534ac494"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Направление конкурса",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("ff104d50-51bd-4444-a669-7fc71ba38d56"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Категория участника конкурса",
                            Number = 14
                        },
                        new
                        {
                            Id = new Guid("e3fba1a3-b4ae-4fd2-87ec-7dfd67221a6e"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Название конкрусной работы",
                            Number = 15
                        },
                        new
                        {
                            Id = new Guid("1db89be5-fc68-4a04-973d-62676f453550"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Ученое звание",
                            Number = 16
                        },
                        new
                        {
                            Id = new Guid("58d6543a-ec3e-4687-8012-a1dee0156099"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Ученая степень",
                            Number = 17
                        },
                        new
                        {
                            Id = new Guid("7fe544e0-a5a0-427c-8cd4-c4fdc84fad98"),
                            EditBlockId = new Guid("8020be28-ff2d-47ac-9ea1-e2dbf0609f3a"),
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 18
                        },
                        new
                        {
                            Id = new Guid("60fcb60f-5c1f-4a16-a20e-fd71ee25ae54"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Защитившиеся кадидаты наук",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("a59fd96f-1665-44f7-b2f5-c5f6561ceb79"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Защитившиеся доктора наук",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("a1bfc8a0-654c-4299-b49c-432c5a3b3dbb"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Защитившиеся бакалавры",
                            Number = 21
                        },
                        new
                        {
                            Id = new Guid("c3a9285d-e143-4843-9a96-23a4621f24d5"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Защитившиеся специалисты",
                            Number = 22
                        },
                        new
                        {
                            Id = new Guid("5c16da5c-b9f1-4f40-ad5b-9d0548c793ae"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Защитившиеся магистры",
                            Number = 23
                        },
                        new
                        {
                            Id = new Guid("eeba3031-853c-4b79-9fdf-dcee4d7a1e42"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Защитившиеся кандидаты наук",
                            Number = 24
                        },
                        new
                        {
                            Id = new Guid("04568b26-f758-497c-b895-f0c8dd2e0a7d"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Защитившиеся доктора наук",
                            Number = 25
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("478d4edb-5631-4296-af48-955ee92749ed"),
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("def93b42-eb98-4596-9bf9-10c70aac7b21"),
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("16684938-c87e-43d0-82df-50156168324f")
                        },
                        new
                        {
                            Id = new Guid("6c623e6e-d8d9-45bd-b95d-a04e2fbdac4a"),
                            FieldId = new Guid("5c16da5c-b9f1-4f40-ad5b-9d0548c793ae"),
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("cfee6e78-e588-48d5-bcc9-e708c50a1534"),
                            FieldId = new Guid("60fcb60f-5c1f-4a16-a20e-fd71ee25ae54"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("2b89e38f-a6db-4eb5-bc68-d3f6375006ba"),
                            FieldId = new Guid("a59fd96f-1665-44f7-b2f5-c5f6561ceb79"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("a284a176-3d0b-40be-8dc1-c0d718811574"),
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b")
                        },
                        new
                        {
                            Id = new Guid("3667af7f-87f2-493e-818a-3ee0103984e0"),
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d")
                        },
                        new
                        {
                            Id = new Guid("1c7255a6-9e14-48e3-976a-1fd048d5e73d"),
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("7b842512-e5c7-4c79-88e1-8c3025663096"),
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("9c16c3a0-d558-427b-922b-d1ccb9939d86"),
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("4ac61d6d-1de4-435e-82c8-1a657bb758ce"),
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("72479481-80b7-4458-9c72-c402755a8ebc")
                        },
                        new
                        {
                            Id = new Guid("3cffba1c-8a5c-49c1-8611-2f6f86677c28"),
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("1c4ee49f-2575-4f6e-8528-f0c080ea3ee5")
                        },
                        new
                        {
                            Id = new Guid("072fd708-17a2-4267-9b0c-2e79881183db"),
                            FieldId = new Guid("1db89be5-fc68-4a04-973d-62676f453550"),
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("84899ed4-d549-47db-ae70-00830e77b8c2"),
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("aad09686-5488-43eb-942a-0efc3dbea728")
                        },
                        new
                        {
                            Id = new Guid("95be84b8-f5ea-4119-bb37-932bdd0d1ffb"),
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("0df3f623-601b-462e-95cc-e3a97331980f")
                        },
                        new
                        {
                            Id = new Guid("65e73d56-85dc-47cd-bfbf-ae24d2391a3d"),
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d")
                        },
                        new
                        {
                            Id = new Guid("4db083e9-2f21-4fc3-8ca6-bf681ad19f24"),
                            Name = "Баллы по базе Scopus:",
                            Number = 17,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("0d35de47-af7b-4d2d-ba80-d4fb9e76ac5d"),
                            Name = "Баллы по базе РИНЦ:",
                            Number = 18,
                            TableId = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918")
                        },
                        new
                        {
                            Id = new Guid("d5ab3d0d-fd2d-4334-b79d-72ed7652bf2d"),
                            FieldId = new Guid("eeba3031-853c-4b79-9fdf-dcee4d7a1e42"),
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("b937d80d-d771-48bd-944a-c8cb93d09164"),
                            FieldId = new Guid("04568b26-f758-497c-b895-f0c8dd2e0a7d"),
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("86388cb9-b085-4af8-b0e1-39f61598b069"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("d5976d72-53d9-4b61-8ffd-f1beeafed95d"),
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600")
                        },
                        new
                        {
                            Id = new Guid("a6b495c6-2356-40ac-8698-7535cb0ed159"),
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd")
                        },
                        new
                        {
                            Id = new Guid("8441675f-951a-4e89-99ee-52904e717c9a"),
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06")
                        },
                        new
                        {
                            Id = new Guid("0fa3b22a-2843-4f4f-9a40-f12baa75cdb1"),
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25
                        },
                        new
                        {
                            Id = new Guid("b25a66eb-1107-47df-93b3-b1400e408604"),
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4028e6c6-278c-4b5b-9dde-8a78901ce4ac"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("106cc9d0-2d64-4777-b184-86b0b2c1983e"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("e943d4fe-7108-4a02-bd2b-d8f740d82dd6"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7502619e-4f9c-4055-8318-41d9c97ea2cc"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9e5fa490-ebd8-475e-9463-455cb4b441a1"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("fdcdcc79-c97c-4353-8957-7875798f3559"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("388e85bd-736c-498c-94b8-9b3d6e11a7de"),
                            Name = "Конкурсная работа",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("b7584824-418e-40c0-88e0-4ed980b399f9"),
                            Name = "Итог",
                            Number = 8
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aad09686-5488-43eb-942a-0efc3dbea728"),
                            EditBlockId = new Guid("26e08253-d156-4a0c-b4e5-dca9de906494"),
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0df3f623-601b-462e-95cc-e3a97331980f"),
                            EditBlockId = new Guid("26e08253-d156-4a0c-b4e5-dca9de906494"),
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("16684938-c87e-43d0-82df-50156168324f"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("449f9dee-be7a-4831-90ac-c3070827fe9b"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("3fb2076b-4d42-4c13-b2f5-97032273da53"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("72479481-80b7-4458-9c72-c402755a8ebc"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, изданные типографским способом за последние 5 лет",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("1c4ee49f-2575-4f6e-8528-f0c080ea3ee5"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("21e14f60-95ac-44c5-9c29-337812234c8d"),
                            EditBlockId = new Guid("8ef17813-4109-4d57-8e5d-305e5e6c4451"),
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("0cf36fef-af1e-4424-8eca-5c7d3166f01d"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("fddf60e5-3be0-46c4-8827-4f6a810fd918"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Персональные идентификаторы и показатели",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("e6da3db2-cfbf-487e-8185-a738b9b0c600"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("13111c2b-e7ae-439f-8fde-e5462d3616cd"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("ce1b3d8e-9988-4079-91be-b448b86cfd06"),
                            EditBlockId = new Guid("63d36cd4-d950-459f-8ccd-d322e96802fc"),
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5f2de80-eaca-489e-ac8b-10a18d092c28"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("93d111b2-3f2c-414e-851e-1c1cb329ad00"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66367b1e-a036-4732-bce9-1257c293c7da"),
                            Name = "User 1",
                            Username = "admin@mail.ru"
                        },
                        new
                        {
                            Id = new Guid("cf72d6c9-ab84-48b5-9407-ff9f22eb55ff"),
                            Name = "User 2",
                            Username = "user@mail.ru"
                        });
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
