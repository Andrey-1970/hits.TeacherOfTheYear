// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43edbed2-d9fb-4adb-915f-d5f49c137c22"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            EditBlocksId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            EditBlocksId = new Guid("43edbed2-d9fb-4adb-915f-d5f49c137c22"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("58d18847-572f-41e4-a872-5a90dd5bd442"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("030c9f98-12b1-4d74-82ef-fe11f825e38c"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("d0168ad8-1cdf-4642-927a-99eb81b797f6"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("0e120b49-b789-4b60-b096-d2fd4144bcd9"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("b0cb787e-2532-42e9-a42f-c5df694450c6"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("a7656168-a219-434c-8d64-4a6c70597cca"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("46898f69-c8c9-4a5b-a920-b841d452f0f1"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("23c56f38-7ecb-4735-b4e5-d9b6b2236705"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("5a087acf-e189-45ce-a65a-8284cc003cdb"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("e1b15397-ca74-4749-b6c3-633d84ca78a7"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("a3fc447e-c9b5-431b-ba7b-2c0e873ecdff"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("c61df780-7556-4320-89ba-389ab76e736d"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("02ae900d-d6f2-4d71-8285-f397f11534d6"),
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501")
                        },
                        new
                        {
                            FieldsId = new Guid("6511201a-a6aa-4b22-8627-c9c409d93554"),
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8")
                        },
                        new
                        {
                            FieldsId = new Guid("b1f71f6d-a3c8-495e-adb2-8cd9d6b8c706"),
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8")
                        },
                        new
                        {
                            FieldsId = new Guid("84d627a5-dcb4-4ba0-93b3-5a9491cf33a4"),
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8")
                        },
                        new
                        {
                            FieldsId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf")
                        },
                        new
                        {
                            FieldsId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3")
                        },
                        new
                        {
                            FieldsId = new Guid("b9e6fb45-9feb-455a-adb4-c234e56b7508"),
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3")
                        },
                        new
                        {
                            FieldsId = new Guid("33fcb784-e58b-4053-88e3-8b4b6700d23d"),
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            TablesId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            TablesId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            TablesId = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            TablesId = new Guid("97419931-6d4f-487e-b950-906c4b825198")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            TablesId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            TablesId = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            TablesId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            TablesId = new Guid("878746aa-d77c-4281-a445-b017b94b3207")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            TablesId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            TablesId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            TablesId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            TablesId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            TablesId = new Guid("878746aa-d77c-4281-a445-b017b94b3207")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            TablesId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            TablesId = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            TablesId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            TracksId = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            TracksId = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("45914fa3-2783-4265-b2dc-a0bb75181069")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("b40c5928-3067-4cc3-a61a-e09d2d1a2e55")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("f81aa45b-9e0a-4234-8a79-579148f6ced1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("f188fa84-f985-4133-903d-3584336903dc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("1f7a450d-6d0d-4f0e-884a-fbcd4d0369e9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("a633e0ed-bbce-4d08-908c-a56f6c6cfa04")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            MarksId = new Guid("58a80d0a-8c02-443c-bded-92c8c490c0ea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            MarksId = new Guid("5864b6d8-e068-4b8a-817d-24e2bcd8d3c5")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            MarksId = new Guid("5c79c217-da59-4bec-a601-bcf85b283239")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            MarksId = new Guid("b644c65e-a19c-4b5a-8751-a038f8d3f2e1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            MarksId = new Guid("1578dad5-0aa0-4a83-8777-31fdd6699f51")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            MarksId = new Guid("2fb1dad7-6eb3-4e08-b95c-daf8fde16fea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            MarksId = new Guid("1e5b4974-d60e-4459-80a9-26d1275fd6e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            MarksId = new Guid("f2508164-bcdc-4c1a-98c0-8524905da673")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            MarksId = new Guid("893e57ac-b675-49c7-b738-b0ed56d2ca03")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("1e5b4974-d60e-4459-80a9-26d1275fd6e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("f2508164-bcdc-4c1a-98c0-8524905da673")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("2670b0bc-2930-4973-bd2c-a8ff026e21c7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("b727a537-1637-4fd2-a83c-f11e06635be7")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("b1574528-2995-4d23-81cb-cc71fa3cc854")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("044ed106-cd18-43a5-b0b0-974f524fb26b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            MarksId = new Guid("8953ad90-a566-4d9a-a111-ff3425eabdb6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            MarksId = new Guid("893e57ac-b675-49c7-b738-b0ed56d2ca03")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            MarksId = new Guid("e7ee71ac-d9b8-4c9d-b102-9096e7c3f7f8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            MarksId = new Guid("b22bec11-bcba-436a-857d-3591a92b83be")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            MarksId = new Guid("885ed870-fb66-4296-936f-00e0d698fa15")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            MarksId = new Guid("e75a5fef-7034-4f7d-8a4b-835eedd0cddc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a52ff235-a33c-4e1f-b62f-0b45bffb4c66",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "15f1d388-79f0-4946-bf16-fb4cd4a42945",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "8e92c8bd-4a42-4991-b59d-bf5edea872fe",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "1d4ce103-1a95-43a9-ac26-87d9f2d88766",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "11c2d152-98e2-49a6-933f-f981460d5d17",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5fb6fb8-016a-4f5a-b50e-63640b52a551"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("3e10fe1a-4c2c-4d44-b84d-00b9699cfa4a"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("17185ab5-9acd-49e5-86d7-8260e0c48d2b"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("ccf84b5e-1ad9-4307-934d-5280ddd2712a"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("e0f02bf9-2665-488f-adbc-113487d99a8f"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("bab2ad81-daee-4156-a14f-fb3b9161c472"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32fa5cc2-5e28-4c89-8b46-04ee71edec69"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("f5551fde-b10b-47ad-aba7-a2fa21283d6f"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc0cbd19-f858-4f25-b26d-88b9081d2a56"),
                            ColumnId = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ff2faceb-9bee-4ae0-a631-29488ffcbc09"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("88640e88-5f74-4b98-81bf-c97797333273"),
                            ColumnId = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ff2faceb-9bee-4ae0-a631-29488ffcbc09")
                        },
                        new
                        {
                            Id = new Guid("058fd2ed-00fd-49b2-91d3-f76da8e9cc7f"),
                            ColumnId = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("e702b6d1-33c0-4c92-8509-a8c49f547384"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("d90714e4-74bf-4bd9-b3c1-f1f46fb33dfa"),
                            ColumnId = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("e702b6d1-33c0-4c92-8509-a8c49f547384")
                        },
                        new
                        {
                            Id = new Guid("b3f3f9a9-8364-4216-9e17-959ec73d65ee"),
                            ColumnId = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1c87f7f4-afae-479e-88b6-283fd30a90c2"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("31aac261-3906-4d07-aa8c-be8b9a31b02e"),
                            ColumnId = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1c87f7f4-afae-479e-88b6-283fd30a90c2")
                        },
                        new
                        {
                            Id = new Guid("c2372558-4d87-41ae-a6ce-73f6b693f26a"),
                            ColumnId = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("fd14036e-6ce9-452f-9311-38a492a70c5c"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("3356e3c6-5155-422f-975a-c270b63db1f5"),
                            ColumnId = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("fd14036e-6ce9-452f-9311-38a492a70c5c")
                        },
                        new
                        {
                            Id = new Guid("92c01c24-a648-4c9d-b7b1-e237ea2183f0"),
                            ColumnId = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("bf8f5298-5426-40cc-b3cb-ccf8558b1706"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("8180da61-83ac-46d5-a9f5-e590093758bd"),
                            ColumnId = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("bf8f5298-5426-40cc-b3cb-ccf8558b1706")
                        },
                        new
                        {
                            Id = new Guid("c391e0c1-01a3-4ba1-b4cc-7c7a94078ae0"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("d479c347-bcec-44ef-8b48-2d45f7c72f94"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("e4870e23-379d-41ee-adf0-8fe06db34cb6"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("d479c347-bcec-44ef-8b48-2d45f7c72f94")
                        },
                        new
                        {
                            Id = new Guid("6407fea8-294f-4f5f-b244-5009b2ab87d9"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("62ff05ee-7773-4699-a098-c0ae32edf922"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("f75a9e27-e47a-40d6-9c1d-ad9b177965e5"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("62ff05ee-7773-4699-a098-c0ae32edf922")
                        },
                        new
                        {
                            Id = new Guid("05053963-6d1c-437e-ae78-0d75ef19bf37"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("05b49a8e-20e2-48c8-a07b-347d371c7290"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("c67fdaa4-bf3f-48fc-884c-574d924d80cf"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("05b49a8e-20e2-48c8-a07b-347d371c7290")
                        },
                        new
                        {
                            Id = new Guid("433f61c5-8818-4bc0-bfc1-49a2f1ee84d2"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("9baea2a8-05e9-4cef-99f2-52c70f8a94e1"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("39aad474-15ca-4db3-98aa-cc183cafb584"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("9baea2a8-05e9-4cef-99f2-52c70f8a94e1")
                        },
                        new
                        {
                            Id = new Guid("583f5c1c-ca61-45a2-bf3e-233a77f54fbd"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ef242992-16be-46a1-9061-3fe4549f93d4"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("d5b311db-a08f-43d5-b298-cbf614eaef5f"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ef242992-16be-46a1-9061-3fe4549f93d4")
                        },
                        new
                        {
                            Id = new Guid("49252adb-91c5-4b5b-b8dd-0c1b440dd8c5"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("a2ef2d4a-a718-4015-b98e-29f488d114d3"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("82853aa5-b800-412d-9484-1ad312775ed0"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("a2ef2d4a-a718-4015-b98e-29f488d114d3")
                        },
                        new
                        {
                            Id = new Guid("f44dfca7-4bec-4209-85d3-f3538839100d"),
                            ColumnId = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("2c9b23bf-243d-47c9-9b93-554161437e35"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("006a09df-e7a5-49b3-9953-342d6642ca6e"),
                            ColumnId = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("2c9b23bf-243d-47c9-9b93-554161437e35")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb769b5a-7319-42dd-a745-f911d5c65c30"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("76d7b881-ba15-4aaa-b6cd-1ce499225599"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("faf051ad-af68-423d-899b-74313b64ad2c"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("b2280646-2d84-417c-8e7a-ca8b4eeab320"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("5ae6df13-3686-4786-9a50-e023e60334df"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("d3400f35-1c7a-4c4a-87fc-51023ab117cc"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("878746aa-d77c-4281-a445-b017b94b3207"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("af7b9e3d-4c5e-4d78-bdeb-d9eec0c795e3"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("878746aa-d77c-4281-a445-b017b94b3207"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("676c0509-7c38-4816-a8b9-d308b0004422"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("18716938-6c25-497d-9370-d6930bcbcef4"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("90767ca0-9eae-45bb-a9ea-19b9d1c26b48"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("7ed48cee-158c-42ac-83ed-fd28b99eeb50"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("58783c08-f216-4f62-aff9-a37d9048817e"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("a663eed1-5e11-4df5-b2e6-ea67e2b0e468"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("15843e55-c529-4d91-8009-a661e04f1a11"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("895d24b3-9615-4ece-a8ce-0cf1c3f28710"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("98777da4-a7c5-4c29-8cf8-7f0f2cf5f5e9"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("341d5351-3cf1-4a3d-a889-9083129b8a81"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("c9a092cb-4dc2-4aca-bf2e-f8a4660ac41e"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("a477c2e6-4026-4021-b862-2b1db06bba10"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("84caeb7e-83a6-434e-a977-b7994f7c22d2"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("830823e8-d2d0-40b7-9fb3-d889bd4f7c35"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("e3ef288c-2772-4414-b6a9-f7e71356b5d2"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("ad04f5f2-b8ae-4dda-97fa-a806a9802798"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("2c7919ef-7ffd-4cba-b26d-1294a3d11af7"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("957cd986-f961-41e9-afb0-a986ee66807f"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("183b8578-5c7d-4823-8ea9-d3ddb685b887"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("84d9ebd7-f8ab-48d2-a82e-a05834b0f17a")
                        },
                        new
                        {
                            Id = new Guid("696a358d-bc4b-4010-8b78-adc01e24bde4"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("1728e9fb-14f3-4076-8a47-93f9cc6c3c88"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("fa28cbaf-0e14-4a26-bd82-001b41bd5230"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("b8285c94-0822-4548-874a-09807416f8d5"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("40990967-333e-43a8-b169-809a6d5cb24b"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("143fe2b9-7d52-4aab-b39c-df74745b580c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("72cba75d-a31e-4914-b54a-684aed9abf99"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("97419931-6d4f-487e-b950-906c4b825198"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("81df18b0-d505-424e-a8ac-5b40516b5634"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("97419931-6d4f-487e-b950-906c4b825198"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("1e664d4a-85c2-4bb8-812a-0bbcc143204d"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("97419931-6d4f-487e-b950-906c4b825198"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("3927d712-8aa7-4a2e-bcd0-bee61068b216"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("97419931-6d4f-487e-b950-906c4b825198"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("ba3a9f44-0d96-46d6-bcae-c390438d1c4a"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("d9a5a40e-643a-49ea-acc9-0963ecbae28c"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("805fe9d3-0824-4458-82b9-750dec8f0dfb"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("355f0aa2-5630-41eb-90e1-0cc2befb79a5"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("4c0486b6-3eab-41ba-9512-9ee7dfe172bc"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("ccea463e-061b-42bc-9d76-8ca98974bd67"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("6e9a93cb-38ca-418f-aa2b-7807ad48f8c4"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("f706385c-fb46-4506-ab97-347ba98c3917"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("168c3e80-fd8a-46f6-99f0-271e91721946"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("a2384b72-d100-41f5-843c-b4749fc4db89"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("ecab153f-779c-4818-a3b6-e7053f5f9f28"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("9ac92682-3a52-4e68-8e4b-29840b729034"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("02b7a28f-3f60-4e56-a8d9-3a13cb3545d3"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("df175279-96ab-4948-9c2b-bcd3c55a3553"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("e274c125-5817-4e7b-b366-cc5b80929d5c"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("c19a2813-4d0d-42ba-90c4-4be8efdc1dd1"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("2c01ffc3-b377-49a6-ad0b-a6a0264f13be"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("9a44893c-1c98-4e73-88b3-5b5a74ca4e0a"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("48851390-eacc-48b7-a803-91521a2963df"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("11050ef1-3019-49ee-9e4d-1a395f4a24bf"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f"),
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("43edbed2-d9fb-4adb-915f-d5f49c137c22"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58d18847-572f-41e4-a872-5a90dd5bd442"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("030c9f98-12b1-4d74-82ef-fe11f825e38c"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("c6f6f3b4-0295-40ce-b03f-c2aa08dd27e9")
                        },
                        new
                        {
                            Id = new Guid("d0168ad8-1cdf-4642-927a-99eb81b797f6"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("0e120b49-b789-4b60-b096-d2fd4144bcd9"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("b0cb787e-2532-42e9-a42f-c5df694450c6"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("a7656168-a219-434c-8d64-4a6c70597cca"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("46898f69-c8c9-4a5b-a920-b841d452f0f1"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("23c56f38-7ecb-4735-b4e5-d9b6b2236705"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("5a087acf-e189-45ce-a65a-8284cc003cdb"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("e1b15397-ca74-4749-b6c3-633d84ca78a7"),
                            EditBlockId = new Guid("8bde0a08-f6d3-40c2-a979-efe157ddaff6"),
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("a3fc447e-c9b5-431b-ba7b-2c0e873ecdff"),
                            EditBlockId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            EditBlockId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("c61df780-7556-4320-89ba-389ab76e736d"),
                            EditBlockId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("02ae900d-d6f2-4d71-8285-f397f11534d6"),
                            EditBlockId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180")
                        },
                        new
                        {
                            Id = new Guid("6511201a-a6aa-4b22-8627-c9c409d93554"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("b1f71f6d-a3c8-495e-adb2-8cd9d6b8c706"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("84d627a5-dcb4-4ba0-93b3-5a9491cf33a4"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("b9e6fb45-9feb-455a-adb4-c234e56b7508"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        },
                        new
                        {
                            Id = new Guid("33fcb784-e58b-4053-88e3-8b4b6700d23d"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45914fa3-2783-4265-b2dc-a0bb75181069"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd")
                        },
                        new
                        {
                            Id = new Guid("b40c5928-3067-4cc3-a61a-e09d2d1a2e55"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd")
                        },
                        new
                        {
                            Id = new Guid("f81aa45b-9e0a-4234-8a79-579148f6ced1"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("84d627a5-dcb4-4ba0-93b3-5a9491cf33a4"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("f188fa84-f985-4133-903d-3584336903dc"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("6511201a-a6aa-4b22-8627-c9c409d93554"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1f7a450d-6d0d-4f0e-884a-fbcd4d0369e9"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("b1f71f6d-a3c8-495e-adb2-8cd9d6b8c706"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("a633e0ed-bbce-4d08-908c-a56f6c6cfa04"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4")
                        },
                        new
                        {
                            Id = new Guid("58a80d0a-8c02-443c-bded-92c8c490c0ea"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("97419931-6d4f-487e-b950-906c4b825198")
                        },
                        new
                        {
                            Id = new Guid("5864b6d8-e068-4b8a-817d-24e2bcd8d3c5"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11")
                        },
                        new
                        {
                            Id = new Guid("5c79c217-da59-4bec-a601-bcf85b283239"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11")
                        },
                        new
                        {
                            Id = new Guid("b644c65e-a19c-4b5a-8751-a038f8d3f2e1"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11")
                        },
                        new
                        {
                            Id = new Guid("1578dad5-0aa0-4a83-8777-31fdd6699f51"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11")
                        },
                        new
                        {
                            Id = new Guid("2fb1dad7-6eb3-4e08-b95c-daf8fde16fea"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53")
                        },
                        new
                        {
                            Id = new Guid("1e5b4974-d60e-4459-80a9-26d1275fd6e4"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("f2508164-bcdc-4c1a-98c0-8524905da673"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507")
                        },
                        new
                        {
                            Id = new Guid("893e57ac-b675-49c7-b738-b0ed56d2ca03"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("878746aa-d77c-4281-a445-b017b94b3207")
                        },
                        new
                        {
                            Id = new Guid("2670b0bc-2930-4973-bd2c-a8ff026e21c7"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356")
                        },
                        new
                        {
                            Id = new Guid("b727a537-1637-4fd2-a83c-f11e06635be7"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("b9e6fb45-9feb-455a-adb4-c234e56b7508"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("b1574528-2995-4d23-81cb-cc71fa3cc854"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("33fcb784-e58b-4053-88e3-8b4b6700d23d"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("044ed106-cd18-43a5-b0b0-974f524fb26b"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22")
                        },
                        new
                        {
                            Id = new Guid("8953ad90-a566-4d9a-a111-ff3425eabdb6"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22")
                        },
                        new
                        {
                            Id = new Guid("e7ee71ac-d9b8-4c9d-b102-9096e7c3f7f8"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c")
                        },
                        new
                        {
                            Id = new Guid("b22bec11-bcba-436a-857d-3591a92b83be"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92")
                        },
                        new
                        {
                            Id = new Guid("885ed870-fb66-4296-936f-00e0d698fa15"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("e75a5fef-7034-4f7d-8a4b-835eedd0cddc"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9fbfc81-4d42-43c6-848f-4e108524b501"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("07a40c8d-cfd0-402c-a31d-8e8aa19fbac8"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b05620e6-f627-4a6a-a460-53141cad6715"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("290f58a2-89a0-48e1-8f34-30cda9d4a2bf"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("1f9184c6-b405-407b-bbcd-bf54f8fd0ba3"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("52d232b4-195a-4693-92ac-8fa8bebaabf1"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("a934ac2c-8e0d-4bba-b187-62648068b9c6"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff2faceb-9bee-4ae0-a631-29488ffcbc09"),
                            IsPrefilled = true,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            Id = new Guid("e702b6d1-33c0-4c92-8509-a8c49f547384"),
                            IsPrefilled = true,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            Id = new Guid("1c87f7f4-afae-479e-88b6-283fd30a90c2"),
                            IsPrefilled = true,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            Id = new Guid("fd14036e-6ce9-452f-9311-38a492a70c5c"),
                            IsPrefilled = true,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            Id = new Guid("bf8f5298-5426-40cc-b3cb-ccf8558b1706"),
                            IsPrefilled = true,
                            TableId = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa")
                        },
                        new
                        {
                            Id = new Guid("d479c347-bcec-44ef-8b48-2d45f7c72f94"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("62ff05ee-7773-4699-a098-c0ae32edf922"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("05b49a8e-20e2-48c8-a07b-347d371c7290"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("9baea2a8-05e9-4cef-99f2-52c70f8a94e1"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("ef242992-16be-46a1-9061-3fe4549f93d4"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("a2ef2d4a-a718-4015-b98e-29f488d114d3"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        },
                        new
                        {
                            Id = new Guid("2c9b23bf-243d-47c9-9b93-554161437e35"),
                            IsPrefilled = true,
                            TableId = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a16a5da9-89c0-4390-afa2-801d7223f0e9"),
                            FieldId = new Guid("a3fc447e-c9b5-431b-ba7b-2c0e873ecdff"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("6275fe24-c274-4568-b55e-0be0f9045c7e"),
                            FieldId = new Guid("a3fc447e-c9b5-431b-ba7b-2c0e873ecdff"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("eaef98d2-6baf-4fce-b5c8-5f283b5e18a3"),
                            FieldId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("4152ea23-9133-4b35-85f7-1e6298b654d3"),
                            FieldId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("cef77cb1-2a00-4b93-b0df-b1b24f6ee584"),
                            FieldId = new Guid("336839d6-f398-4fdf-a7b1-11f331913174"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("d4f96bd7-bb6b-457c-82af-ba147d60dafb"),
                            ColumnId = new Guid("faf051ad-af68-423d-899b-74313b64ad2c"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("79e01eff-0a5e-468c-8eda-dad159223582"),
                            ColumnId = new Guid("faf051ad-af68-423d-899b-74313b64ad2c"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("3f5fb45e-4fd0-4bab-999d-886885b6f388"),
                            ColumnId = new Guid("faf051ad-af68-423d-899b-74313b64ad2c"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("92c8ac2a-2e52-4084-8b8b-8804f9b5b637"),
                            ColumnId = new Guid("e3ef288c-2772-4414-b6a9-f7e71356b5d2"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("67b47b38-86b5-4d07-9d0e-e5d245b40ad0"),
                            ColumnId = new Guid("e3ef288c-2772-4414-b6a9-f7e71356b5d2"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("997d8980-d99b-461e-a9de-3143f45406c4"),
                            ColumnId = new Guid("e3ef288c-2772-4414-b6a9-f7e71356b5d2"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("6a8a6d98-cc3f-440b-aaf3-1b7438e1afc4"),
                            ColumnId = new Guid("40990967-333e-43a8-b169-809a6d5cb24b"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("c160df85-530f-485b-92e8-a9672d10f470"),
                            ColumnId = new Guid("40990967-333e-43a8-b169-809a6d5cb24b"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("101e5b49-120d-487c-9de7-9bfe7d220df6"),
                            ColumnId = new Guid("a2384b72-d100-41f5-843c-b4749fc4db89"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("7c297dfc-8bd7-4899-b6b1-e3c560187258"),
                            ColumnId = new Guid("a2384b72-d100-41f5-843c-b4749fc4db89"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("f3f18e22-141b-4b05-bcd1-afd8f73872d5"),
                            ColumnId = new Guid("9ac92682-3a52-4e68-8e4b-29840b729034"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("e6e926a4-2e60-40ce-9a13-99a1ecca3fee"),
                            ColumnId = new Guid("9ac92682-3a52-4e68-8e4b-29840b729034"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("64eb8aa0-880f-4756-84a8-458fd27289cc"),
                            ColumnId = new Guid("9ac92682-3a52-4e68-8e4b-29840b729034"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("6606a908-3528-48d6-9295-139a013dc804"),
                            ColumnId = new Guid("c19a2813-4d0d-42ba-90c4-4be8efdc1dd1"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("cdf9b7a8-9e12-4729-847b-74b1a6928667"),
                            ColumnId = new Guid("c19a2813-4d0d-42ba-90c4-4be8efdc1dd1"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("359aea12-a626-4377-b27a-4f9bafd8a21d"),
                            ColumnId = new Guid("c19a2813-4d0d-42ba-90c4-4be8efdc1dd1"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("7e047af2-471d-4c94-be78-c16543a05cc1"),
                            ColumnId = new Guid("2c7919ef-7ffd-4cba-b26d-1294a3d11af7"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("8d7fe693-b3b8-468a-a978-18d45d7ffcfb"),
                            ColumnId = new Guid("2c7919ef-7ffd-4cba-b26d-1294a3d11af7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("fd4a4ef2-4ddd-46af-b145-c7e7c8714506"),
                            ColumnId = new Guid("1728e9fb-14f3-4076-8a47-93f9cc6c3c88"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("740cc60a-0f2d-40ff-89c3-11139ca74767"),
                            ColumnId = new Guid("1728e9fb-14f3-4076-8a47-93f9cc6c3c88"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fb20457-5e4c-42e3-80d9-2fc21915d507"),
                            EditBlockId = new Guid("43edbed2-d9fb-4adb-915f-d5f49c137c22"),
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("878746aa-d77c-4281-a445-b017b94b3207"),
                            EditBlockId = new Guid("43edbed2-d9fb-4adb-915f-d5f49c137c22"),
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("9b6ea0b0-d9c5-4ff2-b075-81a7fb3a33fd"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("9f09d9a1-155c-473d-a227-eed0915082e4"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("fac6ec62-47a5-4036-81c5-21241b4f2f6f"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("b0cea84a-b2c0-4616-a06d-d4ea486bdd11"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("4a9273cd-7fe9-4615-ac04-23634e6ccc53"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("97419931-6d4f-487e-b950-906c4b825198"),
                            EditBlockId = new Guid("5af76dba-4366-4c86-8bf2-a38deab48b2d"),
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("3f5a6dc8-da6e-453a-a33c-18844828a356"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("e75de341-80e5-4856-93b4-0549ddce1efa"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("5e020707-5c59-4e6e-b530-1fabacb58e22"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("5378e1ed-9e71-4e2c-a991-262bc782432c"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("27e2fb62-4c2b-4bd7-8874-3941be3caa92"),
                            EditBlockId = new Guid("a2a1e1e6-5cd3-4d25-a96e-5c8bd0a3a3a0"),
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("df7004d5-c3d2-443f-953d-04e71f95988f"),
                            EditBlockId = new Guid("092594ea-62a6-4f92-8069-6d92c2f91a8e"),
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bef1d1a-1a39-46f2-82e2-d97733e8a4ae"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("c99a9a0b-26b3-4b49-8c41-cb0e28defa44"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6ce1ce9-035c-426a-aeea-3e16f39ddbac"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("58aa34ad-a21b-45b5-8526-42967f21b180"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("84d9ebd7-f8ab-48d2-a82e-a05834b0f17a"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("c6f6f3b4-0295-40ce-b03f-c2aa08dd27e9"),
                            Name = "DateTime"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
