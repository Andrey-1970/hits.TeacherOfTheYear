// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916135225_Update2")]
    partial class Update2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CropPhotoId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FullPhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CropPhotoId")
                        .IsUnique();

                    b.HasIndex("FullPhotoId")
                        .IsUnique();

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("ApplicationFormId", "UserInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationFormExperts");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("66fe5b29-a67e-4dfd-a622-81588a032238"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            EditBlocksId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("66fe5b29-a67e-4dfd-a622-81588a032238"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            EditBlocksId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("e9378d76-e072-4a42-a35d-1095e9ec8768"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("3d2db7e6-e669-45ee-ad06-025f01864c91"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("49ac1af8-5465-4aed-92ec-fe3f8de28f75"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("0c70b404-02ea-495b-b8fa-038cbe1c3d57"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("331704d1-3181-4e14-884e-1f40fec48bad"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("a231a100-9911-4a44-9a4d-c33669adb70a"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("e6481124-ec7b-459c-99e1-2f3c98748b4a"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("2b5f4703-2cd5-41cd-a3d5-fba4cb37cefc"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("fecff796-3072-4bbe-82a3-d48baede4407"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("a5f95b64-8155-4c21-881d-e7615470acde"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("c1caeab1-3aae-41b7-be40-850f2ed44b69"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("cfdade7a-32c9-478c-8c4f-7d334da45ea3"),
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8")
                        },
                        new
                        {
                            FieldsId = new Guid("f6a8c825-53bc-44ce-b387-235cc618b9d6"),
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9")
                        },
                        new
                        {
                            FieldsId = new Guid("dc0a09bc-2390-478d-b5ae-f5a010669be0"),
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9")
                        },
                        new
                        {
                            FieldsId = new Guid("9ec0b684-0a30-43d2-adfa-f8a505d80f3f"),
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9")
                        },
                        new
                        {
                            FieldsId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81")
                        },
                        new
                        {
                            FieldsId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852")
                        },
                        new
                        {
                            FieldsId = new Guid("881194b6-56a1-4ade-9012-23a242549b30"),
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852")
                        },
                        new
                        {
                            FieldsId = new Guid("1445c4ba-a522-41bd-881b-4134af4fe112"),
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            TablesId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            TablesId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            TablesId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            TablesId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            TablesId = new Guid("876b4bbb-181f-4965-8fea-051071b6409a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            TablesId = new Guid("36339742-f4eb-4c30-a540-9437896be036")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            TablesId = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            TablesId = new Guid("36339742-f4eb-4c30-a540-9437896be036")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            TablesId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            TablesId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8"),
                            TablesId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            TablesId = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            TablesId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            TablesId = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            TablesId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            TracksId = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            TracksId = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("uuid");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("04b9c43e-c907-4794-ba79-dbeea4b14cd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("c0d6b14b-f810-4a54-a96e-b624193f93c4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("8203fd55-e096-44d0-93b8-617da7c0f4c6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("93450311-e2e9-4cc0-903f-92e8664b6181")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("a2883a47-919a-4b07-ae2c-2d5a2840efca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("384a71cb-8100-4b22-9600-fd20d5aca9c4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            MarksId = new Guid("82d58435-e19f-47ce-b456-45e42804b6fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            MarksId = new Guid("7f4f3385-8dbb-4416-8453-5ec3d09f0bd1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            MarksId = new Guid("1b391031-e591-4a05-b0ee-99f781280257")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            MarksId = new Guid("58a06d67-4db6-4e55-a71b-79410e6651c6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            MarksId = new Guid("3465675b-c9ec-4ec6-b13f-1f9ccb3ed8c4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            MarksId = new Guid("58c207dc-cbe4-46c0-a465-3a9d74c9f4f8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            MarksId = new Guid("03892237-d852-4c26-afd8-6012443aad77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            MarksId = new Guid("975ce6b0-9486-495b-aaa6-a0291d8f8632")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            MarksId = new Guid("07d6b969-6835-46db-948c-1f31ef93e49f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("03892237-d852-4c26-afd8-6012443aad77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("975ce6b0-9486-495b-aaa6-a0291d8f8632")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("bfe2b329-2246-4edb-ad31-7f6129317322")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("1b8160fb-55b9-487f-b32e-160aa476b449")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("6f7dc4d5-fb01-49b6-850e-8b703b36ed5c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("e5a5c8cb-1343-41e2-a659-a630b6323a71")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            MarksId = new Guid("75a3a4d4-7f48-44ed-a820-d3b36b8ace64")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            MarksId = new Guid("07d6b969-6835-46db-948c-1f31ef93e49f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            MarksId = new Guid("9b786580-847e-4409-961e-3eba09070458")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            MarksId = new Guid("f42c7e01-9fa4-486f-8840-f104e29212b2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            MarksId = new Guid("41d09ce3-f5f1-4e63-9e0b-cdd26d16c859")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            MarksId = new Guid("4cf40dff-5045-4845-bbb1-3d9fb716113f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "067f9bf5-01f0-4601-ac71-d88a049d4fc6",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "387fa4f1-9a4b-4220-865d-94109ed0c178",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "0da4181a-593e-4f7d-9767-c6fb5e8a2afd",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "453860a9-c070-421f-bfab-1e115956a240",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "82d72618-b9a1-481a-9b9b-8966605845bb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastEmailSentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("589e25e7-2206-4e89-9005-bfd27e199b09"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("69ce8ef5-10ab-4e2c-bb3d-043606599f97"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("6b6e4b56-02af-4d38-8f34-cfa5547a0ee9"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("f8adf3fb-78c2-40dd-a86d-f61fec571ee6"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("b7c8b469-d82b-4a61-aeba-26778bef3878"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("2e6a5aaa-494e-44a9-9ecf-4e7fdf3ce7e5"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb3d35b4-0714-4554-bc99-656f6389538e"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("dc70050e-8a0d-4bf7-b000-c28a9e7f4fc8"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1256bf4-63a5-4381-9bb0-c79880dd636e"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1e6b9a57-54f9-4d4a-a394-69ed17b1bc60"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("9db88a6e-6198-4425-ad4a-c5944f23f5d6"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1e6b9a57-54f9-4d4a-a394-69ed17b1bc60")
                        },
                        new
                        {
                            Id = new Guid("80746ce7-1e1a-4c6f-91d4-447747087549"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5f8dab2e-85bf-4bd5-9f4c-80290baf43ec"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("ac891551-31ab-4d00-b470-030df6f08ed9"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5f8dab2e-85bf-4bd5-9f4c-80290baf43ec")
                        },
                        new
                        {
                            Id = new Guid("84db48d3-0705-4733-8c47-baaafb75e077"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1a60ce30-3ab1-4da6-9e51-015f0b94fd76"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("42042b76-5f4a-4fb8-a135-e940ecb085e9"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1a60ce30-3ab1-4da6-9e51-015f0b94fd76")
                        },
                        new
                        {
                            Id = new Guid("388aaa2e-4114-4beb-94d9-ae816800c257"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("0870ff75-d6df-4ab8-b8f5-89d0f4dac9e6"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("72bdf934-1536-42f3-aaa0-b8e55634e61c"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("0870ff75-d6df-4ab8-b8f5-89d0f4dac9e6")
                        },
                        new
                        {
                            Id = new Guid("b3e6e7a5-934c-4b42-99c3-7a92bee81ff0"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("80618b41-e40b-4a2c-b282-66263e1ecf74"),
                            Value = "Апробация"
                        },
                        new
                        {
                            Id = new Guid("539a916b-4c69-4395-bd86-c661d33a33be"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("80618b41-e40b-4a2c-b282-66263e1ecf74")
                        },
                        new
                        {
                            Id = new Guid("0e20de54-7e63-4570-9046-0d7ce3cd81a1"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4ca15ff2-fe58-4b4b-bbc4-8ae10e4c37db"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("bc7f9ad1-9e51-4f2b-a300-b7ece4c7233d"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4ca15ff2-fe58-4b4b-bbc4-8ae10e4c37db")
                        },
                        new
                        {
                            Id = new Guid("06ffbaf8-a11c-4477-bae7-83111a563946"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("99357d1f-91f2-4b7d-9e99-3b785e2c9b40"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("dcab4dec-cb07-468b-ad25-c6e05413a598"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("99357d1f-91f2-4b7d-9e99-3b785e2c9b40")
                        },
                        new
                        {
                            Id = new Guid("244372b7-8418-4317-88db-c12d9d7bc707"),
                            ColumnId = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c84ee1fc-5f8a-4d98-8b42-bea241311156"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("7de580ae-5179-46f8-a2cc-47d00722b0a6"),
                            ColumnId = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c84ee1fc-5f8a-4d98-8b42-bea241311156")
                        },
                        new
                        {
                            Id = new Guid("2c690fc5-0329-494f-bef3-eb3e489463bc"),
                            ColumnId = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("dc838202-edd5-4228-9137-2785e9f42c10"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("e73e4661-413b-4edd-84f0-6519802e1ee4"),
                            ColumnId = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("dc838202-edd5-4228-9137-2785e9f42c10")
                        },
                        new
                        {
                            Id = new Guid("819c20c7-24ec-4863-8769-9728c66aea78"),
                            ColumnId = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("402c0dcf-8322-486d-a233-c8349f09ce9a"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("1a94ccff-870f-4927-81ce-1b860379ba0c"),
                            ColumnId = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("402c0dcf-8322-486d-a233-c8349f09ce9a")
                        },
                        new
                        {
                            Id = new Guid("84173bca-21e5-4d21-a7c5-400dbfacd2a7"),
                            ColumnId = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8636e18e-99c9-4f99-9c3f-ffbfd5b57903"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("3e97ceb5-5b27-4eec-bb3e-3b0fa9e810cf"),
                            ColumnId = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8636e18e-99c9-4f99-9c3f-ffbfd5b57903")
                        },
                        new
                        {
                            Id = new Guid("f277867c-5416-4a46-b60a-9c4e57a275fa"),
                            ColumnId = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1d5d064c-ab3c-4177-8aa7-5cc683eca015"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("1cb629f7-5229-4542-ad61-0fedd23027e2"),
                            ColumnId = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1d5d064c-ab3c-4177-8aa7-5cc683eca015")
                        },
                        new
                        {
                            Id = new Guid("d1f357da-f778-480e-a3e8-ce76a4d03b81"),
                            ColumnId = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("950b4fef-27b3-4e37-ad24-91bf3582f0a4"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("7654e91a-f4c3-4c73-be4a-d561f625b833"),
                            ColumnId = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("950b4fef-27b3-4e37-ad24-91bf3582f0a4")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a277aef-01ae-4a93-807a-f249aa7b201f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("46238373-44b4-4e41-bdc9-2cf866781468"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc"),
                            ValueTypeId = new Guid("190d5097-837b-4d36-9396-7f4b9a59cbdc")
                        },
                        new
                        {
                            Id = new Guid("9eebccac-51bd-47d7-b07e-4dce990cdf64"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("8f6df6f6-4842-424b-9a42-ccaee3e70fb7"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("c2191777-c244-4eab-a875-428946023a4a"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("e604de24-a635-440f-9599-f4a25b1aa54c"),
                            IsRequired = true,
                            Name = "Награда (медаль, диплом с указанием степени)",
                            Number = 4,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("0097466c-9a6c-45e6-a9ad-edd28b1bd880"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("c661a885-5da9-4f8a-88f4-53a0aa5b14e0"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("925bd807-6454-411c-b2eb-64d520217533"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("92dcae70-6445-4c76-aecd-2865880fc1f9"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("b1a10260-e985-40ee-903a-24be51547c91"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("5e1a303c-cf50-4a03-b431-102650091e2a"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("1325d3ad-15ca-43c7-bd3e-3fc52efeac2a"),
                            IsRequired = true,
                            Name = "Язык преподавания",
                            Number = 2,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("54457869-0660-4fa8-ab93-03c49b176b2f"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("75a3c765-ded6-4289-a9cf-fbbaf490c04d"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("2b94e1fe-9e00-4b8f-97d1-824203905975"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("2ccad87f-28f1-4a23-8715-5112968d585c"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("8344dc65-e4fd-40b2-b707-77d1b5953e3b"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("b3d40368-a1a8-4004-ba6f-b03ad589e5c3"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("61ba9f35-2a66-4915-8f4b-666aa8404420"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("5ec5c1ea-3380-438f-ae2d-7e7fd1edee29"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("ae4bf04d-245f-4fdd-a6f8-1a41c83b2604"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("3cf0ebf6-abc3-4252-8d73-f0162e944604"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("cd2edf1c-10d0-4bed-9908-a025353ae4a3"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("e1342acd-727e-4c24-8d4d-ea9a03a52dac"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("8ac564ed-8caa-4680-87cb-97aeceaf5d1a"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("e0394b11-de23-4843-9083-8758660670c2")
                        },
                        new
                        {
                            Id = new Guid("ad27f10e-38f2-4f48-8122-f97c3aa8ed17"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("4011c437-591c-4ea4-ae96-2b851e424b43"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("42f5f763-5360-4bf8-b8ee-90843bcc6606"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("6f423038-ceb7-48d6-a9cb-d81c23a21c4a"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("876b4bbb-181f-4965-8fea-051071b6409a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("6b9c4e09-8a6d-4723-8555-4fad3ebefa6a"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 2,
                            TableId = new Guid("876b4bbb-181f-4965-8fea-051071b6409a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("702bc705-8407-48eb-bb3f-2785bfa1912c"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("876b4bbb-181f-4965-8fea-051071b6409a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("9efbfa9d-bfc5-47b0-a591-631898a7af6b"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("39722eba-75bf-4f6f-bfbc-9db9ed633a67"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("0340c06c-5f46-43a9-acf3-c7cbd9846300"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("3a76dfb3-59a4-4032-bffe-1de0bf44c1d8"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("911803d9-bd36-4679-aea1-2814facd5c3e"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("19ad6681-da2e-4424-81cb-83e32ea55ea7"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("901cb985-a809-483b-a1c0-945940927751"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("01c789cf-17cd-4524-9a70-3232929901db"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("bc1da0e8-e32d-4eb6-b1ff-38a812f39eac"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("ee775c9c-f324-40fb-b268-b2c90c4cc850"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("d11b734c-7666-4c86-9d09-d316ddc84aa6"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("01a6cf7c-8b0c-49a4-abd7-eb98629d36e5"),
                            IsRequired = true,
                            Name = "Статус",
                            Number = 4,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("8d9d50a0-1326-4d94-a3d8-b6d857b2a2c2"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("0267f748-56b4-4ce0-a572-31ea2414decf"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("e932fc2d-0b95-4ea6-ae08-2c4ffe59c8d4"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("0c2e1db1-faf9-4a7a-a1e4-5c98c119e712"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("b826d593-93c4-4212-a547-b9464acbeecf"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("3ea8611a-0ce9-4280-a68b-c79387a05ab5"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("75304386-e452-4aff-8f35-4db142533caa"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("38513fd7-cdbf-4d5f-a439-484530ab5302"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a"),
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("66fe5b29-a67e-4dfd-a622-81588a032238"),
                            Name = "Конкурсная работа",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            Name = "Профессиональное развитие",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 6
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9378d76-e072-4a42-a35d-1095e9ec8768"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("3d2db7e6-e669-45ee-ad06-025f01864c91"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("edb72171-8e70-4555-b6be-898d37c10772")
                        },
                        new
                        {
                            Id = new Guid("49ac1af8-5465-4aed-92ec-fe3f8de28f75"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("0c70b404-02ea-495b-b8fa-038cbe1c3d57"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "89007005050",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("331704d1-3181-4e14-884e-1f40fec48bad"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("a231a100-9911-4a44-9a4d-c33669adb70a"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("e6481124-ec7b-459c-99e1-2f3c98748b4a"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("2b5f4703-2cd5-41cd-a3d5-fba4cb37cefc"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("fecff796-3072-4bbe-82a3-d48baede4407"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("a5f95b64-8155-4c21-881d-e7615470acde"),
                            EditBlockId = new Guid("4bbaae6c-707a-42a1-9e11-1de1aeb75ae6"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической/научно-исследовательской деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            EditBlockId = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 11,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("c1caeab1-3aae-41b7-be40-850f2ed44b69"),
                            EditBlockId = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 12,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("cfdade7a-32c9-478c-8c4f-7d334da45ea3"),
                            EditBlockId = new Guid("3655b305-9889-466f-ab55-7623874267ee"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 13,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10")
                        },
                        new
                        {
                            Id = new Guid("f6a8c825-53bc-44ce-b387-235cc618b9d6"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 14,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("dc0a09bc-2390-478d-b5ae-f5a010669be0"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 15,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("9ec0b684-0a30-43d2-adfa-f8a505d80f3f"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 16,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("881194b6-56a1-4ade-9012-23a242549b30"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        },
                        new
                        {
                            Id = new Guid("1445c4ba-a522-41bd-881b-4134af4fe112"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("256fb01d-4e96-49de-ba9b-a84799255770")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04b9c43e-c907-4794-ba79-dbeea4b14cd9"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87")
                        },
                        new
                        {
                            Id = new Guid("c0d6b14b-f810-4a54-a96e-b624193f93c4"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("53fcd0c6-3993-412b-8be7-606593531a87")
                        },
                        new
                        {
                            Id = new Guid("8203fd55-e096-44d0-93b8-617da7c0f4c6"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("9ec0b684-0a30-43d2-adfa-f8a505d80f3f"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("93450311-e2e9-4cc0-903f-92e8664b6181"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("f6a8c825-53bc-44ce-b387-235cc618b9d6"),
                            IsAuto = true,
                            MaxValue = 6,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a2883a47-919a-4b07-ae2c-2d5a2840efca"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("dc0a09bc-2390-478d-b5ae-f5a010669be0"),
                            IsAuto = true,
                            MaxValue = 10,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("384a71cb-8100-4b22-9600-fd20d5aca9c4"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb")
                        },
                        new
                        {
                            Id = new Guid("82d58435-e19f-47ce-b456-45e42804b6fc"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940")
                        },
                        new
                        {
                            Id = new Guid("7f4f3385-8dbb-4416-8453-5ec3d09f0bd1"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за труды с грифом или на иностранном языке и без соавторства:",
                            Number = 8,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9")
                        },
                        new
                        {
                            Id = new Guid("1b391031-e591-4a05-b0ee-99f781280257"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом или на иностранном языке в соавторстве:",
                            Number = 9,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9")
                        },
                        new
                        {
                            Id = new Guid("58a06d67-4db6-4e55-a71b-79410e6651c6"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9")
                        },
                        new
                        {
                            Id = new Guid("3465675b-c9ec-4ec6-b13f-1f9ccb3ed8c4"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9")
                        },
                        new
                        {
                            Id = new Guid("58c207dc-cbe4-46c0-a465-3a9d74c9f4f8"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("876b4bbb-181f-4965-8fea-051071b6409a")
                        },
                        new
                        {
                            Id = new Guid("03892237-d852-4c26-afd8-6012443aad77"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("975ce6b0-9486-495b-aaa6-a0291d8f8632"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("36339742-f4eb-4c30-a540-9437896be036")
                        },
                        new
                        {
                            Id = new Guid("07d6b969-6835-46db-948c-1f31ef93e49f"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858")
                        },
                        new
                        {
                            Id = new Guid("bfe2b329-2246-4edb-ad31-7f6129317322"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229")
                        },
                        new
                        {
                            Id = new Guid("1b8160fb-55b9-487f-b32e-160aa476b449"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("881194b6-56a1-4ade-9012-23a242549b30"),
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("6f7dc4d5-fb01-49b6-850e-8b703b36ed5c"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("1445c4ba-a522-41bd-881b-4134af4fe112"),
                            IsAuto = true,
                            MaxValue = 12,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("e5a5c8cb-1343-41e2-a659-a630b6323a71"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 8,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3")
                        },
                        new
                        {
                            Id = new Guid("75a3a4d4-7f48-44ed-a820-d3b36b8ace64"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3")
                        },
                        new
                        {
                            Id = new Guid("9b786580-847e-4409-961e-3eba09070458"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda")
                        },
                        new
                        {
                            Id = new Guid("f42c7e01-9fa4-486f-8840-f104e29212b2"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a")
                        },
                        new
                        {
                            Id = new Guid("41d09ce3-f5f1-4e63-9e0b-cdd26d16c859"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("4cf40dff-5045-4845-bbb1-3d9fb716113f"),
                            IsAuto = false,
                            MaxValue = 15,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11cfb273-a9a4-4dcc-988e-df6bc48ae8e8"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("cc9af131-0082-4dcd-b883-a52a8c435aa9"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("89cc18ce-c4d2-4dfc-bdc9-91179e71ac80"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("f601769d-52f1-4b28-868e-3f564746fb81"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("fc0fdb42-6565-4141-96c8-5e492b32d852"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("eb97d985-136b-44e9-b840-6ba480401b0c"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("276fbea5-bf07-4b4e-b90c-ba8c14188b5d"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId", "ExpertId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e6b9a57-54f9-4d4a-a394-69ed17b1bc60"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("5f8dab2e-85bf-4bd5-9f4c-80290baf43ec"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("1a60ce30-3ab1-4da6-9e51-015f0b94fd76"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("0870ff75-d6df-4ab8-b8f5-89d0f4dac9e6"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("80618b41-e40b-4a2c-b282-66263e1ecf74"),
                            IsPrefilled = true,
                            Number = 6,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("4ca15ff2-fe58-4b4b-bbc4-8ae10e4c37db"),
                            IsPrefilled = true,
                            Number = 8,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("99357d1f-91f2-4b7d-9e99-3b785e2c9b40"),
                            IsPrefilled = true,
                            Number = 7,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("c84ee1fc-5f8a-4d98-8b42-bea241311156"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc")
                        },
                        new
                        {
                            Id = new Guid("dc838202-edd5-4228-9137-2785e9f42c10"),
                            IsPrefilled = true,
                            Number = 1,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        },
                        new
                        {
                            Id = new Guid("402c0dcf-8322-486d-a233-c8349f09ce9a"),
                            IsPrefilled = true,
                            Number = 2,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        },
                        new
                        {
                            Id = new Guid("8636e18e-99c9-4f99-9c3f-ffbfd5b57903"),
                            IsPrefilled = true,
                            Number = 3,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        },
                        new
                        {
                            Id = new Guid("1d5d064c-ab3c-4177-8aa7-5cc683eca015"),
                            IsPrefilled = true,
                            Number = 4,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        },
                        new
                        {
                            Id = new Guid("950b4fef-27b3-4e37-ad24-91bf3582f0a4"),
                            IsPrefilled = true,
                            Number = 5,
                            TableId = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c039e4c8-4683-44fc-a491-4c1ca809374c"),
                            FieldId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("9af52107-99ae-4740-96ac-486984818e9f"),
                            FieldId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("8199324d-f2f1-4e7b-bcbd-12f98414263b"),
                            FieldId = new Guid("70ea5770-08c0-4288-8dc7-a8703ef99acf"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("7fa628ca-8c6a-4f82-bf7d-6708c1f75905"),
                            FieldId = new Guid("c1caeab1-3aae-41b7-be40-850f2ed44b69"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("0544bf2c-cac9-48b5-80f5-8e42638f26d9"),
                            FieldId = new Guid("c1caeab1-3aae-41b7-be40-850f2ed44b69"),
                            Value = "Доктор наук"
                        },
                        new
                        {
                            Id = new Guid("cb425bd7-d2db-413b-a491-0af516a19c36"),
                            ColumnId = new Guid("c2191777-c244-4eab-a875-428946023a4a"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("3c4cb424-afb0-4a92-80c9-b3f13d7f414f"),
                            ColumnId = new Guid("c2191777-c244-4eab-a875-428946023a4a"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("17032a0c-e323-4ee6-aa28-dedd51b180e4"),
                            ColumnId = new Guid("c2191777-c244-4eab-a875-428946023a4a"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("fef0c01d-09c4-4861-8eaf-3e4c3df80c80"),
                            ColumnId = new Guid("ae4bf04d-245f-4fdd-a6f8-1a41c83b2604"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("9a6a6e26-3753-4ebb-990b-003e82c71ed9"),
                            ColumnId = new Guid("ae4bf04d-245f-4fdd-a6f8-1a41c83b2604"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("07867169-dda9-4845-816e-6e41135e9063"),
                            ColumnId = new Guid("ae4bf04d-245f-4fdd-a6f8-1a41c83b2604"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("8589b8d0-3b06-412b-af44-8c3e03ad7799"),
                            ColumnId = new Guid("6b9c4e09-8a6d-4723-8555-4fad3ebefa6a"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("862c5b5a-b4f7-4175-9be9-6f453766de6b"),
                            ColumnId = new Guid("6b9c4e09-8a6d-4723-8555-4fad3ebefa6a"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("373edd21-0f63-4ef3-9cb3-bf859152b6c9"),
                            ColumnId = new Guid("01a6cf7c-8b0c-49a4-abd7-eb98629d36e5"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("ef63a678-a6a9-42a8-9d04-f976554ceeb6"),
                            ColumnId = new Guid("01a6cf7c-8b0c-49a4-abd7-eb98629d36e5"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("fca2c589-0e9b-423d-8e5d-2d141b610bf5"),
                            ColumnId = new Guid("0267f748-56b4-4ce0-a572-31ea2414decf"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("ec9c4af0-b67d-43f2-9d42-83b870cedcb8"),
                            ColumnId = new Guid("0267f748-56b4-4ce0-a572-31ea2414decf"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("68f2ea37-9d8b-4e7d-805f-020114962e54"),
                            ColumnId = new Guid("0267f748-56b4-4ce0-a572-31ea2414decf"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("2a3b2438-9732-4e27-a896-162d159c672f"),
                            ColumnId = new Guid("0267f748-56b4-4ce0-a572-31ea2414decf"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("885a9481-b114-43fb-8fe4-97bf44865b13"),
                            ColumnId = new Guid("3ea8611a-0ce9-4280-a68b-c79387a05ab5"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("765d671b-5ad2-4b79-97ab-447a4f4fde4d"),
                            ColumnId = new Guid("3ea8611a-0ce9-4280-a68b-c79387a05ab5"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("7e653ab2-4e2e-4458-b87f-d02f7a68b14e"),
                            ColumnId = new Guid("3ea8611a-0ce9-4280-a68b-c79387a05ab5"),
                            Value = "Программы для ЭВМ и базы данных"
                        },
                        new
                        {
                            Id = new Guid("1ff83e82-d7a3-4883-9cae-e665b6342e61"),
                            ColumnId = new Guid("3ea8611a-0ce9-4280-a68b-c79387a05ab5"),
                            Value = "Промышленный образец"
                        },
                        new
                        {
                            Id = new Guid("f89e06f9-1490-48e2-8d86-cdd8d05d42c0"),
                            ColumnId = new Guid("cd2edf1c-10d0-4bed-9908-a025353ae4a3"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("d1ca5133-5783-4ed7-902c-c1113b06f4c1"),
                            ColumnId = new Guid("cd2edf1c-10d0-4bed-9908-a025353ae4a3"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("dffff950-9cce-438d-84c6-1440594c89ee"),
                            ColumnId = new Guid("4011c437-591c-4ea4-ae96-2b851e424b43"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("4f387f40-0e1f-4525-a809-891d66afd1b0"),
                            ColumnId = new Guid("4011c437-591c-4ea4-ae96-2b851e424b43"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("b048460f-1837-4537-9a47-429ffbaade3b"),
                            ColumnId = new Guid("19ad6681-da2e-4424-81cb-83e32ea55ea7"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("17c50aa9-5afb-47da-98d9-529d60e943b5"),
                            ColumnId = new Guid("19ad6681-da2e-4424-81cb-83e32ea55ea7"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("7e9d2439-9987-41ee-80ee-71c6a528a4f9"),
                            ColumnId = new Guid("901cb985-a809-483b-a1c0-945940927751"),
                            Value = "РИНЦ"
                        },
                        new
                        {
                            Id = new Guid("37398c23-d2b0-4cd4-bccf-9a73658ca8a6"),
                            ColumnId = new Guid("901cb985-a809-483b-a1c0-945940927751"),
                            Value = "ВАК (К2-К3)"
                        },
                        new
                        {
                            Id = new Guid("9f6aa5ea-349b-462e-91eb-e81b809ff421"),
                            ColumnId = new Guid("901cb985-a809-483b-a1c0-945940927751"),
                            Value = "МБД (Q3-Q4)"
                        },
                        new
                        {
                            Id = new Guid("2464152b-2ff0-4d31-9491-2afcda5d99b3"),
                            ColumnId = new Guid("901cb985-a809-483b-a1c0-945940927751"),
                            Value = "ВАК (К1), МБД (Q1-Q2)"
                        },
                        new
                        {
                            Id = new Guid("5ee88b7c-8a6c-42b3-a937-a51159d2065b"),
                            ColumnId = new Guid("1325d3ad-15ca-43c7-bd3e-3fc52efeac2a"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("8325d568-1a89-4808-bbbe-f215525b2d58"),
                            ColumnId = new Guid("1325d3ad-15ca-43c7-bd3e-3fc52efeac2a"),
                            Value = "Английский"
                        },
                        new
                        {
                            Id = new Guid("0222a1f4-6c33-434b-a4fb-5b17a63d0751"),
                            ColumnId = new Guid("1325d3ad-15ca-43c7-bd3e-3fc52efeac2a"),
                            Value = "Другой"
                        },
                        new
                        {
                            Id = new Guid("a46057d7-bd61-4431-9c55-06eca904027f"),
                            ColumnId = new Guid("8ac564ed-8caa-4680-87cb-97aeceaf5d1a"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("4519e656-f41b-41a6-99b8-6b9e92b14d24"),
                            ColumnId = new Guid("8ac564ed-8caa-4680-87cb-97aeceaf5d1a"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("ceaae7e2-cc5b-429f-95a9-0952e412d91e"),
                            ColumnId = new Guid("39722eba-75bf-4f6f-bfbc-9db9ed633a67"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("0049ac25-a548-4abd-a897-1867fbb1b67e"),
                            ColumnId = new Guid("39722eba-75bf-4f6f-bfbc-9db9ed633a67"),
                            Value = "Нет"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c85a69b-aeeb-4e85-aece-2111ee3f21cc"),
                            EditBlockId = new Guid("66fe5b29-a67e-4dfd-a622-81588a032238"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("36339742-f4eb-4c30-a540-9437896be036"),
                            EditBlockId = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической/научно-исследовательской деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период деятельности",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("0868fc00-49d6-4eb6-b121-20ca952ec858"),
                            EditBlockId = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("45b480d1-ca40-4cc9-a05b-50a6b170e5ea"),
                            EditBlockId = new Guid("62731439-799f-4932-9fd1-6036afabec1d"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("53fcd0c6-3993-412b-8be7-606593531a87"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("81a623f2-eb3f-4acb-8b16-28c7da3ea5cb"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание (победители и призеры всероссийских имеждународных соревнований, конкурсов, олимпиад; лауреаты международных премий, премий Российской Федерации, региональных премий (за исключением внутривузовских конкурсов), за весь период научно-педагогической деятельности",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("edd9d9d9-9b87-4f2d-83cc-5ffc73c51ba9"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Монографии, учебники, учебные и учебно-методические пособия с грифами и без грифов УМО, Министерств РФ или государственных академий наук, либо аналогичных работы на иностранном языке без грифов УМО, изданные типографским способом за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("876b4bbb-181f-4965-8fea-051071b6409a"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("9f761e48-8ba2-4de8-90cd-2404498ae940"),
                            EditBlockId = new Guid("b8be6635-d51e-4508-93c3-2f3a3d5a1d92"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("3c14d209-bb43-4e71-a67c-0557963b7229"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("30adce4d-d0a5-45fb-a73e-5356004987d3"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("eb84e29f-17be-4ae2-b842-4929b8f65dda"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("ae9f0af6-652d-42a2-8bce-4559f6cc8e9a"),
                            EditBlockId = new Guid("9fff5f41-a802-4ece-b7c3-337f78e9d8d7"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d60671d3-9f36-41f0-80ca-54193de4817e"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7eebb55e-c1dd-4eae-8ce5-6e936d30741a"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("256fb01d-4e96-49de-ba9b-a84799255770"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("4dabe178-165a-4ac1-9e13-cf7617a05d10"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("e0394b11-de23-4843-9083-8758660670c2"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("edb72171-8e70-4555-b6be-898d37c10772"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("190d5097-837b-4d36-9396-7f4b9a59cbdc"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExpertCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExpertCategoryId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.Photo", "CropPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "CropPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServerApp.Data.Entities.Photo", "FullPhoto")
                        .WithOne()
                        .HasForeignKey("ApplicationForm", "FullPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId");

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("CropPhoto");

                    b.Navigation("FullPhoto");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ApplicationFormExpert", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "UserInfo")
                        .WithMany("ApplicationFormExperts")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Expert")
                        .WithMany("Marks")
                        .HasForeignKey("ExpertId");

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Expert");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Photo", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Photos")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Category", "ExpertCategory")
                        .WithMany("Experts")
                        .HasForeignKey("ExpertCategoryId");

                    b.Navigation("ExpertCategory");
                });

            modelBuilder.Entity("ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Photos");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("UserInfo", b =>
                {
                    b.Navigation("ApplicationFormExperts");

                    b.Navigation("Applications");

                    b.Navigation("Marks");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
