// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902181955_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b41a4320-f52b-4c9f-ada2-a42ae0b14db8"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            EditBlocksId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            EditBlocksId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            EditBlocksId = new Guid("b41a4320-f52b-4c9f-ada2-a42ae0b14db8"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            EditBlocksId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("43591779-e109-4d5d-a32d-c192ce494f91"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("781ff860-3103-402e-9626-6e4a33ff72f2"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("20745819-ddcf-4426-aa8c-0e97a8073432"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("eb2713d1-7c99-45d9-914d-1566cff0c69b"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("db94d2d4-3bc7-4fdc-8687-49ff8110514e"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("4a7e1b72-2143-442a-82a9-f4c480e76f0d"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("288e5044-5d10-477f-b19d-f828e2f74cfd"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("a0b6a59e-c476-46dc-88c3-c2eed537c852"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("f3acc764-27d9-47c8-9912-8e4743e0cb9c"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("14fbb388-dac0-45a1-a658-42a1b8c2c592"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("e9b5433f-0212-45a7-adee-1184ed374fd3"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("33dcad3c-c746-46d1-aac8-265edb286e65"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("8aaebaac-ec31-4e30-a2a0-213d6c665f7c"),
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946")
                        },
                        new
                        {
                            FieldsId = new Guid("2addba9d-337f-4feb-8954-561d2d04bbdf"),
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931")
                        },
                        new
                        {
                            FieldsId = new Guid("e8d4c912-afcf-42db-835e-0a5796d13c82"),
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931")
                        },
                        new
                        {
                            FieldsId = new Guid("667a5fe9-f7a7-4bea-9b0a-a4af46df7c51"),
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931")
                        },
                        new
                        {
                            FieldsId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358")
                        },
                        new
                        {
                            FieldsId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda")
                        },
                        new
                        {
                            FieldsId = new Guid("d00428b6-2676-4ca1-bc78-53334e74d475"),
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda")
                        },
                        new
                        {
                            FieldsId = new Guid("321a128f-576c-4e82-91d3-ce8327a225bf"),
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            TablesId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            TablesId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            TablesId = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            TablesId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            TablesId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            TablesId = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            TablesId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            TablesId = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            TablesId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            TablesId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            TablesId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            TablesId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            TablesId = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            TablesId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            TablesId = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            TablesId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            TracksId = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            TracksId = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("5d8a2ec1-9d0d-43aa-a636-e0cb288d8722")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("ed98d7cd-8f14-472c-b725-7d1adf23b7f0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("22fe6343-629c-40c5-8165-d7edc4061f84")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("05adb403-8bbf-4fc1-814a-987ba382a270")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("9d82981c-8438-4eca-90d9-7e24d2b43ad1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("9b0ec3d4-3827-4e51-bde4-414d7150debe")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            MarksId = new Guid("e9682bc4-3a63-4afd-8eaa-73b4096b0d8e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            MarksId = new Guid("276856a4-e394-4e13-9a43-4486e62e79e4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            MarksId = new Guid("175ea51c-c828-4f43-a7d2-8c09efa48d31")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            MarksId = new Guid("7f78b446-6492-41b0-ae63-152bb5484f77")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            MarksId = new Guid("e864a005-e336-4345-b740-c1eeb004b3b0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            MarksId = new Guid("8dadf573-ad84-465a-8b8b-8fc5ca90e915")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            MarksId = new Guid("67aa62eb-355b-4c0d-ac60-09869c52298e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            MarksId = new Guid("ea206d2f-e257-4cf7-aae2-f1bdd77f3ef3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            MarksId = new Guid("e1520add-45e6-481c-b680-d8c0c37ad602")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("67aa62eb-355b-4c0d-ac60-09869c52298e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("ea206d2f-e257-4cf7-aae2-f1bdd77f3ef3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("2cf35850-ced4-41af-b8a7-64bb4a420b00")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("092c2512-d873-4c5b-84fa-083b9e58a123")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("7ac07d54-5f7f-4ca0-b9a7-d176ad878718")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("ebbbf435-e021-4dab-b464-62e4e8f2400c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            MarksId = new Guid("be5a0e95-e6c4-418e-9222-2dc2295a2695")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            MarksId = new Guid("e1520add-45e6-481c-b680-d8c0c37ad602")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            MarksId = new Guid("1f75e6af-09af-49da-8141-795133420824")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            MarksId = new Guid("681f1e1f-29cd-4914-b70a-c24c607830ca")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            MarksId = new Guid("5f01c809-cc61-4359-a213-e54d18156cd4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            MarksId = new Guid("8158ee78-be9d-484f-94ba-f9a7a72dee7a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6b798d8a-044c-4881-af61-bd5d4e4fdd55",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "1a26c783-ee4e-4fa2-80ac-402122dab879",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "c264836d-cb5e-4392-9d05-a47de8fd6b0b",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "1508130a-5f51-4385-b3cf-09d00ff0aa56",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "682c307d-6ea7-4c08-9ef9-19b1dadb91da",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16bf4634-c2db-42b2-b030-7f87dbe35a4b"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("785ed1d3-eebf-4c26-bb31-059d4391e423"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("b235602f-ac21-466f-85b4-a52c5f3d5712"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("3e24c349-5d4c-4b6f-bf03-3f506502990e"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("7376ca79-e3e4-4757-903a-588ebd6f9f53"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("78e29f30-2b9b-4e7b-981d-5a8cabb04e96"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdf2cccc-44a7-4235-b5ca-3f29d30c28cb"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("ea781c6b-441d-4ac6-8501-6d58089e0317"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc0de23f-06df-4a5b-9e48-616488a7cbf8"),
                            ColumnId = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("c9066d9a-0fa8-4b9d-b588-fb789d37fe56"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("9b0af40f-74a5-4f5f-a04d-68d132114425"),
                            ColumnId = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("c9066d9a-0fa8-4b9d-b588-fb789d37fe56")
                        },
                        new
                        {
                            Id = new Guid("d695d1c1-3972-4ccb-9e54-cb7ddab450ab"),
                            ColumnId = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("f16f0e19-6fe6-495e-96c4-a90f8ee4f0e5"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("b99f3ddc-e822-4868-9979-4ea4959bed88"),
                            ColumnId = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("f16f0e19-6fe6-495e-96c4-a90f8ee4f0e5")
                        },
                        new
                        {
                            Id = new Guid("e3f9350d-d5c6-48b8-b611-963a0cf4dad9"),
                            ColumnId = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1e351632-bfe7-4229-a429-509bb457ed7e"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("78f70788-fb64-434c-8378-591f682b279f"),
                            ColumnId = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1e351632-bfe7-4229-a429-509bb457ed7e")
                        },
                        new
                        {
                            Id = new Guid("811ae8c9-7ff7-4e29-ae57-d24d0ecbede5"),
                            ColumnId = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7cc23c97-ce82-40f0-aa87-fcdece045cef"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("b363fe85-b1a9-41a4-b0b9-5691e0cf9b17"),
                            ColumnId = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7cc23c97-ce82-40f0-aa87-fcdece045cef")
                        },
                        new
                        {
                            Id = new Guid("0c5c8425-9427-43f9-b6e1-324b18fe5a37"),
                            ColumnId = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("3edfb324-54b3-4e96-894f-358c21d9d44a"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("e810d2e4-0cc3-4571-9137-6f2386de4d85"),
                            ColumnId = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("3edfb324-54b3-4e96-894f-358c21d9d44a")
                        },
                        new
                        {
                            Id = new Guid("705d969e-20fc-45a2-a3d3-619dd2b2266d"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("8f65a8cb-cceb-4053-8368-f9249c0554bf"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("3dbec125-538b-433e-800a-5d714f90218e"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("8f65a8cb-cceb-4053-8368-f9249c0554bf")
                        },
                        new
                        {
                            Id = new Guid("0c9bf7a2-2c8c-4798-891c-16e4f5955851"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4eac6312-5e12-4781-9653-5a6d54a043ae"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("f0d931f3-0447-42f5-8139-1edb63135d4d"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4eac6312-5e12-4781-9653-5a6d54a043ae")
                        },
                        new
                        {
                            Id = new Guid("5d7f8f6a-a728-49e1-9612-d854664cc4ac"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("91797474-6ec3-4ab7-bab7-b378b725baf3"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("b53f7dca-6416-4394-a6f9-93f9f7cebee9"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("91797474-6ec3-4ab7-bab7-b378b725baf3")
                        },
                        new
                        {
                            Id = new Guid("06909968-185d-46be-80db-e28c32e379c5"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("427a6c1e-079d-473d-aa98-3eb6bd214ddb"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("d7376611-f2dc-45f3-b921-6d6b14fab562"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("427a6c1e-079d-473d-aa98-3eb6bd214ddb")
                        },
                        new
                        {
                            Id = new Guid("5077d645-c87e-495c-b465-ef7aa8605cdb"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("76cdb0f0-32c1-470c-980a-cc0db0fe5c22"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("5e99f4fa-e1d6-4124-9f23-f16a1120072c"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("76cdb0f0-32c1-470c-980a-cc0db0fe5c22")
                        },
                        new
                        {
                            Id = new Guid("d35bc2ed-1e75-4831-80e1-96918185f3ed"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ff5e00c0-75ae-44fc-9325-6461d95b0241"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("8065f7d7-1480-4a82-b10d-97a7d423e653"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ff5e00c0-75ae-44fc-9325-6461d95b0241")
                        },
                        new
                        {
                            Id = new Guid("2b1114c0-479a-4463-8d72-2365f1255f39"),
                            ColumnId = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("86eaf612-110f-4e39-b296-94623985e5c8"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("bd1ea790-1f12-4193-946d-019455cacd48"),
                            ColumnId = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("86eaf612-110f-4e39-b296-94623985e5c8")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("080c7992-ff22-4048-8601-8d4d04b0c849"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("9447cf9b-427d-45ec-a25f-209818067970"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("9514792b-6949-4e6b-96a6-7ca0b14f9a65"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("0c77875f-70c7-4901-900c-d6aaee44f8ca"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("ebfd4eca-6c20-46a9-90e7-f0f15b46a99f"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("5d14fb5a-e5d6-479d-9db9-c9293f17fd4f"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("0624fef2-7034-4ab1-9650-12094515b05f"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("8a3b2570-6afe-4d3f-bf16-49029f2802bd"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("96c78516-d91f-41f6-8acb-b6ce6426f356"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("640b761f-29bd-483b-a3d7-d31e6a045558"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("46b36ae0-6664-4ab9-b4aa-f0b4ae0757e4"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("73a8baf9-c386-44fa-8463-4a73a4546001"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("a5ddc26f-1c8d-410d-8817-edc0b4bea15c"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("894c203a-8fb8-4216-b836-56ead82181fc"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("506e7678-7c24-4069-8d43-d573c2c60c99"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("e3621e8f-6e5c-409e-b9b1-99e00a383734"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("559dd498-ebe4-4b62-b876-99499d4046a7"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("488c472c-3753-4950-9b66-dbd84f800a31"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("d29c7e95-bced-4d74-ae32-7094001385ac"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("3f85b228-e8f3-457a-a32a-c8122ac3e013"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("fdbc47f7-6386-41ef-b9f2-3b3286396cf4"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("7ae3dda8-3385-4a6f-a160-64062dfef51a"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("955df40b-71f9-4320-9565-dc68fcdf2d22"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("5d623444-e76c-419e-ab3d-0a05574cc266"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("0dd22a46-3f20-43ee-9873-108ddee65535"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("6a8385c6-8bbf-4ff0-943a-535402e487b6"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("6fce3ccd-06cb-4b46-9951-fbe245aa0b4b")
                        },
                        new
                        {
                            Id = new Guid("afe712bf-7e44-4834-a75b-eaa8525608b7"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("f4e4a5cd-5470-4087-9aa7-edec301cc10d"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("02bcf1fb-a261-474e-8ac4-cf828a031887"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("80557df3-a701-4573-b901-480d5042fdda"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("1a850a6b-979c-4781-8c54-1f1ece684813"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("b3fdfbe0-446d-4d6e-98a1-2c3c6e666221"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("42d367df-dd84-488e-aafe-f3f190c837ba"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("5a81d2d7-72ca-4f79-9239-1ce12fcdc8ca"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("8024a9a4-7638-42a1-9f76-73c6b22610de"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("eac05188-5f31-4ebe-824b-b559b13c4845"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("0f9c2953-01ce-4342-8f1e-70d10f3787c6"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("0f9599d5-2fea-4ac1-beb5-8a788466f7d0"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("8e3e8452-a196-40e2-a71e-7d679aa7b996"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("07880db8-cfd4-4300-818b-dda26b368935"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("c376d73f-b11f-43b0-a52a-be17f6403496"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("462d3f30-52a9-47d2-8ca9-e2659d28131a"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("9c96d8a4-e753-43e8-8d3d-699485113d73"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("9abe2b37-f256-474c-be79-2fd35841e609"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("7608aa0a-e76c-4aa3-b3c4-61068619cb07"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("0eb4a679-67a0-49d5-96de-4d010801a10d"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("59c8e126-e97e-4309-aa49-c71f80228585"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("27fb9af0-88f0-4a51-8cd6-bfd3d99e78cf"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("d14767c7-660b-4c61-805d-2a2ee1511741"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("bb9c44f1-c526-45f3-83cc-54413fb58801"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("b2b5f5d7-256c-46cf-9295-9ff9b013c764"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("a9f176a7-2ff4-4dd4-99e0-1866065adac3"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("9f4be3aa-7be2-4767-96b7-2997bc9acd3d"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("6b9340dc-754c-4066-9f88-831c633247ce"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("ee0cc318-5ae7-4739-8da3-fa033ac700fe"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39"),
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("f0ac3d33-233b-41c5-8ba5-0fdf237bbbb1"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39"),
                            ValueTypeId = new Guid("db4e477b-cb9c-4edb-88ba-2bcfe319f860")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b41a4320-f52b-4c9f-ada2-a42ae0b14db8"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43591779-e109-4d5d-a32d-c192ce494f91"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("781ff860-3103-402e-9626-6e4a33ff72f2"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("c39985f6-86c4-49f5-ac6f-e8e8d41430a1")
                        },
                        new
                        {
                            Id = new Guid("20745819-ddcf-4426-aa8c-0e97a8073432"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("eb2713d1-7c99-45d9-914d-1566cff0c69b"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("db94d2d4-3bc7-4fdc-8687-49ff8110514e"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("4a7e1b72-2143-442a-82a9-f4c480e76f0d"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("288e5044-5d10-477f-b19d-f828e2f74cfd"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("a0b6a59e-c476-46dc-88c3-c2eed537c852"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("f3acc764-27d9-47c8-9912-8e4743e0cb9c"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("14fbb388-dac0-45a1-a658-42a1b8c2c592"),
                            EditBlockId = new Guid("d18547cf-8f6f-421b-8c34-2376d7625a3d"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("e9b5433f-0212-45a7-adee-1184ed374fd3"),
                            EditBlockId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            EditBlockId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("33dcad3c-c746-46d1-aac8-265edb286e65"),
                            EditBlockId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("8aaebaac-ec31-4e30-a2a0-213d6c665f7c"),
                            EditBlockId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f")
                        },
                        new
                        {
                            Id = new Guid("2addba9d-337f-4feb-8954-561d2d04bbdf"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("e8d4c912-afcf-42db-835e-0a5796d13c82"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("667a5fe9-f7a7-4bea-9b0a-a4af46df7c51"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("d00428b6-2676-4ca1-bc78-53334e74d475"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        },
                        new
                        {
                            Id = new Guid("321a128f-576c-4e82-91d3-ce8327a225bf"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d8a2ec1-9d0d-43aa-a636-e0cb288d8722"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22")
                        },
                        new
                        {
                            Id = new Guid("ed98d7cd-8f14-472c-b725-7d1adf23b7f0"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22")
                        },
                        new
                        {
                            Id = new Guid("22fe6343-629c-40c5-8165-d7edc4061f84"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("667a5fe9-f7a7-4bea-9b0a-a4af46df7c51"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("05adb403-8bbf-4fc1-814a-987ba382a270"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("2addba9d-337f-4feb-8954-561d2d04bbdf"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("9d82981c-8438-4eca-90d9-7e24d2b43ad1"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("e8d4c912-afcf-42db-835e-0a5796d13c82"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("9b0ec3d4-3827-4e51-bde4-414d7150debe"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284")
                        },
                        new
                        {
                            Id = new Guid("e9682bc4-3a63-4afd-8eaa-73b4096b0d8e"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2")
                        },
                        new
                        {
                            Id = new Guid("276856a4-e394-4e13-9a43-4486e62e79e4"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da")
                        },
                        new
                        {
                            Id = new Guid("175ea51c-c828-4f43-a7d2-8c09efa48d31"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da")
                        },
                        new
                        {
                            Id = new Guid("7f78b446-6492-41b0-ae63-152bb5484f77"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da")
                        },
                        new
                        {
                            Id = new Guid("e864a005-e336-4345-b740-c1eeb004b3b0"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da")
                        },
                        new
                        {
                            Id = new Guid("8dadf573-ad84-465a-8b8b-8fc5ca90e915"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d")
                        },
                        new
                        {
                            Id = new Guid("67aa62eb-355b-4c0d-ac60-09869c52298e"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("ea206d2f-e257-4cf7-aae2-f1bdd77f3ef3"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607")
                        },
                        new
                        {
                            Id = new Guid("e1520add-45e6-481c-b680-d8c0c37ad602"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6")
                        },
                        new
                        {
                            Id = new Guid("2cf35850-ced4-41af-b8a7-64bb4a420b00"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c")
                        },
                        new
                        {
                            Id = new Guid("092c2512-d873-4c5b-84fa-083b9e58a123"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("d00428b6-2676-4ca1-bc78-53334e74d475"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("7ac07d54-5f7f-4ca0-b9a7-d176ad878718"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("321a128f-576c-4e82-91d3-ce8327a225bf"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("ebbbf435-e021-4dab-b464-62e4e8f2400c"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8")
                        },
                        new
                        {
                            Id = new Guid("be5a0e95-e6c4-418e-9222-2dc2295a2695"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8")
                        },
                        new
                        {
                            Id = new Guid("1f75e6af-09af-49da-8141-795133420824"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491")
                        },
                        new
                        {
                            Id = new Guid("681f1e1f-29cd-4914-b70a-c24c607830ca"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69")
                        },
                        new
                        {
                            Id = new Guid("5f01c809-cc61-4359-a213-e54d18156cd4"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("8158ee78-be9d-484f-94ba-f9a7a72dee7a"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c68a89d0-5cb5-459b-bd4e-9dcf5c89b946"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a992fefe-d9fb-43e6-bab9-c80a3a9f8931"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("2d609b7c-6855-4d5e-a7fb-fb485fa4dc98"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("9c51a23e-9ac5-4a5d-8134-4e6488027358"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("28cefca6-6bf2-4db7-9863-dffd10db4eda"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("e03fad0f-4c07-4b08-92ad-a14bcc7c75d4"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("44b539cc-5665-4c6a-88f1-4a26d17fc15f"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9066d9a-0fa8-4b9d-b588-fb789d37fe56"),
                            IsPrefilled = true,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            Id = new Guid("f16f0e19-6fe6-495e-96c4-a90f8ee4f0e5"),
                            IsPrefilled = true,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            Id = new Guid("1e351632-bfe7-4229-a429-509bb457ed7e"),
                            IsPrefilled = true,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            Id = new Guid("7cc23c97-ce82-40f0-aa87-fcdece045cef"),
                            IsPrefilled = true,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            Id = new Guid("3edfb324-54b3-4e96-894f-358c21d9d44a"),
                            IsPrefilled = true,
                            TableId = new Guid("0489818b-a189-4670-934b-d373d37be979")
                        },
                        new
                        {
                            Id = new Guid("8f65a8cb-cceb-4053-8368-f9249c0554bf"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("4eac6312-5e12-4781-9653-5a6d54a043ae"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("91797474-6ec3-4ab7-bab7-b378b725baf3"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("427a6c1e-079d-473d-aa98-3eb6bd214ddb"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("76cdb0f0-32c1-470c-980a-cc0db0fe5c22"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("ff5e00c0-75ae-44fc-9325-6461d95b0241"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        },
                        new
                        {
                            Id = new Guid("86eaf612-110f-4e39-b296-94623985e5c8"),
                            IsPrefilled = true,
                            TableId = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86b05b7e-b27a-43b3-a807-dcb6be33a797"),
                            FieldId = new Guid("e9b5433f-0212-45a7-adee-1184ed374fd3"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("ee5d9314-8639-4fd3-86e7-ee6bdda9c717"),
                            FieldId = new Guid("e9b5433f-0212-45a7-adee-1184ed374fd3"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("58972e79-1bfa-459e-8f4b-037113fcd595"),
                            FieldId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("b8d0e79c-7781-4e45-9c34-7024f0a95c41"),
                            FieldId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("9a8c285d-3e7a-4653-85ca-a170d8aabc5c"),
                            FieldId = new Guid("2397ba4e-1f9d-40b8-b20b-caa5c826f998"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("f81e55a5-8dc9-4e28-a67b-a59c5b8d98c8"),
                            ColumnId = new Guid("9514792b-6949-4e6b-96a6-7ca0b14f9a65"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("a61e8518-d691-4546-9c72-6d07252a7d52"),
                            ColumnId = new Guid("9514792b-6949-4e6b-96a6-7ca0b14f9a65"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("5d37a117-70e2-4b12-b220-440a41bfc937"),
                            ColumnId = new Guid("9514792b-6949-4e6b-96a6-7ca0b14f9a65"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("1d42284b-bf80-443a-90cf-c1af79ecac05"),
                            ColumnId = new Guid("7ae3dda8-3385-4a6f-a160-64062dfef51a"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("076b72a9-b0a9-4324-bfb5-3e7de09a7fd9"),
                            ColumnId = new Guid("7ae3dda8-3385-4a6f-a160-64062dfef51a"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("0c2fdd18-1170-49c8-b552-c1b10be0b660"),
                            ColumnId = new Guid("7ae3dda8-3385-4a6f-a160-64062dfef51a"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("2ff77d6b-f536-4722-b377-7e97385d6b17"),
                            ColumnId = new Guid("1a850a6b-979c-4781-8c54-1f1ece684813"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("2f53926f-b36e-413c-b519-e0de74cf36bf"),
                            ColumnId = new Guid("1a850a6b-979c-4781-8c54-1f1ece684813"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("a6f7ddc8-7327-477b-b801-1007526ff8c4"),
                            ColumnId = new Guid("0eb4a679-67a0-49d5-96de-4d010801a10d"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("252b0dbd-7d41-475a-996a-8c0ff0d6a084"),
                            ColumnId = new Guid("0eb4a679-67a0-49d5-96de-4d010801a10d"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("5664b315-9c2e-44fd-bd26-7c59b68e5662"),
                            ColumnId = new Guid("27fb9af0-88f0-4a51-8cd6-bfd3d99e78cf"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("add48b77-cc15-4dab-8207-5a1679b228c8"),
                            ColumnId = new Guid("27fb9af0-88f0-4a51-8cd6-bfd3d99e78cf"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("3ce48012-79cd-4918-bf74-43ba54a13082"),
                            ColumnId = new Guid("27fb9af0-88f0-4a51-8cd6-bfd3d99e78cf"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("d1d149b2-be8f-4789-8678-27b58204c296"),
                            ColumnId = new Guid("a9f176a7-2ff4-4dd4-99e0-1866065adac3"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("0b6173a8-9fb3-4f71-acb4-644115d361a6"),
                            ColumnId = new Guid("a9f176a7-2ff4-4dd4-99e0-1866065adac3"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("6dbfdd34-bae1-4b3b-b28b-fb81bd831eb3"),
                            ColumnId = new Guid("a9f176a7-2ff4-4dd4-99e0-1866065adac3"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("03541a4d-775d-4f16-b8f3-a93b1d8ab9ea"),
                            ColumnId = new Guid("5d623444-e76c-419e-ab3d-0a05574cc266"),
                            Value = "Да"
                        },
                        new
                        {
                            Id = new Guid("8bedb49e-137d-4aad-bc1a-4b7eec2503ba"),
                            ColumnId = new Guid("5d623444-e76c-419e-ab3d-0a05574cc266"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("b523c587-d137-4b6d-8e39-b3d52bcff0ac"),
                            ColumnId = new Guid("f4e4a5cd-5470-4087-9aa7-edec301cc10d"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("6741961a-2d57-4d41-af13-f1f243939559"),
                            ColumnId = new Guid("f4e4a5cd-5470-4087-9aa7-edec301cc10d"),
                            Value = "Иностранный"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51b889c6-ed32-4f84-9d31-cb085e311607"),
                            EditBlockId = new Guid("b41a4320-f52b-4c9f-ada2-a42ae0b14db8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("2bb68702-b894-4bdd-a66b-71098acb0ae6"),
                            EditBlockId = new Guid("b41a4320-f52b-4c9f-ada2-a42ae0b14db8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("d06ca757-5eda-4bb2-a6dc-a2d844328c22"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("d7c23daa-89cc-4f12-90bb-948bea58e284"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("389fc2ca-8bf8-4a89-bc92-d0e033f7c80b"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("f6694a72-0ba3-44b6-ab07-5e84f7fc94da"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("e7d12b9c-73a9-4134-8034-4d3ea6f9e59d"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("0658ac3a-6678-476c-bb58-c4a531fc11c2"),
                            EditBlockId = new Guid("7a84b636-4327-4c39-851e-1258f7149167"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("d9d085b1-1fba-4b83-b5ed-ad1192a1c00c"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("0489818b-a189-4670-934b-d373d37be979"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("20ac892e-3901-48a4-88fa-1d7d0d753cf8"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("d725a717-91f1-4080-bc96-ec9f552ec491"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("04e46bb3-964f-4e25-903f-07bed1af7c69"),
                            EditBlockId = new Guid("a8046683-88f1-441f-a68e-c39f9090fe32"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("7dd3e212-cff4-4098-8a1b-3de2d104ff39"),
                            EditBlockId = new Guid("65b1e836-6225-45d0-98bf-fae2fa414aeb"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92a55c26-bd17-4cfd-9049-959d9831b22f"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("a5c144b0-6d69-4504-9b7a-253c31569089"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d4d2dc-cec1-4645-9e74-81880967f4dd"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("31979aa8-602a-4d37-9b50-65bf5d80732f"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("6fce3ccd-06cb-4b46-9951-fbe245aa0b4b"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("c39985f6-86c4-49f5-ac6f-e8e8d41430a1"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("db4e477b-cb9c-4edb-88ba-2bcfe319f860"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
