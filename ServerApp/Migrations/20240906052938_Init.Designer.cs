// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApp.Data;

#nullable disable

namespace ServerApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240906052938_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.Property<Guid>("EditBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("EditBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("EditBlockTrack");

                    b.HasData(
                        new
                        {
                            EditBlocksId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            EditBlocksId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            EditBlocksId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            EditBlocksId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            EditBlocksId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            EditBlocksId = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            EditBlocksId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        });
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.Property<Guid>("FieldsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldsId", "MarkBlocksId");

                    b.HasIndex("MarkBlocksId");

                    b.ToTable("FieldMarkBlock");

                    b.HasData(
                        new
                        {
                            FieldsId = new Guid("d5072e5c-6ef9-4b62-a0f4-ca92343d093d"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("d0271f62-c2c6-4a6f-bbb2-f3b40f388ba3"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("a7513e78-1e94-48ec-bbd1-47efeb6f3bea"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("bb903c46-6ffd-42a1-9ab0-6256ae438d6e"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("c6d0f695-73dd-48fb-b3ed-b3421cd7c79f"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("80dc5ec4-2ce7-4e53-b2ec-d2923a0c46cc"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("01527c4b-a1d8-4620-91da-60a867ae538e"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("f991abda-a04e-4648-8468-b54ca968953a"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("62c99fc4-b287-4f82-9ece-939ba4cd6e94"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("1e7b1124-c460-4e71-9dd2-1a93e6cc24e9"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("d8ef5c3c-8af5-4cc1-87e4-8742c7a1a7fc"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("3fd96e96-ef9d-4efe-9edd-9acfc035da7e"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("37a82009-2a46-46ae-8319-ed476a4e740d"),
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb")
                        },
                        new
                        {
                            FieldsId = new Guid("943863f4-7daf-4da9-876e-33e377c0bc52"),
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032")
                        },
                        new
                        {
                            FieldsId = new Guid("0fa97f28-f919-430f-9afb-574519ccee08"),
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032")
                        },
                        new
                        {
                            FieldsId = new Guid("a96e1cbb-3bcd-4a44-b342-71127949ccfc"),
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032")
                        },
                        new
                        {
                            FieldsId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0")
                        },
                        new
                        {
                            FieldsId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4")
                        },
                        new
                        {
                            FieldsId = new Guid("56abbb10-2bba-4bc9-b26c-9d38aff6994f"),
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4")
                        },
                        new
                        {
                            FieldsId = new Guid("79bc1a50-a845-4502-9889-cd39e668e016"),
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4")
                        });
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TablesId");

                    b.HasIndex("TablesId");

                    b.ToTable("MarkBlockTable");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            TablesId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            TablesId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            TablesId = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            TablesId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            TablesId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            TablesId = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            TablesId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            TablesId = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            TablesId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            TablesId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            TablesId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            TablesId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            TablesId = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            TablesId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            TablesId = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            TablesId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        });
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("MarkBlockTrack");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            TracksId = new Guid("a3580228-866d-4569-90d6-a30a82a59713")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            TracksId = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512")
                        });
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.Property<Guid>("MarkBlocksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarksId")
                        .HasColumnType("TEXT");

                    b.HasKey("MarkBlocksId", "MarksId");

                    b.HasIndex("MarksId");

                    b.ToTable("MarkMarkBlock");

                    b.HasData(
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("2392f306-ae85-4c8e-9921-9e42dcef6f78")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("8b9cc6ff-0a47-4f6b-8e86-7b74129611fc")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("01ad9f5f-2cd1-457c-a32c-80374d7690ea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("254c223b-407c-49bb-a739-349b29bd783d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("0a446e1a-5070-4178-b536-a6642cfef147")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("fcd720d0-53eb-4359-89ae-6ca19ead77ae")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            MarksId = new Guid("83c0af3b-eee4-4907-b698-5b270232680d")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            MarksId = new Guid("ac6f4843-e7f7-4070-8c64-0ea74805cf98")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            MarksId = new Guid("448a2580-4ce8-4a9c-8f70-3dc8c684bc4b")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            MarksId = new Guid("251fc1db-92d2-4e79-bbdb-51adb5d13348")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            MarksId = new Guid("71c44532-2629-496b-83e9-945b1c8ab2d4")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            MarksId = new Guid("0813ef5e-8039-4550-b898-0a7124b2333f")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            MarksId = new Guid("d4772854-c2a4-49c2-bd8b-90d17f4add45")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            MarksId = new Guid("e1bc0c43-7c31-40d7-84c9-7cd5983b4068")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            MarksId = new Guid("39a73a01-4427-47e2-98a3-0e1049e88c5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("d4772854-c2a4-49c2-bd8b-90d17f4add45")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("e1bc0c43-7c31-40d7-84c9-7cd5983b4068")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("5ef1daa7-bad3-4653-b616-5096c265791e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("380ab4e7-b960-4580-b67d-9cfd953294ab")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("8f82a4d7-fe6c-4fa3-a74e-2f4a7fd3e812")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("ef454eaf-ab8b-4bd5-a189-5dc5ae4b4981")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            MarksId = new Guid("3c7a73d5-64e7-4374-a49f-c97215c16942")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            MarksId = new Guid("39a73a01-4427-47e2-98a3-0e1049e88c5e")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            MarksId = new Guid("9bd6dc52-7dd8-4c50-8c23-c2f8a5867156")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            MarksId = new Guid("a72e38c6-99e1-4c0e-8346-7d7f6cf788d3")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            MarksId = new Guid("91facc13-0bd4-4c13-944b-a3930ffb5aea")
                        },
                        new
                        {
                            MarkBlocksId = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            MarksId = new Guid("b9a8f63f-b9e9-4fa2-bbba-7c3140f6d929")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1d6eb925-7d6c-47d4-969a-8e0cb46b0553",
                            Name = "Voter",
                            NormalizedName = "VOTER"
                        },
                        new
                        {
                            Id = "8b47843e-3183-46d7-8a08-bea1326ab6d6",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        },
                        new
                        {
                            Id = "0e3c4475-60b3-4626-a968-e2c44cc6fe03",
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = "4e17b5e0-06d3-45de-8430-707f1c6fef52",
                            Name = "Organiser",
                            NormalizedName = "ORGANISER"
                        },
                        new
                        {
                            Id = "c549f981-2dd2-42c4-a09f-3b5393e2f051",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("ApplicationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1529a422-7f01-4279-9fe5-e3f86bd12ab6"),
                            Number = 1,
                            Status = "В ожидании заполнения"
                        },
                        new
                        {
                            Id = new Guid("67333527-b026-4f90-b2ff-f87d3cbc74d3"),
                            Number = 2,
                            Status = "В ожидании рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("50d27cea-b450-4040-9929-5b64908cd92a"),
                            Number = 3,
                            Status = "В процессе рассмотрения"
                        },
                        new
                        {
                            Id = new Guid("691d72ff-db3c-4049-ba9e-e2f709ebb1d7"),
                            Number = 4,
                            Status = "Одобрена"
                        },
                        new
                        {
                            Id = new Guid("52459e0d-9251-408f-992f-dba24f98659f"),
                            Number = 5,
                            Status = "Отклонена"
                        },
                        new
                        {
                            Id = new Guid("479ce919-a385-4a15-968f-5202c991ed00"),
                            Number = 6,
                            Status = "Оценена"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("MarkBlockId");

                    b.ToTable("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("740f986c-6096-4d1d-ab1e-9f99bb5405c2"),
                            Name = "Строительство и архитектура",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("386ca438-ba7e-46cb-8716-0627d0085177"),
                            Name = "Энергетика и нефтегазовая индустрия",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.HasIndex("ApplicationId", "RowId", "ColumnId")
                        .IsUnique();

                    b.ToTable("CellVals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abc4de1a-aa48-42da-853b-f8ec122251a3"),
                            ColumnId = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("ec736c7c-c9c0-4b74-a1f3-741d60b021aa"),
                            Value = "ScopusID"
                        },
                        new
                        {
                            Id = new Guid("2fa437bf-bdaf-4238-a607-176d73aad4ec"),
                            ColumnId = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("ec736c7c-c9c0-4b74-a1f3-741d60b021aa")
                        },
                        new
                        {
                            Id = new Guid("483d341d-f53e-4e10-8bd9-214d9c2c7a71"),
                            ColumnId = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("119e1ddc-14e3-4011-961d-52accc6fa718"),
                            Value = "ORCiD"
                        },
                        new
                        {
                            Id = new Guid("9ee66fbc-e345-4172-9d2e-e971584b424b"),
                            ColumnId = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("119e1ddc-14e3-4011-961d-52accc6fa718")
                        },
                        new
                        {
                            Id = new Guid("31712a67-4b7c-4d0e-87fd-240cd71097b0"),
                            ColumnId = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("db2b084a-bdcc-451b-816b-2fcbdbf21fab"),
                            Value = "ResearcherID"
                        },
                        new
                        {
                            Id = new Guid("df00e3e5-b762-4004-b484-24699944e89e"),
                            ColumnId = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("db2b084a-bdcc-451b-816b-2fcbdbf21fab")
                        },
                        new
                        {
                            Id = new Guid("c459efaf-a002-46c2-bf4e-beff3a058412"),
                            ColumnId = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("cbd6ae59-b950-4bb2-b4d7-bb6b64a8c19a"),
                            Value = "РИНЦ AuthorID"
                        },
                        new
                        {
                            Id = new Guid("aba2b9c8-e311-4bc2-a59f-31d0fecc4045"),
                            ColumnId = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("cbd6ae59-b950-4bb2-b4d7-bb6b64a8c19a")
                        },
                        new
                        {
                            Id = new Guid("7deb72ea-dfb3-488a-b19d-c11b96da09c7"),
                            ColumnId = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("7d8d4d33-0d2a-49cd-9304-4d7b0fa7f409"),
                            Value = "Google Scholar ID"
                        },
                        new
                        {
                            Id = new Guid("17025ccc-2299-4320-94e0-5713acaefd6b"),
                            ColumnId = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("7d8d4d33-0d2a-49cd-9304-4d7b0fa7f409")
                        },
                        new
                        {
                            Id = new Guid("11c18527-1454-4386-bd2b-77b75ee53701"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("286044f0-1f3a-4c5f-9232-0c06267b8929"),
                            Value = "Название работы"
                        },
                        new
                        {
                            Id = new Guid("19033c50-3a5a-443a-bac8-05f79ef38aa4"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("286044f0-1f3a-4c5f-9232-0c06267b8929")
                        },
                        new
                        {
                            Id = new Guid("73d3e91e-f11e-46f6-9043-17f044790f5b"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("1f3732f1-2550-4acd-83f2-194b5e4cce95"),
                            Value = "Актуальность конкурсной работы"
                        },
                        new
                        {
                            Id = new Guid("b6e1ce52-15a2-4da4-bab0-d10b887f1d7d"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("1f3732f1-2550-4acd-83f2-194b5e4cce95")
                        },
                        new
                        {
                            Id = new Guid("67766fc5-43e6-49a1-9035-e2a2672b537d"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("73bd8d55-1d9a-4d3d-86cf-cc44c8874495"),
                            Value = "Методология и методы, используемые в работе"
                        },
                        new
                        {
                            Id = new Guid("def7d13b-3b3d-4ff6-8b7f-58b8faadaa8d"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("73bd8d55-1d9a-4d3d-86cf-cc44c8874495")
                        },
                        new
                        {
                            Id = new Guid("21eed1ae-80d8-4bae-a6f2-624cfa3a12ea"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("040ce041-3cb4-4dd4-beab-ccfd18c7628f"),
                            Value = "Инновационность"
                        },
                        new
                        {
                            Id = new Guid("d490ca9a-958e-4b3e-93f8-f281d2942de4"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("040ce041-3cb4-4dd4-beab-ccfd18c7628f")
                        },
                        new
                        {
                            Id = new Guid("b0e9fc02-a695-44af-ad11-d96fdd0959b1"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("970e688a-5b6b-4136-b10c-2ed3b37a61e1"),
                            Value = "Возможность практического применения (Внедрено ли в практику? В какому курсе/программе подготовки используется/ на кого рассчитано)"
                        },
                        new
                        {
                            Id = new Guid("5ecd3e51-3c4f-4514-9a1b-2acd55aaf9f6"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("970e688a-5b6b-4136-b10c-2ed3b37a61e1")
                        },
                        new
                        {
                            Id = new Guid("520c13f5-d3ee-458b-bcb4-14d38fffa647"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("bf098fcc-7a8f-4e9c-bbf3-cf40d018b0ad"),
                            Value = "Результаты и выводы"
                        },
                        new
                        {
                            Id = new Guid("8df4895f-d44a-4773-abbe-98afd0b56c0d"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("bf098fcc-7a8f-4e9c-bbf3-cf40d018b0ad")
                        },
                        new
                        {
                            Id = new Guid("4848de01-19df-4a85-b11a-18631ea2586d"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("4fb828d3-92fb-4f59-ae84-a053ffc5f25c"),
                            Value = "Рекомендации и перспективы дальнейшей разработки темы"
                        },
                        new
                        {
                            Id = new Guid("f4f5b10d-c978-4c3a-9028-830d22002df4"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("4fb828d3-92fb-4f59-ae84-a053ffc5f25c")
                        },
                        new
                        {
                            Id = new Guid("502017dc-b417-4a8e-955b-8b30768bb71c"),
                            ColumnId = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            Disable = true,
                            IsPrefilled = true,
                            RowId = new Guid("5e663f6f-2f5b-4ab1-946d-c80d02c72b7e"),
                            Value = "Ссылка на конкурсную работу"
                        },
                        new
                        {
                            Id = new Guid("fce33b43-7e77-44e4-a40e-2925f5c8ec3b"),
                            ColumnId = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            Disable = false,
                            IsPrefilled = true,
                            RowId = new Guid("5e663f6f-2f5b-4ab1-946d-c80d02c72b7e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("TableId", "Name")
                        .IsUnique();

                    b.HasIndex("TableId", "Number")
                        .IsUnique();

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c138b5cd-7aaf-49ca-998d-e4e2edd54723"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 1,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("7a3693fb-1196-4839-9e04-d300f9eb3361"),
                            IsRequired = true,
                            Name = "Название конкурса",
                            Number = 2,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("3fa34bb4-e8e3-4ce3-819d-625c5004138d"),
                            IsRequired = true,
                            Name = "Статус конкурса",
                            Number = 3,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("53819de7-2edb-4150-a55c-c0c55973618b"),
                            IsRequired = true,
                            Name = "Награда",
                            Number = 4,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("a007eff4-b568-4c1d-a194-e9d074559842"),
                            IsRequired = true,
                            Name = "Ссылка",
                            Number = 5,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("155d11a9-6a46-41be-bd14-45048adb301a"),
                            IsRequired = true,
                            Name = "Название документа, реквизиты",
                            Number = 1,
                            TableId = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("a80fc7df-7bae-4ae8-9723-27ce2ce69156"),
                            IsRequired = true,
                            Name = "Год получения документа",
                            Number = 2,
                            TableId = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("f10844e9-1121-44fb-a69f-ef0adeb2ef5e"),
                            IsRequired = true,
                            Name = "Наименование курса",
                            Number = 1,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("c27d40d1-929e-468d-82fe-a6a538543e9d"),
                            IsRequired = true,
                            Name = "Язык преподавания (русск./англ./др.)",
                            Number = 2,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("eff6ce80-7716-4862-aa29-c3edce70176d"),
                            IsRequired = true,
                            Name = "Лекции (час.)",
                            Number = 3,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("6e1ceadf-d1fd-48f2-aea5-547c7b417f04"),
                            IsRequired = true,
                            Name = "Практические занятия (час.)",
                            Number = 4,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("b6b9e6dd-5950-4471-999c-c0ee0a4cb94b"),
                            IsRequired = true,
                            Name = "Итого (час.)",
                            Number = 5,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("4a18aae3-e832-4ddc-a539-43f2915fd5f2"),
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("170f4fdd-f81e-4f9f-ac56-6b2800292d90"),
                            IsRequired = true,
                            Name = "Название конкурса/премии",
                            Number = 2,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("5d88dc76-c96a-4098-913a-21af60e3fb74"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 3,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("a328d1f8-c167-4290-8d56-b716cf98e963"),
                            IsRequired = true,
                            Name = "Статус конкурса (международный, всероссийский), статус награды (РФ, субъект РФ)",
                            Number = 4,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("2b724e53-bd7c-46b4-9987-c481af694961"),
                            IsRequired = true,
                            Name = "Награда/премия (медаль, диплом с указанием степени)",
                            Number = 5,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("248d9b1b-2936-4599-a5d1-704ccf2e0ba7"),
                            IsRequired = true,
                            Name = "Название организации/должность/ставка",
                            Number = 1,
                            TableId = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("266b90e6-d282-4fc7-b796-d88a4c48dd72"),
                            IsRequired = true,
                            Name = "Место нахождения (субъект РФ, зарубежье)",
                            Number = 2,
                            TableId = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("db77bfef-2b61-4a1d-a7f1-efc5fccdfd54"),
                            IsRequired = true,
                            Name = "Вид деятельности (преподавательская)",
                            Number = 3,
                            TableId = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("710913ea-9461-4526-8969-471ea4b11e56"),
                            IsRequired = true,
                            Name = "Количество часов",
                            Number = 4,
                            TableId = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("6e79f0a6-e451-409a-8e59-f527a694bf2a"),
                            IsRequired = true,
                            Name = "Вид публикации",
                            Number = 1,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("1f3fed94-d290-4346-8ac6-39442574d198"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("ececcf35-2d5f-4e50-9c8f-4d21b1d9f6be"),
                            IsRequired = false,
                            Name = "Соавторы",
                            Number = 3,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("2af733d6-ce1a-4369-b993-0ef08debef78"),
                            IsRequired = true,
                            Name = "Количество печатных листов",
                            Number = 4,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("a9b1597c-4b66-4b2b-bc50-432cfbf68276"),
                            IsRequired = true,
                            Name = "Наличие грифа",
                            Number = 5,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("69da5b2b-313c-40d2-99e4-f0693c7d2316")
                        },
                        new
                        {
                            Id = new Guid("71f94b84-aa14-4a16-924c-859175df8957"),
                            IsRequired = true,
                            Name = "Издательство, год",
                            Number = 6,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("af0452bd-53fb-4f24-8656-9736fc023894"),
                            IsRequired = true,
                            Name = "Язык публикации",
                            Number = 7,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("1a00417d-c158-48e5-94ac-0a7b856945bf"),
                            IsRequired = true,
                            Name = "Ссылка на открытый доступ",
                            Number = 8,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("739539cb-8d58-40cb-9131-69d59f6bcbf0"),
                            IsRequired = true,
                            Name = "Название дисциплины",
                            Number = 1,
                            TableId = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("4dbcacd5-c655-4f39-a91d-1a2b9dddc304"),
                            IsRequired = true,
                            Name = "Вид (лекции, лабораторные)",
                            Number = 2,
                            TableId = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("26628df0-f805-4055-8d47-26afeaa5897f"),
                            IsRequired = true,
                            Name = "Ссылка на подтверждающий документ (в качестве подтверждения может быть выписка из учебной нагрузки по форме организации или ссылка на онлайн платформу с курсом лекций, например, «Открытое образование»)",
                            Number = 3,
                            TableId = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("5f62091f-5216-412b-8181-08ddf9c3f84d"),
                            IsRequired = true,
                            Name = "Название курса",
                            Number = 1,
                            TableId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("c80f65a9-8fd1-4bab-a6e5-50c46e512c72"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("c5608311-4d6b-4d54-a009-edf1212eeacc"),
                            IsRequired = true,
                            Name = "Ссылка на платформу",
                            Number = 3,
                            TableId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("e3de3096-73f2-42fb-938e-de07eb33e06d"),
                            IsRequired = true,
                            Name = "Год",
                            Number = 4,
                            TableId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("721c789d-a9eb-4941-8148-e5936f6399b7"),
                            IsRequired = true,
                            Name = "Название статьи",
                            Number = 1,
                            TableId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("7b16868c-a72c-4e29-b9af-275c18825887"),
                            IsRequired = true,
                            Name = "Соавторы",
                            Number = 2,
                            TableId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("868064c1-1c64-4c5c-8966-b35bbcbde4f6"),
                            IsRequired = true,
                            Name = "Тип публикации (категория ВАК/квартиль МБД)",
                            Number = 3,
                            TableId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("b3202812-403f-430b-9fc0-4e7c4b3584ba"),
                            IsRequired = true,
                            Name = "Издание, год",
                            Number = 4,
                            TableId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("cf2646ca-07e8-47bd-b6cc-6a03d7cc094e"),
                            IsRequired = false,
                            Name = "Тип идентификатора",
                            Number = 1,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("ee8f11d8-2431-4c3b-9696-4aba4001e848"),
                            IsRequired = false,
                            Name = "Идентификатор",
                            Number = 2,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("83ba46b9-b283-4842-9c47-947c1caaee91"),
                            IsRequired = true,
                            Name = "Название НИР/НИОКР",
                            Number = 1,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("1c489277-c0dc-45b5-9975-83463b6f2290"),
                            IsRequired = true,
                            Name = "Сумма финансирования (тыс. руб.)",
                            Number = 2,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("640ebdee-77eb-48f2-bb6f-a25d2f26a648"),
                            IsRequired = true,
                            Name = "Период выполнения",
                            Number = 3,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("9329cd97-ee01-4f99-8002-3e7c3cb40486"),
                            IsRequired = true,
                            Name = "Статус (руководитель/исполнитель)",
                            Number = 4,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("25ef1fe5-3a05-4ed6-8793-366fdb4c1d10"),
                            IsRequired = true,
                            Name = "Регистрационный номер карты в системе ЕГИСУ (https://www.rosrid.ru/)",
                            Number = 5,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("8640bfcb-e8c3-404c-a119-77c98b83aeed"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("2f49a8e6-d8bf-4407-93ea-041d62554047"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 2,
                            TableId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("3ea514c8-d762-43f7-a0d1-5456c0d1ba5c"),
                            IsRequired = true,
                            Name = "ФИО соавторов",
                            Number = 3,
                            TableId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("32449d98-f987-43c3-9d32-815d38afa377"),
                            IsRequired = true,
                            Name = "Номер РИД",
                            Number = 4,
                            TableId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("5d8e9b47-dc95-4b71-a233-d0dfd960c5dc"),
                            IsRequired = true,
                            Name = "Вид",
                            Number = 1,
                            TableId = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("be138ae2-bcad-4492-bf36-eb70598bb674"),
                            IsRequired = true,
                            Name = "Название разработки",
                            Number = 2,
                            TableId = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("a1ad8002-4702-41e3-80a9-2ba79bc147bb"),
                            IsRequired = true,
                            Name = "Название организации в которую внедрена разработка",
                            Number = 3,
                            TableId = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("883df62f-2b2e-4924-b137-8da36319b39f"),
                            IsRequired = true,
                            Name = "Название",
                            Number = 1,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4"),
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("77e9ac21-4b3c-42e6-897e-0a644f64dc29"),
                            IsRequired = true,
                            Name = "Значение",
                            Number = 2,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4"),
                            ValueTypeId = new Guid("f2fd6e1e-fe97-4b44-aac9-a80082d45b40")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("EditBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            Name = "Общая информация",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            Name = "Категория участников",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            Name = "Профессиональное развитие",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            Name = "Деятельность",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            Name = "Деятельность",
                            Number = 5
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EditBlockId");

                    b.ToTable("EditBlockStatuses");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditGroup")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ValueTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ValueTypeId");

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5072e5c-6ef9-4b62-a0f4-ca92343d093d"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "ФИО",
                            Number = 1,
                            Placeholder = "Иванов Иван Иванович",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("d0271f62-c2c6-4a6f-bbb2-f3b40f388ba3"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Дата рождения",
                            Number = 2,
                            Placeholder = "01.01.2000",
                            ValueTypeId = new Guid("8400b4f0-7f30-44b9-b8a3-9476e4289d5e")
                        },
                        new
                        {
                            Id = new Guid("a7513e78-1e94-48ec-bbd1-47efeb6f3bea"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Домашний адрес",
                            Number = 3,
                            Placeholder = "Регион, город, улица, дом, квартира",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("bb903c46-6ffd-42a1-9ab0-6256ae438d6e"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Контактный телефон",
                            Number = 4,
                            Placeholder = "+8 (900)-000-00-00",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("c6d0f695-73dd-48fb-b3ed-b3421cd7c79f"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Электронная почта",
                            Number = 5,
                            Placeholder = "user@example.com",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("80dc5ec4-2ce7-4e53-b2ec-d2923a0c46cc"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Место работы/учебы",
                            Number = 6,
                            Placeholder = "Название организации",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("01527c4b-a1d8-4620-91da-60a867ae538e"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Адрес работы/учебы",
                            Number = 7,
                            Placeholder = "Регион, город, улица, дом",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("f991abda-a04e-4648-8468-b54ca968953a"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Институт, факультет, кафедра, лаборатория",
                            Number = 8,
                            Placeholder = "Введите институт, факультет, кафедру, лабораторию",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("62c99fc4-b287-4f82-9ece-939ba4cd6e94"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Должность",
                            Number = 9,
                            Placeholder = "Введите свою должность в организации",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("1e7b1124-c460-4e71-9dd2-1a93e6cc24e9"),
                            EditBlockId = new Guid("429eec46-34d6-42e8-9e8e-af538d0539ca"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Стаж научно-педагогической деятельности по трудовой книжке",
                            Number = 10,
                            Placeholder = "Введите свой стаж",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("d8ef5c3c-8af5-4cc1-87e4-8742c7a1a7fc"),
                            EditBlockId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Категория участника конкурса (Работники высших учебных заведений, отраслевых и академических институтов, работники сектора промышленности (исследователи), осуществляющие научно-исследовательскую и/или научно-педагогическую деятельность)",
                            Number = 11,
                            Placeholder = "Выберите категорию участника конкруса",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            EditBlockId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученое звание",
                            Number = 14,
                            Placeholder = "Выберите ученое звание",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("3fd96e96-ef9d-4efe-9edd-9acfc035da7e"),
                            EditBlockId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            IsDisplayedOnVotingPage = true,
                            IsRequired = true,
                            Name = "Ученая степень",
                            Number = 15,
                            Placeholder = "Выберите ученую степень",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("37a82009-2a46-46ae-8319-ed476a4e740d"),
                            EditBlockId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Научная специальность (по классификации ВАК)",
                            Number = 16,
                            Placeholder = "Введите научную специальность (по классификации ВАК)",
                            ValueTypeId = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a")
                        },
                        new
                        {
                            Id = new Guid("943863f4-7daf-4da9-876e-33e377c0bc52"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-педагогической деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кадидаты наук",
                            Number = 17,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("0fa97f28-f919-430f-9afb-574519ccee08"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 18,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("a96e1cbb-3bcd-4a44-b342-71127949ccfc"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            EditGroup = "Руководство дипломными проектами за предыдущий учебный год",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся бакалавры, специалисты, магистры",
                            Number = 19,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("56abbb10-2bba-4bc9-b26c-9d38aff6994f"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            EditGroup = "Список подготовленных под руководством участника конкурса аспирантов (докторантов) за последние 5 лет научно-исследовательской деятельности",
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся кандидаты наук",
                            Number = 20,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        },
                        new
                        {
                            Id = new Guid("79bc1a50-a845-4502-9889-cd39e668e016"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            IsDisplayedOnVotingPage = false,
                            IsRequired = true,
                            Name = "Защитившиеся доктора наук",
                            Number = 21,
                            Placeholder = "Введите количество",
                            ValueTypeId = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ApplicationId", "FieldId")
                        .IsUnique();

                    b.ToTable("FieldVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EvaluationMethodName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TableId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2392f306-ae85-4c8e-9921-9e42dcef6f78"),
                            EvaluationMethodName = "EvaluateMark1",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за объем учебной нагрузки:",
                            Number = 1,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12")
                        },
                        new
                        {
                            Id = new Guid("8b9cc6ff-0a47-4f6b-8e86-7b74129611fc"),
                            EvaluationMethodName = "EvaluateMark2",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество дисциплин на иностранном языке, которые вел претендент, в предыдущем учебном году:",
                            Number = 2,
                            TableId = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12")
                        },
                        new
                        {
                            Id = new Guid("01ad9f5f-2cd1-457c-a32c-80374d7690ea"),
                            EvaluationMethodName = "EvaluateMark3",
                            FieldId = new Guid("a96e1cbb-3bcd-4a44-b342-71127949ccfc"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество квалификационных работ, выполненных под руководством претендента:",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("254c223b-407c-49bb-a739-349b29bd783d"),
                            EvaluationMethodName = "EvaluateMark4",
                            FieldId = new Guid("943863f4-7daf-4da9-876e-33e377c0bc52"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("0a446e1a-5070-4178-b536-a6642cfef147"),
                            EvaluationMethodName = "EvaluateMark5",
                            FieldId = new Guid("0fa97f28-f919-430f-9afb-574519ccee08"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("fcd720d0-53eb-4359-89ae-6ca19ead77ae"),
                            EvaluationMethodName = "EvaluateMark6",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество подготовленных студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание:",
                            Number = 6,
                            TableId = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1")
                        },
                        new
                        {
                            Id = new Guid("83c0af3b-eee4-4907-b698-5b270232680d"),
                            EvaluationMethodName = "EvaluateMark7",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество онлайн курсов на открытых площадках:",
                            Number = 7,
                            TableId = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f")
                        },
                        new
                        {
                            Id = new Guid("ac6f4843-e7f7-4070-8c64-0ea74805cf98"),
                            EvaluationMethodName = "EvaluateMark8",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за труды с грифом и без соавторства:",
                            Number = 8,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b")
                        },
                        new
                        {
                            Id = new Guid("448a2580-4ce8-4a9c-8f70-3dc8c684bc4b"),
                            EvaluationMethodName = "EvaluateMark9",
                            IsAuto = true,
                            MaxValue = 3,
                            Name = "Баллы за труды с грифом в соавторстве:",
                            Number = 9,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b")
                        },
                        new
                        {
                            Id = new Guid("251fc1db-92d2-4e79-bbdb-51adb5d13348"),
                            EvaluationMethodName = "EvaluateMark10",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа и без соавторства:",
                            Number = 10,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b")
                        },
                        new
                        {
                            Id = new Guid("71c44532-2629-496b-83e9-945b1c8ab2d4"),
                            EvaluationMethodName = "EvaluateMark11",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за труды без грифа в соавторстве:",
                            Number = 11,
                            TableId = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b")
                        },
                        new
                        {
                            Id = new Guid("0813ef5e-8039-4550-b898-0a7124b2333f"),
                            EvaluationMethodName = "EvaluateMark12",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество практикумов и курсов лекций:",
                            Number = 12,
                            TableId = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447")
                        },
                        new
                        {
                            Id = new Guid("d4772854-c2a4-49c2-bd8b-90d17f4add45"),
                            EvaluationMethodName = "EvaluateMark13",
                            FieldId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за ученое звание:",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("e1bc0c43-7c31-40d7-84c9-7cd5983b4068"),
                            EvaluationMethodName = "EvaluateMark14",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за награды:",
                            Number = 14,
                            TableId = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0")
                        },
                        new
                        {
                            Id = new Guid("39a73a01-4427-47e2-98a3-0e1049e88c5e"),
                            EvaluationMethodName = "EvaluateMark15",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за профессиональное развитие:",
                            Number = 15,
                            TableId = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9")
                        },
                        new
                        {
                            Id = new Guid("5ef1daa7-bad3-4653-b616-5096c265791e"),
                            EvaluationMethodName = "EvaluateMark16",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за научные публикации:",
                            Number = 16,
                            TableId = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478")
                        },
                        new
                        {
                            Id = new Guid("380ab4e7-b960-4580-b67d-9cfd953294ab"),
                            EvaluationMethodName = "EvaluateMark19",
                            FieldId = new Guid("56abbb10-2bba-4bc9-b26c-9d38aff6994f"),
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за количество защитившихся кандидатов наук:",
                            Number = 19
                        },
                        new
                        {
                            Id = new Guid("8f82a4d7-fe6c-4fa3-a74e-2f4a7fd3e812"),
                            EvaluationMethodName = "EvaluateMark20",
                            FieldId = new Guid("79bc1a50-a845-4502-9889-cd39e668e016"),
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за количество защитившихся докторов наук:",
                            Number = 20
                        },
                        new
                        {
                            Id = new Guid("ef454eaf-ab8b-4bd5-a189-5dc5ae4b4981"),
                            EvaluationMethodName = "EvaluateMark21",
                            IsAuto = true,
                            MaxValue = 4,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве руководителя:",
                            Number = 21,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c")
                        },
                        new
                        {
                            Id = new Guid("3c7a73d5-64e7-4374-a49f-c97215c16942"),
                            EvaluationMethodName = "EvaluateMark22",
                            IsAuto = true,
                            MaxValue = 2,
                            Name = "Баллы за выполненные НИР/НИОКР в качестве исполнителя:",
                            Number = 22,
                            TableId = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c")
                        },
                        new
                        {
                            Id = new Guid("9bd6dc52-7dd8-4c50-8c23-c2f8a5867156"),
                            EvaluationMethodName = "EvaluateMark23",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество объектов интеллектуальной собственности:",
                            Number = 23,
                            TableId = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006")
                        },
                        new
                        {
                            Id = new Guid("a72e38c6-99e1-4c0e-8346-7d7f6cf788d3"),
                            EvaluationMethodName = "EvaluateMark24",
                            IsAuto = true,
                            MaxValue = 5,
                            Name = "Баллы за количество разработок:",
                            Number = 24,
                            TableId = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63")
                        },
                        new
                        {
                            Id = new Guid("91facc13-0bd4-4c13-944b-a3930ffb5aea"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Оценка уровня предоставленной работы:",
                            Number = 25,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("b9a8f63f-b9e9-4fa2-bbba-7c3140f6d929"),
                            IsAuto = false,
                            MaxValue = 10,
                            Name = "Использование в представленной работе инновационных методов (проблемного и проективного обучения, тренинговых форм, модульно-кредитных, модульно-рейтинговых систем обучения и контроля знаний):",
                            Number = 26,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("MarkBlocks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38dd650c-10cf-4145-ba7b-1acf79bb6fbb"),
                            Name = "Основной",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("7595ca9c-8b66-4c57-8fe4-4512b194f032"),
                            Name = "Образовательная деятельность",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("b6c0dd4e-5502-4243-b476-7c0b4a2b1504"),
                            Name = "Методическая деятельность",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("dfa78d8a-3d0c-468c-8c4b-728994ef6ad0"),
                            Name = "Профессиональные показатели",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("adb7c7b5-955d-4b26-815b-52022f5cfbb4"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("7236832c-a363-4ac0-a153-d95c2455c9c0"),
                            Name = "Инновационная и иная деятельность",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("8f545139-22a4-41a1-b69d-f34ff6f54f1c"),
                            Name = "Конкурсная работа",
                            Number = 7
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.HasIndex("ApplicationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Rows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec736c7c-c9c0-4b74-a1f3-741d60b021aa"),
                            IsPrefilled = true,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            Id = new Guid("119e1ddc-14e3-4011-961d-52accc6fa718"),
                            IsPrefilled = true,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            Id = new Guid("db2b084a-bdcc-451b-816b-2fcbdbf21fab"),
                            IsPrefilled = true,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            Id = new Guid("cbd6ae59-b950-4bb2-b4d7-bb6b64a8c19a"),
                            IsPrefilled = true,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            Id = new Guid("7d8d4d33-0d2a-49cd-9304-4d7b0fa7f409"),
                            IsPrefilled = true,
                            TableId = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622")
                        },
                        new
                        {
                            Id = new Guid("286044f0-1f3a-4c5f-9232-0c06267b8929"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("1f3732f1-2550-4acd-83f2-194b5e4cce95"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("73bd8d55-1d9a-4d3d-86cf-cc44c8874495"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("040ce041-3cb4-4dd4-beab-ccfd18c7628f"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("970e688a-5b6b-4136-b10c-2ed3b37a61e1"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("bf098fcc-7a8f-4e9c-bbf3-cf40d018b0ad"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("4fb828d3-92fb-4f59-ae84-a053ffc5f25c"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        },
                        new
                        {
                            Id = new Guid("5e663f6f-2f5b-4ab1-946d-c80d02c72b7e"),
                            IsPrefilled = true,
                            TableId = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4")
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("FieldId");

                    b.ToTable("SelectValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdffffd7-b045-4843-a781-39e4a284f616"),
                            FieldId = new Guid("d8ef5c3c-8af5-4cc1-87e4-8742c7a1a7fc"),
                            Value = "Докторанты, имеющие ученую степень кандидата наук"
                        },
                        new
                        {
                            Id = new Guid("d795d22d-317a-4865-81d0-b6866f48e94d"),
                            FieldId = new Guid("d8ef5c3c-8af5-4cc1-87e4-8742c7a1a7fc"),
                            Value = "Имеющие ученую степень доктора наук"
                        },
                        new
                        {
                            Id = new Guid("a758f7fc-8dd7-47b5-94da-4fef9ac5521d"),
                            FieldId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("90480910-8dcc-4527-88a7-38d0819f8175"),
                            FieldId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            Value = "Доцент"
                        },
                        new
                        {
                            Id = new Guid("b396379f-7c89-40b2-a8a2-99b8fb16532a"),
                            FieldId = new Guid("34e49a88-ccb6-4248-8a4e-3c82c6cd80c1"),
                            Value = "Профессор"
                        },
                        new
                        {
                            Id = new Guid("bd61c87a-889d-448e-9ab8-90466d369994"),
                            ColumnId = new Guid("3fa34bb4-e8e3-4ce3-819d-625c5004138d"),
                            Value = "Региональный"
                        },
                        new
                        {
                            Id = new Guid("85db189e-d463-4265-80b3-4b6c02a9dce8"),
                            ColumnId = new Guid("3fa34bb4-e8e3-4ce3-819d-625c5004138d"),
                            Value = "Всероссийский"
                        },
                        new
                        {
                            Id = new Guid("4cf862d9-08af-4ff4-8f6c-c44582ffc039"),
                            ColumnId = new Guid("3fa34bb4-e8e3-4ce3-819d-625c5004138d"),
                            Value = "Международный"
                        },
                        new
                        {
                            Id = new Guid("520c2a47-05ea-4f1d-99e3-b1efdbcf9e40"),
                            ColumnId = new Guid("6e79f0a6-e451-409a-8e59-f527a694bf2a"),
                            Value = "Учебное и/или учебно-методическое пособие"
                        },
                        new
                        {
                            Id = new Guid("55e0d39c-4de8-4949-8092-08383cb5554e"),
                            ColumnId = new Guid("6e79f0a6-e451-409a-8e59-f527a694bf2a"),
                            Value = "Учебник"
                        },
                        new
                        {
                            Id = new Guid("464864b2-3c2b-482e-9573-8629c2d672a7"),
                            ColumnId = new Guid("6e79f0a6-e451-409a-8e59-f527a694bf2a"),
                            Value = "Монография"
                        },
                        new
                        {
                            Id = new Guid("56cf33e1-779b-40aa-943c-50bcb98c71c0"),
                            ColumnId = new Guid("4dbcacd5-c655-4f39-a91d-1a2b9dddc304"),
                            Value = "Лекции"
                        },
                        new
                        {
                            Id = new Guid("daf3a079-7add-47f9-bd71-0f196c318656"),
                            ColumnId = new Guid("4dbcacd5-c655-4f39-a91d-1a2b9dddc304"),
                            Value = "Лабораторные"
                        },
                        new
                        {
                            Id = new Guid("218468d1-5eb0-47b3-8f2a-63f1f030c5f2"),
                            ColumnId = new Guid("9329cd97-ee01-4f99-8002-3e7c3cb40486"),
                            Value = "Руководитель"
                        },
                        new
                        {
                            Id = new Guid("e14cbf21-74c9-46fb-a381-c7745fcc4b2d"),
                            ColumnId = new Guid("9329cd97-ee01-4f99-8002-3e7c3cb40486"),
                            Value = "Исполнитель"
                        },
                        new
                        {
                            Id = new Guid("c9c64c18-2e01-44f8-b248-ab34455c396e"),
                            ColumnId = new Guid("8640bfcb-e8c3-404c-a119-77c98b83aeed"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("8b5531c7-23a9-4877-8131-ee307385bf6d"),
                            ColumnId = new Guid("8640bfcb-e8c3-404c-a119-77c98b83aeed"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("2314e5e9-4728-45ef-86c5-9907dc19debc"),
                            ColumnId = new Guid("8640bfcb-e8c3-404c-a119-77c98b83aeed"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("52434757-ed48-4cda-9020-c927b24809c6"),
                            ColumnId = new Guid("5d8e9b47-dc95-4b71-a233-d0dfd960c5dc"),
                            Value = "Изобретение"
                        },
                        new
                        {
                            Id = new Guid("69bcfc6c-f813-4960-b4c3-6651117fb8de"),
                            ColumnId = new Guid("5d8e9b47-dc95-4b71-a233-d0dfd960c5dc"),
                            Value = "Полезная модель"
                        },
                        new
                        {
                            Id = new Guid("c8d62d58-12d4-474a-baca-5e665103bb76"),
                            ColumnId = new Guid("5d8e9b47-dc95-4b71-a233-d0dfd960c5dc"),
                            Value = "База данных"
                        },
                        new
                        {
                            Id = new Guid("2d5bea32-9130-4ac3-811b-b0d261c2aed1"),
                            ColumnId = new Guid("ececcf35-2d5f-4e50-9c8f-4d21b1d9f6be"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("07e24967-e83b-433c-9358-be14edb2da7e"),
                            ColumnId = new Guid("ececcf35-2d5f-4e50-9c8f-4d21b1d9f6be"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("bfe9b4bf-29b6-4098-ae36-bdf57c93d617"),
                            ColumnId = new Guid("af0452bd-53fb-4f24-8656-9736fc023894"),
                            Value = "Русский"
                        },
                        new
                        {
                            Id = new Guid("020ac2c6-316a-4886-aaf6-f104aedee3bd"),
                            ColumnId = new Guid("af0452bd-53fb-4f24-8656-9736fc023894"),
                            Value = "Иностранный"
                        },
                        new
                        {
                            Id = new Guid("feee9e2a-a120-45ec-8ed0-654f02b11ecd"),
                            ColumnId = new Guid("7b16868c-a72c-4e29-b9af-275c18825887"),
                            Value = "Есть"
                        },
                        new
                        {
                            Id = new Guid("948a45df-8d8c-4bf3-b61b-8c322d397879"),
                            ColumnId = new Guid("7b16868c-a72c-4e29-b9af-275c18825887"),
                            Value = "Нет"
                        },
                        new
                        {
                            Id = new Guid("fbeb464f-18ed-48ea-a935-bf3025202220"),
                            FieldId = new Guid("3fd96e96-ef9d-4efe-9edd-9acfc035da7e"),
                            Value = "Кандидат наук"
                        },
                        new
                        {
                            Id = new Guid("3efce5fb-d854-4a86-b1f0-ac985dd5bc5f"),
                            FieldId = new Guid("3fd96e96-ef9d-4efe-9edd-9acfc035da7e"),
                            Value = "Доктор наук"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditBlockId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisplayedOnVotingPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrefilled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("EditBlockId", "Name")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4d9994f-3dc5-4ca3-8f21-dbc06d14e9c0"),
                            EditBlockId = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Награждение премиями, наградами в области научно-педагогической деятельности городского, всероссийского или международного уровня (в том числе зарубежными), победы в профессиональных конкурсах за весь период научно-педагогической деятельности",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("0274ee5a-71c9-44e6-85d3-8ba460305dd9"),
                            EditBlockId = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о профессиональном развитии участника конкурса за последние 5 лет (курсы повышения квалификации/ стажировки)",
                            Number = 2
                        },
                        new
                        {
                            Id = new Guid("8cfb8a44-c157-4a10-98d2-022085b73d12"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Учебная нагрузка за предыдущий учебный год (за исключением методической)",
                            Number = 3
                        },
                        new
                        {
                            Id = new Guid("aeb46344-193d-44f4-b4fe-8772b64bf0d1"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список подготовленных под руководством участника конкурса студентов, бакалавров, магистров/специалистов, аспирантов, адъюнктов, ординаторов, докторантов, получивших самостоятельное признание",
                            Number = 4
                        },
                        new
                        {
                            Id = new Guid("7af28c1f-93bc-456d-8c6f-094d9ec9595f"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Сведения о работе, выполняемой участником конкурса в области научно-педагогической деятельности по совместительству (не по основному месту работы) в высшем учебном заведении, академическом институте, отраслевом научно-исследовательском институте, профессиональной образовательной организации, общеобразовательной организации за предыдущий учебный год",
                            Number = 5
                        },
                        new
                        {
                            Id = new Guid("21cfa27d-cf7f-45c5-ace8-88f79228206b"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список трудов участника конкурса. Количество монографий, учебников, учебных и учебно-методических пособий с грифами УМО, Министерств РФ или государственных академий наук, изданных типографскимспособом за весь период научно-педагогической деятельности, либо аналогичных работ на иностранномязыке без грифа УМО",
                            Number = 6
                        },
                        new
                        {
                            Id = new Guid("25ba0fec-00ba-42a5-b367-0e5156948447"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список лабораторных практикумов и курсов лекций (разработанных самостоятельно участником конкурса) за последние 5 лет",
                            Number = 7
                        },
                        new
                        {
                            Id = new Guid("5e5f460c-8337-419f-bd85-02f24c27cf5f"),
                            EditBlockId = new Guid("37e09e2b-fbee-4c56-b1bc-c32bc4ac26c8"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список разработанных онлайн-курсов на открытых платформах за последние 5 лет",
                            Number = 8
                        },
                        new
                        {
                            Id = new Guid("74f9a1bf-e0e1-4652-81f1-2e1923068478"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список научных публикаций за последние 5 лет",
                            Number = 9
                        },
                        new
                        {
                            Id = new Guid("1074edfa-ce63-40f5-a420-fcc710c9f622"),
                            EditBlockId = new Guid("f758f000-07df-4d61-a6e9-ea2ce0c60f38"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Персональные идентификаторы",
                            Number = 10
                        },
                        new
                        {
                            Id = new Guid("8be0c586-f545-4f1b-8a87-a360122b036c"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список выполненных НИР / НИОКР с финансированием в размере от 200 тыс. руб. и выше за последние 5 лет",
                            Number = 11
                        },
                        new
                        {
                            Id = new Guid("1337ef68-de01-4c7f-8098-8095d0caf006"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Список объектов интеллектуальной собственности, созданных участником конкурса за весь период научно-педагогической деятельности (созданных самостоятельно / в соавторстве), официально зарегистрированных в установленном порядке (в России / за рубежом)",
                            Number = 12
                        },
                        new
                        {
                            Id = new Guid("e9b59ee3-8af6-4342-9732-62b99d8c7d63"),
                            EditBlockId = new Guid("8596528a-fdb2-4195-946e-098137a7a764"),
                            IsDisplayedOnVotingPage = false,
                            IsPrefilled = false,
                            Name = "Перечень разработок, внедренных на предприятиях и организациях реального сектора экономики (в России / за рубежом)",
                            Number = 13
                        },
                        new
                        {
                            Id = new Guid("81a2b62d-b6d1-4c38-ab46-2590330cb9b4"),
                            EditBlockId = new Guid("62537414-e226-4d60-9cda-3ed883a073fc"),
                            IsDisplayedOnVotingPage = true,
                            IsPrefilled = true,
                            Name = "Краткая аннотация конкурсной работы",
                            Number = 14
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3580228-866d-4569-90d6-a30a82a59713"),
                            Name = "Научно-педагогическая деятельность",
                            Number = 1
                        },
                        new
                        {
                            Id = new Guid("39b2f714-0f7c-4758-afcf-a0a2fb894512"),
                            Name = "Научно-исследовательская деятельность",
                            Number = 2
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ValueTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd3de894-7fab-41bc-98bd-1bad8391415e"),
                            Name = "int"
                        },
                        new
                        {
                            Id = new Guid("9b607d1a-046a-4a76-a036-3e2f17e7f34a"),
                            Name = "string"
                        },
                        new
                        {
                            Id = new Guid("69da5b2b-313c-40d2-99e4-f0693c7d2316"),
                            Name = "bool"
                        },
                        new
                        {
                            Id = new Guid("8400b4f0-7f30-44b9-b8a3-9476e4289d5e"),
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = new Guid("f2fd6e1e-fe97-4b44-aac9-a80082d45b40"),
                            Name = "TextArea"
                        });
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationFormId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoteTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VoterId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EditBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", null)
                        .WithMany()
                        .HasForeignKey("EditBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTable", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Table", null)
                        .WithMany()
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkBlockTrack", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarkMarkBlock", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.MarkBlock", null)
                        .WithMany()
                        .HasForeignKey("MarkBlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", null)
                        .WithMany()
                        .HasForeignKey("MarksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ServerApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationStatus", "ApplicationStatus")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Category", "Category")
                        .WithMany("ApplicationForms")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Reviewer")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewerId");

                    b.HasOne("ServerApp.Data.Entities.Track", "Track")
                        .WithMany("Applications")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Applications")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("Category");

                    b.Navigation("Reviewer");

                    b.Navigation("Track");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.BlockReview", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("BlockReviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.MarkBlock", "MarkBlock")
                        .WithMany("BlockReviews")
                        .HasForeignKey("MarkBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MarkBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.CellVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("CellVals")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("CellVals")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Row", "Row")
                        .WithMany("CellVals")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Columns")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlockStatus", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("EditBlockStatusList")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Fields")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.ValuesType", "ValueType")
                        .WithMany("Fields")
                        .HasForeignKey("ValueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");

                    b.Navigation("ValueType");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.FieldVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("FieldVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("FieldVals")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("Marks")
                        .HasForeignKey("FieldId");

                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Marks")
                        .HasForeignKey("TableId");

                    b.Navigation("Field");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkVal", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "Application")
                        .WithMany("MarkVals")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.Mark", "Mark")
                        .WithMany("MarkVals")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.SelectValue", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.Column", "Column")
                        .WithMany("SelectValues")
                        .HasForeignKey("ColumnId");

                    b.HasOne("ServerApp.Data.Entities.Field", "Field")
                        .WithMany("SelectValues")
                        .HasForeignKey("FieldId");

                    b.Navigation("Column");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.EditBlock", "EditBlock")
                        .WithMany("Tables")
                        .HasForeignKey("EditBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditBlock");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Vote", b =>
                {
                    b.HasOne("ServerApp.Data.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("Votes")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServerApp.Data.Entities.UserInfo", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationForm");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationForm", b =>
                {
                    b.Navigation("BlockReviews");

                    b.Navigation("CellVals");

                    b.Navigation("EditBlockStatusList");

                    b.Navigation("FieldVals");

                    b.Navigation("MarkVals");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Category", b =>
                {
                    b.Navigation("ApplicationForms");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Column", b =>
                {
                    b.Navigation("CellVals");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.EditBlock", b =>
                {
                    b.Navigation("EditBlockStatusList");

                    b.Navigation("Fields");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Field", b =>
                {
                    b.Navigation("FieldVals");

                    b.Navigation("Marks");

                    b.Navigation("SelectValues");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Mark", b =>
                {
                    b.Navigation("MarkVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.MarkBlock", b =>
                {
                    b.Navigation("BlockReviews");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Row", b =>
                {
                    b.Navigation("CellVals");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Marks");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.Track", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.UserInfo", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ReviewedApplications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ServerApp.Data.Entities.ValuesType", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Fields");
                });
#pragma warning restore 612, 618
        }
    }
}
